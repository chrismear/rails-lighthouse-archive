<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-08T06:06:53+01:00</created-at>
  <creator-id type="integer">25578</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">571</number>
  <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
  <priority type="integer">65</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>actionpack bug patch session session-fixation</tag>
  <title>Accepting session_id generated on the outside, when using MemCacheStore as SessionStorage</title>
  <updated-at type="datetime">2009-09-18T22:31:06+01:00</updated-at>
  <user-id type="integer">23550</user-id>
  <version type="integer">7</version>
  <user-name>Aaron Gibralter</user-name>
  <creator-name>tmtysk</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>In CGI::Session::MemCache,

When using MemCacheStore as SessionStorage, if we created invalid session_id on the outside and requested to rails-application including it, then, server accepts it and response Set-Cookie header including that session_id.

For example:

 $ curl -I http://localhost:3000/?_sess=foobar
 HTTP/1.1 200 Ok
 Connection: close
 Date: Tue, 08 Jul 2008 04:59:36 GMT
 Set-Cookie: _sess=foobar; path=/

This behavior might be misused by session fixation attacks.</original-body>
  <latest-body>In CGI::Session::MemCache,

When using MemCacheStore as SessionStorage, if we created invalid session_id on the outside and requested to rails-application including it, then, server accepts it and response Set-Cookie header including that session_id.

For example:

 $ curl -I http://localhost:3000/?_sess=foobar
 HTTP/1.1 200 Ok
 Connection: close
 Date: Tue, 08 Jul 2008 04:59:36 GMT
 Set-Cookie: _sess=foobar; path=/

This behavior might be misused by session fixation attacks.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
In CGI::Session::MemCache,
&lt;/p&gt;&lt;p&gt;
When using MemCacheStore as SessionStorage, if we created invalid session_id on the outside and requested to rails-application including it, then, server accepts it and response Set-Cookie header including that session_id.
&lt;/p&gt;&lt;p&gt;
For example:
&lt;/p&gt;&lt;p&gt;
$ curl -I &lt;a href=&quot;http://localhost:3000/?_sess=foobar&quot;&gt;http://localhost:3000/?_sess=foobar&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
HTTP/1.1 200 Ok
&lt;/p&gt;&lt;p&gt;
Connection: close
&lt;/p&gt;&lt;p&gt;
Date: Tue, 08 Jul 2008 04:59:36 GMT
&lt;/p&gt;&lt;p&gt;
Set-Cookie: _sess=foobar; path=/
&lt;/p&gt;&lt;p&gt;
This behavior might be misused by session fixation attacks.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>In CGI::Session::MemCache,

When using MemCacheStore as SessionStorage, if we created invalid session_id on the outside and requested to rails-application including it, then, server accepts it and response Set-Cookie header including that session_id.

For example:

 $ curl -I http://localhost:3000/?_sess=foobar
 HTTP/1.1 200 Ok
 Connection: close
 Date: Tue, 08 Jul 2008 04:59:36 GMT
 Set-Cookie: _sess=foobar; path=/
 :(omit the rest) 


This behavior might be misused by session fixation attacks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
In CGI::Session::MemCache,
&lt;/p&gt;&lt;p&gt;
When using MemCacheStore as SessionStorage, if we created invalid session_id on the outside and requested to rails-application including it, then, server accepts it and response Set-Cookie header including that session_id.
&lt;/p&gt;&lt;p&gt;
For example:
&lt;/p&gt;&lt;p&gt;
$ curl -I &lt;a href=&quot;http://localhost:3000/?_sess=foobar&quot;&gt;http://localhost:3000/?_sess=foobar&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
HTTP/1.1 200 Ok
&lt;/p&gt;&lt;p&gt;
Connection: close
&lt;/p&gt;&lt;p&gt;
Date: Tue, 08 Jul 2008 04:59:36 GMT
&lt;/p&gt;&lt;p&gt;
Set-Cookie: _sess=foobar; path=/
&lt;/p&gt;&lt;p&gt;
:(omit the rest)
&lt;/p&gt;&lt;p&gt;
This behavior might be misused by session fixation attacks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-08T06:14:02+01:00</created-at>
      <creator-id type="integer">25578</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">571</number>
      <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack patch session session-fixation</tag>
      <title>Accepting session_id generated on the outside using MemCacheStore</title>
      <updated-at type="datetime">2008-07-08T06:14:02+01:00</updated-at>
      <user-id type="integer">25578</user-id>
      <version type="integer">1</version>
      <user-name>tmtysk</user-name>
      <creator-name>tmtysk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-08T06:07:35+01:00</created-at>
      <creator-id type="integer">25578</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Accepting session_id generated on the outside using MemCacheStore
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">571</number>
      <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack patch session session-fixation</tag>
      <title>Accepting session_id generated on the outside, when using MemCacheStore as SessionStorage</title>
      <updated-at type="datetime">2008-10-23T16:23:08+01:00</updated-at>
      <user-id type="integer">25578</user-id>
      <version type="integer">2</version>
      <user-name>tmtysk</user-name>
      <creator-name>tmtysk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>In CGI::Session::MemCache,

When using MemCacheStore as SessionStorage, if we created invalid session_id on the outside and requested to rails-application including it, then, server accepts it and response Set-Cookie header including that session_id.

For example:
&gt; $ curl -I http://localhost:3000/?_sess=foobar
&gt; HTTP/1.1 200 Ok
&gt; Connection: close
&gt; Date: Tue, 08 Jul 2008 04:59:36 GMT
&gt; Set-Cookie: _sess=foobar; path=/
&gt; :(omit the rest)

This behavior might be misused by session fixation attacks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
In CGI::Session::MemCache,
&lt;/p&gt;&lt;p&gt;
When using MemCacheStore as SessionStorage, if we created invalid session_id on the outside and requested to rails-application including it, then, server accepts it and response Set-Cookie header including that session_id.
&lt;/p&gt;&lt;p&gt;
For example:
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
$ curl -I &lt;a href=&quot;http://localhost:3000/?_sess=foobar&quot;&gt;http://localhost:3000/?_sess=foobar&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
HTTP/1.1 200 Ok
&lt;/p&gt;&lt;p&gt;
Connection: close
&lt;/p&gt;&lt;p&gt;
Date: Tue, 08 Jul 2008 04:59:36 GMT
&lt;/p&gt;&lt;p&gt;
Set-Cookie: _sess=foobar; path=/
&lt;/p&gt;&lt;p&gt;
:(omit the rest)
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;
This behavior might be misused by session fixation attacks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-08T06:10:11+01:00</created-at>
      <creator-id type="integer">25578</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">571</number>
      <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack patch session session-fixation</tag>
      <title>Accepting session_id generated on the outside, when using MemCacheStore as SessionStorage</title>
      <updated-at type="datetime">2008-07-08T06:10:11+01:00</updated-at>
      <user-id type="integer">25578</user-id>
      <version type="integer">3</version>
      <user-name>tmtysk</user-name>
      <creator-name>tmtysk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The bigger concern would be how someone is injecting fake session data into your memcache server.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The bigger concern would be how someone is injecting fake
session data into your memcache server.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-15T21:48:29+00:00</created-at>
      <creator-id type="integer">25578</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">571</number>
      <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>actionpack patch session session-fixation</tag>
      <title>Accepting session_id generated on the outside, when using MemCacheStore as SessionStorage</title>
      <updated-at type="datetime">2008-12-15T21:48:31+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">4</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>tmtysk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I managed to do this trivially by changing my session ID in my cookie.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I managed to do this trivially by changing my session ID in my
cookie.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-08T19:37:07+01:00</created-at>
      <creator-id type="integer">25578</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">571</number>
      <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>actionpack patch session session-fixation</tag>
      <title>Accepting session_id generated on the outside, when using MemCacheStore as SessionStorage</title>
      <updated-at type="datetime">2009-06-08T19:37:11+01:00</updated-at>
      <user-id type="integer">22233</user-id>
      <version type="integer">5</version>
      <user-name>Kevin Menard</user-name>
      <creator-name>tmtysk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Not sure what the comment is saying.  The problem isn't the session data being stored, it's that bad cookies can overwriting existing sessions.  This just blew up for us with user auth where an issue with session ID generation caused multiple users to have cookies with the same session ID.  Deleting the entry out of memcache was not a sufficient fix, because on the next request a session would be dutifully created based on the ID stored in the (now defunct) cookie.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure what the comment is saying. The problem isn't the
session data being stored, it's that bad cookies can overwriting
existing sessions. This just blew up for us with user auth where an
issue with session ID generation caused multiple users to have
cookies with the same session ID. Deleting the entry out of
memcache was not a sufficient fix, because on the next request a
session would be dutifully created based on the ID stored in the
(now defunct) cookie.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-06-08T19:40:34+01:00</created-at>
      <creator-id type="integer">25578</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">571</number>
      <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>actionpack patch session session-fixation</tag>
      <title>Accepting session_id generated on the outside, when using MemCacheStore as SessionStorage</title>
      <updated-at type="datetime">2009-06-08T19:40:37+01:00</updated-at>
      <user-id type="integer">22233</user-id>
      <version type="integer">6</version>
      <user-name>Kevin Menard</user-name>
      <creator-name>tmtysk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Has anyone thought about this lately? I opened 3134</body>
      <body-html>&lt;div&gt;&lt;p&gt;Has anyone thought about this lately? I opened 3134&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-09-18T22:31:02+01:00</created-at>
      <creator-id type="integer">25578</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: actionpack patch session session-fixation
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">571</number>
      <permalink>accepting-session_id-generated-on-the-outside-using-memcachestore</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>actionpack bug patch session session-fixation</tag>
      <title>Accepting session_id generated on the outside, when using MemCacheStore as SessionStorage</title>
      <updated-at type="datetime">2009-09-18T22:31:06+01:00</updated-at>
      <user-id type="integer">23550</user-id>
      <version type="integer">7</version>
      <user-name>Aaron Gibralter</user-name>
      <creator-name>tmtysk</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/571</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4a0dc993b1ade080e7c5df7e44158c8fd00ab1d4</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-08T06:06:53+01:00</created-at>
      <filename>0002-Added-checking-whether-initialized-session-to-protec.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">31327</id>
      <size type="integer">1109</size>
      <uploader-id type="integer">25578</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/31327/0002-Added-checking-whether-initialized-session-to-protec.patch</url>
    </attachment>
  </attachments>
</ticket>
