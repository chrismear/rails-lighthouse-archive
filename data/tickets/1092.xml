<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-22T17:22:52+01:00</created-at>
  <creator-id type="integer">15183</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1092</number>
  <permalink>setting-arbitrary-default-value-on-route-foils-named-route-generation</permalink>
  <priority type="integer">512</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>bug routing</tag>
  <title>setting &quot;arbitrary&quot; default value on route foils named route generation</title>
  <updated-at type="datetime">2008-12-23T17:27:38+00:00</updated-at>
  <user-id type="integer">29861</user-id>
  <version type="integer">3</version>
  <user-name>Bill Burcham</user-name>
  <creator-name>Bill Burcham</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1092</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Setting an &quot;arbitrary&quot; (i.e. not represented in the path) default value on a route (:name =&gt; value e.g. :layout =&gt; 'home') is described on pp 397-398 of the &quot;Defining Routes with map.connect&quot; section of chapter 20.2 &quot;Routing Requests&quot; of &quot;Agile Web Development with Rails&quot; second edition.

An &quot;arbitrary&quot; default value is one whose name does not appear as a tag in the path specification pattern. Here is an example (from routes.rb):

  map.home_index '', :controller =&gt; 'home',
    :extra_stuff =&gt; 'the_stuff'

This is useful for e.g. dynamically setting the layout based on the route:

  map.home_index '', :controller =&gt; 'home',
    :layout =&gt; 'home_layout'

And then using the value set in the route, to set the layout on a controller like so:

  layout proc{ |controller| controller.params[:layout]}

In Rails 2.1.0 this sort of route _recognition_ works great. But when a route has &quot;arbitrary&quot; default values, route _generation_ does not work (for that route). In order to get route generation to work for such a route, all the &quot;arbitrary&quot; default values must be specified to the generator. The problem is that these default values are not known and should not be known at the point of the generating call.

Here is a project that illustrates the issue:

http://github.com/Bill/arbitrary-default-values-foil-named-route-gen/tree/master

Run:

rake test

And you'll see the failure. Important files are:

/config/routes.rb
/test/functional/home_test.rb

The first test demonstrates the workaround (of explicitly specifying the &quot;arbitrary&quot; default values to the generate call) and the second test demonstrated the failure.</original-body>
  <latest-body>Setting an &quot;arbitrary&quot; (i.e. not represented in the path) default value on a route (:name =&gt; value e.g. :layout =&gt; 'home') is described on pp 397-398 of the &quot;Defining Routes with map.connect&quot; section of chapter 20.2 &quot;Routing Requests&quot; of &quot;Agile Web Development with Rails&quot; second edition.

An &quot;arbitrary&quot; default value is one whose name does not appear as a tag in the path specification pattern. Here is an example (from routes.rb):

  map.home_index '', :controller =&gt; 'home',
    :extra_stuff =&gt; 'the_stuff'

This is useful for e.g. dynamically setting the layout based on the route:

  map.home_index '', :controller =&gt; 'home',
    :layout =&gt; 'home_layout'

And then using the value set in the route, to set the layout on a controller like so:

  layout proc{ |controller| controller.params[:layout]}

In Rails 2.1.0 this sort of route _recognition_ works great. But when a route has &quot;arbitrary&quot; default values, route _generation_ does not work (for that route). In order to get route generation to work for such a route, all the &quot;arbitrary&quot; default values must be specified to the generator. The problem is that these default values are not known and should not be known at the point of the generating call.

Here is a project that illustrates the issue:

http://github.com/Bill/arbitrary-default-values-foil-named-route-gen/tree/master

Run:

rake test

And you'll see the failure. Important files are:

/config/routes.rb
/test/functional/home_test.rb

The first test demonstrates the workaround (of explicitly specifying the &quot;arbitrary&quot; default values to the generate call) and the second test demonstrated the failure.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Setting an &quot;arbitrary&quot; (i.e. not represented in the path)
default value on a route (:name =&amp;gt; value e.g. :layout =&amp;gt;
'home') is described on pp 397-398 of the &quot;Defining Routes with
map.connect&quot; section of chapter 20.2 &quot;Routing Requests&quot; of &quot;Agile
Web Development with Rails&quot; second edition.&lt;/p&gt;
&lt;p&gt;An &quot;arbitrary&quot; default value is one whose name does not appear
as a tag in the path specification pattern. Here is an example
(from routes.rb):&lt;/p&gt;
&lt;p&gt;map.home_index '', :controller =&amp;gt; 'home',&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:extra_stuff =&amp;gt; 'the_stuff'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is useful for e.g. dynamically setting the layout based on
the route:&lt;/p&gt;
&lt;p&gt;map.home_index '', :controller =&amp;gt; 'home',&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;:layout =&amp;gt; 'home_layout'
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And then using the value set in the route, to set the layout on
a controller like so:&lt;/p&gt;
&lt;p&gt;layout proc{ |controller| controller.params[:layout]}&lt;/p&gt;
&lt;p&gt;In Rails 2.1.0 this sort of route &lt;em&gt;recognition&lt;/em&gt; works
great. But when a route has &quot;arbitrary&quot; default values, route
&lt;em&gt;generation&lt;/em&gt; does not work (for that route). In order to get
route generation to work for such a route, all the &quot;arbitrary&quot;
default values must be specified to the generator. The problem is
that these default values are not known and should not be known at
the point of the generating call.&lt;/p&gt;
&lt;p&gt;Here is a project that illustrates the issue:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/Bill/arbitrary-default-values-foil-named-route-gen/tree/master&quot;&gt;
http://github.com/Bill/arbitrary...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run:&lt;/p&gt;
&lt;p&gt;rake test&lt;/p&gt;
&lt;p&gt;And you'll see the failure. Important files are:&lt;/p&gt;
&lt;p&gt;/config/routes.rb /test/functional/home_test.rb&lt;/p&gt;
&lt;p&gt;The first test demonstrates the workaround (of explicitly
specifying the &quot;arbitrary&quot; default values to the generate call) and
the second test demonstrated the failure.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Setting an &quot;arbitrary&quot; (i.e. not represented in the path) default value on a route (`:name =&gt; value` e.g. `:layout =&gt; 'home'`) is described on pp 397-398 of the &quot;Defining Routes with map.connect&quot; section of chapter 20.2 &quot;Routing Requests&quot; of &quot;Agile Web Development with Rails&quot; second edition.

An &quot;arbitrary&quot; default value is one whose name does not appear as a tag in the path specification pattern. Here is an example (from routes.rb):

@@@ ruby
  map.home_index '', :controller =&gt; 'home',
    :extra_stuff =&gt; 'the_stuff'
@@@

This is useful for e.g. dynamically setting the layout based on the route:

@@@ ruby
  map.home_index '', :controller =&gt; 'home',
    :layout =&gt; 'home_layout'
@@@

And then using the value set in the route, to set the layout on a controller like so:

@@@ ruby
  layout proc{ |controller| controller.params[:layout]}
@@@

In Rails 2.1.0 this sort of route _recognition_ works great. But when a route has &quot;arbitrary&quot; default values, route _generation_ does not work (for that route). In order to get route generation to work for such a route, all the &quot;arbitrary&quot; default values must be specified to the generator. The problem is that these default values are not known and should not be known at the point of the generating call.

Here is a project that illustrates the issue:

http://github.com/Bill/arbitrary-default-values-foil-named-route-gen/tree/master

Run:

@@@ sh
rake test
@@@

And you'll see the failure. Important files are:

/config/routes.rb
/test/functional/home_test.rb

The first test demonstrates the workaround (of explicitly specifying the &quot;arbitrary&quot; default values to the generate call) and the second test demonstrated the failure.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Setting an &quot;arbitrary&quot; (i.e. not represented in the path)
default value on a route (&lt;code&gt;:name =&amp;gt; value&lt;/code&gt; e.g.
&lt;code&gt;:layout =&amp;gt; 'home'&lt;/code&gt;) is described on pp 397-398 of
the &quot;Defining Routes with map.connect&quot; section of chapter 20.2
&quot;Routing Requests&quot; of &quot;Agile Web Development with Rails&quot; second
edition.&lt;/p&gt;
&lt;p&gt;An &quot;arbitrary&quot; default value is one whose name does not appear
as a tag in the path specification pattern. Here is an example
(from routes.rb):&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  map.home_index '', :controller =&amp;gt; 'home',
    :extra_stuff =&amp;gt; 'the_stuff'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is useful for e.g. dynamically setting the layout based on
the route:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  map.home_index '', :controller =&amp;gt; 'home',
    :layout =&amp;gt; 'home_layout'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then using the value set in the route, to set the layout on
a controller like so:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  layout proc{ |controller| controller.params[:layout]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Rails 2.1.0 this sort of route &lt;em&gt;recognition&lt;/em&gt; works
great. But when a route has &quot;arbitrary&quot; default values, route
&lt;em&gt;generation&lt;/em&gt; does not work (for that route). In order to get
route generation to work for such a route, all the &quot;arbitrary&quot;
default values must be specified to the generator. The problem is
that these default values are not known and should not be known at
the point of the generating call.&lt;/p&gt;
&lt;p&gt;Here is a project that illustrates the issue:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/Bill/arbitrary-default-values-foil-named-route-gen/tree/master&quot;&gt;
http://github.com/Bill/arbitrary...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Run:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;
rake test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you'll see the failure. Important files are:&lt;/p&gt;
&lt;p&gt;/config/routes.rb /test/functional/home_test.rb&lt;/p&gt;
&lt;p&gt;The first test demonstrates the workaround (of explicitly
specifying the &quot;arbitrary&quot; default values to the generate call) and
the second test demonstrated the failure.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-22T17:22:53+01:00</created-at>
      <creator-id type="integer">15183</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1092</number>
      <permalink>setting-arbitrary-default-value-on-route-foils-named-route-generation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug routing</tag>
      <title>setting &quot;arbitrary&quot; default value on route foils named route generation</title>
      <updated-at type="datetime">2008-09-22T17:26:53+01:00</updated-at>
      <user-id type="integer">15183</user-id>
      <version type="integer">1</version>
      <user-name>Bill Burcham</user-name>
      <creator-name>Bill Burcham</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1092</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You should be using :defaults

http://guides.rubyonrails.org/routing_outside_in.html#_defining_defaults might be helpful.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You should be using :defaults&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/routing_outside_in.html#_defining_defaults&quot;&gt;
http://guides.rubyonrails.org/ro...&lt;/a&gt; might be helpful.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-23T12:52:14+00:00</created-at>
      <creator-id type="integer">15183</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1092</number>
      <permalink>setting-arbitrary-default-value-on-route-foils-named-route-generation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>bug routing</tag>
      <title>setting &quot;arbitrary&quot; default value on route foils named route generation</title>
      <updated-at type="datetime">2008-12-23T12:52:18+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Bill Burcham</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1092</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thank you for looking into this Pratik, however, you misunderstood the issue. Using :defaults doesn't help because the variable whose value I wish to set is not in the path (pattern).

In my example the variable was named :extra_stuff. If I change my route to this as you suggest:

@@@ ruby
  map.home_index '', :controller =&gt; 'home',
    :defaults =&gt; {:extra_stuff =&gt; 'the_stuff'}
@@@

And re-run my test:

@@@ ruby
  def test_index_no_explicit_extra_stuff
    # but URL generation fails if we leave it off
    assert_generates( '/', :controller =&gt; 'home', :action =&gt; 'index')
  end
@@@

I see this error now:

@@@ sh
/builder.rb:117:in `assign_route_options': extra_stuff: No matching segment exists; cannot assign default (ArgumentError)
@@@

See &quot;no matching segment exists&quot;. The whole point is that I wish to set a variable when a match happens. That variable is not part of the original path. The &quot;Agile&quot; book says this is possible (see reference above) and I've found it useful for e.g. setting the layout and for setting other static values that vary based on which routing rule fires.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thank you for looking into this Pratik, however, you
misunderstood the issue. Using :defaults doesn't help because the
variable whose value I wish to set is not in the path
(pattern).&lt;/p&gt;
&lt;p&gt;In my example the variable was named :extra_stuff. If I change
my route to this as you suggest:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  map.home_index '', :controller =&amp;gt; 'home',
    :defaults =&amp;gt; {:extra_stuff =&amp;gt; 'the_stuff'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And re-run my test:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_index_no_explicit_extra_stuff
    # but URL generation fails if we leave it off
    assert_generates( '/', :controller =&amp;gt; 'home', :action =&amp;gt; 'index')
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I see this error now:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;
/builder.rb:117:in `assign_route_options': extra_stuff: No matching segment exists; cannot assign default (ArgumentError)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &quot;no matching segment exists&quot;. The whole point is that I wish
to set a variable when a match happens. That variable is not part
of the original path. The &quot;Agile&quot; book says this is possible (see
reference above) and I've found it useful for e.g. setting the
layout and for setting other static values that vary based on which
routing rule fires.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-23T17:27:34+00:00</created-at>
      <creator-id type="integer">15183</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1092</number>
      <permalink>setting-arbitrary-default-value-on-route-foils-named-route-generation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>bug routing</tag>
      <title>setting &quot;arbitrary&quot; default value on route foils named route generation</title>
      <updated-at type="datetime">2008-12-23T17:27:38+00:00</updated-at>
      <user-id type="integer">29861</user-id>
      <version type="integer">3</version>
      <user-name>Bill Burcham</user-name>
      <creator-name>Bill Burcham</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1092</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
