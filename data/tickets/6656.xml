<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-30T23:38:31+01:00</created-at>
  <creator-id type="integer">9181</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6656</number>
  <permalink>batch-processing-find_each-and-find_in_batches-causes-object-references-to-break</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>batches find_each find_in_batches</tag>
  <title>Batch processing #find_each and #find_in_batches causes object references to break</title>
  <updated-at type="datetime">2011-03-30T23:38:36+01:00</updated-at>
  <user-id type="integer">9181</user-id>
  <version type="integer">1</version>
  <user-name>Ben Fyvie</user-name>
  <creator-name>Ben Fyvie</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6656</url>
  <priority-name nil="true"></priority-name>
  <original-body>While trying to implement batch processing to alleviate memory bloat from a monolithic copy routine I discovered that I am unable to reference an ActiveRecord object via a belongs_to relationship even though the object id is set. Here is a basic example of what I'm talking about (within the context of batch processing):

@@@
my_comment = my_post.comments.create(:body =&gt; 'hello world')

my_comment.post_id 
=&gt; 1

my_comment.post
=&gt; nil

my_comment.reload
my_comment.post
=&gt; nil
@@@

I've attached a patch that adds a test for the issue, but I can't for the life of me figure out why it is happening. If the batch processing is removed (call #each instead of #find_each) then the problem goes away.</original-body>
  <latest-body>While trying to implement batch processing to alleviate memory bloat from a monolithic copy routine I discovered that I am unable to reference an ActiveRecord object via a belongs_to relationship even though the object id is set. Here is a basic example of what I'm talking about (within the context of batch processing):

@@@
my_comment = my_post.comments.create(:body =&gt; 'hello world')

my_comment.post_id 
=&gt; 1

my_comment.post
=&gt; nil

my_comment.reload
my_comment.post
=&gt; nil
@@@

I've attached a patch that adds a test for the issue, but I can't for the life of me figure out why it is happening. If the batch processing is removed (call #each instead of #find_each) then the problem goes away.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;While trying to implement batch processing to alleviate memory
bloat from a monolithic copy routine I discovered that I am unable
to reference an ActiveRecord object via a belongs_to relationship
even though the object id is set. Here is a basic example of what
I'm talking about (within the context of batch processing):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my_comment = my_post.comments.create(:body =&amp;gt; 'hello world')

my_comment.post_id 
=&amp;gt; 1

my_comment.post
=&amp;gt; nil

my_comment.reload
my_comment.post
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've attached a patch that adds a test for the issue, but I
can't for the life of me figure out why it is happening. If the
batch processing is removed (call #each instead of #find_each) then
the problem goes away.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While trying to implement batch processing to alleviate memory bloat from a monolithic copy routine I discovered that I am unable to reference an ActiveRecord object via a belongs_to relationship even though the object id is set. Here is a basic example of what I'm talking about (within the context of batch processing):

@@@
my_comment = my_post.comments.create(:body =&gt; 'hello world')

my_comment.post_id 
=&gt; 1

my_comment.post
=&gt; nil

my_comment.reload
my_comment.post
=&gt; nil
@@@

I've attached a patch that adds a test for the issue, but I can't for the life of me figure out why it is happening. If the batch processing is removed (call #each instead of #find_each) then the problem goes away.</body>
      <body-html>&lt;div&gt;&lt;p&gt;While trying to implement batch processing to alleviate memory
bloat from a monolithic copy routine I discovered that I am unable
to reference an ActiveRecord object via a belongs_to relationship
even though the object id is set. Here is a basic example of what
I'm talking about (within the context of batch processing):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;my_comment = my_post.comments.create(:body =&amp;gt; 'hello world')

my_comment.post_id 
=&amp;gt; 1

my_comment.post
=&amp;gt; nil

my_comment.reload
my_comment.post
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've attached a patch that adds a test for the issue, but I
can't for the life of me figure out why it is happening. If the
batch processing is removed (call #each instead of #find_each) then
the problem goes away.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-30T23:38:31+01:00</created-at>
      <creator-id type="integer">9181</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6656</number>
      <permalink>batch-processing-find_each-and-find_in_batches-causes-object-references-to-break</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>batches find_each find_in_batches</tag>
      <title>Batch processing #find_each and #find_in_batches causes object references to break</title>
      <updated-at type="datetime">2011-03-30T23:38:36+01:00</updated-at>
      <user-id type="integer">9181</user-id>
      <version type="integer">1</version>
      <user-name>Ben Fyvie</user-name>
      <creator-name>Ben Fyvie</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6656</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f06a99f4030b5d0f98611798e882f8f173e4dd65</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-30T23:38:31+01:00</created-at>
      <filename>0001-adding-test-for-an-issue-w.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">986727</id>
      <size type="integer">2629</size>
      <uploader-id type="integer">9181</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/986727/0001-adding-test-for-an-issue-w.patch</url>
    </attachment>
  </attachments>
</ticket>
