<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">4</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-04-28T16:59:04+01:00</created-at>
  <creator-id type="integer">18344</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">59</number>
  <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
  <priority type="integer">640</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>patch plugins railties rake</tag>
  <title>When loading a plugin via rubygems, rake tasks aren't included</title>
  <updated-at type="datetime">2010-09-23T07:50:37+01:00</updated-at>
  <user-id type="integer">65050</user-id>
  <version type="integer">42</version>
  <user-name>David Trasbo</user-name>
  <creator-name>James Healy</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>As a test, I converted one of my plugins to a gem and gave it a rails/init.rb file.

The plugin itself loads fine (very sweet feature BTW), however the extra tasks it provides aren't available when I run rake from RAILS_ROOT.

My guess is it has something to do with this file: railties/lib/tasks/rails.rb. There's no provision in there for loading tasks provided by gem plugins.</original-body>
  <latest-body>As a test, I converted one of my plugins to a gem and gave it a rails/init.rb file.

The plugin itself loads fine (very sweet feature BTW), however the extra tasks it provides aren't available when I run rake from RAILS_ROOT.

My guess is it has something to do with this file: railties/lib/tasks/rails.rb. There's no provision in there for loading tasks provided by gem plugins.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
As a test, I converted one of my plugins to a gem and gave it a rails/init.rb file.
&lt;/p&gt;&lt;p&gt;
The plugin itself loads fine (very sweet feature BTW), however the extra tasks it provides aren't available when I run rake from RAILS_ROOT.
&lt;/p&gt;&lt;p&gt;
My guess is it has something to do with this file: railties/lib/tasks/rails.rb. There's no provision in there for loading tasks provided by gem plugins.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As a test, I converted one of my plugins to a gem and gave it a rails/init.rb file.

The plugin itself loads fine (very sweet feature BTW), however the extra tasks it provides aren't available when I run rake from RAILS_ROOT.

My guess is it has something to do with this file: railties/lib/tasks/rails.rb. There's no provision in there for loading tasks provided by gem plugins.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
As a test, I converted one of my plugins to a gem and gave it a rails/init.rb file.
&lt;/p&gt;&lt;p&gt;
The plugin itself loads fine (very sweet feature BTW), however the extra tasks it provides aren't available when I run rake from RAILS_ROOT.
&lt;/p&gt;&lt;p&gt;
My guess is it has something to do with this file: railties/lib/tasks/rails.rb. There's no provision in there for loading tasks provided by gem plugins.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-28T16:59:04+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-04-28T16:59:04+01:00</updated-at>
      <user-id type="integer">18344</user-id>
      <version type="integer">1</version>
      <user-name>James Healy</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In fact there's no provision for it doing anything but plugins in vendor/rails (eg if you have plugins in a non standard directory)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
In fact there's no provision for it doing anything but plugins in vendor/rails (eg if you have plugins in a non standard directory)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-28T17:05:00+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-04-28T17:05:00+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here's the hackish patch to my project Rakefile that I've used to work around this bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Here's the hackish patch to my project Rakefile that I've used to work around this bug.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-06T09:30:02+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-05-06T09:30:02+01:00</updated-at>
      <user-id type="integer">18344</user-id>
      <version type="integer">3</version>
      <user-name>James Healy</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here's a patch for the issue - it includes tasks from frozen gems in exactly the same way they're included from plugins (e.g., /vendor/gems/*/**/tasks/**/*.rake)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Here's a patch for the issue - it includes tasks from frozen gems in exactly the same way they're included from plugins (e.g., /vendor/gems/*/**/tasks/**/*.rake)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-29T19:33:25+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-05-29T19:33:25+01:00</updated-at>
      <user-id type="integer">9064</user-id>
      <version type="integer">4</version>
      <user-name>Ben Scofield</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Consider this a +1, but should there be a test for it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Consider this a +1, but should there be a test for it?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-17T09:43:46+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-06-17T09:43:46+01:00</updated-at>
      <user-id type="integer">867</user-id>
      <version type="integer">5</version>
      <user-name>Jacek Becela</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1, but I think there's potential issues with gems currently being used that store gem specific tasks that wouldn't be need in the rails project scope in the tasks directory (e.g. rdoc tasks, rcov tasks, rubyforge, etc.)
another possible glob to consider is to namespace it in the rails directory:
&quot;#{RAILS_ROOT}/vendor/gems/*/rails/tasks/**/*.rake&quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1, but I think there's potential issues with gems currently being used that store gem specific tasks that wouldn't be need in the rails project scope in the tasks directory (e.g. rdoc tasks, rcov tasks, rubyforge, etc.)
&lt;/p&gt;&lt;p&gt;
another possible glob to consider is to namespace it in the rails directory:
&lt;/p&gt;&lt;p&gt;
&quot;#{RAILS_ROOT}/vendor/gems/*/rails/tasks/**/*.rake&quot;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-17T16:01:23+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-06-17T16:01:23+01:00</updated-at>
      <user-id type="integer">23667</user-id>
      <version type="integer">6</version>
      <user-name>Brian Landau</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I agree with Brian, namespacing should occur, but then we should ensure that it also happens in classic plugins (to ensure consistency)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I agree with Brian, namespacing should occur, but then we should ensure that it also happens in classic plugins (to ensure consistency)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-17T21:32:09+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-06-17T21:32:09+01:00</updated-at>
      <user-id type="integer">867</user-id>
      <version type="integer">7</version>
      <user-name>Jacek Becela</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Putting tasks under rails/tasks feels consistent with init.rb being at rails/init.rb.

Attaching a patch which goes along this line.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Putting tasks under rails/tasks feels consistent with init.rb being at rails/init.rb.
&lt;/p&gt;&lt;p&gt;
Attaching a patch which goes along this line.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-30T19:12:53+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-06-30T19:12:53+01:00</updated-at>
      <user-id type="integer">10504</user-id>
      <version type="integer">8</version>
      <user-name>Josh Nichols</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I'm not entirely in favor of this. IMO frozen gems should behave like external gems. Instead I think the convention should be to add a &quot;require&quot; statement to the Rakefile to include the gem's tasks.

For example, let's say we are moving the rspec-rails plugin to a gem. This plugin has many rake tasks. Someone may want to freeze the gem, but others might not - either way these tasks should be included in the same manner.

To do so, one could add a require statement to their rails project Rakefile.

@@@
# in Rakefile
require 'spec/tasks/rails' # or something similar
@@@

The included file would behave just like the rails internal tasks/rails.rb file - it simply loads all of the tasks for that gem.

I haven't tried this yet so I don't know how well it works, has anyone done so? Any opinions?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'm not entirely in favor of this. IMO frozen gems should behave like external gems. Instead I think the convention should be to add a &quot;require&quot; statement to the Rakefile to include the gem's tasks.
&lt;/p&gt;&lt;p&gt;
For example, let's say we are moving the rspec-rails plugin to a gem. This plugin has many rake tasks. Someone may want to freeze the gem, but others might not - either way these tasks should be included in the same manner.
&lt;/p&gt;&lt;p&gt;
To do so, one could add a require statement to their rails project Rakefile.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;# in Rakefile
require 'spec/tasks/rails' # or something similar&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The included file would behave just like the rails internal tasks/rails.rb file - it simply loads all of the tasks for that gem.
&lt;/p&gt;&lt;p&gt;
I haven't tried this yet so I don't know how well it works, has anyone done so? Any opinions?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-01T16:31:55+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-01T16:31:55+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">9</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I did try something similar to what Ryan suggested, by having one file that could be required in a Rakefile. It works fine, and doesn't require any patching.

I think there's two ways to look at this:

 * Using gems as a replacement for plugins: to start using a plugin-turned-gem, you have an extra step to get up on running, if it has Rake tasks.

 * Using gems as gems: if you've wanted to use Rake stuff from gems, you've always had to require it at some point.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I did try something similar to what Ryan suggested, by having one file that could be required in a Rakefile. It works fine, and doesn't require any patching.
&lt;/p&gt;&lt;p&gt;
I think there's two ways to look at this:
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
Using gems as a replacement for plugins: to start using a plugin-turned-gem, you have an extra step to get up on running, if it has Rake tasks.
&lt;/li&gt;&lt;li&gt;
Using gems as gems: if you've wanted to use Rake stuff from gems, you've always had to require it at some point.
&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-01T17:02:01+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-01T17:02:01+01:00</updated-at>
      <user-id type="integer">10504</user-id>
      <version type="integer">10</version>
      <user-name>Josh Nichols</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>&quot;Someone may want to freeze the gem, but others might not - either way these tasks should be included in the same manner.&quot; - I agree with that, there should be literally no difference.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&quot;Someone may want to freeze the gem, but others might not - either way these tasks should be included in the same manner.&quot; - I agree with that, there should be literally no difference.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-01T17:24:33+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-01T17:24:33+01:00</updated-at>
      <user-id type="integer">867</user-id>
      <version type="integer">11</version>
      <user-name>Jacek Becela</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>What if it was done like generator lookup?

That is, installed gems could be searched for rails/tasks/* as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
What if it was done like generator lookup?
&lt;/p&gt;&lt;p&gt;
That is, installed gems could be searched for rails/tasks/* as well.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T18:01:20+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-02T18:01:20+01:00</updated-at>
      <user-id type="integer">20076</user-id>
      <version type="integer">12</version>
      <user-name>George Ogata</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I was wondering if a global lookup would work too. This is similar to how generators work so it must be possible.

However, I think rake tasks are usually more project specific. They also sometimes need to inject or override behavior.

Going back to the rspec-rails example. This includes a lot of rake tasks which I don't want if my project isn't using rspec. Not only that, it overrides the default rake task. The &quot;rake&quot; command without specifying a task usually runs all tests, but with rspec installed it overrides this and runs the specs, not tests.

I don't see an easy way of solving that if you're always including rake tasks from all installed gems.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I was wondering if a global lookup would work too. This is similar to how generators work so it must be possible.
&lt;/p&gt;&lt;p&gt;
However, I think rake tasks are usually more project specific. They also sometimes need to inject or override behavior.
&lt;/p&gt;&lt;p&gt;
Going back to the rspec-rails example. This includes a lot of rake tasks which I don't want if my project isn't using rspec. Not only that, it overrides the default rake task. The &quot;rake&quot; command without specifying a task usually runs all tests, but with rspec installed it overrides this and runs the specs, not tests.
&lt;/p&gt;&lt;p&gt;
I don't see an easy way of solving that if you're always including rake tasks from all installed gems.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T20:20:44+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-02T20:20:44+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">13</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>What about config.gem - if a gem is specified there (frozen or not) it could load tasks.

In the other case (gem installed on the system but neither mentioned in config.gem nor frozen) tasks whould not be loaded.

And in the edge case: gem not mentioned in config.gem but frozen - tasks would be also loaded.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
What about config.gem - if a gem is specified there (frozen or not) it could load tasks.
&lt;/p&gt;&lt;p&gt;
In the other case (gem installed on the system but neither mentioned in config.gem nor frozen) tasks whould not be loaded.
&lt;/p&gt;&lt;p&gt;
And in the edge case: gem not mentioned in config.gem but frozen - tasks would be also loaded.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T20:58:00+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-02T20:58:00+01:00</updated-at>
      <user-id type="integer">867</user-id>
      <version type="integer">14</version>
      <user-name>Jacek Becela</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>That might work. This would mean rake would have to load the environment to determine the tasks, but it may already do that. Anyone know?

Some gems you don't want to always load (again, rspec as an example) so you don't want it in config.gem. However that's probably an edge case. In that case it can fallback to a require statement in Rakefile.

I'm a little confused how the rails/init.rb file works. Does this get executed for all frozen gems automatically (without needing the config.gem statement)? It makes sense that rake tasks loading follow the same logic as init.rb.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
That might work. This would mean rake would have to load the environment to determine the tasks, but it may already do that. Anyone know?
&lt;/p&gt;&lt;p&gt;
Some gems you don't want to always load (again, rspec as an example) so you don't want it in config.gem. However that's probably an edge case. In that case it can fallback to a require statement in Rakefile.
&lt;/p&gt;&lt;p&gt;
I'm a little confused how the rails/init.rb file works. Does this get executed for all frozen gems automatically (without needing the config.gem statement)? It makes sense that rake tasks loading follow the same logic as init.rb.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T21:36:50+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-02T21:36:50+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">15</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>The problem is it doesn't work yet: #324 and #122.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The problem is it doesn't work yet: &lt;a href=&quot;/projects/8994/tickets/324&quot; title=&quot;Ticket #324&quot;&gt;#324&lt;/a&gt; and &lt;a href=&quot;/projects/8994/tickets/122&quot; title=&quot;Ticket #122&quot;&gt;#122&lt;/a&gt;.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T22:00:49+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-02T22:00:49+01:00</updated-at>
      <user-id type="integer">867</user-id>
      <version type="integer">16</version>
      <user-name>Jacek Becela</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Maybe we should wait for the rails/init.rb problems to be sorted out and then revisit this. To me it makes the most sense that rake tasks are included when init.rb loads, since that's technically when the gem is loaded/included.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Maybe we should wait for the rails/init.rb problems to be sorted out and then revisit this. To me it makes the most sense that rake tasks are included when init.rb loads, since that's technically when the gem is loaded/included.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T22:47:07+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-07-02T22:47:07+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">17</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>The attached patch should achieve the results Ryan is talking about.  It loads rake tasks in the rails/tasks directory inside gems that are loaded via config.gem.

re: &quot;And in the edge case: gem not mentioned in config.gem but frozen - tasks would be also loaded.&quot;  I do not think tasks should be loaded in this case.  Loading a gem via config.gem sets up the load_paths for that gem and should be (is) required for that gem to be available in the rails app.  This patch follows that convention.

re: &quot;Some gems you don't want to always load (again, rspec as an example) so you don't want it in config.gem. However that's probably an edge case. In that case it can fallback to a require statement in Rakefile.&quot;  The only case I can imagine is based on environment and the ability to load gems selectively based on environment already exists via the sub config/environment files.  You can put config.gem statements in these files to get the desired results.  This patch follows that convention:  gems with rake tasks loaded in the test.rb environment file will only be available when running rake in the test environment.

Also note I added a patch to this ticket to solve the rails/init.rb issue: http://rails.lighthouseapp.com/projects/8994/tickets/324-gem-dependencies-inconsistently-load-rails-init-rb-6 so help me out and +1 that jam.  I wanna get this stuff into rails as I believe gems are something like 14.8X cooler than plugins for most scenarios.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The attached patch should achieve the results Ryan is talking
about. It loads rake tasks in the rails/tasks directory inside gems
that are loaded via config.gem.&lt;/p&gt;
&lt;p&gt;re: &quot;And in the edge case: gem not mentioned in config.gem but
frozen - tasks would be also loaded.&quot; I do not think tasks should
be loaded in this case. Loading a gem via config.gem sets up the
load_paths for that gem and should be (is) required for that gem to
be available in the rails app. This patch follows that
convention.&lt;/p&gt;
&lt;p&gt;re: &quot;Some gems you don't want to always load (again, rspec as an
example) so you don't want it in config.gem. However that's
probably an edge case. In that case it can fallback to a require
statement in Rakefile.&quot; The only case I can imagine is based on
environment and the ability to load gems selectively based on
environment already exists via the sub config/environment files.
You can put config.gem statements in these files to get the desired
results. This patch follows that convention: gems with rake tasks
loaded in the test.rb environment file will only be available when
running rake in the test environment.&lt;/p&gt;
&lt;p&gt;Also note I added a patch to this ticket to solve the
rails/init.rb issue: &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/324-gem-dependencies-inconsistently-load-rails-init-rb-6&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt; so help me out and +1 that
jam. I wanna get this stuff into rails as I believe gems are
something like 14.8X cooler than plugins for most scenarios.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-04T22:37:07+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included-2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-09-04T22:37:07+01:00</updated-at>
      <user-id type="integer">26568</user-id>
      <version type="integer">18</version>
      <user-name>Justin Marney</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Just hit this brick wall myself. Would love to see this get into 2.2, so we can really start running with gemified plugins.

The latest patch still requires starting up the rails environment for rake tasks that possibly don't need it, or in some cases actively don't want it. It will also cause quite a lot of extra work to happen just to be able to do a `rake -T` for example.

Seems like a step in the wrong direction.

We need to have a way of knowing what gems we are using, while never executing the environment{.rb,s/*.rb} files. I for one have no good plan.

Is it worth considering moving gem requirements out of the environments files? A big step I know.

Anyways, my 2cents, feel free to ignore.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just hit this brick wall myself. Would love to see this get into
2.2, so we can really start running with gemified plugins.&lt;/p&gt;
&lt;p&gt;The latest patch still requires starting up the rails
environment for rake tasks that possibly don't need it, or in some
cases actively don't want it. It will also cause quite a lot of
extra work to happen just to be able to do a &lt;code&gt;rake -T&lt;/code&gt;
for example.&lt;/p&gt;
&lt;p&gt;Seems like a step in the wrong direction.&lt;/p&gt;
&lt;p&gt;We need to have a way of knowing what gems we are using, while
never executing the environment{.rb,s/*.rb} files. I for one have
no good plan.&lt;/p&gt;
&lt;p&gt;Is it worth considering moving gem requirements out of the
environments files? A big step I know.&lt;/p&gt;
&lt;p&gt;Anyways, my 2cents, feel free to ignore.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-06T21:41:29+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-06T21:41:33+01:00</updated-at>
      <user-id type="integer">28420</user-id>
      <version type="integer">19</version>
      <user-name>Tom Lea</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Can we do something about this before 2.2? It would be great to have it.

Maybe we can rely on a new initializer (a good practice IMO) like `config/initializer/gems.rb`. That way the file could be required (being passed a mock `config` object) without the environment. We can get the gems and include the rake tasks.

Thoughts?

Let's push for this before 2.2...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can we do something about this before 2.2? It would be great to
have it.&lt;/p&gt;
&lt;p&gt;Maybe we can rely on a new initializer (a good practice IMO)
like &lt;code&gt;config/initializer/gems.rb&lt;/code&gt;. That way the file
could be required (being passed a mock &lt;code&gt;config&lt;/code&gt; object)
without the environment. We can get the gems and include the rake
tasks.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
&lt;p&gt;Let's push for this before 2.2...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-17T15:47:31+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-17T15:47:34+01:00</updated-at>
      <user-id type="integer">975</user-id>
      <version type="integer">20</version>
      <user-name>Damian Janowski</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Why do we need a new initializer when you can accomplish the same thing via preinitializer.rb, and avoid this issue entirely?

I've been restraining from pimping GemInstaller in this thread, but making a new initializer seems too much added complexity - and ironically, lack of complexity was the original reason technoweenie gave for duplicating GemInstaller's functionality in config.gems and the gems rake tasks.  Perhaps the difficulty of managing the chicken-egg nature of gem loading and dependency management is indicating that loading gems during initialization is not the best solution.  This is the whole reason I put in the preinitializer.rb patch - so there is a hook that occurs before rails ever initializes, where you have a chance to load all your gem dependencies.

This approach works fine, we have been using GemInstaller to do it with many production over the past couple of years, even by hacking boot.rb directly before I pushed the preinitializer.rb patch.  See docs at http://geminstaller.rubyforge.org, or the source for an example rails app:  http://geminstaller.rubyforge.org/svn/trunk/spec/fixture/sample_rails_app/config/preinitializer.rb

GemInstaller is stable, actively maintained with up-to-date lighthouse - thanks Rick :) - status for all known bugs, backward compatible with several legacy versions of rubygems, and very well tested, including Continuous Integration against Rubygems trunk and major legacy versions of rubygems.  And, and as I said, it in use in many production rails apps going on a couple of years now.

Or, if people don't want to use GemInstaller at all, that's fine, it is just a matter of invoking the proper &quot;gem&quot; methods from preinitializer.rb.  Or the whole config.gems logic and rake tasks can be decoupled from the initialization process to make it easy to invoke from preinitializer.rb.  I haven't confirmed lately, but when I looked at the initialization code, the rails initialization should be able to find any gem or gemified plugin, whether it was loaded by config.gems or prior to that in preinitialization.  If that isn't the case, it should be...

The point is, the difficulty of solving this issue to me points that trying to load/activate gem dependencies during initialization is a misguided attempt.  They should be activated BEFORE initialization, with is the exact and only purpose of preinitializer.rb.  I believe this is true regardless of how you activate the gems, or what sugar rake tasks/etc you provide to install/freeze the gems.

Thanks,
-- Chad</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why do we need a new initializer when you can accomplish the
same thing via preinitializer.rb, and avoid this issue
entirely?&lt;/p&gt;
&lt;p&gt;I've been restraining from pimping GemInstaller in this thread,
but making a new initializer seems too much added complexity - and
ironically, lack of complexity was the original reason technoweenie
gave for duplicating GemInstaller's functionality in config.gems
and the gems rake tasks. Perhaps the difficulty of managing the
chicken-egg nature of gem loading and dependency management is
indicating that loading gems during initialization is not the best
solution. This is the whole reason I put in the preinitializer.rb
patch - so there is a hook that occurs before rails ever
initializes, where you have a chance to load all your gem
dependencies.&lt;/p&gt;
&lt;p&gt;This approach works fine, we have been using GemInstaller to do
it with many production over the past couple of years, even by
hacking boot.rb directly before I pushed the preinitializer.rb
patch. See docs at &lt;a href=&quot;http://geminstaller.rubyforge.org&quot;&gt;http://geminstaller.rubyforge.org&lt;/a&gt;,
or the source for an example rails app: &lt;a href=&quot;http://geminstaller.rubyforge.org/svn/trunk/spec/fixture/sample_rails_app/config/preinitializer.rb&quot;&gt;
http://geminstaller.rubyforge.or...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GemInstaller is stable, actively maintained with up-to-date
lighthouse - thanks Rick :) - status for all known bugs, backward
compatible with several legacy versions of rubygems, and very well
tested, including Continuous Integration against Rubygems trunk and
major legacy versions of rubygems. And, and as I said, it in use in
many production rails apps going on a couple of years now.&lt;/p&gt;
&lt;p&gt;Or, if people don't want to use GemInstaller at all, that's
fine, it is just a matter of invoking the proper &quot;gem&quot; methods from
preinitializer.rb. Or the whole config.gems logic and rake tasks
can be decoupled from the initialization process to make it easy to
invoke from preinitializer.rb. I haven't confirmed lately, but when
I looked at the initialization code, the rails initialization
should be able to find any gem or gemified plugin, whether it was
loaded by config.gems or prior to that in preinitialization. If
that isn't the case, it should be...&lt;/p&gt;
&lt;p&gt;The point is, the difficulty of solving this issue to me points
that trying to load/activate gem dependencies during initialization
is a misguided attempt. They should be activated BEFORE
initialization, with is the exact and only purpose of
preinitializer.rb. I believe this is true regardless of how you
activate the gems, or what sugar rake tasks/etc you provide to
install/freeze the gems.&lt;/p&gt;
&lt;p&gt;Thanks, -- Chad&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-17T17:39:50+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-17T17:39:52+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">21</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Here's a more concise summary of my take on the issue, from the mailing list thread:

Basically, I think preinitializer.rb should be used to activate gems, whether that is manually via the 'gem' method, through some call to an initialization-decoupled version of the config.gems code, or some third party tool like GemInstaller.

The rails initialization code should be structured (if it is not already) to process the loaded gems, init files, rake tasks, etc that are already on the load path, regardless of how they got there (it can be any method as long as it is called from preinitializer.rb before any initialization happens).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's a more concise summary of my take on the issue, from the
mailing list thread:&lt;/p&gt;
&lt;p&gt;Basically, I think preinitializer.rb should be used to activate
gems, whether that is manually via the 'gem' method, through some
call to an initialization-decoupled version of the config.gems
code, or some third party tool like GemInstaller.&lt;/p&gt;
&lt;p&gt;The rails initialization code should be structured (if it is not
already) to process the loaded gems, init files, rake tasks, etc
that are already on the load path, regardless of how they got there
(it can be any method as long as it is called from
preinitializer.rb before any initialization happens).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-17T17:49:11+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-17T17:49:13+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">22</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>and one more thought :)

This approach (making initialization not care how gems/plugins were activated, but still able to process them) would probably also make it a lot easier for hosted rails environments, like Heroku.  They can provide their own mechanism for configuring/specifying/installing gems, and just instruct their users to put an appropriate hook in preinitializer.rb.  Everything else will work the same way - and developers can even provide an alternate mechanism in their local dev environment, just by switching on RAILS_ENV or some other environment flag in preinitializer.rb.</body>
      <body-html>&lt;div&gt;&lt;p&gt;and one more thought :)&lt;/p&gt;
&lt;p&gt;This approach (making initialization not care how gems/plugins
were activated, but still able to process them) would probably also
make it a lot easier for hosted rails environments, like Heroku.
They can provide their own mechanism for
configuring/specifying/installing gems, and just instruct their
users to put an appropriate hook in preinitializer.rb. Everything
else will work the same way - and developers can even provide an
alternate mechanism in their local dev environment, just by
switching on RAILS_ENV or some other environment flag in
preinitializer.rb.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-17T17:53:23+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-17T17:53:28+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">23</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>We use preinitializer.rb for ensuring that the proper versions of gems are activated in the app.  Chad's suggestion has worked out well for us. (we're unabashed GemInstaller users).  I never understood why we went straight to ruby (config.gem) for this type of configuration...</body>
      <body-html>&lt;div&gt;&lt;p&gt;We use preinitializer.rb for ensuring that the proper versions
of gems are activated in the app. Chad's suggestion has worked out
well for us. (we're unabashed GemInstaller users). I never
understood why we went straight to ruby (config.gem) for this type
of configuration...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-18T15:12:45+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-18T15:12:50+01:00</updated-at>
      <user-id type="integer">24346</user-id>
      <version type="integer">24</version>
      <user-name>John Trupiano</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>For 2.2 you can put a require statement in your project rakefile, or to a file in a .rake file in lib/tasks, so this ticket can wait

For 2.3 it'd be nice to think a little about this stuff to see how / if we can improve all this stuff.

The reason for config.gems rather than another yaml file is the multi-environment support it gives you, and the fact that as it's ruby code you can do whatever 'fancy' things you need to such as falling back from one gem to another depending on the operating system etc etc.

It's probably easiest to think about refactoring the initializer from the huge glob of procedural code it is now, into something a little more flexible.  So you could run a subset of the initializer then retrieve the results.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For 2.2 you can put a require statement in your project
rakefile, or to a file in a .rake file in lib/tasks, so this ticket
can wait&lt;/p&gt;
&lt;p&gt;For 2.3 it'd be nice to think a little about this stuff to see
how / if we can improve all this stuff.&lt;/p&gt;
&lt;p&gt;The reason for config.gems rather than another yaml file is the
multi-environment support it gives you, and the fact that as it's
ruby code you can do whatever 'fancy' things you need to such as
falling back from one gem to another depending on the operating
system etc etc.&lt;/p&gt;
&lt;p&gt;It's probably easiest to think about refactoring the initializer
from the huge glob of procedural code it is now, into something a
little more flexible. So you could run a subset of the initializer
then retrieve the results.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-19T12:40:08+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-19T12:40:12+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">25</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>&quot;It's probably easiest to think about refactoring the initializer from the huge glob of procedural code it is now, into something a little more flexible. So you could run a subset of the initializer then retrieve the results.&quot;

Yes, that's what I mean by decoupling it - so gem activation can go as early as you want.

However, I'm not sure if this approach can or should still be coupled with the inherent multi-environment support that comes with being part of rails init.  If it is still part of rails init, you still have the possibility of chicken-egg situations that come with executing init logic before all dependencies are fully loaded.

It still seems cleaner to have the standard approach be to load/activate everything before any rails init starts (in preinitializer.rb or equivalent), and if people need environment-specific loading, they can manually switch on RAILS_ENV.

Also, keeping gem loading explicitly decoupled from rails init solves the issues related to people wanting decoupled and DRY dependency declaration/installing/loading, but not always wanting to initialize rails (such as for Rake tasks, or hosted ci or rails environments processing gems).

Finally, if you run your YAML through ERB (which GemInstaller does), you can still do any 'fancy' ruby conditional checks you want ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;&quot;It's probably easiest to think about refactoring the
initializer from the huge glob of procedural code it is now, into
something a little more flexible. So you could run a subset of the
initializer then retrieve the results.&quot;&lt;/p&gt;
&lt;p&gt;Yes, that's what I mean by decoupling it - so gem activation can
go as early as you want.&lt;/p&gt;
&lt;p&gt;However, I'm not sure if this approach can or should still be
coupled with the inherent multi-environment support that comes with
being part of rails init. If it is still part of rails init, you
still have the possibility of chicken-egg situations that come with
executing init logic before all dependencies are fully loaded.&lt;/p&gt;
&lt;p&gt;It still seems cleaner to have the standard approach be to
load/activate everything before any rails init starts (in
preinitializer.rb or equivalent), and if people need
environment-specific loading, they can manually switch on
RAILS_ENV.&lt;/p&gt;
&lt;p&gt;Also, keeping gem loading explicitly decoupled from rails init
solves the issues related to people wanting decoupled and DRY
dependency declaration/installing/loading, but not always wanting
to initialize rails (such as for Rake tasks, or hosted ci or rails
environments processing gems).&lt;/p&gt;
&lt;p&gt;Finally, if you run your YAML through ERB (which GemInstaller
does), you can still do any 'fancy' ruby conditional checks you
want ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-19T13:17:17+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-19T13:17:22+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">26</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>What would a solution with preinitalizer.rb look like?

Why would we call it preinitializer.rb instead of gems.rb? What other purposes would it have?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What would a solution with preinitalizer.rb look like?&lt;/p&gt;
&lt;p&gt;Why would we call it preinitializer.rb instead of gems.rb? What
other purposes would it have?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-20T13:49:05+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-20T13:49:12+01:00</updated-at>
      <user-id type="integer">34618</user-id>
      <version type="integer">27</version>
      <user-name>Damian Janowski</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>@damian:

It would look like this :)

http://geminstaller.rubyforge.org/svn/trunk/spec/fixture/sample_rails_app/config/preinitializer.rb

preinitializer.rb is already in rails, has been since about 1.0, so the name should not change.  It's working fine for us in multiple apps and in the example above.

It is called preinitializer.rb because it is a generic hook, it could be used for gem loading/activation, or anything else you want to do before rails initialization starts.  It is essentially just a hook that boot.rb calls before it does anything else.

-- Chad</body>
      <body-html>&lt;div&gt;&lt;p&gt;@damian:&lt;/p&gt;
&lt;p&gt;It would look like this :)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://geminstaller.rubyforge.org/svn/trunk/spec/fixture/sample_rails_app/config/preinitializer.rb&quot;&gt;
http://geminstaller.rubyforge.or...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;preinitializer.rb is already in rails, has been since about 1.0,
so the name should not change. It's working fine for us in multiple
apps and in the example above.&lt;/p&gt;
&lt;p&gt;It is called preinitializer.rb because it is a generic hook, it
could be used for gem loading/activation, or anything else you want
to do before rails initialization starts. It is essentially just a
hook that boot.rb calls before it does anything else.&lt;/p&gt;
&lt;p&gt;-- Chad&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-21T03:25:09+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-21T03:25:15+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">28</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>sorry, I misspoke - preinitializer.rb support was added right before 2.0.  Still pre-git, though ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;sorry, I misspoke - preinitializer.rb support was added right
before 2.0. Still pre-git, though ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-21T06:41:55+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-21T06:42:02+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">29</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>I think I like the idea of using preinitializer.  Some gems (or at least soap4r) already seem to require you to do something like that or they won't work properly.

One potential downside I see, though: would we lose &quot;rake gems&quot; and &quot;rake gems:install&quot;?  Not that I've used them much, personally, but others?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think I like the idea of using preinitializer. Some gems (or
at least soap4r) already seem to require you to do something like
that or they won't work properly.&lt;/p&gt;
&lt;p&gt;One potential downside I see, though: would we lose &quot;rake gems&quot;
and &quot;rake gems:install&quot;? Not that I've used them much, personally,
but others?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-21T07:40:03+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-21T07:40:11+01:00</updated-at>
      <user-id type="integer">20076</user-id>
      <version type="integer">30</version>
      <user-name>George Ogata</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>@george:

If the logic for the rake gem[:*] tasks is decoupled from the initializer, it should be possible to keep the functionality with a single preinitializer hook.

In any case, the RubyGems API is not hard.  The &quot;GemRunner&quot; class is pretty much an exact mirror of the 'gem' command line commands, and the Gem Specification class provides info about gems, such as whether they are installed, etc.  

The frozen vs. not frozen reporting seems to be the only rails specific thing, which doesn't seem like it has to be tied to any initialization, it just involves looking under vendor to see if they exist, right?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@george:&lt;/p&gt;
&lt;p&gt;If the logic for the rake gem[:*] tasks is decoupled from the
initializer, it should be possible to keep the functionality with a
single preinitializer hook.&lt;/p&gt;
&lt;p&gt;In any case, the RubyGems API is not hard. The &quot;GemRunner&quot; class
is pretty much an exact mirror of the 'gem' command line commands,
and the Gem Specification class provides info about gems, such as
whether they are installed, etc.&lt;/p&gt;
&lt;p&gt;The frozen vs. not frozen reporting seems to be the only rails
specific thing, which doesn't seem like it has to be tied to any
initialization, it just involves looking under vendor to see if
they exist, right?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-21T08:06:21+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-21T08:06:23+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">31</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Hmmm, I think I was misunderstanding how you'd use the preinitializer.  I took it to mean you'd just require the gems in there, in which case the tasks in question would blow up if you didn't have the gems installed.

So you'd still use a config file of some sort to declare gem deps?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmmm, I think I was misunderstanding how you'd use the
preinitializer. I took it to mean you'd just require the gems in
there, in which case the tasks in question would blow up if you
didn't have the gems installed.&lt;/p&gt;
&lt;p&gt;So you'd still use a config file of some sort to declare gem
deps?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-21T08:38:51+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-21T08:38:59+01:00</updated-at>
      <user-id type="integer">20076</user-id>
      <version type="integer">32</version>
      <user-name>George Ogata</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>@george

You can do whatever you want.  You can install and/or activate ('gem' method) the gems, but point both to the same list of gems to keep it DRY (just like config.gems already does).  I usually always activate in all environments, but only auto-install in non development/test environments (e.g. ci, staging, prod) - because if you auto-install in dev/test it really slows down startup time.  SO, this means you have to manually install gems on your dev box, but they automatically get installed in CI and deployable environments.

Also, don't confuse activating a gem with a require statement.  'Activating' is just putting the gem files on the load path (as defined in the gem spec), by issuing a 'gem' method call.  That would be done in preinitializer.  

'Requiring' is issuing a ruby 'require' or 'load' for one of the files that the gem put on the load path.  That would be done during initialization or rake processing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@george&lt;/p&gt;
&lt;p&gt;You can do whatever you want. You can install and/or activate
('gem' method) the gems, but point both to the same list of gems to
keep it DRY (just like config.gems already does). I usually always
activate in all environments, but only auto-install in non
development/test environments (e.g. ci, staging, prod) - because if
you auto-install in dev/test it really slows down startup time. SO,
this means you have to manually install gems on your dev box, but
they automatically get installed in CI and deployable
environments.&lt;/p&gt;
&lt;p&gt;Also, don't confuse activating a gem with a require statement.
'Activating' is just putting the gem files on the load path (as
defined in the gem spec), by issuing a 'gem' method call. That
would be done in preinitializer.&lt;/p&gt;
&lt;p&gt;'Requiring' is issuing a ruby 'require' or 'load' for one of the
files that the gem put on the load path. That would be done during
initialization or rake processing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-21T09:41:59+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-21T09:42:02+01:00</updated-at>
      <user-id type="integer">17482</user-id>
      <version type="integer">33</version>
      <user-name>Chad Woolley</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>@Chad

Thanks for the explanation, but I think we're on different wavelengths.  The point I was trying to make is simply that if evaluating the preinitializer does anything that depends on the gem being installed--be it #require or #gem--it'll raise an exception if the gem isn't there.  This would thwart tasks like &quot;rake gems&quot; (which shouldn't need all the gems installed) if it tried to eval the preinitializer.

But really, I think I just misunderstood your proposal.  I had thought you were proposing using preinitializer with direct #require (or #gem) calls _instead_ of a configuration file (or some config object passed to preinitializer), which would've made getting the list of uninstalled gems a bit tricky/hacky.  But I'm pretty sure I'm mistaken; sorry for the noise.  X-(</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Chad&lt;/p&gt;
&lt;p&gt;Thanks for the explanation, but I think we're on different
wavelengths. The point I was trying to make is simply that if
evaluating the preinitializer does anything that depends on the gem
being installed--be it #require or #gem--it'll raise an exception
if the gem isn't there. This would thwart tasks like &quot;rake gems&quot;
(which shouldn't need all the gems installed) if it tried to eval
the preinitializer.&lt;/p&gt;
&lt;p&gt;But really, I think I just misunderstood your proposal. I had
thought you were proposing using preinitializer with direct
#require (or #gem) calls &lt;em&gt;instead&lt;/em&gt; of a configuration file
(or some config object passed to preinitializer), which would've
made getting the list of uninstalled gems a bit tricky/hacky. But
I'm pretty sure I'm mistaken; sorry for the noise. X-(&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-21T11:55:20+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2008-10-21T11:55:27+01:00</updated-at>
      <user-id type="integer">20076</user-id>
      <version type="integer">34</version>
      <user-name>George Ogata</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22589</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-06T17:17:02+00:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2009-03-06T17:17:08+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">35</version>
      <user-name>Pratik</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Matt Jones</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Putting in &quot;incomplete&quot; status till we have a solution. Also, mailing list might be a better fit for discussions this long :)

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Putting in &quot;incomplete&quot; status till we have a solution. Also,
mailing list might be a better fit for discussions this long :)&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-06T18:25:55+00:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 22589
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2009-03-06T18:26:02+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">36</version>
      <user-name>Pratik</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>+1 for this to work the same as standard plugins</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for this to work the same as standard plugins&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T23:26:12+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2009-09-27T23:26:18+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">37</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:33+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2010-05-04T18:48:33+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">38</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>As a new-ish rails user, who's considering making his first rails related gem, the fact that this is unresolved is disapointing. As I see it you could either have /rails/tasks or /rails/Rakefile, or alterativly have a rake gems:tasks that goes through the environment and adds all gem tasks as includes to the Rakefile.</body>
      <body-html>&lt;div&gt;&lt;p&gt;As a new-ish rails user, who's considering making his first
rails related gem, the fact that this is unresolved is
disapointing. As I see it you could either have /rails/tasks or
/rails/Rakefile, or alterativly have a rake gems:tasks that goes
through the environment and adds all gem tasks as includes to the
Rakefile.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-15T13:39:16+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">640</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2010-08-15T13:39:23+01:00</updated-at>
      <user-id type="integer">88539</user-id>
      <version type="integer">39</version>
      <user-name>Thomas Drake-Brockman</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>This has actually been resolved in Rails 3 - you'll need a subclass of Rails::Railtie, and add a rake_tasks block. Inside that, load the appropriate task files. An example from my Thinking Sphinx library:

http://github.com/freelancing-god/thinking-sphinx/blob/rails3/lib/thinking_sphinx/railtie.rb#L32</body>
      <body-html>&lt;div&gt;&lt;p&gt;This has actually been resolved in Rails 3 - you'll need a
subclass of Rails::Railtie, and add a rake_tasks block. Inside
that, load the appropriate task files. An example from my Thinking
Sphinx library:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/freelancing-god/thinking-sphinx/blob/rails3/lib/thinking_sphinx/railtie.rb#L32&quot;&gt;
http://github.com/freelancing-god/thinking-sphinx/blob/rails3/lib/t...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-15T14:59:32+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">640</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2010-08-15T14:59:39+01:00</updated-at>
      <user-id type="integer">4462</user-id>
      <version type="integer">40</version>
      <user-name>Pat Allan</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>+1 for making it work without copy-pasting some railtie(that will likely have a different api in future rails version) into every gem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for making it work without copy-pasting some railtie(that
will likely have a different api in future rails version) into
every gem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-23T07:28:03+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">640</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2010-09-23T07:28:08+01:00</updated-at>
      <user-id type="integer">42010</user-id>
      <version type="integer">41</version>
      <user-name>grosser</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Fixed in Rails 3. If someone needs this fix in Rails 2, please do push for that the patch gets applied.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Fixed in Rails 3. If someone needs this fix in Rails 2, please
do push for that the patch gets applied.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-23T07:50:33+01:00</created-at>
      <creator-id type="integer">18344</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">59</number>
      <permalink>when-loading-a-plugin-via-rubygems-rake-tasks-aren-t-included</permalink>
      <priority type="integer">640</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>patch plugins railties rake</tag>
      <title>When loading a plugin via rubygems, rake tasks aren't included</title>
      <updated-at type="datetime">2010-09-23T07:50:37+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">42</version>
      <user-name>David Trasbo</user-name>
      <creator-name>James Healy</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/59</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2b30c9be6e23639b0e7e0be3ee065e1c15ec5d9a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-06T06:13:12+01:00</created-at>
      <filename>gems.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">21667</id>
      <size type="integer">545</size>
      <uploader-id type="integer">18344</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/21667/gems.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>eec48136176fad177c65c07ceaed92c1b06a6b49</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-29T19:33:25+01:00</created-at>
      <filename>include_rake_tasks_from_frozen_gems.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">25035</id>
      <size type="integer">836</size>
      <uploader-id type="integer">9064</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/25035/include_rake_tasks_from_frozen_gems.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>473a2003cbcfd94352d63bcceba7d2a63fd98244</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-30T19:12:53+01:00</created-at>
      <filename>gem-rake-tasks.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">30074</id>
      <size type="integer">1886</size>
      <uploader-id type="integer">10504</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/30074/gem-rake-tasks.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>89a3a446cb6eb652efda2a5155282c8357a7e606</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-04T22:37:07+01:00</created-at>
      <filename>gem_plugin_rake_tasks.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">43888</id>
      <size type="integer">1664</size>
      <uploader-id type="integer">26568</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/43888/gem_plugin_rake_tasks.diff</url>
    </attachment>
  </attachments>
</ticket>
