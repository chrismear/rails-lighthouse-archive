<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-04T11:10:07+01:00</created-at>
  <creator-id type="integer">110184</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5293</number>
  <permalink>methods-for-routes-not-getting-generated</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>3.0.0.rc 3.x nested &quot;nested resources&quot; routes routing</tag>
  <title>methods for routes  not getting generated</title>
  <updated-at type="datetime">2010-08-04T13:05:26+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">3</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Timo Mika Gl&#228;&#223;er</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5293</url>
  <priority-name>Low</priority-name>
  <original-body>In my app the following routes definition

@@@ ruby
resources :organizations do
  resources :branches
end
@@@

produces

@@@
No route matches {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;destroy&quot;,
   :organization_id=&gt;#&lt;Organization _id: 4c589f81c0b2101cd1000011, ...&gt;,
   :id=&gt;#&lt;Branch _id: 4c589f81c0b2101cd1000012, ...&gt;}
@@@

when I call it like this

@@@ ruby
organization_branch_path(organization, branch)
@@@

whereas this produces the correct url without errors

@@@ ruby
organization_branch_path(:organization_id =&gt; 23, :id =&gt; 23)
@@@

Notably the output of rake routes does not include the method name for GET but I am not sure if this used to be the case in earlier versions. The relevant output of rake routes is 

@@@
                    GET    /organizations/:organization_id/branches(.:format)          {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;index&quot;}
   organization_branches POST   /organizations/:organization_id/branches(.:format)          {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;create&quot;}
 new_organization_branch GET    /organizations/:organization_id/branches/new(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;new&quot;}
                         GET    /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;show&quot;}
                         PUT    /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;update&quot;}
     organization_branch DELETE /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;destroy&quot;}
edit_organization_branch GET    /organizations/:organization_id/branches/:id/edit(.:format) {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;edit&quot;}
@@@

I think it used to work like the version where you just pass instances of objects before and not having to think about the names of the required ids.

I have to mention that I am using Mongoid and do not have ActiveRecord included in my configuration. Not sure yet whether you do any reflection on that end - which IMHO would not be required to generate and/or recognize the routes. You can just call to_param on all objects being passed in order of nesting and associated the ids by convention, right?</original-body>
  <latest-body>In my app the following routes definition

@@@ ruby
resources :organizations do
  resources :branches
end
@@@

produces

@@@
No route matches {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;destroy&quot;,
   :organization_id=&gt;#&lt;Organization _id: 4c589f81c0b2101cd1000011, ...&gt;,
   :id=&gt;#&lt;Branch _id: 4c589f81c0b2101cd1000012, ...&gt;}
@@@

when I call it like this

@@@ ruby
organization_branch_path(organization, branch)
@@@

whereas this produces the correct url without errors

@@@ ruby
organization_branch_path(:organization_id =&gt; 23, :id =&gt; 23)
@@@

Notably the output of rake routes does not include the method name for GET but I am not sure if this used to be the case in earlier versions. The relevant output of rake routes is 

@@@
                    GET    /organizations/:organization_id/branches(.:format)          {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;index&quot;}
   organization_branches POST   /organizations/:organization_id/branches(.:format)          {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;create&quot;}
 new_organization_branch GET    /organizations/:organization_id/branches/new(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;new&quot;}
                         GET    /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;show&quot;}
                         PUT    /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;update&quot;}
     organization_branch DELETE /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;destroy&quot;}
edit_organization_branch GET    /organizations/:organization_id/branches/:id/edit(.:format) {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;edit&quot;}
@@@

I think it used to work like the version where you just pass instances of objects before and not having to think about the names of the required ids.

I have to mention that I am using Mongoid and do not have ActiveRecord included in my configuration. Not sure yet whether you do any reflection on that end - which IMHO would not be required to generate and/or recognize the routes. You can just call to_param on all objects being passed in order of nesting and associated the ids by convention, right?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In my app the following routes definition&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;resources :organizations do
  resources :branches
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;produces&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;No route matches {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;destroy&quot;,
   :organization_id=&amp;gt;#&amp;lt;Organization _id: 4c589f81c0b2101cd1000011, ...&amp;gt;,
   :id=&amp;gt;#&amp;lt;Branch _id: 4c589f81c0b2101cd1000012, ...&amp;gt;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;when I call it like this&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;organization_branch_path(organization, branch)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;whereas this produces the correct url without errors&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;organization_branch_path(:organization_id =&amp;gt; 23, :id =&amp;gt; 23)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notably the output of rake routes does not include the method
name for GET but I am not sure if this used to be the case in
earlier versions. The relevant output of rake routes is&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                    GET    /organizations/:organization_id/branches(.:format)          {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;index&quot;}
   organization_branches POST   /organizations/:organization_id/branches(.:format)          {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;create&quot;}
 new_organization_branch GET    /organizations/:organization_id/branches/new(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;new&quot;}
                         GET    /organizations/:organization_id/branches/:id(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;show&quot;}
                         PUT    /organizations/:organization_id/branches/:id(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;update&quot;}
     organization_branch DELETE /organizations/:organization_id/branches/:id(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;destroy&quot;}
edit_organization_branch GET    /organizations/:organization_id/branches/:id/edit(.:format) {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;edit&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think it used to work like the version where you just pass
instances of objects before and not having to think about the names
of the required ids.&lt;/p&gt;
&lt;p&gt;I have to mention that I am using Mongoid and do not have
ActiveRecord included in my configuration. Not sure yet whether you
do any reflection on that end - which IMHO would not be required to
generate and/or recognize the routes. You can just call to_param on
all objects being passed in order of nesting and associated the ids
by convention, right?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In my app the following routes definition

@@@ ruby
resources :organizations do
  resources :branches
end
@@@

produces

@@@
No route matches {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;destroy&quot;,
   :organization_id=&gt;#&lt;Organization _id: 4c589f81c0b2101cd1000011, ...&gt;,
   :id=&gt;#&lt;Branch _id: 4c589f81c0b2101cd1000012, ...&gt;}
@@@

when I call it like this

@@@ ruby
organization_branch_path(organization, branch)
@@@

whereas this produces the correct url without errors

@@@ ruby
organization_branch_path(:organization_id =&gt; 23, :id =&gt; 23)
@@@

Notably the output of rake routes does not include the method name for GET but I am not sure if this used to be the case in earlier versions. The relevant output of rake routes is 

@@@
                    GET    /organizations/:organization_id/branches(.:format)          {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;index&quot;}
   organization_branches POST   /organizations/:organization_id/branches(.:format)          {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;create&quot;}
 new_organization_branch GET    /organizations/:organization_id/branches/new(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;new&quot;}
                         GET    /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;show&quot;}
                         PUT    /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;update&quot;}
     organization_branch DELETE /organizations/:organization_id/branches/:id(.:format)      {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;destroy&quot;}
edit_organization_branch GET    /organizations/:organization_id/branches/:id/edit(.:format) {:controller=&gt;&quot;branches&quot;, :action=&gt;&quot;edit&quot;}
@@@

I think it used to work like the version where you just pass instances of objects before and not having to think about the names of the required ids.

I have to mention that I am using Mongoid and do not have ActiveRecord included in my configuration. Not sure yet whether you do any reflection on that end - which IMHO would not be required to generate and/or recognize the routes. You can just call to_param on all objects being passed in order of nesting and associated the ids by convention, right?</body>
      <body-html>&lt;div&gt;&lt;p&gt;In my app the following routes definition&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;resources :organizations do
  resources :branches
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;produces&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;No route matches {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;destroy&quot;,
   :organization_id=&amp;gt;#&amp;lt;Organization _id: 4c589f81c0b2101cd1000011, ...&amp;gt;,
   :id=&amp;gt;#&amp;lt;Branch _id: 4c589f81c0b2101cd1000012, ...&amp;gt;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;when I call it like this&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;organization_branch_path(organization, branch)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;whereas this produces the correct url without errors&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;organization_branch_path(:organization_id =&amp;gt; 23, :id =&amp;gt; 23)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notably the output of rake routes does not include the method
name for GET but I am not sure if this used to be the case in
earlier versions. The relevant output of rake routes is&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;                    GET    /organizations/:organization_id/branches(.:format)          {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;index&quot;}
   organization_branches POST   /organizations/:organization_id/branches(.:format)          {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;create&quot;}
 new_organization_branch GET    /organizations/:organization_id/branches/new(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;new&quot;}
                         GET    /organizations/:organization_id/branches/:id(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;show&quot;}
                         PUT    /organizations/:organization_id/branches/:id(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;update&quot;}
     organization_branch DELETE /organizations/:organization_id/branches/:id(.:format)      {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;destroy&quot;}
edit_organization_branch GET    /organizations/:organization_id/branches/:id/edit(.:format) {:controller=&amp;gt;&quot;branches&quot;, :action=&amp;gt;&quot;edit&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think it used to work like the version where you just pass
instances of objects before and not having to think about the names
of the required ids.&lt;/p&gt;
&lt;p&gt;I have to mention that I am using Mongoid and do not have
ActiveRecord included in my configuration. Not sure yet whether you
do any reflection on that end - which IMHO would not be required to
generate and/or recognize the routes. You can just call to_param on
all objects being passed in order of nesting and associated the ids
by convention, right?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-04T11:10:07+01:00</created-at>
      <creator-id type="integer">110184</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5293</number>
      <permalink>methods-for-routes-not-getting-generated</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc 3.x nested &quot;nested resources&quot; routes routing</tag>
      <title>methods for routes  not getting generated</title>
      <updated-at type="datetime">2010-08-04T11:16:16+01:00</updated-at>
      <user-id type="integer">110184</user-id>
      <version type="integer">1</version>
      <user-name>Timo Mika Gl&#228;&#223;er</user-name>
      <creator-name>Timo Mika Gl&#228;&#223;er</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5293</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is actually not a bug. The object was not yet stored in MongoId or ActiveRecord and after some digging I found that to_param calls persisted? and return nil if persisted? == false. So that solved it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is actually not a bug. The object was not yet stored in
MongoId or ActiveRecord and after some digging I found that
to_param calls persisted? and return nil if persisted? == false. So
that solved it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-04T12:42:29+01:00</created-at>
      <creator-id type="integer">110184</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5293</number>
      <permalink>methods-for-routes-not-getting-generated</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.0.rc 3.x nested &quot;nested resources&quot; routes routing</tag>
      <title>methods for routes  not getting generated</title>
      <updated-at type="datetime">2010-08-04T12:42:33+01:00</updated-at>
      <user-id type="integer">110184</user-id>
      <version type="integer">2</version>
      <user-name>Timo Mika Gl&#228;&#223;er</user-name>
      <creator-name>Timo Mika Gl&#228;&#223;er</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5293</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-04T13:05:23+01:00</created-at>
      <creator-id type="integer">110184</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5293</number>
      <permalink>methods-for-routes-not-getting-generated</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>3.0.0.rc 3.x nested &quot;nested resources&quot; routes routing</tag>
      <title>methods for routes  not getting generated</title>
      <updated-at type="datetime">2010-08-04T13:05:26+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Timo Mika Gl&#228;&#223;er</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5293</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
