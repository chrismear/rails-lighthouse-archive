<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-15T15:09:07+00:00</created-at>
  <creator-id type="integer">23794</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5977</number>
  <permalink>functional-tests-dont-care-about-http-verb-that-you-use-on-the-simulate-request</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>3.0.1 actioncontroller::testcase rails &quot;request type&quot; testing</tag>
  <title>Functional tests don't care about http-verb that you use on the simulate request.</title>
  <updated-at type="datetime">2010-11-18T10:29:55+00:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">6</version>
  <user-name>Andrew White</user-name>
  <creator-name>Fernando Guillen</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5977</url>
  <priority-name>Low</priority-name>
  <original-body>Context:

    Rails: 3.0.1
    Ruby: 1.8.7


In case I have these routes:

    resources :my_things do
      collection do 
        get :my_get_action
        post :my_post_action
      end
    end

I can simulate this request in my functional test without any warning:

    # my_things_controller_test.rb
    post(:my_get_action)
    get(:my_post_action)

What it looks like is that it doesn't matter which *request type* do you use.

See this very simple Rails project that reproduce this behavior in its functional tests:

* https://github.com/fguillen/TestingRoutesVerb

These are the tests I'm trying:

    require 'test_helper'

    class MyThingsControllerTest &lt; ActionController::TestCase
      test &quot;should respond to the get action&quot; do
        get(:my_get_action)
    
        assert_response :success
        assert_equal(&quot;my get action&quot;, @response.body)
      end
  
      test &quot;should respond to the post action&quot; do
        post(:my_post_action)
    
        assert_response :success
        assert_equal(&quot;my post action&quot;, @response.body)
      end
  
      test &quot;should respond to the get action with post verb&quot; do
        assert_raise(ActionController::RoutingError) do
          post(:my_get_action)
        end
      end
  
      test &quot;should not respond to the post action with get verb&quot; do
        assert_raise(ActionController::RoutingError) do
          get(:my_post_action)
        end
      end
    end

This is the result:

    $ rake test:functionals
    (in /Users/fguillen/Develop/Rails/Contribute/TestingRoutesVerb)
    Loaded suite /Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader
    Started
    F.F.
    Finished in 0.180686 seconds.

      1) Failure:
    test_should_not_respond_to_the_post_action_with_get_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:25]:
    &lt;ActionController::RoutingError&gt; exception expected but none was thrown.

      2) Failure:
    test_should_respond_to_the_get_action_with_post_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:19]:
    &lt;ActionController::RoutingError&gt; exception expected but none was thrown.

    4 tests, 6 assertions, 2 failures, 0 errors
    rake aborted!
    Command failed with status (1): [/System/Library/Frameworks/Ruby.framework/...]</original-body>
  <latest-body>Context:

    Rails: 3.0.1
    Ruby: 1.8.7


In case I have these routes:

    resources :my_things do
      collection do 
        get :my_get_action
        post :my_post_action
      end
    end

I can simulate this request in my functional test without any warning:

    # my_things_controller_test.rb
    post(:my_get_action)
    get(:my_post_action)

What it looks like is that it doesn't matter which *request type* do you use.

See this very simple Rails project that reproduce this behavior in its functional tests:

* https://github.com/fguillen/TestingRoutesVerb

These are the tests I'm trying:

    require 'test_helper'

    class MyThingsControllerTest &lt; ActionController::TestCase
      test &quot;should respond to the get action&quot; do
        get(:my_get_action)
    
        assert_response :success
        assert_equal(&quot;my get action&quot;, @response.body)
      end
  
      test &quot;should respond to the post action&quot; do
        post(:my_post_action)
    
        assert_response :success
        assert_equal(&quot;my post action&quot;, @response.body)
      end
  
      test &quot;should respond to the get action with post verb&quot; do
        assert_raise(ActionController::RoutingError) do
          post(:my_get_action)
        end
      end
  
      test &quot;should not respond to the post action with get verb&quot; do
        assert_raise(ActionController::RoutingError) do
          get(:my_post_action)
        end
      end
    end

This is the result:

    $ rake test:functionals
    (in /Users/fguillen/Develop/Rails/Contribute/TestingRoutesVerb)
    Loaded suite /Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader
    Started
    F.F.
    Finished in 0.180686 seconds.

      1) Failure:
    test_should_not_respond_to_the_post_action_with_get_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:25]:
    &lt;ActionController::RoutingError&gt; exception expected but none was thrown.

      2) Failure:
    test_should_respond_to_the_get_action_with_post_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:19]:
    &lt;ActionController::RoutingError&gt; exception expected but none was thrown.

    4 tests, 6 assertions, 2 failures, 0 errors
    rake aborted!
    Command failed with status (1): [/System/Library/Frameworks/Ruby.framework/...]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Context:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails: 3.0.1
Ruby: 1.8.7&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In case I have these routes:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resources :my_things do
  collection do 
    get :my_get_action
    post :my_post_action
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can simulate this request in my functional test without any
warning:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# my_things_controller_test.rb
post(:my_get_action)
get(:my_post_action)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What it looks like is that it doesn't matter which &lt;em&gt;request
type&lt;/em&gt; do you use.&lt;/p&gt;
&lt;p&gt;See this very simple Rails project that reproduce this behavior
in its functional tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=
&quot;https://github.com/fguillen/TestingRoutesVerb&quot;&gt;https://github.com/fguillen/TestingRoutesVerb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the tests I'm trying:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'test_helper'

class MyThingsControllerTest &amp;lt; ActionController::TestCase
  test &quot;should respond to the get action&quot; do
    get(:my_get_action)

    assert_response :success
    assert_equal(&quot;my get action&quot;, @response.body)
  end

  test &quot;should respond to the post action&quot; do
    post(:my_post_action)

    assert_response :success
    assert_equal(&quot;my post action&quot;, @response.body)
  end

  test &quot;should respond to the get action with post verb&quot; do
    assert_raise(ActionController::RoutingError) do
      post(:my_get_action)
    end
  end

  test &quot;should not respond to the post action with get verb&quot; do
    assert_raise(ActionController::RoutingError) do
      get(:my_post_action)
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the result:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ rake test:functionals
(in /Users/fguillen/Develop/Rails/Contribute/TestingRoutesVerb)
Loaded suite /Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader
Started
F.F.
Finished in 0.180686 seconds.

  1) Failure:
test_should_not_respond_to_the_post_action_with_get_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:25]:
&amp;lt;ActionController::RoutingError&amp;gt; exception expected but none was thrown.

  2) Failure:
test_should_respond_to_the_get_action_with_post_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:19]:
&amp;lt;ActionController::RoutingError&amp;gt; exception expected but none was thrown.

4 tests, 6 assertions, 2 failures, 0 errors
rake aborted!
Command failed with status (1): [/System/Library/Frameworks/Ruby.framework/...]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Context:

    Rails: 3.0.1
    Ruby: 1.8.7


In case I have these routes:

    resources :my_things do
      collection do 
        get :my_get_action
        post :my_post_action
      end
    end

I can simulate this request in my functional test without any warning:

    # my_things_controller_test.rb
    post(:my_get_action)
    get(:my_post_action)

What it looks like is that it doesn't matter which *request type* do you use.

See this very simple Rails project that reproduce this behavior in its functional tests:

* https://github.com/fguillen/TestingRoutesVerb

These are the tests I'm trying:

    require 'test_helper'

    class MyThingsControllerTest &lt; ActionController::TestCase
      test &quot;should respond to the get action&quot; do
        get(:my_get_action)
    
        assert_response :success
        assert_equal(&quot;my get action&quot;, @response.body)
      end
  
      test &quot;should respond to the post action&quot; do
        post(:my_post_action)
    
        assert_response :success
        assert_equal(&quot;my post action&quot;, @response.body)
      end
  
      test &quot;should respond to the get action with post verb&quot; do
        assert_raise(ActionController::RoutingError) do
          post(:my_get_action)
        end
      end
  
      test &quot;should not respond to the post action with get verb&quot; do
        assert_raise(ActionController::RoutingError) do
          get(:my_post_action)
        end
      end
    end

This is the result:

    $ rake test:functionals
    (in /Users/fguillen/Develop/Rails/Contribute/TestingRoutesVerb)
    Loaded suite /Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader
    Started
    F.F.
    Finished in 0.180686 seconds.

      1) Failure:
    test_should_not_respond_to_the_post_action_with_get_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:25]:
    &lt;ActionController::RoutingError&gt; exception expected but none was thrown.

      2) Failure:
    test_should_respond_to_the_get_action_with_post_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:19]:
    &lt;ActionController::RoutingError&gt; exception expected but none was thrown.

    4 tests, 6 assertions, 2 failures, 0 errors
    rake aborted!
    Command failed with status (1): [/System/Library/Frameworks/Ruby.framework/...]</body>
      <body-html>&lt;div&gt;&lt;p&gt;Context:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Rails: 3.0.1
Ruby: 1.8.7&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In case I have these routes:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resources :my_things do
  collection do 
    get :my_get_action
    post :my_post_action
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can simulate this request in my functional test without any
warning:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# my_things_controller_test.rb
post(:my_get_action)
get(:my_post_action)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What it looks like is that it doesn't matter which &lt;em&gt;request
type&lt;/em&gt; do you use.&lt;/p&gt;
&lt;p&gt;See this very simple Rails project that reproduce this behavior
in its functional tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=
&quot;https://github.com/fguillen/TestingRoutesVerb&quot;&gt;https://github.com/fguillen/TestingRoutesVerb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the tests I'm trying:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'test_helper'

class MyThingsControllerTest &amp;lt; ActionController::TestCase
  test &quot;should respond to the get action&quot; do
    get(:my_get_action)

    assert_response :success
    assert_equal(&quot;my get action&quot;, @response.body)
  end

  test &quot;should respond to the post action&quot; do
    post(:my_post_action)

    assert_response :success
    assert_equal(&quot;my post action&quot;, @response.body)
  end

  test &quot;should respond to the get action with post verb&quot; do
    assert_raise(ActionController::RoutingError) do
      post(:my_get_action)
    end
  end

  test &quot;should not respond to the post action with get verb&quot; do
    assert_raise(ActionController::RoutingError) do
      get(:my_post_action)
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is the result:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ rake test:functionals
(in /Users/fguillen/Develop/Rails/Contribute/TestingRoutesVerb)
Loaded suite /Library/Ruby/Gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader
Started
F.F.
Finished in 0.180686 seconds.

  1) Failure:
test_should_not_respond_to_the_post_action_with_get_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:25]:
&amp;lt;ActionController::RoutingError&amp;gt; exception expected but none was thrown.

  2) Failure:
test_should_respond_to_the_get_action_with_post_verb(MyThingsControllerTest) [/test/functional/my_things_controller_test.rb:19]:
&amp;lt;ActionController::RoutingError&amp;gt; exception expected but none was thrown.

4 tests, 6 assertions, 2 failures, 0 errors
rake aborted!
Command failed with status (1): [/System/Library/Frameworks/Ruby.framework/...]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-15T15:09:07+00:00</created-at>
      <creator-id type="integer">23794</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5977</number>
      <permalink>functional-tests-dont-care-about-http-verb-that-you-use-on-the-simulate-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0.1 actioncontroller::testcase rails &quot;request type&quot; testing</tag>
      <title>Functional tests don't care about http-verb that you use on the simulate request.</title>
      <updated-at type="datetime">2010-11-15T15:09:11+00:00</updated-at>
      <user-id type="integer">23794</user-id>
      <version type="integer">1</version>
      <user-name>Fernando Guillen</user-name>
      <creator-name>Fernando Guillen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5977</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Functional tests call the controller action directly and don't go through the router. Use an ActionDispatch::IntegrationTest to check the routing constraints. e.g:

@@@
  rails generate test_unit:integration my_controller_routing
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Functional tests call the controller action directly and don't
go through the router. Use an ActionDispatch::IntegrationTest to
check the routing constraints. e.g:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  rails generate test_unit:integration my_controller_routing&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-17T17:49:07+00:00</created-at>
      <creator-id type="integer">23794</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5977</number>
      <permalink>functional-tests-dont-care-about-http-verb-that-you-use-on-the-simulate-request</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>3.0.1 actioncontroller::testcase rails &quot;request type&quot; testing</tag>
      <title>Functional tests don't care about http-verb that you use on the simulate request.</title>
      <updated-at type="datetime">2010-11-17T17:49:08+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Fernando Guillen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5977</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>But then what is the propose of having the five *verbs* in the `ActionController::TestCase` if I can use any of them without any restriction or diference?

It is not intuitive.

And besides the `ActionController::TestCase`, some way, looks to the *defined routes* because if don't have the route defined on your `routes.rb` it raises an `ActionController::RoutingError`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;But then what is the propose of having the five &lt;em&gt;verbs&lt;/em&gt;
in the &lt;code&gt;ActionController::TestCase&lt;/code&gt; if I can use any of
them without any restriction or diference?&lt;/p&gt;
&lt;p&gt;It is not intuitive.&lt;/p&gt;
&lt;p&gt;And besides the &lt;code&gt;ActionController::TestCase&lt;/code&gt;, some
way, looks to the &lt;em&gt;defined routes&lt;/em&gt; because if don't have the
route defined on your &lt;code&gt;routes.rb&lt;/code&gt; it raises an
&lt;code&gt;ActionController::RoutingError&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-17T20:09:45+00:00</created-at>
      <creator-id type="integer">23794</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5977</number>
      <permalink>functional-tests-dont-care-about-http-verb-that-you-use-on-the-simulate-request</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>3.0.1 actioncontroller::testcase rails &quot;request type&quot; testing</tag>
      <title>Functional tests don't care about http-verb that you use on the simulate request.</title>
      <updated-at type="datetime">2010-11-17T20:09:49+00:00</updated-at>
      <user-id type="integer">23794</user-id>
      <version type="integer">3</version>
      <user-name>Fernando Guillen</user-name>
      <creator-name>Fernando Guillen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5977</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The get, post, etc. methods are just wrappers around the process method of ActionController::TestCase. All they do is set the REQUEST_METHOD header in the Rack environment so that any code in your controller that is dependent on the request method acts appropriately, e.g. 

@@@ ruby
  # routes.rb
  match '/basket', :to =&gt; 'shop#basket', :via =&gt; [:get, :post]

  # app/controllers/shop_controller.rb
  class ShopController &lt; ApplicationController
    before_filter :load_basket

    def basket
      @basket.update(params[:basket]) if request.post?
    end

    protected
      def load_basket
        @basket = Basket.new(session[:basket])
      end
  end
@@@

The routing error you get is because the process method builds a request uri so it's a generation error and not a recognition error (generation of urls ignores HTTP verbs as well).

Functional tests are meant to be isolated tests of your controller - if you need to test the full stack use an integration test.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The get, post, etc. methods are just wrappers around the process
method of ActionController::TestCase. All they do is set the
REQUEST_METHOD header in the Rack environment so that any code in
your controller that is dependent on the request method acts
appropriately, e.g.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # routes.rb
  match '/basket', :to =&amp;gt; 'shop#basket', :via =&amp;gt; [:get, :post]

  # app/controllers/shop_controller.rb
  class ShopController &amp;lt; ApplicationController
    before_filter :load_basket

    def basket
      @basket.update(params[:basket]) if request.post?
    end

    protected
      def load_basket
        @basket = Basket.new(session[:basket])
      end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The routing error you get is because the process method builds a
request uri so it's a generation error and not a recognition error
(generation of urls ignores HTTP verbs as well).&lt;/p&gt;
&lt;p&gt;Functional tests are meant to be isolated tests of your
controller - if you need to test the full stack use an integration
test.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-18T07:05:50+00:00</created-at>
      <creator-id type="integer">23794</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5977</number>
      <permalink>functional-tests-dont-care-about-http-verb-that-you-use-on-the-simulate-request</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>3.0.1 actioncontroller::testcase rails &quot;request type&quot; testing</tag>
      <title>Functional tests don't care about http-verb that you use on the simulate request.</title>
      <updated-at type="datetime">2010-11-18T07:05:52+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">4</version>
      <user-name>Andrew White</user-name>
      <creator-name>Fernando Guillen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5977</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, I understand pretty much better all this behavior. 

So the verbs in the `ActionController::TestCase` are just to mark this request with this *REQUEST_METHOD* header in order to be used (or not) in our `Controller`.

And also I have realized that we are also checking that the url we are calling can be built based on our routes definition, but without taken care about the *verbs* restrictions. So it should be able to be *generated* but it doesn't need to be *recognized*.

(This last point sounds a few inconsistent for me, but I understand I don't have the whole picture in my mind)

Thanks for your explanation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, I understand pretty much better all this behavior.&lt;/p&gt;
&lt;p&gt;So the verbs in the &lt;code&gt;ActionController::TestCase&lt;/code&gt; are
just to mark this request with this &lt;em&gt;REQUEST_METHOD&lt;/em&gt; header
in order to be used (or not) in our &lt;code&gt;Controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And also I have realized that we are also checking that the url
we are calling can be built based on our routes definition, but
without taken care about the &lt;em&gt;verbs&lt;/em&gt; restrictions. So it
should be able to be &lt;em&gt;generated&lt;/em&gt; but it doesn't need to be
&lt;em&gt;recognized&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(This last point sounds a few inconsistent for me, but I
understand I don't have the whole picture in my mind)&lt;/p&gt;
&lt;p&gt;Thanks for your explanation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-18T09:58:20+00:00</created-at>
      <creator-id type="integer">23794</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5977</number>
      <permalink>functional-tests-dont-care-about-http-verb-that-you-use-on-the-simulate-request</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>3.0.1 actioncontroller::testcase rails &quot;request type&quot; testing</tag>
      <title>Functional tests don't care about http-verb that you use on the simulate request.</title>
      <updated-at type="datetime">2010-11-18T09:58:24+00:00</updated-at>
      <user-id type="integer">23794</user-id>
      <version type="integer">5</version>
      <user-name>Fernando Guillen</user-name>
      <creator-name>Fernando Guillen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5977</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That's pretty much it except the route is being built so that the REQUEST_URI header can be set and not to check whether the route can be generated (though it obviously it needs to be).</body>
      <body-html>&lt;div&gt;&lt;p&gt;That's pretty much it except the route is being built so that
the REQUEST_URI header can be set and not to check whether the
route can be generated (though it obviously it needs to be).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-18T10:29:50+00:00</created-at>
      <creator-id type="integer">23794</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5977</number>
      <permalink>functional-tests-dont-care-about-http-verb-that-you-use-on-the-simulate-request</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>3.0.1 actioncontroller::testcase rails &quot;request type&quot; testing</tag>
      <title>Functional tests don't care about http-verb that you use on the simulate request.</title>
      <updated-at type="datetime">2010-11-18T10:29:55+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">6</version>
      <user-name>Andrew White</user-name>
      <creator-name>Fernando Guillen</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5977</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
