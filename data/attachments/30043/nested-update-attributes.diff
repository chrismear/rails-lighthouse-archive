From 7a0b5cd1e378d857bf52d9e32a363b5b2ba1f8d7 Mon Sep 17 00:00:00 2001
From: David Dollar <ddollar@gmail.com>
Date: Mon, 23 Jun 2008 14:25:47 -0400
Subject: [PATCH] if a hash is passed into an association proxy setter, hydrate it as an ActiveRecord model instead

---
 activerecord/lib/active_record/associations.rb     |    4 ++++
 .../associations/association_collection.rb         |    5 +++++
 activerecord/test/cases/associations_test.rb       |   18 ++++++++++++++++++
 3 files changed, 27 insertions(+), 0 deletions(-)

diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 4b71540..f7f00e6 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -1107,6 +1107,10 @@ module ActiveRecord
               association = association_proxy_class.new(self, reflection)
             end
 
+            # if a Hash is passed in, convert it to an ActiveRecord model
+            # using the Hash as the initialization attributes
+            new_value = reflection.klass.new(new_value) if new_value.is_a?(Hash)
+
             if association_proxy_class == HasOneThroughAssociation
               association.create_through_record(new_value)
               self.send(reflection.name, new_value)
diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index 52d2a98..bb76c80 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -94,6 +94,11 @@ module ActiveRecord
 
         @owner.transaction do
           flatten_deeper(records).each do |record|
+
+            # if a Hash is passed in, convert it to an ActiveRecord model
+            # using the Hash as the initialization attributes
+            record = @reflection.klass.new(record) if record.is_a?(Hash)
+
             raise_on_type_mismatch(record)
             add_record_to_target_with_callbacks(record) do |r|
               result &&= insert_record(record) unless @owner.new_record?
diff --git a/activerecord/test/cases/associations_test.rb b/activerecord/test/cases/associations_test.rb
index 59349dd..122a3ff 100755
--- a/activerecord/test/cases/associations_test.rb
+++ b/activerecord/test/cases/associations_test.rb
@@ -189,6 +189,24 @@ class AssociationProxyTest < ActiveRecord::TestCase
     end
   end
 
+  def test_association_proxy_setter_can_take_hash
+    special_comment_attributes = { :body => 'Setter Takes Hash' }
+
+    post = posts(:welcome)
+    post.very_special_comment = { :body => 'Setter Takes Hash' }
+
+    assert_equal post.very_special_comment.body, special_comment_attributes[:body]
+  end
+
+  def test_association_collection_can_take_hash
+    post_attributes = { :title => 'Setter Takes', :body => 'Hash' }
+
+    david = authors(:david)
+    post = (david.posts << post_attributes).last
+
+    assert_equal post.title, post_attributes[:title]
+  end
+
   def setup_dangling_association
     josh = Author.create(:name => "Josh")
     p = Post.create(:title => "New on Edge", :body => "More cool stuff!", :author => josh)
-- 
1.5.5.1

