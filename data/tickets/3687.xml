<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-01-12T23:08:34+00:00</created-at>
  <creator-id type="integer">82451</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3687</number>
  <permalink>nested-attributes-with-belongs_to-only-supports-one-use-case</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>nested attributes with belongs_to only supports one use case</title>
  <updated-at type="datetime">2010-07-29T14:21:55+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">6</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Lyle</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3687</url>
  <priority-name>Low</priority-name>
  <original-body>When using nested attributes with belongs_to, Rails only supports changing the related record rather than which record the object points to. Yes, that's confusing, so consider:

@@@ ruby
class Task &lt; ActiveRecord::Base
  belongs_to :project
  accepts_nested_attributes_for :project
end
@@@

Assume you also have a Task controller and task form with a nested attribute for project name. When you submit the form, the server receives:

@@@ ruby
&quot;task&quot;=&gt;{&quot;project_attributes&quot;=&gt;{&quot;name&quot;=&gt;&quot;foo&quot;, &quot;id&quot;=&gt;&quot;10&quot;} &#8230; }
@@@

So:
1. Does the user want to change the project's name with id=10 to &quot;foo&quot;?
2. Do they want to change task.project_id to related to an existing project record with name=&quot;foo&quot;?
3. Or, do they want to create a new project record with name=&quot;foo&quot;?

In Rails 2.3.5, only the first case is supported. Rails executes this SQL statement:

@@@ sql
UPDATE projects set name = 'foo' where id = 10
@@@

Unfortunately, that renames the project for all tasks. Is this the intended behavior? If so, the documentation should be updated to explicitly state this (currently it doesn't say anything about belongs_to relationships).

Can the other cases be supported? Which would result in something like:

@@@ sql
SELECT * from projects where name = 'foo'
INSERT INTO projects (id, name) values (11, 'foo')
UPDATE tasks set project_id = 11 where id = 2
@@@

You can see the currently implemented behavior by downloading this example: http://github.com/alloy/complex-form-examples/tree</original-body>
  <latest-body>When using nested attributes with belongs_to, Rails only supports changing the related record rather than which record the object points to. Yes, that's confusing, so consider:

@@@ ruby
class Task &lt; ActiveRecord::Base
  belongs_to :project
  accepts_nested_attributes_for :project
end
@@@

Assume you also have a Task controller and task form with a nested attribute for project name. When you submit the form, the server receives:

@@@ ruby
&quot;task&quot;=&gt;{&quot;project_attributes&quot;=&gt;{&quot;name&quot;=&gt;&quot;foo&quot;, &quot;id&quot;=&gt;&quot;10&quot;} &#8230; }
@@@

So:
1. Does the user want to change the project's name with id=10 to &quot;foo&quot;?
2. Do they want to change task.project_id to related to an existing project record with name=&quot;foo&quot;?
3. Or, do they want to create a new project record with name=&quot;foo&quot;?

In Rails 2.3.5, only the first case is supported. Rails executes this SQL statement:

@@@ sql
UPDATE projects set name = 'foo' where id = 10
@@@

Unfortunately, that renames the project for all tasks. Is this the intended behavior? If so, the documentation should be updated to explicitly state this (currently it doesn't say anything about belongs_to relationships).

Can the other cases be supported? Which would result in something like:

@@@ sql
SELECT * from projects where name = 'foo'
INSERT INTO projects (id, name) values (11, 'foo')
UPDATE tasks set project_id = 11 where id = 2
@@@

You can see the currently implemented behavior by downloading this example: http://github.com/alloy/complex-form-examples/tree</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When using nested attributes with belongs_to, Rails only
supports changing the related record rather than which record the
object points to. Yes, that's confusing, so consider:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Task &amp;lt; ActiveRecord::Base
  belongs_to :project
  accepts_nested_attributes_for :project
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Assume you also have a Task controller and task form with a
nested attribute for project name. When you submit the form, the
server receives:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&quot;task&quot;=&amp;gt;{&quot;project_attributes&quot;=&amp;gt;{&quot;name&quot;=&amp;gt;&quot;foo&quot;, &quot;id&quot;=&amp;gt;&quot;10&quot;} &amp;hellip; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So:&lt;br&gt;
1. Does the user want to change the project's name with id=10 to
&quot;foo&quot;?&lt;br&gt;
2. Do they want to change task.project_id to related to an existing
project record with name=&quot;foo&quot;?&lt;br&gt;
3. Or, do they want to create a new project record with
name=&quot;foo&quot;?&lt;/p&gt;
&lt;p&gt;In Rails 2.3.5, only the first case is supported. Rails executes
this SQL statement:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;UPDATE projects set name = 'foo' where id = 10&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unfortunately, that renames the project for all tasks. Is this
the intended behavior? If so, the documentation should be updated
to explicitly state this (currently it doesn't say anything about
belongs_to relationships).&lt;/p&gt;
&lt;p&gt;Can the other cases be supported? Which would result in
something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;SELECT * from projects where name = 'foo'
INSERT INTO projects (id, name) values (11, 'foo')
UPDATE tasks set project_id = 11 where id = 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can see the currently implemented behavior by downloading
this example: &lt;a href=
&quot;http://github.com/alloy/complex-form-examples/tree&quot;&gt;http://github.com/alloy/complex-form-examples/tree&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When using nested attributes with belongs_to, Rails only supports changing the related record rather than which record the object points to. Yes, that's confusing, so consider:

@@@ ruby
class Task &lt; ActiveRecord::Base
  belongs_to :project
  accepts_nested_attributes_for :project
end
@@@

Assume you also have a Task controller and task form with a nested attribute for project name. When you submit the form, the server receives:

@@@ ruby
&quot;task&quot;=&gt;{&quot;project_attributes&quot;=&gt;{&quot;name&quot;=&gt;&quot;foo&quot;, &quot;id&quot;=&gt;&quot;10&quot;} &#8230; }
@@@

So:
1. Does the user want to change the project's name with id=10 to &quot;foo&quot;?
2. Do they want to change task.project_id to related to an existing project record with name=&quot;foo&quot;?
3. Or, do they want to create a new project record with name=&quot;foo&quot;?

In Rails 2.3.5, only the first case is supported. Rails executes this SQL statement:

@@@ sql
UPDATE projects set name = 'foo' where id = 10
@@@

Unfortunately, that renames the project for all tasks. Is this the intended behavior? If so, the documentation should be updated to explicitly state this (currently it doesn't say anything about belongs_to relationships).

Can the other cases be supported? Which would result in something like:

@@@ sql
SELECT * from projects where name = 'foo'
INSERT INTO projects (id, name) values (11, 'foo')
UPDATE tasks set project_id = 11 where id = 2
@@@

You can see the currently implemented behavior by downloading this example: http://github.com/alloy/complex-form-examples/tree</body>
      <body-html>&lt;div&gt;&lt;p&gt;When using nested attributes with belongs_to, Rails only
supports changing the related record rather than which record the
object points to. Yes, that's confusing, so consider:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Task &amp;lt; ActiveRecord::Base
  belongs_to :project
  accepts_nested_attributes_for :project
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Assume you also have a Task controller and task form with a
nested attribute for project name. When you submit the form, the
server receives:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&quot;task&quot;=&amp;gt;{&quot;project_attributes&quot;=&amp;gt;{&quot;name&quot;=&amp;gt;&quot;foo&quot;, &quot;id&quot;=&amp;gt;&quot;10&quot;} &amp;hellip; }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So:&lt;br&gt;
1. Does the user want to change the project's name with id=10 to
&quot;foo&quot;?&lt;br&gt;
2. Do they want to change task.project_id to related to an existing
project record with name=&quot;foo&quot;?&lt;br&gt;
3. Or, do they want to create a new project record with
name=&quot;foo&quot;?&lt;/p&gt;
&lt;p&gt;In Rails 2.3.5, only the first case is supported. Rails executes
this SQL statement:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;UPDATE projects set name = 'foo' where id = 10&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unfortunately, that renames the project for all tasks. Is this
the intended behavior? If so, the documentation should be updated
to explicitly state this (currently it doesn't say anything about
belongs_to relationships).&lt;/p&gt;
&lt;p&gt;Can the other cases be supported? Which would result in
something like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;sql&quot;&gt;SELECT * from projects where name = 'foo'
INSERT INTO projects (id, name) values (11, 'foo')
UPDATE tasks set project_id = 11 where id = 2&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can see the currently implemented behavior by downloading
this example: &lt;a href=
&quot;http://github.com/alloy/complex-form-examples/tree&quot;&gt;http://github.com/alloy/complex-form-examples/tree&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-12T23:08:34+00:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3687</number>
      <permalink>nested-attributes-with-belongs_to-only-supports-one-use-case</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>nested attributes with belongs_to only supports one use case</title>
      <updated-at type="datetime">2010-01-12T23:08:36+00:00</updated-at>
      <user-id type="integer">82451</user-id>
      <version type="integer">1</version>
      <user-name>Lyle</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3687</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not sure if there's a bug here - case 3 in your example can be done by dropping / removing the hidden id field, and I'm not sure what you're looking for in case 2. Normally, you'd handle cases like #2 by having a select attached to project_id (and/or nifty autocompleter stuff as needed).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure if there's a bug here - case 3 in your example can be
done by dropping / removing the hidden id field, and I'm not sure
what you're looking for in case 2. Normally, you'd handle cases
like &lt;a href=&quot;/projects/8994/tickets/2&quot; title=&quot;Ticket #2&quot;&gt;#2&lt;/a&gt; by
having a select attached to project_id (and/or nifty autocompleter
stuff as needed).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-13T01:38:06+00:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3687</number>
      <permalink>nested-attributes-with-belongs_to-only-supports-one-use-case</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>nested attributes with belongs_to only supports one use case</title>
      <updated-at type="datetime">2010-01-13T01:38:10+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3687</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I thought nested attributes did more for me than it does. If anything, can the documentation be updated to specifically state what happens when you submit the form? If an ID field is included, that record will be renamed (which affects all records that related to it). If an ID field is not included, a new record is created regardless if one exists already (so you may end up with duplicates).

I think a better example of this is a task that has one color:

@@@ ruby
class Task &lt; ActiveRecord::Base
  belongs_to :color
  accepts_nested_attributes_for :color
end
@@@

In the form, if color is a text_field and the user changes the name from &quot;red&quot; to &quot;green&quot;, the Color record with name=&quot;red&quot; becomes name=&quot;green&quot;. If Color includes an RGB attribute then after this update, &quot;green&quot; will have RGB(255,0,0) -- or RGB red.

If possible, the documentation should include a way to override this behavior -- if that's possible. So, if a developer can include a method in their model, like def color_attributes, to do their own update of the attributes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I thought nested attributes did more for me than it does. If
anything, can the documentation be updated to specifically state
what happens when you submit the form? If an ID field is included,
that record will be renamed (which affects all records that related
to it). If an ID field is not included, a new record is created
regardless if one exists already (so you may end up with
duplicates).&lt;/p&gt;
&lt;p&gt;I think a better example of this is a task that has one
color:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Task &amp;lt; ActiveRecord::Base
  belongs_to :color
  accepts_nested_attributes_for :color
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In the form, if color is a text_field and the user changes the
name from &quot;red&quot; to &quot;green&quot;, the Color record with name=&quot;red&quot;
becomes name=&quot;green&quot;. If Color includes an RGB attribute then after
this update, &quot;green&quot; will have RGB(255,0,0) -- or RGB red.&lt;/p&gt;
&lt;p&gt;If possible, the documentation should include a way to override
this behavior -- if that's possible. So, if a developer can include
a method in their model, like def color_attributes, to do their own
update of the attributes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-13T23:02:09+00:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3687</number>
      <permalink>nested-attributes-with-belongs_to-only-supports-one-use-case</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>nested attributes with belongs_to only supports one use case</title>
      <updated-at type="datetime">2010-01-13T23:02:11+00:00</updated-at>
      <user-id type="integer">82451</user-id>
      <version type="integer">3</version>
      <user-name>Lyle</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3687</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't think this was the intended purpose of accepts_nested_attributes_for.
The idea is to allow you to edit associated record values or add new associated records.

If Task belongs_to Project, it only makes sense to use accepts_nested_attributes_for if you want to be able to modify the Project when editing the Task.

The documentation could be clearer. You should submit a patch (it's not hard to learn how, and contributing can be very rewarding).

The docs could mention that using an existing primary key value in the attributes hash indicates you are referencing an existing record (and that otherwise a new one will be created).</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think this was the intended purpose of
accepts_nested_attributes_for.&lt;br&gt;
The idea is to allow you to edit associated record values or add
new associated records.&lt;/p&gt;
&lt;p&gt;If Task belongs_to Project, it only makes sense to use
accepts_nested_attributes_for if you want to be able to modify the
Project when editing the Task.&lt;/p&gt;
&lt;p&gt;The documentation could be clearer. You should submit a patch
(it's not hard to learn how, and contributing can be very
rewarding).&lt;/p&gt;
&lt;p&gt;The docs could mention that using an existing primary key value
in the attributes hash indicates you are referencing an existing
record (and that otherwise a new one will be created).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-14T05:24:49+00:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3687</number>
      <permalink>nested-attributes-with-belongs_to-only-supports-one-use-case</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>nested attributes with belongs_to only supports one use case</title>
      <updated-at type="datetime">2010-01-14T05:24:52+00:00</updated-at>
      <user-id type="integer">71354</user-id>
      <version type="integer">4</version>
      <user-name>Daniel Heath</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3687</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please submit a patch if the documentation is still confusing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please submit a patch if the documentation is still
confusing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-12T03:17:37+01:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3687</number>
      <permalink>nested-attributes-with-belongs_to-only-supports-one-use-case</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>nested attributes with belongs_to only supports one use case</title>
      <updated-at type="datetime">2010-06-12T03:17:40+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">5</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3687</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Anyone can update documentation at http://github.com/lifo/docrails .</body>
      <body-html>&lt;div&gt;&lt;p&gt;Anyone can update documentation at &lt;a href=
&quot;http://github.com/lifo/docrails&quot;&gt;http://github.com/lifo/docrails&lt;/a&gt;
.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-29T14:21:54+01:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3687</number>
      <permalink>nested-attributes-with-belongs_to-only-supports-one-use-case</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>nested attributes with belongs_to only supports one use case</title>
      <updated-at type="datetime">2010-07-29T14:21:55+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3687</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
