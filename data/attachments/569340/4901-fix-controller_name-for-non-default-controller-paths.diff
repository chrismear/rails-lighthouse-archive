From 271558afb8ea3bc825ed7fd135452c28666930eb Mon Sep 17 00:00:00 2001
From: knapo <knapo@knapo.net>
Date: Tue, 22 Jun 2010 20:47:31 +0200
Subject: [PATCH] Fix controller_name for non default controller paths

---
 actionpack/lib/action_controller/metal.rb        |    2 +-
 actionpack/test/controller/new_base/base_test.rb |   38 ++++++++++++++++++++++
 2 files changed, 39 insertions(+), 1 deletions(-)

diff --git a/actionpack/lib/action_controller/metal.rb b/actionpack/lib/action_controller/metal.rb
index 159d1f0..2281c50 100644
--- a/actionpack/lib/action_controller/metal.rb
+++ b/actionpack/lib/action_controller/metal.rb
@@ -61,7 +61,7 @@ module ActionController
     # ==== Returns
     # String
     def self.controller_name
-      @controller_name ||= controller_path.split("/").last
+      @controller_name ||= self.name.demodulize.sub(/Controller$/, '').underscore
     end
 
     # Delegates to the class' #controller_name
diff --git a/actionpack/test/controller/new_base/base_test.rb b/actionpack/test/controller/new_base/base_test.rb
index 0b40f8c..8fa5d20 100644
--- a/actionpack/test/controller/new_base/base_test.rb
+++ b/actionpack/test/controller/new_base/base_test.rb
@@ -31,9 +31,17 @@ module Dispatching
   end
 
   class EmptyController < ActionController::Base ; end
+  class SubEmptyController < EmptyController ; end
+  class NonDefaultPathController < ActionController::Base
+    def self.controller_path; "i_am_not_default"; end
+  end
 
   module Submodule
     class ContainedEmptyController < ActionController::Base ; end
+    class ContainedSubEmptyController < ContainedEmptyController ; end
+    class ContainedNonDefaultPathController < ActionController::Base
+      def self.controller_path; "i_am_extremly_not_default"; end
+    end
   end
 
   class BaseTest < Rack::TestCase
@@ -65,16 +73,46 @@ module Dispatching
       assert_equal EmptyController.controller_path, EmptyController.new.controller_path
     end
 
+    test "non-default controller path" do
+      assert_equal 'i_am_not_default', NonDefaultPathController.controller_path
+      assert_equal NonDefaultPathController.controller_path, NonDefaultPathController.new.controller_path
+    end
+
+    test "sub controller path" do
+      assert_equal 'dispatching/sub_empty', SubEmptyController.controller_path
+      assert_equal SubEmptyController.controller_path, SubEmptyController.new.controller_path
+    end
+
     test "namespaced controller path" do
       assert_equal 'dispatching/submodule/contained_empty', Submodule::ContainedEmptyController.controller_path
       assert_equal Submodule::ContainedEmptyController.controller_path, Submodule::ContainedEmptyController.new.controller_path
     end
 
+    test "namespaced non-default controller path" do
+      assert_equal 'i_am_extremly_not_default', Submodule::ContainedNonDefaultPathController.controller_path
+      assert_equal Submodule::ContainedNonDefaultPathController.controller_path, Submodule::ContainedNonDefaultPathController.new.controller_path
+    end
+
+    test "namespaced sub controller path" do
+      assert_equal 'dispatching/submodule/contained_sub_empty', Submodule::ContainedSubEmptyController.controller_path
+      assert_equal Submodule::ContainedSubEmptyController.controller_path, Submodule::ContainedSubEmptyController.new.controller_path
+    end
+
     test "controller name" do
       assert_equal 'empty', EmptyController.controller_name
       assert_equal 'contained_empty', Submodule::ContainedEmptyController.controller_name
     end
 
+    test "non-default path controller name" do
+      assert_equal 'non_default_path', NonDefaultPathController.controller_name
+      assert_equal 'contained_non_default_path', Submodule::ContainedNonDefaultPathController.controller_name
+    end
+
+    test "sub controller name" do
+      assert_equal 'sub_empty', SubEmptyController.controller_name
+      assert_equal 'contained_sub_empty', Submodule::ContainedSubEmptyController.controller_name
+    end
+
     test "action methods" do
       assert_equal Set.new(%w(
         index
-- 
1.6.3.3

