<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-06-24T21:56:32+01:00</created-at>
  <creator-id type="integer">95149</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4960</number>
  <permalink>scopes-cached-in-production-mode</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
  <title>Scopes cached in production mode</title>
  <updated-at type="datetime">2010-10-15T23:01:57+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">9</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Caleb Perkins</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>In Rails 3 beta 4....

@@@
class Auction &lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &lt;= ?&quot;, Time.now) } # same problem if I use proc instead of lambda
end

@@@

If I start the server in production mode and create with an auction with the current starting time, the auction does not appear when I call &quot;Auction.started&quot;. It seems Time.now in the scope is evaluated when the server is started and used for all further calls. In development mode the scope seems to return the proper results. Are there any workarounds?</original-body>
  <latest-body>In Rails 3 beta 4....

@@@
class Auction &lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &lt;= ?&quot;, Time.now) } # same problem if I use proc instead of lambda
end

@@@

If I start the server in production mode and create with an auction with the current starting time, the auction does not appear when I call &quot;Auction.started&quot;. It seems Time.now in the scope is evaluated when the server is started and used for all further calls. In development mode the scope seems to return the proper results. Are there any workarounds?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In Rails 3 beta 4....&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auction &amp;lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &amp;lt;= ?&quot;, Time.now) } # same problem if I use proc instead of lambda
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I start the server in production mode and create with an
auction with the current starting time, the auction does not appear
when I call &quot;Auction.started&quot;. It seems Time.now in the scope is
evaluated when the server is started and used for all further
calls. In development mode the scope seems to return the proper
results. Are there any workarounds?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In Rails 3 beta 4....

@@@
class Auction &lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &lt;= ?&quot;, Time.now) } # same problem if I use proc instead of lambda
end

@@@

If I start the server in production mode and create with an auction with the current starting time, the auction does not appear when I call &quot;Auction.started&quot;. It seems Time.now in the scope is evaluated when the server is started and used for all further calls. In development mode the scope seems to return the proper results. Are there any workarounds?</body>
      <body-html>&lt;div&gt;&lt;p&gt;In Rails 3 beta 4....&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auction &amp;lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &amp;lt;= ?&quot;, Time.now) } # same problem if I use proc instead of lambda
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I start the server in production mode and create with an
auction with the current starting time, the auction does not appear
when I call &quot;Auction.started&quot;. It seems Time.now in the scope is
evaluated when the server is started and used for all further
calls. In development mode the scope seems to return the proper
results. Are there any workarounds?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-24T21:56:32+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-06-24T21:56:36+01:00</updated-at>
      <user-id type="integer">95149</user-id>
      <version type="integer">1</version>
      <user-name>Caleb Perkins</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ticket #4708 has same issue. I fixed that issue by not caching the arguments. That patch never got picked up. However Pratik did patch the code by caching the arguments.

I am working on a patch for this ticket.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ticket &lt;a href=&quot;/projects/8994/tickets/4708&quot; title=
&quot;Ticket #4708&quot;&gt;#4708&lt;/a&gt; has same issue. I fixed that issue by not
caching the arguments. That patch never got picked up. However
Pratik did patch the code by caching the arguments.&lt;/p&gt;
&lt;p&gt;I am working on a patch for this ticket.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-24T22:50:40+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-06-24T22:51:14+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@Caleb in script/console in production mode I am getting new value every single time.

@@@ ruby

class User &lt; ActiveRecord::Base
  scope :recent, lambda { where(&quot;created_at &lt;= ?&quot;, Time.now) }
end

ruby-1.8.7-p249 &gt; User.recent
  User Load (0.3ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &lt;= '2010-06-24 21:55:06.057378')
 =&gt; [] 
ruby-1.8.7-p249 &gt; User.recent
  User Load (0.3ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &lt;= '2010-06-24 21:55:07.225097')
 =&gt; [] 
ruby-1.8.7-p249 &gt; User.recent
  User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &lt;= '2010-06-24 21:55:07.792841')
 =&gt; [] 

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Caleb in script/console in production mode I am getting new
value every single time.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base
  scope :recent, lambda { where(&quot;created_at &amp;lt;= ?&quot;, Time.now) }
end

ruby-1.8.7-p249 &amp;gt; User.recent
  User Load (0.3ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &amp;lt;= '2010-06-24 21:55:06.057378')
 =&amp;gt; [] 
ruby-1.8.7-p249 &amp;gt; User.recent
  User Load (0.3ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &amp;lt;= '2010-06-24 21:55:07.225097')
 =&amp;gt; [] 
ruby-1.8.7-p249 &amp;gt; User.recent
  User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &amp;lt;= '2010-06-24 21:55:07.792841')
 =&amp;gt; []&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-24T22:56:14+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-06-24T22:56:18+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">3</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, in console mode you get the correct values. However, if you put the code in your controller and use a web server, you do not.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, in console mode you get the correct values. However, if you
put the code in your controller and use a web server, you do
not.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-25T01:23:05+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-06-25T01:23:14+01:00</updated-at>
      <user-id type="integer">95149</user-id>
      <version type="integer">4</version>
      <user-name>Caleb Perkins</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is my code for rail3 app.

@@@ ruby
class User &lt; ActiveRecord::Base
  scope :recent, lambda { where(&quot;created_at &lt;= ?&quot;, Time.now) }
end

def index
   User.recent.all.inspect
   User.recent.all.inspect
   render :text =&gt; 'done'
end
@@@ 

I changed the log settings for production mode to see sql statement.
I started server in production mode. This is the sql statements I got.

@@@ ruby
User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &lt;= '2010-06-25 01:15:31.495205')
User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &lt;= '2010-06-25 01:15:31.510747')
@@@

When I refresh the page I get this sql

@@@ ruby
User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &lt;= '2010-06-25 01:15:39.042884')
User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &lt;= '2010-06-25 01:15:39.044806')
@@@

Could it be possible that some other gem/plugin is interfering with the behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is my code for rail3 app.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  scope :recent, lambda { where(&quot;created_at &amp;lt;= ?&quot;, Time.now) }
end

def index
   User.recent.all.inspect
   User.recent.all.inspect
   render :text =&amp;gt; 'done'
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I changed the log settings for production mode to see sql
statement.&lt;br&gt;
I started server in production mode. This is the sql statements I
got.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &amp;lt;= '2010-06-25 01:15:31.495205')
User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &amp;lt;= '2010-06-25 01:15:31.510747')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When I refresh the page I get this sql&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &amp;lt;= '2010-06-25 01:15:39.042884')
User Load (0.2ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE (created_at &amp;lt;= '2010-06-25 01:15:39.044806')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Could it be possible that some other gem/plugin is interfering
with the behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-25T02:19:52+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-06-25T02:20:01+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">5</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I must apologize; the code snippet I posted wasn't the line not working properly. I have found the source of the issue, after disabling all Gems/plugins. The problem is in chaining scopes. 

In the following code, Auction.active returns new results depending on the time:
@@@
class Auction &lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &lt;= ?&quot;, Time.now) }
  scope :unfinished, lambda { where(&quot;ending_at &gt; ?&quot;, Time.now) }
  scope :active, lambda {where(&quot;ending_at &gt; ?&quot;, Time.now).where(&quot;starting_at &lt;= ?&quot;, Time.now) }
end
@@@

However, in this code the result of Auction.active is the same from server start:

@@@
class Auction &lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &lt;= ?&quot;, Time.now) }
  scope :unfinished, lambda { where(&quot;ending_at &gt; ?&quot;, Time.now) }
  scope :active, started.unfinished
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I must apologize; the code snippet I posted wasn't the line not
working properly. I have found the source of the issue, after
disabling all Gems/plugins. The problem is in chaining scopes.&lt;/p&gt;
&lt;p&gt;In the following code, Auction.active returns new results
depending on the time:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auction &amp;lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &amp;lt;= ?&quot;, Time.now) }
  scope :unfinished, lambda { where(&quot;ending_at &amp;gt; ?&quot;, Time.now) }
  scope :active, lambda {where(&quot;ending_at &amp;gt; ?&quot;, Time.now).where(&quot;starting_at &amp;lt;= ?&quot;, Time.now) }
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, in this code the result of Auction.active is the same
from server start:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Auction &amp;lt; ActiveRecord::Base
  scope :started, lambda { where(&quot;starting_at &amp;lt;= ?&quot;, Time.now) }
  scope :unfinished, lambda { where(&quot;ending_at &amp;gt; ?&quot;, Time.now) }
  scope :active, started.unfinished
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-25T06:54:15+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-06-25T06:54:24+01:00</updated-at>
      <user-id type="integer">95149</user-id>
      <version type="integer">6</version>
      <user-name>Caleb Perkins</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I did not even know what one could do something like that -- define a scope which in turn depends on other scope.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I did not even know what one could do something like that --
define a scope which in turn depends on other scope.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-25T16:27:43+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-06-25T16:27:50+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">7</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You can chain scopes, but they will be evaluated at the moment you call them. That said, when you call started, it will execute the lambda, so it will have a frozen Time.now. In other words, chaining lambda scopes will likely give you the wrong result.

You need to wrap the scope :active in a lambda as well.

    scope :active, lambda { started.unfinished }</body>
      <body-html>&lt;div&gt;&lt;p&gt;You can chain scopes, but they will be evaluated at the moment
you call them. That said, when you call started, it will execute
the lambda, so it will have a frozen Time.now. In other words,
chaining lambda scopes will likely give you the wrong result.&lt;/p&gt;
&lt;p&gt;You need to wrap the scope :active in a lambda as well.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;scope :active, lambda { started.unfinished }&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-13T19:30:18+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-07-13T19:30:21+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">8</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:57+01:00</created-at>
      <creator-id type="integer">95149</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4960</number>
      <permalink>scopes-cached-in-production-mode</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;rails 3.0.0.beta4&quot; scope</tag>
      <title>Scopes cached in production mode</title>
      <updated-at type="datetime">2010-10-15T23:01:57+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">9</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Caleb Perkins</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4960</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
