<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-13T20:20:23+00:00</created-at>
  <creator-id type="integer">141131</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6569</number>
  <permalink>collection_singular_ids-ignores-association-include-option</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>collection_singular_ids ignores association :include option</title>
  <updated-at type="datetime">2011-04-03T12:46:11+01:00</updated-at>
  <user-id type="integer">87216</user-id>
  <version type="integer">4</version>
  <user-name>Anatoliy Lysenko</user-name>
  <creator-name>rob g</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6569</url>
  <priority-name>Low</priority-name>
  <original-body>We have a set of models similar to the following:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :taggings, :include =&gt; :tag, :order =&gt; 'tags.name'
end

class Tagging &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :tag
end

class Tag &lt; ActiveRecord::Base
  has_many :taggings
end
@@@

When attempting to get the set of tagging_ids:

`User.first.tagging_ids`

we get a StatementInvalid error

@@@
     ActiveRecord::StatementInvalid:
       Mysql2::Error: Unknown column 'tags.name' in 'order clause': SELECT `taggings`.id FROM `taggings` WHERE (`taggings`.user_id = 227792459) ORDER BY tags.name
@@@

I think I've tracked this to https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1510 :

@@@ ruby
          redefine_method(&quot;#{reflection.name.to_s.singularize}_ids&quot;) do
            if send(reflection.name).loaded? || reflection.options[:finder_sql]
              send(reflection.name).map { |r| r.id }
            else
              if reflection.through_reflection &amp;&amp; reflection.source_reflection.belongs_to?
                through = reflection.through_reflection
                primary_key = reflection.source_reflection.primary_key_name
                send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }
              else
                send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes).map! { |r| r.id } # &lt;===================
              end
            end
          end
@@@

I've tried both removing the call to `except(:includes)` from line 1510 as well as expanding the exceptions to include the association order:

@@@ ruby
  send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes, :order).map! { |r| r.id } 

@@@

and either approach will result in valid SQL.  Obviously, the latter approach generates a more performant query but the ids returned will no longer be in the order specified on the association which seems to be a reasonable tradeoff.</original-body>
  <latest-body>We have a set of models similar to the following:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :taggings, :include =&gt; :tag, :order =&gt; 'tags.name'
end

class Tagging &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :tag
end

class Tag &lt; ActiveRecord::Base
  has_many :taggings
end
@@@

When attempting to get the set of tagging_ids:

`User.first.tagging_ids`

we get a StatementInvalid error

@@@
     ActiveRecord::StatementInvalid:
       Mysql2::Error: Unknown column 'tags.name' in 'order clause': SELECT `taggings`.id FROM `taggings` WHERE (`taggings`.user_id = 227792459) ORDER BY tags.name
@@@

I think I've tracked this to https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1510 :

@@@ ruby
          redefine_method(&quot;#{reflection.name.to_s.singularize}_ids&quot;) do
            if send(reflection.name).loaded? || reflection.options[:finder_sql]
              send(reflection.name).map { |r| r.id }
            else
              if reflection.through_reflection &amp;&amp; reflection.source_reflection.belongs_to?
                through = reflection.through_reflection
                primary_key = reflection.source_reflection.primary_key_name
                send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }
              else
                send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes).map! { |r| r.id } # &lt;===================
              end
            end
          end
@@@

I've tried both removing the call to `except(:includes)` from line 1510 as well as expanding the exceptions to include the association order:

@@@ ruby
  send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes, :order).map! { |r| r.id } 

@@@

and either approach will result in valid SQL.  Obviously, the latter approach generates a more performant query but the ids returned will no longer be in the order specified on the association which seems to be a reasonable tradeoff.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;We have a set of models similar to the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :taggings, :include =&amp;gt; :tag, :order =&amp;gt; 'tags.name'
end

class Tagging &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :tag
end

class Tag &amp;lt; ActiveRecord::Base
  has_many :taggings
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When attempting to get the set of tagging_ids:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User.first.tagging_ids&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;we get a StatementInvalid error&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     ActiveRecord::StatementInvalid:
       Mysql2::Error: Unknown column 'tags.name' in 'order clause': SELECT `taggings`.id FROM `taggings` WHERE (`taggings`.user_id = 227792459) ORDER BY tags.name&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think I've tracked this to &lt;a href=
&quot;https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1510&quot;&gt;
https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/act...&lt;/a&gt;
:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;          redefine_method(&quot;#{reflection.name.to_s.singularize}_ids&quot;) do
            if send(reflection.name).loaded? || reflection.options[:finder_sql]
              send(reflection.name).map { |r| r.id }
            else
              if reflection.through_reflection &amp;amp;&amp;amp; reflection.source_reflection.belongs_to?
                through = reflection.through_reflection
                primary_key = reflection.source_reflection.primary_key_name
                send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }
              else
                send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes).map! { |r| r.id } # &amp;lt;===================
              end
            end
          end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've tried both removing the call to
&lt;code&gt;except(:includes)&lt;/code&gt; from line 1510 as well as expanding
the exceptions to include the association order:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes, :order).map! { |r| r.id }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and either approach will result in valid SQL. Obviously, the
latter approach generates a more performant query but the ids
returned will no longer be in the order specified on the
association which seems to be a reasonable tradeoff.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We have a set of models similar to the following:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :taggings, :include =&gt; :tag, :order =&gt; 'tags.name'
end

class Tagging &lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :tag
end

class Tag &lt; ActiveRecord::Base
  has_many :taggings
end
@@@

When attempting to get the set of tagging_ids:

`User.first.tagging_ids`

we get a StatementInvalid error

@@@
     ActiveRecord::StatementInvalid:
       Mysql2::Error: Unknown column 'tags.name' in 'order clause': SELECT `taggings`.id FROM `taggings` WHERE (`taggings`.user_id = 227792459) ORDER BY tags.name
@@@

I think I've tracked this to https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1510 :

@@@ ruby
          redefine_method(&quot;#{reflection.name.to_s.singularize}_ids&quot;) do
            if send(reflection.name).loaded? || reflection.options[:finder_sql]
              send(reflection.name).map { |r| r.id }
            else
              if reflection.through_reflection &amp;&amp; reflection.source_reflection.belongs_to?
                through = reflection.through_reflection
                primary_key = reflection.source_reflection.primary_key_name
                send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }
              else
                send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes).map! { |r| r.id } # &lt;===================
              end
            end
          end
@@@

I've tried both removing the call to `except(:includes)` from line 1510 as well as expanding the exceptions to include the association order:

@@@ ruby
  send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes, :order).map! { |r| r.id } 

@@@

and either approach will result in valid SQL.  Obviously, the latter approach generates a more performant query but the ids returned will no longer be in the order specified on the association which seems to be a reasonable tradeoff.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We have a set of models similar to the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :taggings, :include =&amp;gt; :tag, :order =&amp;gt; 'tags.name'
end

class Tagging &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :tag
end

class Tag &amp;lt; ActiveRecord::Base
  has_many :taggings
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When attempting to get the set of tagging_ids:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User.first.tagging_ids&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;we get a StatementInvalid error&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     ActiveRecord::StatementInvalid:
       Mysql2::Error: Unknown column 'tags.name' in 'order clause': SELECT `taggings`.id FROM `taggings` WHERE (`taggings`.user_id = 227792459) ORDER BY tags.name&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think I've tracked this to &lt;a href=
&quot;https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/active_record/associations.rb#L1510&quot;&gt;
https://github.com/rails/rails/blob/3-0-stable/activerecord/lib/act...&lt;/a&gt;
:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;          redefine_method(&quot;#{reflection.name.to_s.singularize}_ids&quot;) do
            if send(reflection.name).loaded? || reflection.options[:finder_sql]
              send(reflection.name).map { |r| r.id }
            else
              if reflection.through_reflection &amp;amp;&amp;amp; reflection.source_reflection.belongs_to?
                through = reflection.through_reflection
                primary_key = reflection.source_reflection.primary_key_name
                send(through.name).select(&quot;DISTINCT #{through.quoted_table_name}.#{primary_key}&quot;).map! { |r| r.send(primary_key) }
              else
                send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes).map! { |r| r.id } # &amp;lt;===================
              end
            end
          end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've tried both removing the call to
&lt;code&gt;except(:includes)&lt;/code&gt; from line 1510 as well as expanding
the exceptions to include the association order:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  send(reflection.name).select(&quot;#{reflection.quoted_table_name}.#{reflection.klass.primary_key}&quot;).except(:includes, :order).map! { |r| r.id }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and either approach will result in valid SQL. Obviously, the
latter approach generates a more performant query but the ids
returned will no longer be in the order specified on the
association which seems to be a reasonable tradeoff.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-13T20:20:23+00:00</created-at>
      <creator-id type="integer">141131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6569</number>
      <permalink>collection_singular_ids-ignores-association-include-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>collection_singular_ids ignores association :include option</title>
      <updated-at type="datetime">2011-03-13T20:20:24+00:00</updated-at>
      <user-id type="integer">141131</user-id>
      <version type="integer">1</version>
      <user-name>rob g</user-name>
      <creator-name>rob g</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6569</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I created simple test for this bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I created simple test for this bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-27T14:56:16+01:00</created-at>
      <creator-id type="integer">141131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6569</number>
      <permalink>collection_singular_ids-ignores-association-include-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>collection_singular_ids ignores association :include option</title>
      <updated-at type="datetime">2011-03-27T14:56:20+01:00</updated-at>
      <user-id type="integer">87216</user-id>
      <version type="integer">2</version>
      <user-name>Anatoliy Lysenko</user-name>
      <creator-name>rob g</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6569</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-28T23:55:55+01:00</created-at>
      <creator-id type="integer">141131</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6569</number>
      <permalink>collection_singular_ids-ignores-association-include-option</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>collection_singular_ids ignores association :include option</title>
      <updated-at type="datetime">2011-03-28T23:56:09+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">3</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>rob g</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6569</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Rob was right, 
This commit will revert fix from https://github.com/rails/rails/commit/3436fdfc12d58925e3d981e0afa61084ea34736c , but tests is ok.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rob was right,&lt;br&gt;
This commit will revert fix from &lt;a href=
&quot;https://github.com/rails/rails/commit/3436fdfc12d58925e3d981e0afa61084ea34736c&quot;&gt;
https://github.com/rails/rails/commit/3436fdfc12d58925e3d981e0afa61...&lt;/a&gt;
, but tests is ok.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-03T12:45:56+01:00</created-at>
      <creator-id type="integer">141131</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6569</number>
      <permalink>collection_singular_ids-ignores-association-include-option</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>collection_singular_ids ignores association :include option</title>
      <updated-at type="datetime">2011-04-03T12:46:11+01:00</updated-at>
      <user-id type="integer">87216</user-id>
      <version type="integer">4</version>
      <user-name>Anatoliy Lysenko</user-name>
      <creator-name>rob g</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6569</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>cfff438efb6dbfb4bd5d7595481a0014c4988774</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-27T14:56:16+01:00</created-at>
      <filename>0001-added-test-for-get-has-man.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">979818</id>
      <size type="integer">1602</size>
      <uploader-id type="integer">87216</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/979818/0001-added-test-for-get-has-man.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>02ad4b8c8c07bbdf5fadaabed2612f9ee6c97589</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-04-03T12:45:57+01:00</created-at>
      <filename>0002-fix-bug-in-collection_sing.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">991929</id>
      <size type="integer">1276</size>
      <uploader-id type="integer">87216</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/991929/0002-fix-bug-in-collection_sing.patch</url>
    </attachment>
  </attachments>
</ticket>
