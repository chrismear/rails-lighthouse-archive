<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-01-07T17:37:35+00:00</created-at>
  <creator-id type="integer">81875</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3667</number>
  <permalink>array-of-records-from-activerecord-association-does-not-behave-as-expected</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord associations habtm</tag>
  <title>Array of records from ActiveRecord Association does not behave as expected</title>
  <updated-at type="datetime">2010-10-07T05:21:20+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">5</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Kent T</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3667</url>
  <priority-name nil="true"></priority-name>
  <original-body>From my limited experience and knowledge of Ruby on Rails, it appears that an Array can perform just like an association array when it is created from an array of associated records. 
Take the following example. (Though this is simple, it illustrates the point.)

&lt;pre&gt;&lt;code&gt;
Project has_and_belongs_to_many Contracts
Contract has_and_belongs_to_many Projects

@record = Project.first
all_contracts = @record.contracts
@cts = Contracts.find(:all, :limit=&gt;5)

@cts.each do |c|
  all_contracts &lt;&lt; c
end
&lt;/code&gt;&lt;/pre&gt;

Every record that is added to the all_contracts array is actually added to the @record.contracts association.  It performs like I had called @record.contracts &lt;&lt; c 
In the console I can even see the records being inserted into the database.

My solution was like this:

&lt;pre&gt;&lt;code&gt;
@record = Project.first
all_contracts = Array.new()
all_contracts = all_contracts | @record.contracts
@cts = Contracts.find(:all, :limit=&gt;5)

@cts.each do |c|
  all_contracts &lt;&lt; c
end
&lt;/code&gt;&lt;/pre&gt;

My solution does not create any join records.

Is this a feature or a bug?  Did I miss some documentation some where to this effect?</original-body>
  <latest-body>From my limited experience and knowledge of Ruby on Rails, it appears that an Array can perform just like an association array when it is created from an array of associated records. 
Take the following example. (Though this is simple, it illustrates the point.)

&lt;pre&gt;&lt;code&gt;
Project has_and_belongs_to_many Contracts
Contract has_and_belongs_to_many Projects

@record = Project.first
all_contracts = @record.contracts
@cts = Contracts.find(:all, :limit=&gt;5)

@cts.each do |c|
  all_contracts &lt;&lt; c
end
&lt;/code&gt;&lt;/pre&gt;

Every record that is added to the all_contracts array is actually added to the @record.contracts association.  It performs like I had called @record.contracts &lt;&lt; c 
In the console I can even see the records being inserted into the database.

My solution was like this:

&lt;pre&gt;&lt;code&gt;
@record = Project.first
all_contracts = Array.new()
all_contracts = all_contracts | @record.contracts
@cts = Contracts.find(:all, :limit=&gt;5)

@cts.each do |c|
  all_contracts &lt;&lt; c
end
&lt;/code&gt;&lt;/pre&gt;

My solution does not create any join records.

Is this a feature or a bug?  Did I miss some documentation some where to this effect?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;From my limited experience and knowledge of Ruby on Rails, it
appears that an Array can perform just like an association array
when it is created from an array of associated records.&lt;br&gt;
Take the following example. (Though this is simple, it illustrates
the point.)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
Project has_and_belongs_to_many Contracts
Contract has_and_belongs_to_many Projects

@record = Project.first
all_contracts = @record.contracts
@cts = Contracts.find(:all, :limit=&amp;gt;5)

@cts.each do |c|
  all_contracts &amp;lt;&amp;lt; c
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Every record that is added to the all_contracts array is
actually added to the @record.contracts association. It performs
like I had called @record.contracts &amp;lt;&amp;lt; c&lt;br&gt;
In the console I can even see the records being inserted into the
database.&lt;/p&gt;
&lt;p&gt;My solution was like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
@record = Project.first
all_contracts = Array.new()
all_contracts = all_contracts | @record.contracts
@cts = Contracts.find(:all, :limit=&amp;gt;5)

@cts.each do |c|
  all_contracts &amp;lt;&amp;lt; c
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My solution does not create any join records.&lt;/p&gt;
&lt;p&gt;Is this a feature or a bug? Did I miss some documentation some
where to this effect?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>From my limited experience and knowledge of Ruby on Rails, it appears that an Array can perform just like an association array when it is created from an array of associated records. 
Take the following example. (Though this is simple, it illustrates the point.)

&lt;pre&gt;&lt;code&gt;
Project has_and_belongs_to_many Contracts
Contract has_and_belongs_to_many Projects

@record = Project.first
all_contracts = @record.contracts
@cts = Contracts.find(:all, :limit=&gt;5)

@cts.each do |c|
  all_contracts &lt;&lt; c
end
&lt;/code&gt;&lt;/pre&gt;

Every record that is added to the all_contracts array is actually added to the @record.contracts association.  It performs like I had called @record.contracts &lt;&lt; c 
In the console I can even see the records being inserted into the database.

My solution was like this:

&lt;pre&gt;&lt;code&gt;
@record = Project.first
all_contracts = Array.new()
all_contracts = all_contracts | @record.contracts
@cts = Contracts.find(:all, :limit=&gt;5)

@cts.each do |c|
  all_contracts &lt;&lt; c
end
&lt;/code&gt;&lt;/pre&gt;

My solution does not create any join records.

Is this a feature or a bug?  Did I miss some documentation some where to this effect?</body>
      <body-html>&lt;div&gt;&lt;p&gt;From my limited experience and knowledge of Ruby on Rails, it
appears that an Array can perform just like an association array
when it is created from an array of associated records.&lt;br&gt;
Take the following example. (Though this is simple, it illustrates
the point.)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
Project has_and_belongs_to_many Contracts
Contract has_and_belongs_to_many Projects

@record = Project.first
all_contracts = @record.contracts
@cts = Contracts.find(:all, :limit=&amp;gt;5)

@cts.each do |c|
  all_contracts &amp;lt;&amp;lt; c
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Every record that is added to the all_contracts array is
actually added to the @record.contracts association. It performs
like I had called @record.contracts &amp;lt;&amp;lt; c&lt;br&gt;
In the console I can even see the records being inserted into the
database.&lt;/p&gt;
&lt;p&gt;My solution was like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
@record = Project.first
all_contracts = Array.new()
all_contracts = all_contracts | @record.contracts
@cts = Contracts.find(:all, :limit=&amp;gt;5)

@cts.each do |c|
  all_contracts &amp;lt;&amp;lt; c
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My solution does not create any join records.&lt;/p&gt;
&lt;p&gt;Is this a feature or a bug? Did I miss some documentation some
where to this effect?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T17:37:35+00:00</created-at>
      <creator-id type="integer">81875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3667</number>
      <permalink>array-of-records-from-activerecord-association-does-not-behave-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord associations&quot; habtm</tag>
      <title>Array of records from ActiveRecord Association does not behave as expected</title>
      <updated-at type="datetime">2010-01-07T18:21:16+00:00</updated-at>
      <user-id type="integer">81875</user-id>
      <version type="integer">1</version>
      <user-name>Kent T</user-name>
      <creator-name>Kent T</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3667</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This behavior is by design - @record.contracts doesn't actually return an Array, but an instance of AssociationCollection that mostly pretends to be an array. This lets you do things like:

@@@ ruby 
@record.contracts.exists?(@some_contract)
@@@

which does a specific SQL query if `@record.contracts` isn't loaded yet, avoiding that database overhead. It also permits you to chain named scopes onto an association (`@record.contracts.some_scope`) and build/create associated records (with `@record.contracts.build`, etc.).

If you really want to remove all the magic, `@record.contracts.to_a` will do what you're looking for.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This behavior is by design - @record.contracts doesn't actually
return an Array, but an instance of AssociationCollection that
mostly pretends to be an array. This lets you do things like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@record.contracts.exists?(@some_contract)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;which does a specific SQL query if
&lt;code&gt;@record.contracts&lt;/code&gt; isn't loaded yet, avoiding that
database overhead. It also permits you to chain named scopes onto
an association (&lt;code&gt;@record.contracts.some_scope&lt;/code&gt;) and
build/create associated records (with
&lt;code&gt;@record.contracts.build&lt;/code&gt;, etc.).&lt;/p&gt;
&lt;p&gt;If you really want to remove all the magic,
&lt;code&gt;@record.contracts.to_a&lt;/code&gt; will do what you're looking
for.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-07T19:04:20+00:00</created-at>
      <creator-id type="integer">81875</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3667</number>
      <permalink>array-of-records-from-activerecord-association-does-not-behave-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord associations&quot; habtm</tag>
      <title>Array of records from ActiveRecord Association does not behave as expected</title>
      <updated-at type="datetime">2010-01-07T19:04:22+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Kent T</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3667</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't wish to remove any of the magic of @record.contracts.
However, when I instantiate an array from @record.contracts, should the array be an Array or an instance of AssociationCollection?

Example 

all_contracts = @record.contracts

all_contracts would be an array

@record.contracts would be an instance of AssociationCollection

Interestingly enough, when I printed the class of all_contracts it shows as an array, but it behaves like AssociationCollection.  This is what I don't understand.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't wish to remove any of the magic of
@record.contracts.&lt;br&gt;
However, when I instantiate an array from @record.contracts, should
the array be an Array or an instance of AssociationCollection?&lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;p&gt;all_contracts = @record.contracts&lt;/p&gt;
&lt;p&gt;all_contracts would be an array&lt;/p&gt;
&lt;p&gt;@record.contracts would be an instance of
AssociationCollection&lt;/p&gt;
&lt;p&gt;Interestingly enough, when I printed the class of all_contracts
it shows as an array, but it behaves like AssociationCollection.
This is what I don't understand.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-07T19:31:53+00:00</created-at>
      <creator-id type="integer">81875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3667</number>
      <permalink>array-of-records-from-activerecord-association-does-not-behave-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord associations&quot; habtm</tag>
      <title>Array of records from ActiveRecord Association does not behave as expected</title>
      <updated-at type="datetime">2010-01-07T19:31:56+00:00</updated-at>
      <user-id type="integer">81875</user-id>
      <version type="integer">3</version>
      <user-name>Kent T</user-name>
      <creator-name>Kent T</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3667</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is a common gotcha in Ruby - objects are pretty much passed around as references. An example:

@@@ ruby
a = [1,2,3]
b = a
a &lt;&lt; 4
b # =&gt; [1,2,3,4]
@@@

So in your example, all_contracts is still an instance of AssociationCollection (although it fibs in the .class method and claims to be an Array). There are some ways to tell the two apart, though - all_contracts.respond_to?(:proxy_reflection) will return true, not that one typically *needs* to figure out that difference in standard Rails code.

Anyway, if you have further questions, feel free to ask on the [rails-talk](http://groups.google.com/group/rubyonrails-talk) list to avoid cluttering up Lighthouse.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a common gotcha in Ruby - objects are pretty much passed
around as references. An example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;a = [1,2,3]
b = a
a &amp;lt;&amp;lt; 4
b # =&amp;gt; [1,2,3,4]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So in your example, all_contracts is still an instance of
AssociationCollection (although it fibs in the .class method and
claims to be an Array). There are some ways to tell the two apart,
though - all_contracts.respond_to?(:proxy_reflection) will return
true, not that one typically &lt;em&gt;needs&lt;/em&gt; to figure out that
difference in standard Rails code.&lt;/p&gt;
&lt;p&gt;Anyway, if you have further questions, feel free to ask on the
&lt;a href=
&quot;http://groups.google.com/group/rubyonrails-talk&quot;&gt;rails-talk&lt;/a&gt;
list to avoid cluttering up Lighthouse.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-07T21:32:26+00:00</created-at>
      <creator-id type="integer">81875</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3667</number>
      <permalink>array-of-records-from-activerecord-association-does-not-behave-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>&quot;activerecord associations&quot; habtm</tag>
      <title>Array of records from ActiveRecord Association does not behave as expected</title>
      <updated-at type="datetime">2010-01-07T21:32:27+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">4</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Kent T</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3667</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/30789)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/30789&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-07T05:21:20+01:00</created-at>
      <creator-id type="integer">81875</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord associations\&quot; habtm&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3667</number>
      <permalink>array-of-records-from-activerecord-association-does-not-behave-as-expected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord associations habtm</tag>
      <title>Array of records from ActiveRecord Association does not behave as expected</title>
      <updated-at type="datetime">2010-10-07T05:21:20+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">5</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Kent T</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3667</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
