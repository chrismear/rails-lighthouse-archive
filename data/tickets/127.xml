<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-06T21:56:53+01:00</created-at>
  <creator-id type="integer">19467</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">127</number>
  <permalink>params-hash-is-incorrect-for-nested-arrays</permalink>
  <priority type="integer">11227</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>actionpack bug</tag>
  <title>Params hash is incorrect for nested arrays</title>
  <updated-at type="datetime">2008-09-07T19:33:26+01:00</updated-at>
  <user-id type="integer">16635</user-id>
  <version type="integer">6</version>
  <user-name>Brad Gessler</user-name>
  <creator-name>Dave Rothlisberger</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/127</url>
  <priority-name nil="true"></priority-name>
  <original-body>Say you have a form with fields for creating several contacts; each contact has fields for several phone numbers. The html might look like this:

@@@ html
&lt;!-- first contact, 2 telephones --&gt;
&lt;input name=&quot;contact[][name]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][area_code]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][number]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][area_code]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][number]&quot; ... /&gt;
@@@

The Contacts have not been created yet (they do not yet exist in the DB) so as there is no DB ID for the contacts, they will be stored in the params hash in a &quot;contacts&quot; array (as opposed to a &quot;contacts&quot; hash, which would be the case if the contacts had DB IDs). Same for the Telephones.

So this is what I'd expect in the params hash:

@@@ ruby
{ &quot;contact&quot; =&gt; [
    { &quot;name&quot; =&gt; &quot;nnn&quot;,
      &quot;telephone&quot; =&gt; [
        { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; },
        { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; }
      ]
    }
  ]
}
@@@

After all, that is what the &quot;telephone&quot; array would look like if it wasn't nested inside &quot;contact&quot; (i.e. with &lt;input name=&quot;telephone[][number]&quot;&gt;).

Instead, I get something like this:

@@@ ruby
{ &quot;contact&quot; =&gt; [
    { &quot;name&quot; =&gt; &quot;nnn&quot; },
    { &quot;telephone&quot; =&gt; [&quot;area_code&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;number&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;area_code&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;number&quot; =&gt; &quot;nnn&quot;] }
  ]
}
@@@

Using hashes (when the contacts &amp; telephones have IDs), instead of arrays, works correctly.</original-body>
  <latest-body>Say you have a form with fields for creating several contacts; each contact has fields for several phone numbers. The html might look like this:

@@@ html
&lt;!-- first contact, 2 telephones --&gt;
&lt;input name=&quot;contact[][name]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][area_code]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][number]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][area_code]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][number]&quot; ... /&gt;
@@@

The Contacts have not been created yet (they do not yet exist in the DB) so as there is no DB ID for the contacts, they will be stored in the params hash in a &quot;contacts&quot; array (as opposed to a &quot;contacts&quot; hash, which would be the case if the contacts had DB IDs). Same for the Telephones.

So this is what I'd expect in the params hash:

@@@ ruby
{ &quot;contact&quot; =&gt; [
    { &quot;name&quot; =&gt; &quot;nnn&quot;,
      &quot;telephone&quot; =&gt; [
        { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; },
        { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; }
      ]
    }
  ]
}
@@@

After all, that is what the &quot;telephone&quot; array would look like if it wasn't nested inside &quot;contact&quot; (i.e. with &lt;input name=&quot;telephone[][number]&quot;&gt;).

Instead, I get something like this:

@@@ ruby
{ &quot;contact&quot; =&gt; [
    { &quot;name&quot; =&gt; &quot;nnn&quot; },
    { &quot;telephone&quot; =&gt; [&quot;area_code&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;number&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;area_code&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;number&quot; =&gt; &quot;nnn&quot;] }
  ]
}
@@@

Using hashes (when the contacts &amp; telephones have IDs), instead of arrays, works correctly.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Say you have a form with fields for creating several contacts; each contact has fields for several phone numbers. The html might look like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- first contact, 2 telephones --&amp;gt;
&amp;lt;input name=&amp;quot;contact[][name]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][area_code]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][number]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][area_code]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][number]&amp;quot; ... /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The Contacts have not been created yet (they do not yet exist in the DB) so as there is no DB ID for the contacts, they will be stored in the params hash in a &quot;contacts&quot; array (as opposed to a &quot;contacts&quot; hash, which would be the case if the contacts had DB IDs). Same for the Telephones.
&lt;/p&gt;&lt;p&gt;
So this is what I'd expect in the params hash:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;{ &amp;quot;contact&amp;quot; =&amp;gt; [
    { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;,
      &amp;quot;telephone&amp;quot; =&amp;gt; [
        { &amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;, &amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; },
        { &amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;, &amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; }
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
After all, that is what the &quot;telephone&quot; array would look like if it wasn't nested inside &quot;contact&quot; (i.e. with ).
&lt;/p&gt;&lt;p&gt;
Instead, I get something like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;{ &amp;quot;contact&amp;quot; =&amp;gt; [
    { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Using hashes (when the contacts &amp; telephones have IDs), instead of arrays, works correctly.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Say you have a form with fields for creating several contacts; each contact has fields for several phone numbers. The html might look like this:

@@@ html
&lt;!-- first contact, 2 telephones --&gt;
&lt;input name=&quot;contact[][name]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][area_code]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][number]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][area_code]&quot; ... /&gt;
&lt;input name=&quot;contact[][telephone][][number]&quot; ... /&gt;
@@@

The Contacts have not been created yet (they do not yet exist in the DB) so as there is no DB ID for the contacts, they will be stored in the params hash in a &quot;contacts&quot; array (as opposed to a &quot;contacts&quot; hash, which would be the case if the contacts had DB IDs). Same for the Telephones.

So this is what I'd expect in the params hash:

@@@ ruby
{ &quot;contact&quot; =&gt; [
    { &quot;name&quot; =&gt; &quot;nnn&quot;,
      &quot;telephone&quot; =&gt; [
        { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; },
        { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; }
      ]
    }
  ]
}
@@@

After all, that is what the &quot;telephone&quot; array would look like if it wasn't nested inside &quot;contact&quot; -- i.e. with
@@@ html
&lt;input name=&quot;telephone[][number]&quot; /&gt;
@@@

Instead, I get something like this:

@@@ ruby
{ &quot;contact&quot; =&gt; [
    { &quot;name&quot; =&gt; &quot;nnn&quot; },
    { &quot;telephone&quot; =&gt; [&quot;area_code&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;number&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;area_code&quot; =&gt; &quot;nnn&quot;] },
    { &quot;telephone&quot; =&gt; [&quot;number&quot; =&gt; &quot;nnn&quot;] }
  ]
}
@@@

Using hashes (when the contacts &amp; telephones have IDs), instead of arrays, works correctly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Say you have a form with fields for creating several contacts; each contact has fields for several phone numbers. The html might look like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;!-- first contact, 2 telephones --&amp;gt;
&amp;lt;input name=&amp;quot;contact[][name]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][area_code]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][number]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][area_code]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;contact[][telephone][][number]&amp;quot; ... /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The Contacts have not been created yet (they do not yet exist in the DB) so as there is no DB ID for the contacts, they will be stored in the params hash in a &quot;contacts&quot; array (as opposed to a &quot;contacts&quot; hash, which would be the case if the contacts had DB IDs). Same for the Telephones.
&lt;/p&gt;&lt;p&gt;
So this is what I'd expect in the params hash:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;{ &amp;quot;contact&amp;quot; =&amp;gt; [
    { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;,
      &amp;quot;telephone&amp;quot; =&amp;gt; [
        { &amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;, &amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; },
        { &amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;, &amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; }
      ]
    }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
After all, that is what the &quot;telephone&quot; array would look like if it wasn't nested inside &quot;contact&quot; -- i.e. with
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;input name=&amp;quot;telephone[][number]&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Instead, I get something like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;{ &amp;quot;contact&amp;quot; =&amp;gt; [
    { &amp;quot;name&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] },
    { &amp;quot;telephone&amp;quot; =&amp;gt; [&amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;] }
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Using hashes (when the contacts &amp; telephones have IDs), instead of arrays, works correctly.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-06T22:05:15+01:00</created-at>
      <creator-id type="integer">19467</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">127</number>
      <permalink>params-hash-is-incorrect-for-nested-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Params hash is incorrect for nested arrays</title>
      <updated-at type="datetime">2008-05-06T22:05:15+01:00</updated-at>
      <user-id type="integer">19467</user-id>
      <version type="integer">1</version>
      <user-name>Dave Rothlisberger</user-name>
      <creator-name>Dave Rothlisberger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Patch with a unit test demonstrating this nested array behaviour.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Patch with a unit test demonstrating this nested array behaviour.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-06T22:01:23+01:00</created-at>
      <creator-id type="integer">19467</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">127</number>
      <permalink>params-hash-is-incorrect-for-nested-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Params hash is incorrect for nested arrays</title>
      <updated-at type="datetime">2008-05-06T22:01:23+01:00</updated-at>
      <user-id type="integer">19467</user-id>
      <version type="integer">2</version>
      <user-name>Dave Rothlisberger</user-name>
      <creator-name>Dave Rothlisberger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-07T20:35:00+01:00</created-at>
      <creator-id type="integer">19467</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">127</number>
      <permalink>params-hash-is-incorrect-for-nested-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Params hash is incorrect for nested arrays</title>
      <updated-at type="datetime">2008-05-07T20:35:00+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Dave Rothlisberger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>There's nothing to distinguish which hash keys belong to which element of the array. Looks like you expect the parser to 'remember' previously-seen hash keys and start on a new array element when a key is repeated (?)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
There's nothing to distinguish which hash keys belong to which element of the array. Looks like you expect the parser to 'remember' previously-seen hash keys and start on a new array element when a key is repeated (?)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-07T20:37:41+01:00</created-at>
      <creator-id type="integer">19467</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">127</number>
      <permalink>params-hash-is-incorrect-for-nested-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Params hash is incorrect for nested arrays</title>
      <updated-at type="datetime">2008-05-07T20:37:41+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Dave Rothlisberger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Exactly. After all, it seems like it 'remembers' previous keys when there no nested arrays:

@@@ html
&lt;input name=&quot;telephone[][area_code]&quot; ... /&gt;
&lt;input name=&quot;telephone[][number]&quot; ... /&gt;
&lt;input name=&quot;telephone[][area_code]&quot; ... /&gt;
&lt;input name=&quot;telephone[][number]&quot; ... /&gt;
@@@

correctly gives:

@@@ ruby
&quot;telephone&quot; =&gt; [
  { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; },
  { &quot;area_code&quot; =&gt; &quot;nnn&quot;, &quot;number&quot; =&gt; &quot;nnn&quot; }
]
@@@

It seems to me that the parser is adding elements to the same hash (telephone[0]) until it sees an element with a key that is already present in the hash; then it creates a new hash (telephone[1]).

Why should the behaviour be different simply because &quot;telephone&quot; is nested inside an array? (I mean &quot;why&quot; not as in technical reasons, but as in a user's expectations). At least in there case where I am fully specifying all parameters for each record, in the correct order (i.e. there are no &quot;sparse&quot; records).

The whole parser is quite confusing and I am not the first to expect it to behave differently :-)
See e.g. http://dev.rubyonrails.org/ticket/9030#comment:11

But I am happy with closing this; I have since learnt that the best way to achieve this is with the :index option to forms_for and fields_for, which over-rides the default behaviour of using the record's database id as the key in the params hashes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Exactly. After all, it seems like it 'remembers' previous keys when there no nested arrays:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;input name=&amp;quot;telephone[][area_code]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;telephone[][number]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;telephone[][area_code]&amp;quot; ... /&amp;gt;
&amp;lt;input name=&amp;quot;telephone[][number]&amp;quot; ... /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
correctly gives:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;quot;telephone&amp;quot; =&amp;gt; [
  { &amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;, &amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; },
  { &amp;quot;area_code&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot;, &amp;quot;number&amp;quot; =&amp;gt; &amp;quot;nnn&amp;quot; }
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It seems to me that the parser is adding elements to the same hash (telephone[0]) until it sees an element with a key that is already present in the hash; then it creates a new hash (telephone[1]).
&lt;/p&gt;&lt;p&gt;
Why should the behaviour be different simply because &quot;telephone&quot; is nested inside an array? (I mean &quot;why&quot; not as in technical reasons, but as in a user's expectations). At least in there case where I am fully specifying all parameters for each record, in the correct order (i.e. there are no &quot;sparse&quot; records).
&lt;/p&gt;&lt;p&gt;
The whole parser is quite confusing and I am not the first to expect it to behave differently :-)
&lt;/p&gt;&lt;p&gt;
See e.g. &lt;a href=&quot;http://dev.rubyonrails.org/ticket/9030#comment&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;:11
&lt;/p&gt;&lt;p&gt;
But I am happy with closing this; I have since learnt that the best way to achieve this is with the :index option to forms_for and fields_for, which over-rides the default behaviour of using the record's database id as the key in the params hashes.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-07T21:07:53+01:00</created-at>
      <creator-id type="integer">19467</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">127</number>
      <permalink>params-hash-is-incorrect-for-nested-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Params hash is incorrect for nested arrays</title>
      <updated-at type="datetime">2008-05-07T21:07:53+01:00</updated-at>
      <user-id type="integer">19467</user-id>
      <version type="integer">5</version>
      <user-name>Dave Rothlisberger</user-name>
      <creator-name>Dave Rothlisberger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/127</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've had this exact same problem. Rails seems to only parse two levels deep because it doesn't remember the previously seen hash-keys.

Don't be so quick to close the issue. It looks like they're getting there with #474 for updates and creations; but I didn't see any activity on the params parser for supporting deep model saves.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've had this exact same problem. Rails seems to only parse two
levels deep because it doesn't remember the previously seen
hash-keys.&lt;/p&gt;
&lt;p&gt;Don't be so quick to close the issue. It looks like they're
getting there with &lt;a href=&quot;/projects/8994/tickets/474&quot; title=&quot;Ticket #474&quot;&gt;#474&lt;/a&gt; for updates and creations; but I didn't see
any activity on the params parser for supporting deep model
saves.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-07T19:33:11+01:00</created-at>
      <creator-id type="integer">19467</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">127</number>
      <permalink>params-hash-is-incorrect-for-nested-arrays</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>actionpack bug</tag>
      <title>Params hash is incorrect for nested arrays</title>
      <updated-at type="datetime">2008-09-07T19:33:26+01:00</updated-at>
      <user-id type="integer">16635</user-id>
      <version type="integer">6</version>
      <user-name>Brad Gessler</user-name>
      <creator-name>Dave Rothlisberger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/127</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>3929a52bd5d9d4b13351b5d43dd2b412d333162e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-06T22:01:23+01:00</created-at>
      <filename>127-001.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">21786</id>
      <size type="integer">1935</size>
      <uploader-id type="integer">19467</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/21786/127-001.patch</url>
    </attachment>
  </attachments>
</ticket>
