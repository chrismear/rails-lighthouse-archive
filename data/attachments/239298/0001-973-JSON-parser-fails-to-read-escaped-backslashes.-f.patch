From 24096964a746c24b9a8d5214df4e16119961014b Mon Sep 17 00:00:00 2001
From: jastix <nik@jastix.me>
Date: Sun, 9 Aug 2009 11:27:17 +0400
Subject: [PATCH] #973 JSON parser fails to read escaped backslashes. fix.

---
 .../lib/active_support/json/backends/yaml.rb       |    5 ++++-
 activesupport/test/json/decoding_test.rb           |    8 +++++---
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/activesupport/lib/active_support/json/backends/yaml.rb b/activesupport/lib/active_support/json/backends/yaml.rb
index 92dd31c..59d2c37 100644
--- a/activesupport/lib/active_support/json/backends/yaml.rb
+++ b/activesupport/lib/active_support/json/backends/yaml.rb
@@ -20,7 +20,7 @@ module ActiveSupport
         rescue ArgumentError => e
           raise ParseError, "Invalid JSON string"
         end
-    
+
         protected
           # Ensure that ":" and "," are always followed by a space
           def convert_json_to_yaml(json) #:nodoc:
@@ -42,6 +42,8 @@ module ActiveSupport
                 end
               when ":",","
                 marks << scanner.pos - 1 unless quoting
+              when "\\"
+                scanner.skip(/\\/)
               end
             end
 
@@ -89,3 +91,4 @@ module ActiveSupport
     end
   end
 end
+
diff --git a/activesupport/test/json/decoding_test.rb b/activesupport/test/json/decoding_test.rb
index 4129a4f..05e420a 100644
--- a/activesupport/test/json/decoding_test.rb
+++ b/activesupport/test/json/decoding_test.rb
@@ -14,10 +14,10 @@ class TestJSONDecoding < ActiveSupport::TestCase
     %({"a": "a's, b's and c's", "b": "5,000"})   => {"a" => "a's, b's and c's", "b" => "5,000"},
     # multibyte
     %({"matzue": "松江", "asakusa": "浅草"}) => {"matzue" => "松江", "asakusa" => "浅草"},
-    %({"a": "2007-01-01"})                       => {'a' => Date.new(2007, 1, 1)}, 
-    %({"a": "2007-01-01 01:12:34 Z"})            => {'a' => Time.utc(2007, 1, 1, 1, 12, 34)}, 
+    %({"a": "2007-01-01"})                       => {'a' => Date.new(2007, 1, 1)},
+    %({"a": "2007-01-01 01:12:34 Z"})            => {'a' => Time.utc(2007, 1, 1, 1, 12, 34)},
     # no time zone
-    %({"a": "2007-01-01 01:12:34"})              => {'a' => "2007-01-01 01:12:34"}, 
+    %({"a": "2007-01-01 01:12:34"})              => {'a' => "2007-01-01 01:12:34"},
     # needs to be *exact*
     %({"a": " 2007-01-01 01:12:34 Z "})          => {'a' => " 2007-01-01 01:12:34 Z "},
     %({"a": "2007-01-01 : it's your birthday"})  => {'a' => "2007-01-01 : it's your birthday"},
@@ -29,6 +29,7 @@ class TestJSONDecoding < ActiveSupport::TestCase
     %({"a": null})  => {"a" => nil},
     %({"a": true})  => {"a" => true},
     %({"a": false}) => {"a" => false},
+    %q({"bad":"\\\\","trailing":""}) => {"bad" => "\\", "trailing" => ""},
     %q({"a": "http:\/\/test.host\/posts\/1"}) => {"a" => "http://test.host/posts/1"},
     %q({"a": "\u003cunicode\u0020escape\u003e"}) => {"a" => "<unicode escape>"},
     %q({"a": "\\\\u0020skip double backslashes"}) => {"a" => "\\u0020skip double backslashes"},
@@ -83,3 +84,4 @@ class TestJSONDecoding < ActiveSupport::TestCase
     assert_raise(ActiveSupport::JSON::ParseError) { ActiveSupport::JSON.decode(%({: 1})) }
   end
 end
+
-- 
1.6.3.2

