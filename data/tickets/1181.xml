<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-07T00:06:51+01:00</created-at>
  <creator-id type="integer">33949</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1181</number>
  <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
  <priority type="integer">590</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord find</tag>
  <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
  <updated-at type="datetime">2008-10-08T21:17:28+01:00</updated-at>
  <user-id type="integer">33949</user-id>
  <version type="integer">7</version>
  <user-name>Phillip Koebbe</user-name>
  <creator-name>Phillip Koebbe</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>@@@
Person.find(:first, :conditions =&gt; ['id = :id', {:id =&gt; nil}])
@@@

produces

@@@
SELECT * FROM &quot;people&quot; WHERE (id = NULL) LIMIT 1
@@@

when it should produce

@@@
SELECT * FROM &quot;people&quot; WHERE (id IS NULL) LIMIT 1
@@@

Rails 2.1.1</original-body>
  <latest-body>@@@
Person.find(:first, :conditions =&gt; ['id = :id', {:id =&gt; nil}])
@@@

produces

@@@
SELECT * FROM &quot;people&quot; WHERE (id = NULL) LIMIT 1
@@@

when it should produce

@@@
SELECT * FROM &quot;people&quot; WHERE (id IS NULL) LIMIT 1
@@@

Rails 2.1.1</latest-body>
  <original-body-html>&lt;div&gt;&lt;pre&gt;&lt;code&gt;
Person.find(:first, :conditions =&amp;gt; ['id = :id', {:id =&amp;gt; nil}])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
SELECT * FROM &amp;quot;people&amp;quot; WHERE (id = NULL) LIMIT 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when it should produce&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
SELECT * FROM &amp;quot;people&amp;quot; WHERE (id IS NULL) LIMIT 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rails 2.1.1&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@
Person.find(:first, :conditions =&gt; ['id = :id', {:id =&gt; nil}])
@@@

produces

@@@
SELECT * FROM &quot;people&quot; WHERE (id = NULL) LIMIT 1
@@@

when it should produce

@@@
SELECT * FROM &quot;people&quot; WHERE (id IS NULL) LIMIT 1
@@@

Rails 2.1.1</body>
      <body-html>&lt;div&gt;&lt;pre&gt;&lt;code&gt;
Person.find(:first, :conditions =&amp;gt; ['id = :id', {:id =&amp;gt; nil}])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
SELECT * FROM &amp;quot;people&amp;quot; WHERE (id = NULL) LIMIT 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when it should produce&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
SELECT * FROM &amp;quot;people&amp;quot; WHERE (id IS NULL) LIMIT 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rails 2.1.1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T00:06:51+01:00</created-at>
      <creator-id type="integer">33949</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1181</number>
      <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord find</tag>
      <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
      <updated-at type="datetime">2008-10-07T00:06:53+01:00</updated-at>
      <user-id type="integer">33949</user-id>
      <version type="integer">1</version>
      <user-name>Phillip Koebbe</user-name>
      <creator-name>Phillip Koebbe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't think this is going to happen, it's too dangerous to assume anything about the string that we replace variables in and we don't really want to start parsing SQL either.

You can however use :conditions =&gt; { :id =&gt; nil } and it should generate the proper comparison, be it a scalar, array or nil.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't think this is going to happen, it's too dangerous to
assume anything about the string that we replace variables in and
we don't really want to start parsing SQL either.&lt;/p&gt;
&lt;p&gt;You can however use :conditions =&amp;gt; { :id =&amp;gt; nil } and it
should generate the proper comparison, be it a scalar, array or
nil.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-07T03:45:10+01:00</created-at>
      <creator-id type="integer">33949</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1181</number>
      <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find</tag>
      <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
      <updated-at type="datetime">2008-10-07T03:45:15+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">2</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Phillip Koebbe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Really? But this is just plain wrong SQL. The expression &quot;= NULL&quot; will always fail as nothing is equal to NULL.

A couple of years ago, an enhancement was made to fix this behavior in dynamic finders, but since that time, the dynamic finder code has been simplified greatly to rely on other code. See

http://github.com/rails/rails/commit/93ec1303779a238754c87572e6e96d32133cee86

If this really is the opinion of core, I have to accept it, but my opinion is that proper SQL should be generated in this case and it's not that hard to do.

Peace.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Really? But this is just plain wrong SQL. The expression &quot;=
NULL&quot; will always fail as nothing is equal to NULL.&lt;/p&gt;
&lt;p&gt;A couple of years ago, an enhancement was made to fix this
behavior in dynamic finders, but since that time, the dynamic
finder code has been simplified greatly to rely on other code.
See&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://github.com/rails/rails/commit/93ec1303779a238754c87572e6e96d32133cee86&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If this really is the opinion of core, I have to accept it, but
my opinion is that proper SQL should be generated in this case and
it's not that hard to do.&lt;/p&gt;
&lt;p&gt;Peace.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-07T15:36:30+01:00</created-at>
      <creator-id type="integer">33949</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1181</number>
      <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find</tag>
      <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
      <updated-at type="datetime">2008-10-07T15:36:35+01:00</updated-at>
      <user-id type="integer">33949</user-id>
      <version type="integer">3</version>
      <user-name>Phillip Koebbe</user-name>
      <creator-name>Phillip Koebbe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's actually quite a bit harder to do than it seems at first, and we have tried this in the past, with the sql server adapter I believe.

However as tarmo mentioned, the :conditions=&gt;{:id=&gt;nil} case already handles this and is your best bet here.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's actually quite a bit harder to do than it seems at first,
and we have tried this in the past, with the sql server adapter I
believe.&lt;/p&gt;
&lt;p&gt;However as tarmo mentioned, the :conditions=&amp;gt;{:id=&amp;gt;nil}
case already handles this and is your best bet here.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-07T15:54:30+01:00</created-at>
      <creator-id type="integer">33949</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1181</number>
      <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find</tag>
      <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
      <updated-at type="datetime">2008-10-07T15:54:33+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Phillip Koebbe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Okie dokie. Thanks for the consideration.

Peace.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Okie dokie. Thanks for the consideration.&lt;/p&gt;
&lt;p&gt;Peace.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-07T16:00:42+01:00</created-at>
      <creator-id type="integer">33949</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1181</number>
      <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find</tag>
      <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
      <updated-at type="datetime">2008-10-07T16:00:47+01:00</updated-at>
      <user-id type="integer">33949</user-id>
      <version type="integer">5</version>
      <user-name>Phillip Koebbe</user-name>
      <creator-name>Phillip Koebbe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For posterity's sake:

Digging into it, I think I understand the difficulty. The method in question appears to be

@@@
        def replace_named_bind_variables(statement, bind_vars) #:nodoc:
          statement.gsub(/(:?):([a-zA-Z]\w*)/) do
            if $1 == ':' # skip postgresql casts
              $&amp; # return the whole match
            elsif bind_vars.include?(match = $2.to_sym)
              quote_bound_value(bind_vars[match])
            else
              raise PreparedStatementInvalid, &quot;missing value for :#{match} in #{statement}&quot;
            end
          end
        end
@@@

Using the gsub block approach allows one to easily coarse through the SQL fragment replacing all symbol-looking things. If one were to try to replace an = that exists in statement, the fragment would have to be ripped apart, chunk by chunk. And since there could be combinations of AND, OR, parenthesis, etc, it would become quite complex quite quickly. And since there is an alternative, there's no real benefit to adding such complexity.

Peace.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For posterity's sake:&lt;/p&gt;
&lt;p&gt;Digging into it, I think I understand the difficulty. The method
in question appears to be&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
        def replace_named_bind_variables(statement, bind_vars) #:nodoc:
          statement.gsub(/(:?):([a-zA-Z]\w*)/) do
            if $1 == ':' # skip postgresql casts
              $&amp;amp; # return the whole match
            elsif bind_vars.include?(match = $2.to_sym)
              quote_bound_value(bind_vars[match])
            else
              raise PreparedStatementInvalid, &amp;quot;missing value for :#{match} in #{statement}&amp;quot;
            end
          end
        end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the gsub block approach allows one to easily coarse
through the SQL fragment replacing all symbol-looking things. If
one were to try to replace an = that exists in statement, the
fragment would have to be ripped apart, chunk by chunk. And since
there could be combinations of AND, OR, parenthesis, etc, it would
become quite complex quite quickly. And since there is an
alternative, there's no real benefit to adding such complexity.&lt;/p&gt;
&lt;p&gt;Peace.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-07T16:18:06+01:00</created-at>
      <creator-id type="integer">33949</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1181</number>
      <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find</tag>
      <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
      <updated-at type="datetime">2008-10-07T16:18:12+01:00</updated-at>
      <user-id type="integer">33949</user-id>
      <version type="integer">6</version>
      <user-name>Phillip Koebbe</user-name>
      <creator-name>Phillip Koebbe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For my own curiosity (or pain, as the case may be), I couldn't let go of this, so I twiddled around until I came up with:

@@@
def replace_named_bind_variables(statement, bind_vars) #:nodoc:
	statement = statement.gsub(/(:?):([a-zA-Z]\w*)/) do
		if $1 == ':' # skip postgresql casts
			$&amp; # return the whole match
		elsif bind_vars.include?(match = $2.to_sym)
			quote_bound_value(bind_vars[match])
		else
			raise PreparedStatementInvalid, &quot;missing value for :#{match} in #{statement}&quot;
		end
	end

	nil_quote = connection.quote(nil)
	statement = statement.gsub('!=') { |sub_str| $'.match(/([a-zA-Z]\w*)/).to_s == nil_quote ? 'IS NOT' : sub_str }
	statement = statement.gsub('=') { |sub_str| $'.match(/([a-zA-Z]\w*)/).to_s == nil_quote ? 'IS' : sub_str }
	statement
end
@@@

I don't have any tests as I (shamefully) don't yet know how to go about testing something like this. I have hit it with a few different scenarios and it worked correctly.

One assumption I do make is that the database does not consider &quot;NOT =&quot; the same as &quot;!=&quot;. Postgres errors on &quot;NOT =&quot;, but I don't know about others. I wouldn't expect that to be valid SQL, but I don't know for sure.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For my own curiosity (or pain, as the case may be), I couldn't
let go of this, so I twiddled around until I came up with:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
def replace_named_bind_variables(statement, bind_vars) #:nodoc:
	statement = statement.gsub(/(:?):([a-zA-Z]\w*)/) do
		if $1 == ':' # skip postgresql casts
			$&amp;amp; # return the whole match
		elsif bind_vars.include?(match = $2.to_sym)
			quote_bound_value(bind_vars[match])
		else
			raise PreparedStatementInvalid, &amp;quot;missing value for :#{match} in #{statement}&amp;quot;
		end
	end

	nil_quote = connection.quote(nil)
	statement = statement.gsub('!=') { |sub_str| $'.match(/([a-zA-Z]\w*)/).to_s == nil_quote ? 'IS NOT' : sub_str }
	statement = statement.gsub('=') { |sub_str| $'.match(/([a-zA-Z]\w*)/).to_s == nil_quote ? 'IS' : sub_str }
	statement
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don't have any tests as I (shamefully) don't yet know how to
go about testing something like this. I have hit it with a few
different scenarios and it worked correctly.&lt;/p&gt;
&lt;p&gt;One assumption I do make is that the database does not consider
&quot;NOT =&quot; the same as &quot;!=&quot;. Postgres errors on &quot;NOT =&quot;, but I don't
know about others. I wouldn't expect that to be valid SQL, but I
don't know for sure.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-08T21:17:22+01:00</created-at>
      <creator-id type="integer">33949</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1181</number>
      <permalink>ar-find-producing-null-when-it-should-be-is-null</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find</tag>
      <title>AR find producing &quot;= NULL&quot; when it should be &quot;IS NULL&quot;</title>
      <updated-at type="datetime">2008-10-08T21:17:28+01:00</updated-at>
      <user-id type="integer">33949</user-id>
      <version type="integer">7</version>
      <user-name>Phillip Koebbe</user-name>
      <creator-name>Phillip Koebbe</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1181</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
