<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-19T04:07:26+01:00</created-at>
  <creator-id type="integer">2504</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5148</number>
  <permalink>any-interest-on-upgrade_table-for-migration</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Any interest on &quot;upgrade_table&quot; for migration?</title>
  <updated-at type="datetime">2011-02-02T17:11:29+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Felix Sun</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5148</url>
  <priority-name nil="true"></priority-name>
  <original-body>It's like the datamapper &quot;rake db:autoupgrade&quot;.

Write this in your migration OR initializer of your plugin/gem if the plugin/gem require a table with some columns to exist.

@@@

    ActiveRecord::Migration.upgrade_table :products do |t|
      t.string :code, :null =&gt; false
      t.string :name, :limit =&gt; 200
      t.body   :text
      t.timestamps
    end

@@@

In this example, the products table won't be dropped if there is existing one in database, 
If there are no &quot;name&quot; column, It will only add that column to the table.

If it has the exactly the same thing in the database, it will do nothing. 


If there are more interest on this, I will continue to make a patch for this, Else I'll just paste the code here:

@@@
require 'active_record/connection_adapters/abstract/schema_definitions'
require 'active_record/connection_adapters/abstract/schema_statements'

module ActiveRecord
  module ConnectionAdapters # :nodoc:
    module SchemaStatements

      class SafeTable &lt; Table
        def initialize(table_name, base)
          super(table_name, base)
          @base.create_table(@table_name) unless @base.table_exists?(@table_name)
        end

        def column(column_name, type, options = {})
          return super(column_name, type, options) unless @base.column_exists?(@table_name, column_name)

          changed_properties = changed_properties(column_name, options)

          return if changed_properties.empty?

          change(column_name, type, options)
          change_default(column_name, column_default) if changed_properties.include?(:default)
        end

        def timestamps
          return super unless @base.column_exists?(@table_name, :created_at)
        end

        # Adds a column or columns of a specified type
        # ===== Examples
        #  t.string(:goat)
        #  t.string(:goat, :sheep)
        %w( string text integer float decimal datetime timestamp time date binary boolean ).each do |column_type|
          class_eval &lt;&lt;-EOV, __FILE__, __LINE__ + 1
            def #{column_type}(*args)                                          # def string(*args)
              options = args.extract_options!                                  #   options = args.extract_options!
              column_names = args                                              #   column_names = args
                                                                               #
              column_names.each do |name|                                      #   column_names.each do |name|
                column = ColumnDefinition.new(@base, name, '#{column_type}')   #     column = ColumnDefinition.new(@base, name, 'string')
                if options[:limit]                                             #     if options[:limit]
                  column.limit = options[:limit]                               #       column.limit = options[:limit]
                elsif native['#{column_type}'.to_sym].is_a?(Hash)              #     elsif native['string'.to_sym].is_a?(Hash)
                  column.limit = native['#{column_type}'.to_sym][:limit]       #       column.limit = native['string'.to_sym][:limit]
                end                                                            #     end
                column.precision = options[:precision]                         #     column.precision = options[:precision]
                column.scale = options[:scale]                                 #     column.scale = options[:scale]
                column.default = options[:default]                             #     column.default = options[:default]
                column.null = options[:null]                                   #     column.null = options[:null]
                self.column(name, column.sql_type, options)                    #     self.column(name, column.sql_type, options)
              end                                                              #   end
            end                                                                # end
          EOV
        end

        private
          def changed_properties(column_name, new_options={})
            original_column = @base.columns(@table_name).detect {|c| c.name.to_s == column_name.to_s }

            [:default, :limit, :null, :precision, :scale].select do |attr|
              original_value = original_column.send(attr)
              new_value = new_options[attr]
              new_value &amp;&amp; new_value.to_s != original_value.to_s
            end
          end

      end

      def upgrade_table(table_name)
        yield SafeTable.new(table_name, self)
      end

    end # SchemaStatements
  end # ConnectionAdapters
end # ActiveRecord

@@@</original-body>
  <latest-body>It's like the datamapper &quot;rake db:autoupgrade&quot;.

Write this in your migration OR initializer of your plugin/gem if the plugin/gem require a table with some columns to exist.

@@@

    ActiveRecord::Migration.upgrade_table :products do |t|
      t.string :code, :null =&gt; false
      t.string :name, :limit =&gt; 200
      t.body   :text
      t.timestamps
    end

@@@

In this example, the products table won't be dropped if there is existing one in database, 
If there are no &quot;name&quot; column, It will only add that column to the table.

If it has the exactly the same thing in the database, it will do nothing. 


If there are more interest on this, I will continue to make a patch for this, Else I'll just paste the code here:

@@@
require 'active_record/connection_adapters/abstract/schema_definitions'
require 'active_record/connection_adapters/abstract/schema_statements'

module ActiveRecord
  module ConnectionAdapters # :nodoc:
    module SchemaStatements

      class SafeTable &lt; Table
        def initialize(table_name, base)
          super(table_name, base)
          @base.create_table(@table_name) unless @base.table_exists?(@table_name)
        end

        def column(column_name, type, options = {})
          return super(column_name, type, options) unless @base.column_exists?(@table_name, column_name)

          changed_properties = changed_properties(column_name, options)

          return if changed_properties.empty?

          change(column_name, type, options)
          change_default(column_name, column_default) if changed_properties.include?(:default)
        end

        def timestamps
          return super unless @base.column_exists?(@table_name, :created_at)
        end

        # Adds a column or columns of a specified type
        # ===== Examples
        #  t.string(:goat)
        #  t.string(:goat, :sheep)
        %w( string text integer float decimal datetime timestamp time date binary boolean ).each do |column_type|
          class_eval &lt;&lt;-EOV, __FILE__, __LINE__ + 1
            def #{column_type}(*args)                                          # def string(*args)
              options = args.extract_options!                                  #   options = args.extract_options!
              column_names = args                                              #   column_names = args
                                                                               #
              column_names.each do |name|                                      #   column_names.each do |name|
                column = ColumnDefinition.new(@base, name, '#{column_type}')   #     column = ColumnDefinition.new(@base, name, 'string')
                if options[:limit]                                             #     if options[:limit]
                  column.limit = options[:limit]                               #       column.limit = options[:limit]
                elsif native['#{column_type}'.to_sym].is_a?(Hash)              #     elsif native['string'.to_sym].is_a?(Hash)
                  column.limit = native['#{column_type}'.to_sym][:limit]       #       column.limit = native['string'.to_sym][:limit]
                end                                                            #     end
                column.precision = options[:precision]                         #     column.precision = options[:precision]
                column.scale = options[:scale]                                 #     column.scale = options[:scale]
                column.default = options[:default]                             #     column.default = options[:default]
                column.null = options[:null]                                   #     column.null = options[:null]
                self.column(name, column.sql_type, options)                    #     self.column(name, column.sql_type, options)
              end                                                              #   end
            end                                                                # end
          EOV
        end

        private
          def changed_properties(column_name, new_options={})
            original_column = @base.columns(@table_name).detect {|c| c.name.to_s == column_name.to_s }

            [:default, :limit, :null, :precision, :scale].select do |attr|
              original_value = original_column.send(attr)
              new_value = new_options[attr]
              new_value &amp;&amp; new_value.to_s != original_value.to_s
            end
          end

      end

      def upgrade_table(table_name)
        yield SafeTable.new(table_name, self)
      end

    end # SchemaStatements
  end # ConnectionAdapters
end # ActiveRecord

@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It's like the datamapper &quot;rake db:autoupgrade&quot;.&lt;/p&gt;
&lt;p&gt;Write this in your migration OR initializer of your plugin/gem
if the plugin/gem require a table with some columns to exist.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
    ActiveRecord::Migration.upgrade_table :products do |t|
      t.string :code, :null =&amp;gt; false
      t.string :name, :limit =&amp;gt; 200
      t.body   :text
      t.timestamps
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this example, the products table won't be dropped if there is
existing one in database,&lt;br&gt;
If there are no &quot;name&quot; column, It will only add that column to the
table.&lt;/p&gt;
&lt;p&gt;If it has the exactly the same thing in the database, it will do
nothing.&lt;/p&gt;
&lt;p&gt;If there are more interest on this, I will continue to make a
patch for this, Else I'll just paste the code here:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'active_record/connection_adapters/abstract/schema_definitions'
require 'active_record/connection_adapters/abstract/schema_statements'

module ActiveRecord
  module ConnectionAdapters # :nodoc:
    module SchemaStatements

      class SafeTable &amp;lt; Table
        def initialize(table_name, base)
          super(table_name, base)
          @base.create_table(@table_name) unless @base.table_exists?(@table_name)
        end

        def column(column_name, type, options = {})
          return super(column_name, type, options) unless @base.column_exists?(@table_name, column_name)

          changed_properties = changed_properties(column_name, options)

          return if changed_properties.empty?

          change(column_name, type, options)
          change_default(column_name, column_default) if changed_properties.include?(:default)
        end

        def timestamps
          return super unless @base.column_exists?(@table_name, :created_at)
        end

        # Adds a column or columns of a specified type
        # ===== Examples
        #  t.string(:goat)
        #  t.string(:goat, :sheep)
        %w( string text integer float decimal datetime timestamp time date binary boolean ).each do |column_type|
          class_eval &amp;lt;&amp;lt;-EOV, __FILE__, __LINE__ + 1
            def #{column_type}(*args)                                          # def string(*args)
              options = args.extract_options!                                  #   options = args.extract_options!
              column_names = args                                              #   column_names = args
                                                                               #
              column_names.each do |name|                                      #   column_names.each do |name|
                column = ColumnDefinition.new(@base, name, '#{column_type}')   #     column = ColumnDefinition.new(@base, name, 'string')
                if options[:limit]                                             #     if options[:limit]
                  column.limit = options[:limit]                               #       column.limit = options[:limit]
                elsif native['#{column_type}'.to_sym].is_a?(Hash)              #     elsif native['string'.to_sym].is_a?(Hash)
                  column.limit = native['#{column_type}'.to_sym][:limit]       #       column.limit = native['string'.to_sym][:limit]
                end                                                            #     end
                column.precision = options[:precision]                         #     column.precision = options[:precision]
                column.scale = options[:scale]                                 #     column.scale = options[:scale]
                column.default = options[:default]                             #     column.default = options[:default]
                column.null = options[:null]                                   #     column.null = options[:null]
                self.column(name, column.sql_type, options)                    #     self.column(name, column.sql_type, options)
              end                                                              #   end
            end                                                                # end
          EOV
        end

        private
          def changed_properties(column_name, new_options={})
            original_column = @base.columns(@table_name).detect {|c| c.name.to_s == column_name.to_s }

            [:default, :limit, :null, :precision, :scale].select do |attr|
              original_value = original_column.send(attr)
              new_value = new_options[attr]
              new_value &amp;amp;&amp;amp; new_value.to_s != original_value.to_s
            end
          end

      end

      def upgrade_table(table_name)
        yield SafeTable.new(table_name, self)
      end

    end # SchemaStatements
  end # ConnectionAdapters
end # ActiveRecord&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's like the datamapper &quot;rake db:autoupgrade&quot;.

Write this in your migration OR initializer of your plugin/gem if the plugin/gem require a table with some columns to exist.

@@@

    ActiveRecord::Migration.upgrade_table :products do |t|
      t.string :code, :null =&gt; false
      t.string :name, :limit =&gt; 200
      t.body   :text
      t.timestamps
    end

@@@

In this example, the products table won't be dropped if there is existing one in database, 
If there are no &quot;name&quot; column, It will only add that column to the table.

If it has the exactly the same thing in the database, it will do nothing. 


If there are more interest on this, I will continue to make a patch for this, Else I'll just paste the code here:

@@@
require 'active_record/connection_adapters/abstract/schema_definitions'
require 'active_record/connection_adapters/abstract/schema_statements'

module ActiveRecord
  module ConnectionAdapters # :nodoc:
    module SchemaStatements

      class SafeTable &lt; Table
        def initialize(table_name, base)
          super(table_name, base)
          @base.create_table(@table_name) unless @base.table_exists?(@table_name)
        end

        def column(column_name, type, options = {})
          return super(column_name, type, options) unless @base.column_exists?(@table_name, column_name)

          changed_properties = changed_properties(column_name, options)

          return if changed_properties.empty?

          change(column_name, type, options)
          change_default(column_name, column_default) if changed_properties.include?(:default)
        end

        def timestamps
          return super unless @base.column_exists?(@table_name, :created_at)
        end

        # Adds a column or columns of a specified type
        # ===== Examples
        #  t.string(:goat)
        #  t.string(:goat, :sheep)
        %w( string text integer float decimal datetime timestamp time date binary boolean ).each do |column_type|
          class_eval &lt;&lt;-EOV, __FILE__, __LINE__ + 1
            def #{column_type}(*args)                                          # def string(*args)
              options = args.extract_options!                                  #   options = args.extract_options!
              column_names = args                                              #   column_names = args
                                                                               #
              column_names.each do |name|                                      #   column_names.each do |name|
                column = ColumnDefinition.new(@base, name, '#{column_type}')   #     column = ColumnDefinition.new(@base, name, 'string')
                if options[:limit]                                             #     if options[:limit]
                  column.limit = options[:limit]                               #       column.limit = options[:limit]
                elsif native['#{column_type}'.to_sym].is_a?(Hash)              #     elsif native['string'.to_sym].is_a?(Hash)
                  column.limit = native['#{column_type}'.to_sym][:limit]       #       column.limit = native['string'.to_sym][:limit]
                end                                                            #     end
                column.precision = options[:precision]                         #     column.precision = options[:precision]
                column.scale = options[:scale]                                 #     column.scale = options[:scale]
                column.default = options[:default]                             #     column.default = options[:default]
                column.null = options[:null]                                   #     column.null = options[:null]
                self.column(name, column.sql_type, options)                    #     self.column(name, column.sql_type, options)
              end                                                              #   end
            end                                                                # end
          EOV
        end

        private
          def changed_properties(column_name, new_options={})
            original_column = @base.columns(@table_name).detect {|c| c.name.to_s == column_name.to_s }

            [:default, :limit, :null, :precision, :scale].select do |attr|
              original_value = original_column.send(attr)
              new_value = new_options[attr]
              new_value &amp;&amp; new_value.to_s != original_value.to_s
            end
          end

      end

      def upgrade_table(table_name)
        yield SafeTable.new(table_name, self)
      end

    end # SchemaStatements
  end # ConnectionAdapters
end # ActiveRecord

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;It's like the datamapper &quot;rake db:autoupgrade&quot;.&lt;/p&gt;
&lt;p&gt;Write this in your migration OR initializer of your plugin/gem
if the plugin/gem require a table with some columns to exist.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
    ActiveRecord::Migration.upgrade_table :products do |t|
      t.string :code, :null =&amp;gt; false
      t.string :name, :limit =&amp;gt; 200
      t.body   :text
      t.timestamps
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In this example, the products table won't be dropped if there is
existing one in database,&lt;br&gt;
If there are no &quot;name&quot; column, It will only add that column to the
table.&lt;/p&gt;
&lt;p&gt;If it has the exactly the same thing in the database, it will do
nothing.&lt;/p&gt;
&lt;p&gt;If there are more interest on this, I will continue to make a
patch for this, Else I'll just paste the code here:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'active_record/connection_adapters/abstract/schema_definitions'
require 'active_record/connection_adapters/abstract/schema_statements'

module ActiveRecord
  module ConnectionAdapters # :nodoc:
    module SchemaStatements

      class SafeTable &amp;lt; Table
        def initialize(table_name, base)
          super(table_name, base)
          @base.create_table(@table_name) unless @base.table_exists?(@table_name)
        end

        def column(column_name, type, options = {})
          return super(column_name, type, options) unless @base.column_exists?(@table_name, column_name)

          changed_properties = changed_properties(column_name, options)

          return if changed_properties.empty?

          change(column_name, type, options)
          change_default(column_name, column_default) if changed_properties.include?(:default)
        end

        def timestamps
          return super unless @base.column_exists?(@table_name, :created_at)
        end

        # Adds a column or columns of a specified type
        # ===== Examples
        #  t.string(:goat)
        #  t.string(:goat, :sheep)
        %w( string text integer float decimal datetime timestamp time date binary boolean ).each do |column_type|
          class_eval &amp;lt;&amp;lt;-EOV, __FILE__, __LINE__ + 1
            def #{column_type}(*args)                                          # def string(*args)
              options = args.extract_options!                                  #   options = args.extract_options!
              column_names = args                                              #   column_names = args
                                                                               #
              column_names.each do |name|                                      #   column_names.each do |name|
                column = ColumnDefinition.new(@base, name, '#{column_type}')   #     column = ColumnDefinition.new(@base, name, 'string')
                if options[:limit]                                             #     if options[:limit]
                  column.limit = options[:limit]                               #       column.limit = options[:limit]
                elsif native['#{column_type}'.to_sym].is_a?(Hash)              #     elsif native['string'.to_sym].is_a?(Hash)
                  column.limit = native['#{column_type}'.to_sym][:limit]       #       column.limit = native['string'.to_sym][:limit]
                end                                                            #     end
                column.precision = options[:precision]                         #     column.precision = options[:precision]
                column.scale = options[:scale]                                 #     column.scale = options[:scale]
                column.default = options[:default]                             #     column.default = options[:default]
                column.null = options[:null]                                   #     column.null = options[:null]
                self.column(name, column.sql_type, options)                    #     self.column(name, column.sql_type, options)
              end                                                              #   end
            end                                                                # end
          EOV
        end

        private
          def changed_properties(column_name, new_options={})
            original_column = @base.columns(@table_name).detect {|c| c.name.to_s == column_name.to_s }

            [:default, :limit, :null, :precision, :scale].select do |attr|
              original_value = original_column.send(attr)
              new_value = new_options[attr]
              new_value &amp;amp;&amp;amp; new_value.to_s != original_value.to_s
            end
          end

      end

      def upgrade_table(table_name)
        yield SafeTable.new(table_name, self)
      end

    end # SchemaStatements
  end # ConnectionAdapters
end # ActiveRecord&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T04:07:26+01:00</created-at>
      <creator-id type="integer">2504</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5148</number>
      <permalink>any-interest-on-upgrade_table-for-migration</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Any interest on &quot;upgrade_table&quot; for migration?</title>
      <updated-at type="datetime">2010-07-19T04:07:27+01:00</updated-at>
      <user-id type="integer">2504</user-id>
      <version type="integer">1</version>
      <user-name>Felix Sun</user-name>
      <creator-name>Felix Sun</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5148</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:35:40+00:00</created-at>
      <creator-id type="integer">2504</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5148</number>
      <permalink>any-interest-on-upgrade_table-for-migration</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Any interest on &quot;upgrade_table&quot; for migration?</title>
      <updated-at type="datetime">2011-02-02T17:11:05+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Felix Sun</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5148</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:35:42+00:00</created-at>
      <creator-id type="integer">2504</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5148</number>
      <permalink>any-interest-on-upgrade_table-for-migration</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Any interest on &quot;upgrade_table&quot; for migration?</title>
      <updated-at type="datetime">2011-02-02T17:11:29+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Felix Sun</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5148</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
