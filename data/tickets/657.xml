<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-19T00:12:49+01:00</created-at>
  <creator-id type="integer">18096</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">657</number>
  <permalink>link_to-duplicates-behavior-of-url_for</permalink>
  <priority type="integer">139</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>helper link_to patch refactoring routing tested url_for</tag>
  <title>link_to duplicates behavior of url_for</title>
  <updated-at type="datetime">2008-07-19T21:26:17+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Clemens Kofler</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/657</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>While working on an app where I had to manipulate a URL after its creation I found that some URLs weren't affected by my change. What I did was to alias_method_chain the UrlHelper#url_for method. If I used link_to with a hash or an object, my modifications where applied whereas with a named route path it seemed to just ignore it.

The problem is that link_to, when used with a string (a named route call generates a string), uses the string directly as its href instead of passing it to url_for.

Since url_for has the same behavior for strings anyway, it makes sense to remove it from link_to. This ensures that *all* URLs are generated in the same place.

I've also moved the :back option to url_for to have all the URL generation functionality encapsulated in url_for and have link_to focus solely on the creation of the actual link tag. Plus, I've changed the order of the case when because I think with modern Rails applications, named routes (and therefore strings) are the preferred option. This might give a little performance increase because it already hits the first when clause instead of the second.

Patch is attached. All existing tests pass.</original-body>
  <latest-body>While working on an app where I had to manipulate a URL after its creation I found that some URLs weren't affected by my change. What I did was to alias_method_chain the UrlHelper#url_for method. If I used link_to with a hash or an object, my modifications where applied whereas with a named route path it seemed to just ignore it.

The problem is that link_to, when used with a string (a named route call generates a string), uses the string directly as its href instead of passing it to url_for.

Since url_for has the same behavior for strings anyway, it makes sense to remove it from link_to. This ensures that *all* URLs are generated in the same place.

I've also moved the :back option to url_for to have all the URL generation functionality encapsulated in url_for and have link_to focus solely on the creation of the actual link tag. Plus, I've changed the order of the case when because I think with modern Rails applications, named routes (and therefore strings) are the preferred option. This might give a little performance increase because it already hits the first when clause instead of the second.

Patch is attached. All existing tests pass.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
While working on an app where I had to manipulate a URL after its creation I found that some URLs weren't affected by my change. What I did was to alias_method_chain the UrlHelper#url_for method. If I used link_to with a hash or an object, my modifications where applied whereas with a named route path it seemed to just ignore it.
&lt;/p&gt;&lt;p&gt;
The problem is that link_to, when used with a string (a named route call generates a string), uses the string directly as its href instead of passing it to url_for.
&lt;/p&gt;&lt;p&gt;
Since url_for has the same behavior for strings anyway, it makes sense to remove it from link_to. This ensures that &lt;strong&gt;all&lt;/strong&gt; URLs are generated in the same place.
&lt;/p&gt;&lt;p&gt;
I've also moved the :back option to url_for to have all the URL generation functionality encapsulated in url_for and have link_to focus solely on the creation of the actual link tag. Plus, I've changed the order of the case when because I think with modern Rails applications, named routes (and therefore strings) are the preferred option. This might give a little performance increase because it already hits the first when clause instead of the second.
&lt;/p&gt;&lt;p&gt;
Patch is attached. All existing tests pass.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>While working on an app where I had to manipulate a URL after its creation I found that some URLs weren't affected by my change. What I did was to alias_method_chain the UrlHelper#url_for method. If I used link_to with a hash or an object, my modifications where applied whereas with a named route path it seemed to just ignore it.

The problem is that link_to, when used with a string (a named route call generates a string), uses the string directly as its href instead of passing it to url_for.

Since url_for has the same behavior for strings anyway, it makes sense to remove it from link_to. This ensures that *all* URLs are generated in the same place.

I've also moved the :back option to url_for to have all the URL generation functionality encapsulated in url_for and have link_to focus solely on the creation of the actual link tag. Plus, I've changed the order of the case when because I think with modern Rails applications, named routes (and therefore strings) are the preferred option. This might give a little performance increase because it already hits the first when clause instead of the second.

Patch is attached. All existing tests pass.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
While working on an app where I had to manipulate a URL after its creation I found that some URLs weren't affected by my change. What I did was to alias_method_chain the UrlHelper#url_for method. If I used link_to with a hash or an object, my modifications where applied whereas with a named route path it seemed to just ignore it.
&lt;/p&gt;&lt;p&gt;
The problem is that link_to, when used with a string (a named route call generates a string), uses the string directly as its href instead of passing it to url_for.
&lt;/p&gt;&lt;p&gt;
Since url_for has the same behavior for strings anyway, it makes sense to remove it from link_to. This ensures that &lt;strong&gt;all&lt;/strong&gt; URLs are generated in the same place.
&lt;/p&gt;&lt;p&gt;
I've also moved the :back option to url_for to have all the URL generation functionality encapsulated in url_for and have link_to focus solely on the creation of the actual link tag. Plus, I've changed the order of the case when because I think with modern Rails applications, named routes (and therefore strings) are the preferred option. This might give a little performance increase because it already hits the first when clause instead of the second.
&lt;/p&gt;&lt;p&gt;
Patch is attached. All existing tests pass.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-19T00:12:49+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">657</number>
      <permalink>link_to-duplicates-behavior-of-url_for</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>helper link_to patch refactoring routing tested url_for</tag>
      <title>link_to duplicates behavior of url_for</title>
      <updated-at type="datetime">2008-07-19T00:12:49+01:00</updated-at>
      <user-id type="integer">18096</user-id>
      <version type="integer">1</version>
      <user-name>Clemens Kofler</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/657</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Didn't see the ticket. I already pulled from your github repo.

If lighthouse will let you, assign all your AV form helper patches to me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Didn't see the ticket. I already pulled from your github repo.
&lt;/p&gt;&lt;p&gt;
If lighthouse will let you, assign all your AV form helper patches to me.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-19T21:26:17+01:00</created-at>
      <creator-id type="integer">18096</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">657</number>
      <permalink>link_to-duplicates-behavior-of-url_for</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>helper link_to patch refactoring routing tested url_for</tag>
      <title>link_to duplicates behavior of url_for</title>
      <updated-at type="datetime">2008-07-19T21:26:17+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Clemens Kofler</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/657</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>8c9bafd596198bea5307201d69b6151a78e8ecbf</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-07-19T00:12:49+01:00</created-at>
      <filename>link_to_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">33654</id>
      <size type="integer">1914</size>
      <uploader-id type="integer">18096</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/33654/link_to_patch.diff</url>
    </attachment>
  </attachments>
</ticket>
