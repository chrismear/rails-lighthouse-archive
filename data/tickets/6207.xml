<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-22T15:47:49+00:00</created-at>
  <creator-id type="integer">129861</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6207</number>
  <permalink>has_many-through-after_add-goes-through-parent-relationship-but-after_remove-does-not</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>has_many :through after_add goes through parent relationship, but after_remove does not</title>
  <updated-at type="datetime">2011-03-23T00:01:59+00:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">3</version>
  <user-name>rails</user-name>
  <creator-name>Doug Petkanics</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6207</url>
  <priority-name nil="true"></priority-name>
  <original-body>In the case of a has_many :through relationship, which also happens to be polymorphic in both directions, the after_add callback gets executed for both the direct relationship and the through relationship. It seems like there is an inconsistency though, as the after_remove callback only gets executed on the direct relationship and not the through relationship. This is best shown by the following example where there are polymorphic types Locations and People. User being and instance of Person and Address being an instance of Location.

@@@ ruby
# location_person.rb
class LocationPerson &lt; ActiveRecord::Base
  belongs_to :location, :polymorphic =&gt; true
  belongs_to :person, :polymorphic =&gt; true
end

# address.rb
class Address &lt; ActiveRecord::Base
  has_many :people, :as =&gt; :location, :class_name =&gt; &quot;LocationPerson&quot;
end

# user.rb
class User &lt; ActiveRecord::Base
  has_many :locations, :as =&gt; :person, :class_name =&gt; &quot;LocationPerson&quot;, :after_remove =&gt; :remove_location_point, :after_add =&gt; :add_location_point
  has_many :addresses, :through =&gt; :locations, :source =&gt; :location, :source_type =&gt; &quot;Address&quot;, :after_remove =&gt; :remove_address_point, :after_add =&gt; :add_address_point

  def remove_location_point(location)
    puts &quot;Removing Location Point&quot;
  end

  def remove_address_point(address)
    puts &quot;Removing Address Point&quot;
  end

  def add_location_point(location)
    puts &quot;Adding Location Point&quot;
  end

  def add_address_point(address)
    puts &quot;Adding Address Point&quot;
  end
end
@@@

Call the following in console to demonstrate the asymetry:

@@@ shell
ruby-1.8.7-p302 &gt; user = User.create
 =&gt; #&lt;User id: 2, created_at: &quot;2010-12-22 15:44:14&quot;, updated_at: &quot;2010-12-22 15:44:14&quot;&gt; 
ruby-1.8.7-p302 &gt; addr = Address.create
 =&gt; #&lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&gt; 
ruby-1.8.7-p302 &gt; user.addresses &lt;&lt; addr
Adding Location Point
Adding Address Point
 =&gt; [#&lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&gt;] 
ruby-1.8.7-p302 &gt; user.addresses = []
Removing Address Point
 =&gt; [] 
@@@

As you can see, &quot;Adding Location Point&quot; and &quot;Adding Address Point&quot; were both printed indicating both after_add callbacks were executed. However only &quot;Removing Address Point&quot; was printed indicating that the after_remove callback on the :locations relationship was never called.</original-body>
  <latest-body>In the case of a has_many :through relationship, which also happens to be polymorphic in both directions, the after_add callback gets executed for both the direct relationship and the through relationship. It seems like there is an inconsistency though, as the after_remove callback only gets executed on the direct relationship and not the through relationship. This is best shown by the following example where there are polymorphic types Locations and People. User being and instance of Person and Address being an instance of Location.

@@@ ruby
# location_person.rb
class LocationPerson &lt; ActiveRecord::Base
  belongs_to :location, :polymorphic =&gt; true
  belongs_to :person, :polymorphic =&gt; true
end

# address.rb
class Address &lt; ActiveRecord::Base
  has_many :people, :as =&gt; :location, :class_name =&gt; &quot;LocationPerson&quot;
end

# user.rb
class User &lt; ActiveRecord::Base
  has_many :locations, :as =&gt; :person, :class_name =&gt; &quot;LocationPerson&quot;, :after_remove =&gt; :remove_location_point, :after_add =&gt; :add_location_point
  has_many :addresses, :through =&gt; :locations, :source =&gt; :location, :source_type =&gt; &quot;Address&quot;, :after_remove =&gt; :remove_address_point, :after_add =&gt; :add_address_point

  def remove_location_point(location)
    puts &quot;Removing Location Point&quot;
  end

  def remove_address_point(address)
    puts &quot;Removing Address Point&quot;
  end

  def add_location_point(location)
    puts &quot;Adding Location Point&quot;
  end

  def add_address_point(address)
    puts &quot;Adding Address Point&quot;
  end
end
@@@

Call the following in console to demonstrate the asymetry:

@@@ shell
ruby-1.8.7-p302 &gt; user = User.create
 =&gt; #&lt;User id: 2, created_at: &quot;2010-12-22 15:44:14&quot;, updated_at: &quot;2010-12-22 15:44:14&quot;&gt; 
ruby-1.8.7-p302 &gt; addr = Address.create
 =&gt; #&lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&gt; 
ruby-1.8.7-p302 &gt; user.addresses &lt;&lt; addr
Adding Location Point
Adding Address Point
 =&gt; [#&lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&gt;] 
ruby-1.8.7-p302 &gt; user.addresses = []
Removing Address Point
 =&gt; [] 
@@@

As you can see, &quot;Adding Location Point&quot; and &quot;Adding Address Point&quot; were both printed indicating both after_add callbacks were executed. However only &quot;Removing Address Point&quot; was printed indicating that the after_remove callback on the :locations relationship was never called.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In the case of a has_many :through relationship, which also
happens to be polymorphic in both directions, the after_add
callback gets executed for both the direct relationship and the
through relationship. It seems like there is an inconsistency
though, as the after_remove callback only gets executed on the
direct relationship and not the through relationship. This is best
shown by the following example where there are polymorphic types
Locations and People. User being and instance of Person and Address
being an instance of Location.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# location_person.rb
class LocationPerson &amp;lt; ActiveRecord::Base
  belongs_to :location, :polymorphic =&amp;gt; true
  belongs_to :person, :polymorphic =&amp;gt; true
end

# address.rb
class Address &amp;lt; ActiveRecord::Base
  has_many :people, :as =&amp;gt; :location, :class_name =&amp;gt; &quot;LocationPerson&quot;
end

# user.rb
class User &amp;lt; ActiveRecord::Base
  has_many :locations, :as =&amp;gt; :person, :class_name =&amp;gt; &quot;LocationPerson&quot;, :after_remove =&amp;gt; :remove_location_point, :after_add =&amp;gt; :add_location_point
  has_many :addresses, :through =&amp;gt; :locations, :source =&amp;gt; :location, :source_type =&amp;gt; &quot;Address&quot;, :after_remove =&amp;gt; :remove_address_point, :after_add =&amp;gt; :add_address_point

  def remove_location_point(location)
    puts &quot;Removing Location Point&quot;
  end

  def remove_address_point(address)
    puts &quot;Removing Address Point&quot;
  end

  def add_location_point(location)
    puts &quot;Adding Location Point&quot;
  end

  def add_address_point(address)
    puts &quot;Adding Address Point&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Call the following in console to demonstrate the asymetry:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;ruby-1.8.7-p302 &amp;gt; user = User.create
 =&amp;gt; #&amp;lt;User id: 2, created_at: &quot;2010-12-22 15:44:14&quot;, updated_at: &quot;2010-12-22 15:44:14&quot;&amp;gt; 
ruby-1.8.7-p302 &amp;gt; addr = Address.create
 =&amp;gt; #&amp;lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&amp;gt; 
ruby-1.8.7-p302 &amp;gt; user.addresses &amp;lt;&amp;lt; addr
Adding Location Point
Adding Address Point
 =&amp;gt; [#&amp;lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&amp;gt;] 
ruby-1.8.7-p302 &amp;gt; user.addresses = []
Removing Address Point
 =&amp;gt; []&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, &quot;Adding Location Point&quot; and &quot;Adding Address
Point&quot; were both printed indicating both after_add callbacks were
executed. However only &quot;Removing Address Point&quot; was printed
indicating that the after_remove callback on the :locations
relationship was never called.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In the case of a has_many :through relationship, which also happens to be polymorphic in both directions, the after_add callback gets executed for both the direct relationship and the through relationship. It seems like there is an inconsistency though, as the after_remove callback only gets executed on the direct relationship and not the through relationship. This is best shown by the following example where there are polymorphic types Locations and People. User being and instance of Person and Address being an instance of Location.

@@@ ruby
# location_person.rb
class LocationPerson &lt; ActiveRecord::Base
  belongs_to :location, :polymorphic =&gt; true
  belongs_to :person, :polymorphic =&gt; true
end

# address.rb
class Address &lt; ActiveRecord::Base
  has_many :people, :as =&gt; :location, :class_name =&gt; &quot;LocationPerson&quot;
end

# user.rb
class User &lt; ActiveRecord::Base
  has_many :locations, :as =&gt; :person, :class_name =&gt; &quot;LocationPerson&quot;, :after_remove =&gt; :remove_location_point, :after_add =&gt; :add_location_point
  has_many :addresses, :through =&gt; :locations, :source =&gt; :location, :source_type =&gt; &quot;Address&quot;, :after_remove =&gt; :remove_address_point, :after_add =&gt; :add_address_point

  def remove_location_point(location)
    puts &quot;Removing Location Point&quot;
  end

  def remove_address_point(address)
    puts &quot;Removing Address Point&quot;
  end

  def add_location_point(location)
    puts &quot;Adding Location Point&quot;
  end

  def add_address_point(address)
    puts &quot;Adding Address Point&quot;
  end
end
@@@

Call the following in console to demonstrate the asymetry:

@@@ shell
ruby-1.8.7-p302 &gt; user = User.create
 =&gt; #&lt;User id: 2, created_at: &quot;2010-12-22 15:44:14&quot;, updated_at: &quot;2010-12-22 15:44:14&quot;&gt; 
ruby-1.8.7-p302 &gt; addr = Address.create
 =&gt; #&lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&gt; 
ruby-1.8.7-p302 &gt; user.addresses &lt;&lt; addr
Adding Location Point
Adding Address Point
 =&gt; [#&lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&gt;] 
ruby-1.8.7-p302 &gt; user.addresses = []
Removing Address Point
 =&gt; [] 
@@@

As you can see, &quot;Adding Location Point&quot; and &quot;Adding Address Point&quot; were both printed indicating both after_add callbacks were executed. However only &quot;Removing Address Point&quot; was printed indicating that the after_remove callback on the :locations relationship was never called.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In the case of a has_many :through relationship, which also
happens to be polymorphic in both directions, the after_add
callback gets executed for both the direct relationship and the
through relationship. It seems like there is an inconsistency
though, as the after_remove callback only gets executed on the
direct relationship and not the through relationship. This is best
shown by the following example where there are polymorphic types
Locations and People. User being and instance of Person and Address
being an instance of Location.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;# location_person.rb
class LocationPerson &amp;lt; ActiveRecord::Base
  belongs_to :location, :polymorphic =&amp;gt; true
  belongs_to :person, :polymorphic =&amp;gt; true
end

# address.rb
class Address &amp;lt; ActiveRecord::Base
  has_many :people, :as =&amp;gt; :location, :class_name =&amp;gt; &quot;LocationPerson&quot;
end

# user.rb
class User &amp;lt; ActiveRecord::Base
  has_many :locations, :as =&amp;gt; :person, :class_name =&amp;gt; &quot;LocationPerson&quot;, :after_remove =&amp;gt; :remove_location_point, :after_add =&amp;gt; :add_location_point
  has_many :addresses, :through =&amp;gt; :locations, :source =&amp;gt; :location, :source_type =&amp;gt; &quot;Address&quot;, :after_remove =&amp;gt; :remove_address_point, :after_add =&amp;gt; :add_address_point

  def remove_location_point(location)
    puts &quot;Removing Location Point&quot;
  end

  def remove_address_point(address)
    puts &quot;Removing Address Point&quot;
  end

  def add_location_point(location)
    puts &quot;Adding Location Point&quot;
  end

  def add_address_point(address)
    puts &quot;Adding Address Point&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Call the following in console to demonstrate the asymetry:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;shell&quot;&gt;ruby-1.8.7-p302 &amp;gt; user = User.create
 =&amp;gt; #&amp;lt;User id: 2, created_at: &quot;2010-12-22 15:44:14&quot;, updated_at: &quot;2010-12-22 15:44:14&quot;&amp;gt; 
ruby-1.8.7-p302 &amp;gt; addr = Address.create
 =&amp;gt; #&amp;lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&amp;gt; 
ruby-1.8.7-p302 &amp;gt; user.addresses &amp;lt;&amp;lt; addr
Adding Location Point
Adding Address Point
 =&amp;gt; [#&amp;lt;Address id: 2, created_at: &quot;2010-12-22 15:44:23&quot;, updated_at: &quot;2010-12-22 15:44:23&quot;&amp;gt;] 
ruby-1.8.7-p302 &amp;gt; user.addresses = []
Removing Address Point
 =&amp;gt; []&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, &quot;Adding Location Point&quot; and &quot;Adding Address
Point&quot; were both printed indicating both after_add callbacks were
executed. However only &quot;Removing Address Point&quot; was printed
indicating that the after_remove callback on the :locations
relationship was never called.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-22T15:47:49+00:00</created-at>
      <creator-id type="integer">129861</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6207</number>
      <permalink>has_many-through-after_add-goes-through-parent-relationship-but-after_remove-does-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :through after_add goes through parent relationship, but after_remove does not</title>
      <updated-at type="datetime">2010-12-22T15:47:51+00:00</updated-at>
      <user-id type="integer">129861</user-id>
      <version type="integer">1</version>
      <user-name>Doug Petkanics</user-name>
      <creator-name>Doug Petkanics</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6207</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T00:00:11+00:00</created-at>
      <creator-id type="integer">129861</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6207</number>
      <permalink>has_many-through-after_add-goes-through-parent-relationship-but-after_remove-does-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>has_many :through after_add goes through parent relationship, but after_remove does not</title>
      <updated-at type="datetime">2011-03-23T00:01:59+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Doug Petkanics</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6207</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-23T00:00:11+00:00</created-at>
      <creator-id type="integer">129861</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6207</number>
      <permalink>has_many-through-after_add-goes-through-parent-relationship-but-after_remove-does-not</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>has_many :through after_add goes through parent relationship, but after_remove does not</title>
      <updated-at type="datetime">2011-03-23T00:01:38+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Doug Petkanics</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6207</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
