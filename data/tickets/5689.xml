<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-23T12:17:38+01:00</created-at>
  <creator-id type="integer">115276</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5689</number>
  <permalink>assert_generates-expects-unexpected-generated_path</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>generate_extras rails3.0.0 &quot;routing assert_generates&quot;</tag>
  <title>assert_generates expects unexpected generated_path</title>
  <updated-at type="datetime">2010-09-23T14:16:11+01:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">3</version>
  <user-name>Andrew White</user-name>
  <creator-name>Frederik Vollert</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5689</url>
  <priority-name>Low</priority-name>
  <original-body>The following difficulty concerning assert_generates (defined in actionpack-3.0.0/lib/action_dispatch/testing/assertions/routing.rb:94) occured while using RSpec2 and was discussed as &quot;ruby-related issue&quot; in November '09 (https://rspec.lighthouseapp.com/projects/5645/tickets/907-the-generated-path-jsissues2fedit-did-not-match-jsissuesedit).

Perhaps this is not a malfunction, but a misunderstanding of the usage of this assertion as illustrated in http://apidock.com/rails/v3.0.0/ActionDispatch/Assertions/RoutingAssertions/assert_generates .

Given I have set up the following routes in Rails 3.0.0 (Ruby 1.9.2):

@@@ ruby
MyApp::Application.routes.draw do
  match 'logout1' =&gt; 'user_sessions#destroy', :as =&gt; 'logout1'
  match 'logout2' =&gt; 'user_sessions#destroy', :as =&gt; 'logout2'
  match 'logout3' =&gt; 'user_sessions#destroy'
  match 'login' =&gt; 'user_sessions#new', :as =&gt; 'login'

  resources :user_sessions
end
@@@

The following assertions (excerpt from routing spec) ...

@@@ ruby
assert_generates &quot;/logout1&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/logout2&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/logout3&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/login&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
@@@ ruby

... used e.g. in RSpec produce the following results:

@@@
Failures:
  1) General routing recognizes /logout2
     Failure/Error: { :get =&gt; &quot;/logout2&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;destroy&quot;)
     The generated path &lt;&quot;/logout1&quot;&gt; did not match &lt;&quot;/logout2&quot;&gt;.
 
  2) General routing recognizes /logout3
     Failure/Error: { :get =&gt; &quot;/logout3&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;destroy&quot;)
     The generated path &lt;&quot;/logout1&quot;&gt; did not match &lt;&quot;/logout3&quot;&gt;.
 
  3) General routing recognizes /login
     Failure/Error: { :get =&gt; &quot;/login&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;)
     The generated path &lt;&quot;/user_sessions/new&quot;&gt; did not match &lt;&quot;/login&quot;&gt;.
@@@

The first named route is accepted as generated_path and expected_path both have the value &quot;/logout1&quot;. The following two are not recognized, but work fine as does the &quot;login&quot;-route.

In [...]action_dispatch/testing/assertions/routing.rb:86 @routes.generate_extras seems to return the &quot;unexpected&quot; route.

@@@ ruby
      def assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)
        if expected_path =~ %r{://}
          begin
            uri = URI.parse(expected_path)
            expected_path = uri.path.to_s.empty? ? &quot;/&quot; : uri.path
          rescue URI::InvalidURIError =&gt; e
            raise ActionController::RoutingError, e.message
          end
        else
          expected_path = &quot;/#{expected_path}&quot; unless expected_path.first == '/'
        end
        # Load routes.rb if it hasn't been loaded.

        generated_path, extra_keys = @routes.generate_extras(options, defaults)
        found_extras = options.reject {|k, v| ! extra_keys.include? k}

        msg = build_message(message, &quot;found extras &lt;?&gt;, not &lt;?&gt;&quot;, found_extras, extras)
        assert_block(msg) { found_extras == extras }
        msg = build_message(message, &quot;The generated path &lt;?&gt; did not match &lt;?&gt;&quot;, generated_path,
            expected_path)
        assert_block(msg) { expected_path == generated_path }
      end
@@@

Though they are all four existing as in &quot;rake routes&quot;:
@@@
logout1        /logout1(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
logout2        /logout2(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
logout3        /logout3(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
login          /login(.:format)                                    {:action=&gt;&quot;new&quot;, :controller=&gt;&quot;user_sessions&quot;}
[...]
user_sessions     GET    /user_sessions(.:format)                  {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_sessions     POST   /user_sessions(.:format)                  {:action=&gt;&quot;create&quot;, :controller=&gt;&quot;user_sessions&quot;}
new_user_session  GET    /user_sessions/new(.:format)              {:action=&gt;&quot;new&quot;, :controller=&gt;&quot;user_sessions&quot;}
edit_user_session GET    /user_sessions/:id/edit(.:format)         {:action=&gt;&quot;edit&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      GET    /user_sessions/:id(.:format)              {:action=&gt;&quot;show&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      PUT    /user_sessions/:id(.:format)              {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      DELETE /user_sessions/:id(.:format)              {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
@@@

I haven't found a ticket concerning assert_generates and saw that Josh worked on this bit of code, so I figured to create a ticket to clarify this issue.</original-body>
  <latest-body>The following difficulty concerning assert_generates (defined in actionpack-3.0.0/lib/action_dispatch/testing/assertions/routing.rb:94) occured while using RSpec2 and was discussed as &quot;ruby-related issue&quot; in November '09 (https://rspec.lighthouseapp.com/projects/5645/tickets/907-the-generated-path-jsissues2fedit-did-not-match-jsissuesedit).

Perhaps this is not a malfunction, but a misunderstanding of the usage of this assertion as illustrated in http://apidock.com/rails/v3.0.0/ActionDispatch/Assertions/RoutingAssertions/assert_generates .

Given I have set up the following routes in Rails 3.0.0 (Ruby 1.9.2):

@@@ ruby
MyApp::Application.routes.draw do
  match 'logout1' =&gt; 'user_sessions#destroy', :as =&gt; 'logout1'
  match 'logout2' =&gt; 'user_sessions#destroy', :as =&gt; 'logout2'
  match 'logout3' =&gt; 'user_sessions#destroy'
  match 'login' =&gt; 'user_sessions#new', :as =&gt; 'login'

  resources :user_sessions
end
@@@

The following assertions (excerpt from routing spec) ...

@@@ ruby
assert_generates &quot;/logout1&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/logout2&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/logout3&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/login&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
@@@ ruby

... used e.g. in RSpec produce the following results:

@@@
Failures:
  1) General routing recognizes /logout2
     Failure/Error: { :get =&gt; &quot;/logout2&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;destroy&quot;)
     The generated path &lt;&quot;/logout1&quot;&gt; did not match &lt;&quot;/logout2&quot;&gt;.
 
  2) General routing recognizes /logout3
     Failure/Error: { :get =&gt; &quot;/logout3&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;destroy&quot;)
     The generated path &lt;&quot;/logout1&quot;&gt; did not match &lt;&quot;/logout3&quot;&gt;.
 
  3) General routing recognizes /login
     Failure/Error: { :get =&gt; &quot;/login&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;)
     The generated path &lt;&quot;/user_sessions/new&quot;&gt; did not match &lt;&quot;/login&quot;&gt;.
@@@

The first named route is accepted as generated_path and expected_path both have the value &quot;/logout1&quot;. The following two are not recognized, but work fine as does the &quot;login&quot;-route.

In [...]action_dispatch/testing/assertions/routing.rb:86 @routes.generate_extras seems to return the &quot;unexpected&quot; route.

@@@ ruby
      def assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)
        if expected_path =~ %r{://}
          begin
            uri = URI.parse(expected_path)
            expected_path = uri.path.to_s.empty? ? &quot;/&quot; : uri.path
          rescue URI::InvalidURIError =&gt; e
            raise ActionController::RoutingError, e.message
          end
        else
          expected_path = &quot;/#{expected_path}&quot; unless expected_path.first == '/'
        end
        # Load routes.rb if it hasn't been loaded.

        generated_path, extra_keys = @routes.generate_extras(options, defaults)
        found_extras = options.reject {|k, v| ! extra_keys.include? k}

        msg = build_message(message, &quot;found extras &lt;?&gt;, not &lt;?&gt;&quot;, found_extras, extras)
        assert_block(msg) { found_extras == extras }
        msg = build_message(message, &quot;The generated path &lt;?&gt; did not match &lt;?&gt;&quot;, generated_path,
            expected_path)
        assert_block(msg) { expected_path == generated_path }
      end
@@@

Though they are all four existing as in &quot;rake routes&quot;:
@@@
logout1        /logout1(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
logout2        /logout2(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
logout3        /logout3(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
login          /login(.:format)                                    {:action=&gt;&quot;new&quot;, :controller=&gt;&quot;user_sessions&quot;}
[...]
user_sessions     GET    /user_sessions(.:format)                  {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_sessions     POST   /user_sessions(.:format)                  {:action=&gt;&quot;create&quot;, :controller=&gt;&quot;user_sessions&quot;}
new_user_session  GET    /user_sessions/new(.:format)              {:action=&gt;&quot;new&quot;, :controller=&gt;&quot;user_sessions&quot;}
edit_user_session GET    /user_sessions/:id/edit(.:format)         {:action=&gt;&quot;edit&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      GET    /user_sessions/:id(.:format)              {:action=&gt;&quot;show&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      PUT    /user_sessions/:id(.:format)              {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      DELETE /user_sessions/:id(.:format)              {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
@@@

I haven't found a ticket concerning assert_generates and saw that Josh worked on this bit of code, so I figured to create a ticket to clarify this issue.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The following difficulty concerning assert_generates (defined in
actionpack-3.0.0/lib/action_dispatch/testing/assertions/routing.rb:94)
occured while using RSpec2 and was discussed as &quot;ruby-related
issue&quot; in November '09 (&lt;a href=
&quot;https://rspec.lighthouseapp.com/projects/5645/tickets/907-the-generated-path-jsissues2fedit-did-not-match-jsissuesedit)&quot;&gt;https://rspec.lighthouseapp.com/projects/5645/tickets/907-the-gener...&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Perhaps this is not a malfunction, but a misunderstanding of the
usage of this assertion as illustrated in &lt;a href=
&quot;http://apidock.com/rails/v3.0.0/ActionDispatch/Assertions/RoutingAssertions/assert_generates&quot;&gt;
http://apidock.com/rails/v3.0.0/ActionDispatch/Assertions/RoutingAs...&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Given I have set up the following routes in Rails 3.0.0 (Ruby
1.9.2):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;MyApp::Application.routes.draw do
  match 'logout1' =&amp;gt; 'user_sessions#destroy', :as =&amp;gt; 'logout1'
  match 'logout2' =&amp;gt; 'user_sessions#destroy', :as =&amp;gt; 'logout2'
  match 'logout3' =&amp;gt; 'user_sessions#destroy'
  match 'login' =&amp;gt; 'user_sessions#new', :as =&amp;gt; 'login'

  resources :user_sessions
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following assertions (excerpt from routing spec) ...&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;assert_generates &quot;/logout1&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;
assert_generates &quot;/logout2&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;
assert_generates &quot;/logout3&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;
assert_generates &quot;/login&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;... used e.g. in RSpec produce the following results:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Failures:
  1) General routing recognizes /logout2
     Failure/Error: { :get =&amp;gt; &quot;/logout2&quot; }.should route_to(:controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;destroy&quot;)
     The generated path &amp;lt;&quot;/logout1&quot;&amp;gt; did not match &amp;lt;&quot;/logout2&quot;&amp;gt;.
 
  2) General routing recognizes /logout3
     Failure/Error: { :get =&amp;gt; &quot;/logout3&quot; }.should route_to(:controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;destroy&quot;)
     The generated path &amp;lt;&quot;/logout1&quot;&amp;gt; did not match &amp;lt;&quot;/logout3&quot;&amp;gt;.
 
  3) General routing recognizes /login
     Failure/Error: { :get =&amp;gt; &quot;/login&quot; }.should route_to(:controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;)
     The generated path &amp;lt;&quot;/user_sessions/new&quot;&amp;gt; did not match &amp;lt;&quot;/login&quot;&amp;gt;.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first named route is accepted as generated_path and
expected_path both have the value &quot;/logout1&quot;. The following two are
not recognized, but work fine as does the &quot;login&quot;-route.&lt;/p&gt;
&lt;p&gt;In [...]action_dispatch/testing/assertions/routing.rb:86
@routes.generate_extras seems to return the &quot;unexpected&quot; route.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;      def assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)
        if expected_path =~ %r{://}
          begin
            uri = URI.parse(expected_path)
            expected_path = uri.path.to_s.empty? ? &quot;/&quot; : uri.path
          rescue URI::InvalidURIError =&amp;gt; e
            raise ActionController::RoutingError, e.message
          end
        else
          expected_path = &quot;/#{expected_path}&quot; unless expected_path.first == '/'
        end
        # Load routes.rb if it hasn't been loaded.

        generated_path, extra_keys = @routes.generate_extras(options, defaults)
        found_extras = options.reject {|k, v| ! extra_keys.include? k}

        msg = build_message(message, &quot;found extras &amp;lt;?&amp;gt;, not &amp;lt;?&amp;gt;&quot;, found_extras, extras)
        assert_block(msg) { found_extras == extras }
        msg = build_message(message, &quot;The generated path &amp;lt;?&amp;gt; did not match &amp;lt;?&amp;gt;&quot;, generated_path,
            expected_path)
        assert_block(msg) { expected_path == generated_path }
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Though they are all four existing as in &quot;rake routes&quot;:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;logout1        /logout1(.:format)                                  {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
logout2        /logout2(.:format)                                  {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
logout3        /logout3(.:format)                                  {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
login          /login(.:format)                                    {:action=&amp;gt;&quot;new&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
[...]
user_sessions     GET    /user_sessions(.:format)                  {:action=&amp;gt;&quot;index&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_sessions     POST   /user_sessions(.:format)                  {:action=&amp;gt;&quot;create&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
new_user_session  GET    /user_sessions/new(.:format)              {:action=&amp;gt;&quot;new&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
edit_user_session GET    /user_sessions/:id/edit(.:format)         {:action=&amp;gt;&quot;edit&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_session      GET    /user_sessions/:id(.:format)              {:action=&amp;gt;&quot;show&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_session      PUT    /user_sessions/:id(.:format)              {:action=&amp;gt;&quot;update&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_session      DELETE /user_sessions/:id(.:format)              {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I haven't found a ticket concerning assert_generates and saw
that Josh worked on this bit of code, so I figured to create a
ticket to clarify this issue.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The following difficulty concerning assert_generates (defined in actionpack-3.0.0/lib/action_dispatch/testing/assertions/routing.rb:94) occured while using RSpec2 and was discussed as &quot;ruby-related issue&quot; in November '09 (https://rspec.lighthouseapp.com/projects/5645/tickets/907-the-generated-path-jsissues2fedit-did-not-match-jsissuesedit).

Perhaps this is not a malfunction, but a misunderstanding of the usage of this assertion as illustrated in http://apidock.com/rails/v3.0.0/ActionDispatch/Assertions/RoutingAssertions/assert_generates .

Given I have set up the following routes in Rails 3.0.0 (Ruby 1.9.2):

@@@ ruby
MyApp::Application.routes.draw do
  match 'logout1' =&gt; 'user_sessions#destroy', :as =&gt; 'logout1'
  match 'logout2' =&gt; 'user_sessions#destroy', :as =&gt; 'logout2'
  match 'logout3' =&gt; 'user_sessions#destroy'
  match 'login' =&gt; 'user_sessions#new', :as =&gt; 'login'

  resources :user_sessions
end
@@@

The following assertions (excerpt from routing spec) ...

@@@ ruby
assert_generates &quot;/logout1&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/logout2&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/logout3&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
assert_generates &quot;/login&quot;, :controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;
@@@ ruby

... used e.g. in RSpec produce the following results:

@@@
Failures:
  1) General routing recognizes /logout2
     Failure/Error: { :get =&gt; &quot;/logout2&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;destroy&quot;)
     The generated path &lt;&quot;/logout1&quot;&gt; did not match &lt;&quot;/logout2&quot;&gt;.
 
  2) General routing recognizes /logout3
     Failure/Error: { :get =&gt; &quot;/logout3&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;destroy&quot;)
     The generated path &lt;&quot;/logout1&quot;&gt; did not match &lt;&quot;/logout3&quot;&gt;.
 
  3) General routing recognizes /login
     Failure/Error: { :get =&gt; &quot;/login&quot; }.should route_to(:controller =&gt; &quot;user_sessions&quot;, :action =&gt; &quot;new&quot;)
     The generated path &lt;&quot;/user_sessions/new&quot;&gt; did not match &lt;&quot;/login&quot;&gt;.
@@@

The first named route is accepted as generated_path and expected_path both have the value &quot;/logout1&quot;. The following two are not recognized, but work fine as does the &quot;login&quot;-route.

In [...]action_dispatch/testing/assertions/routing.rb:86 @routes.generate_extras seems to return the &quot;unexpected&quot; route.

@@@ ruby
      def assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)
        if expected_path =~ %r{://}
          begin
            uri = URI.parse(expected_path)
            expected_path = uri.path.to_s.empty? ? &quot;/&quot; : uri.path
          rescue URI::InvalidURIError =&gt; e
            raise ActionController::RoutingError, e.message
          end
        else
          expected_path = &quot;/#{expected_path}&quot; unless expected_path.first == '/'
        end
        # Load routes.rb if it hasn't been loaded.

        generated_path, extra_keys = @routes.generate_extras(options, defaults)
        found_extras = options.reject {|k, v| ! extra_keys.include? k}

        msg = build_message(message, &quot;found extras &lt;?&gt;, not &lt;?&gt;&quot;, found_extras, extras)
        assert_block(msg) { found_extras == extras }
        msg = build_message(message, &quot;The generated path &lt;?&gt; did not match &lt;?&gt;&quot;, generated_path,
            expected_path)
        assert_block(msg) { expected_path == generated_path }
      end
@@@

Though they are all four existing as in &quot;rake routes&quot;:
@@@
logout1        /logout1(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
logout2        /logout2(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
logout3        /logout3(.:format)                                  {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
login          /login(.:format)                                    {:action=&gt;&quot;new&quot;, :controller=&gt;&quot;user_sessions&quot;}
[...]
user_sessions     GET    /user_sessions(.:format)                  {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_sessions     POST   /user_sessions(.:format)                  {:action=&gt;&quot;create&quot;, :controller=&gt;&quot;user_sessions&quot;}
new_user_session  GET    /user_sessions/new(.:format)              {:action=&gt;&quot;new&quot;, :controller=&gt;&quot;user_sessions&quot;}
edit_user_session GET    /user_sessions/:id/edit(.:format)         {:action=&gt;&quot;edit&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      GET    /user_sessions/:id(.:format)              {:action=&gt;&quot;show&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      PUT    /user_sessions/:id(.:format)              {:action=&gt;&quot;update&quot;, :controller=&gt;&quot;user_sessions&quot;}
user_session      DELETE /user_sessions/:id(.:format)              {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;user_sessions&quot;}
@@@

I haven't found a ticket concerning assert_generates and saw that Josh worked on this bit of code, so I figured to create a ticket to clarify this issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The following difficulty concerning assert_generates (defined in
actionpack-3.0.0/lib/action_dispatch/testing/assertions/routing.rb:94)
occured while using RSpec2 and was discussed as &quot;ruby-related
issue&quot; in November '09 (&lt;a href=
&quot;https://rspec.lighthouseapp.com/projects/5645/tickets/907-the-generated-path-jsissues2fedit-did-not-match-jsissuesedit)&quot;&gt;https://rspec.lighthouseapp.com/projects/5645/tickets/907-the-gener...&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Perhaps this is not a malfunction, but a misunderstanding of the
usage of this assertion as illustrated in &lt;a href=
&quot;http://apidock.com/rails/v3.0.0/ActionDispatch/Assertions/RoutingAssertions/assert_generates&quot;&gt;
http://apidock.com/rails/v3.0.0/ActionDispatch/Assertions/RoutingAs...&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Given I have set up the following routes in Rails 3.0.0 (Ruby
1.9.2):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;MyApp::Application.routes.draw do
  match 'logout1' =&amp;gt; 'user_sessions#destroy', :as =&amp;gt; 'logout1'
  match 'logout2' =&amp;gt; 'user_sessions#destroy', :as =&amp;gt; 'logout2'
  match 'logout3' =&amp;gt; 'user_sessions#destroy'
  match 'login' =&amp;gt; 'user_sessions#new', :as =&amp;gt; 'login'

  resources :user_sessions
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The following assertions (excerpt from routing spec) ...&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;assert_generates &quot;/logout1&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;
assert_generates &quot;/logout2&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;
assert_generates &quot;/logout3&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;
assert_generates &quot;/login&quot;, :controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;... used e.g. in RSpec produce the following results:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Failures:
  1) General routing recognizes /logout2
     Failure/Error: { :get =&amp;gt; &quot;/logout2&quot; }.should route_to(:controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;destroy&quot;)
     The generated path &amp;lt;&quot;/logout1&quot;&amp;gt; did not match &amp;lt;&quot;/logout2&quot;&amp;gt;.
 
  2) General routing recognizes /logout3
     Failure/Error: { :get =&amp;gt; &quot;/logout3&quot; }.should route_to(:controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;destroy&quot;)
     The generated path &amp;lt;&quot;/logout1&quot;&amp;gt; did not match &amp;lt;&quot;/logout3&quot;&amp;gt;.
 
  3) General routing recognizes /login
     Failure/Error: { :get =&amp;gt; &quot;/login&quot; }.should route_to(:controller =&amp;gt; &quot;user_sessions&quot;, :action =&amp;gt; &quot;new&quot;)
     The generated path &amp;lt;&quot;/user_sessions/new&quot;&amp;gt; did not match &amp;lt;&quot;/login&quot;&amp;gt;.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first named route is accepted as generated_path and
expected_path both have the value &quot;/logout1&quot;. The following two are
not recognized, but work fine as does the &quot;login&quot;-route.&lt;/p&gt;
&lt;p&gt;In [...]action_dispatch/testing/assertions/routing.rb:86
@routes.generate_extras seems to return the &quot;unexpected&quot; route.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;      def assert_generates(expected_path, options, defaults={}, extras = {}, message=nil)
        if expected_path =~ %r{://}
          begin
            uri = URI.parse(expected_path)
            expected_path = uri.path.to_s.empty? ? &quot;/&quot; : uri.path
          rescue URI::InvalidURIError =&amp;gt; e
            raise ActionController::RoutingError, e.message
          end
        else
          expected_path = &quot;/#{expected_path}&quot; unless expected_path.first == '/'
        end
        # Load routes.rb if it hasn't been loaded.

        generated_path, extra_keys = @routes.generate_extras(options, defaults)
        found_extras = options.reject {|k, v| ! extra_keys.include? k}

        msg = build_message(message, &quot;found extras &amp;lt;?&amp;gt;, not &amp;lt;?&amp;gt;&quot;, found_extras, extras)
        assert_block(msg) { found_extras == extras }
        msg = build_message(message, &quot;The generated path &amp;lt;?&amp;gt; did not match &amp;lt;?&amp;gt;&quot;, generated_path,
            expected_path)
        assert_block(msg) { expected_path == generated_path }
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Though they are all four existing as in &quot;rake routes&quot;:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;logout1        /logout1(.:format)                                  {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
logout2        /logout2(.:format)                                  {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
logout3        /logout3(.:format)                                  {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
login          /login(.:format)                                    {:action=&amp;gt;&quot;new&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
[...]
user_sessions     GET    /user_sessions(.:format)                  {:action=&amp;gt;&quot;index&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_sessions     POST   /user_sessions(.:format)                  {:action=&amp;gt;&quot;create&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
new_user_session  GET    /user_sessions/new(.:format)              {:action=&amp;gt;&quot;new&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
edit_user_session GET    /user_sessions/:id/edit(.:format)         {:action=&amp;gt;&quot;edit&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_session      GET    /user_sessions/:id(.:format)              {:action=&amp;gt;&quot;show&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_session      PUT    /user_sessions/:id(.:format)              {:action=&amp;gt;&quot;update&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}
user_session      DELETE /user_sessions/:id(.:format)              {:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;user_sessions&quot;}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I haven't found a ticket concerning assert_generates and saw
that Josh worked on this bit of code, so I figured to create a
ticket to clarify this issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-23T12:17:38+01:00</created-at>
      <creator-id type="integer">115276</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5689</number>
      <permalink>assert_generates-expects-unexpected-generated_path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>generate_extras &quot;routing assert_generates&quot;</tag>
      <title>assert_generates expects unexpected generated_path</title>
      <updated-at type="datetime">2010-09-23T12:24:09+01:00</updated-at>
      <user-id type="integer">115276</user-id>
      <version type="integer">1</version>
      <user-name>Frederik Vollert</user-name>
      <creator-name>Frederik Vollert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5689</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-23T12:18:38+01:00</created-at>
      <creator-id type="integer">115276</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: generate_extras &quot;routing assert_generates&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5689</number>
      <permalink>assert_generates-expects-unexpected-generated_path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>generate_extras rails3.0.0 &quot;routing assert_generates&quot;</tag>
      <title>assert_generates expects unexpected generated_path</title>
      <updated-at type="datetime">2010-09-23T12:18:42+01:00</updated-at>
      <user-id type="integer">115276</user-id>
      <version type="integer">2</version>
      <user-name>Frederik Vollert</user-name>
      <creator-name>Frederik Vollert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5689</url>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The assert_generate code tries to generate a url from a set of options - in your case these options are the same so it always generates the first logout route.  In the login case the get method constraint of the /user_sessions/new path provides a more specific match so overrides the the /login route.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The assert_generate code tries to generate a url from a set of
options - in your case these options are the same so it always
generates the first logout route. In the login case the get method
constraint of the /user_sessions/new path provides a more specific
match so overrides the the /login route.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-23T14:16:08+01:00</created-at>
      <creator-id type="integer">115276</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
:assigned_user: 424
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5689</number>
      <permalink>assert_generates-expects-unexpected-generated_path</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>generate_extras rails3.0.0 &quot;routing assert_generates&quot;</tag>
      <title>assert_generates expects unexpected generated_path</title>
      <updated-at type="datetime">2010-09-23T14:16:11+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">3</version>
      <user-name>Andrew White</user-name>
      <creator-name>Frederik Vollert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5689</url>
      <priority-name>Low</priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
</ticket>
