<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-07T02:17:54+01:00</created-at>
  <creator-id type="integer">40656</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5324</number>
  <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord postgres postgresql &quot;time zone&quot; timezone</tag>
  <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
  <updated-at type="datetime">2011-03-28T01:00:28+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">7</version>
  <user-name>rails</user-name>
  <creator-name>Sean</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
  <priority-name nil="true"></priority-name>
  <original-body>It appears that setting Rails::Application.config.time_zone (in application.rb) does not set ActiveRecord::Base.default_timezone.

If I set the config.time_zone in my application.rb to, for example, Central Time, then firing up the console shows:

        &gt; Rails::application.config.time_zone
       =&gt; &quot;Central Time (US &amp; Canada)&quot;
        &gt; Rails::Application.config.active_record.default_timezone
       =&gt; nil

That may be expected behavior, and according to the postgres adapter, a nil value would cause activerecord to read the timezone from the default value of the postgres database, as per the following code (line 956):

          if ActiveRecord::Base.default_timezone == :utc
            execute(&quot;SET time zone 'UTC'&quot;)
          elsif @local_tz
            execute(&quot;SET time zone '#{@local_tz}'&quot;)
          end

However, the problem is that somewhere in the ActiveRecord stack, before calling the postgres adapter, the value of AR::Base.default_timezone is being changed from nil to 'utc'. This causes AR to try to execute the postgres command 'set time zone 'UTC'', which on a system where 'utc' is not recognized, will give the following error:

        PGError: ERROR:  unrecognized time zone name: &quot;UTC&quot;
        : SET time zone 'UTC'

(This can easily go unnoticed, because in most cases 'UTC' is valid. I discovered this problem, after much agony and hair pulling, on a freebsd system where it turns out postgres would only accept 'etc/utc' as a valid timezone, not 'utc'.)

I can verify that AR::Base.default_timezone is being set to 'utc' by checking the value just before the above lines, in the postgresql_adapter.rb:

          puts ActiveRecord::Base.default_timezone
          puts Rails::Application.config.time_zone          

          if ActiveRecord::Base.default_timezone == :utc
            execute(&quot;SET time zone 'UTC'&quot;)
          elsif @local_tz
            execute(&quot;SET time zone '#{@local_tz}'&quot;)
          end

The above, with config.time_zone set to Central Time, and AR::Base.default_timezone not set in application.rb, will return:

         utc
         Central Time (US &amp; Canada)

So it seems that config.time_zone is not having an effect on AR::Base.default_timezone.</original-body>
  <latest-body>It appears that setting Rails::Application.config.time_zone (in application.rb) does not set ActiveRecord::Base.default_timezone.

If I set the config.time_zone in my application.rb to, for example, Central Time, then firing up the console shows:

        &gt; Rails::application.config.time_zone
       =&gt; &quot;Central Time (US &amp; Canada)&quot;
        &gt; Rails::Application.config.active_record.default_timezone
       =&gt; nil

That may be expected behavior, and according to the postgres adapter, a nil value would cause activerecord to read the timezone from the default value of the postgres database, as per the following code (line 956):

          if ActiveRecord::Base.default_timezone == :utc
            execute(&quot;SET time zone 'UTC'&quot;)
          elsif @local_tz
            execute(&quot;SET time zone '#{@local_tz}'&quot;)
          end

However, the problem is that somewhere in the ActiveRecord stack, before calling the postgres adapter, the value of AR::Base.default_timezone is being changed from nil to 'utc'. This causes AR to try to execute the postgres command 'set time zone 'UTC'', which on a system where 'utc' is not recognized, will give the following error:

        PGError: ERROR:  unrecognized time zone name: &quot;UTC&quot;
        : SET time zone 'UTC'

(This can easily go unnoticed, because in most cases 'UTC' is valid. I discovered this problem, after much agony and hair pulling, on a freebsd system where it turns out postgres would only accept 'etc/utc' as a valid timezone, not 'utc'.)

I can verify that AR::Base.default_timezone is being set to 'utc' by checking the value just before the above lines, in the postgresql_adapter.rb:

          puts ActiveRecord::Base.default_timezone
          puts Rails::Application.config.time_zone          

          if ActiveRecord::Base.default_timezone == :utc
            execute(&quot;SET time zone 'UTC'&quot;)
          elsif @local_tz
            execute(&quot;SET time zone '#{@local_tz}'&quot;)
          end

The above, with config.time_zone set to Central Time, and AR::Base.default_timezone not set in application.rb, will return:

         utc
         Central Time (US &amp; Canada)

So it seems that config.time_zone is not having an effect on AR::Base.default_timezone.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It appears that setting Rails::Application.config.time_zone (in
application.rb) does not set
ActiveRecord::Base.default_timezone.&lt;/p&gt;
&lt;p&gt;If I set the config.time_zone in my application.rb to, for
example, Central Time, then firing up the console shows:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;gt; Rails::application.config.time_zone
   =&amp;gt; &quot;Central Time (US &amp;amp; Canada)&quot;
    &amp;gt; Rails::Application.config.active_record.default_timezone
   =&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That may be expected behavior, and according to the postgres
adapter, a nil value would cause activerecord to read the timezone
from the default value of the postgres database, as per the
following code (line 956):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      if ActiveRecord::Base.default_timezone == :utc
        execute(&quot;SET time zone 'UTC'&quot;)
      elsif @local_tz
        execute(&quot;SET time zone '#{@local_tz}'&quot;)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, the problem is that somewhere in the ActiveRecord
stack, before calling the postgres adapter, the value of
AR::Base.default_timezone is being changed from nil to 'utc'. This
causes AR to try to execute the postgres command 'set time zone
'UTC'', which on a system where 'utc' is not recognized, will give
the following error:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    PGError: ERROR:  unrecognized time zone name: &quot;UTC&quot;
    : SET time zone 'UTC'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(This can easily go unnoticed, because in most cases 'UTC' is
valid. I discovered this problem, after much agony and hair
pulling, on a freebsd system where it turns out postgres would only
accept 'etc/utc' as a valid timezone, not 'utc'.)&lt;/p&gt;
&lt;p&gt;I can verify that AR::Base.default_timezone is being set to
'utc' by checking the value just before the above lines, in the
postgresql_adapter.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      puts ActiveRecord::Base.default_timezone
      puts Rails::Application.config.time_zone          

      if ActiveRecord::Base.default_timezone == :utc
        execute(&quot;SET time zone 'UTC'&quot;)
      elsif @local_tz
        execute(&quot;SET time zone '#{@local_tz}'&quot;)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above, with config.time_zone set to Central Time, and
AR::Base.default_timezone not set in application.rb, will
return:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     utc
     Central Time (US &amp;amp; Canada)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So it seems that config.time_zone is not having an effect on
AR::Base.default_timezone.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It appears that setting Rails::Application.config.time_zone (in application.rb) does not set ActiveRecord::Base.default_timezone.

If I set the config.time_zone in my application.rb to, for example, Central Time, then firing up the console shows:

        &gt; Rails::application.config.time_zone
       =&gt; &quot;Central Time (US &amp; Canada)&quot;
        &gt; Rails::Application.config.active_record.default_timezone
       =&gt; nil

That may be expected behavior, and according to the postgres adapter, a nil value would cause activerecord to read the timezone from the default value of the postgres database, as per the following code (line 956):

          if ActiveRecord::Base.default_timezone == :utc
            execute(&quot;SET time zone 'UTC'&quot;)
          elsif @local_tz
            execute(&quot;SET time zone '#{@local_tz}'&quot;)
          end

However, the problem is that somewhere in the ActiveRecord stack, before calling the postgres adapter, the value of AR::Base.default_timezone is being changed from nil to 'utc'. This causes AR to try to execute the postgres command 'set time zone 'UTC'', which on a system where 'utc' is not recognized, will give the following error:

        PGError: ERROR:  unrecognized time zone name: &quot;UTC&quot;
        : SET time zone 'UTC'

(This can easily go unnoticed, because in most cases 'UTC' is valid. I discovered this problem, after much agony and hair pulling, on a freebsd system where it turns out postgres would only accept 'etc/utc' as a valid timezone, not 'utc'.)

I can verify that AR::Base.default_timezone is being set to 'utc' by checking the value just before the above lines, in the postgresql_adapter.rb:

          puts ActiveRecord::Base.default_timezone
          puts Rails::Application.config.time_zone          

          if ActiveRecord::Base.default_timezone == :utc
            execute(&quot;SET time zone 'UTC'&quot;)
          elsif @local_tz
            execute(&quot;SET time zone '#{@local_tz}'&quot;)
          end

The above, with config.time_zone set to Central Time, and AR::Base.default_timezone not set in application.rb, will return:

         utc
         Central Time (US &amp; Canada)

So it seems that config.time_zone is not having an effect on AR::Base.default_timezone.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It appears that setting Rails::Application.config.time_zone (in
application.rb) does not set
ActiveRecord::Base.default_timezone.&lt;/p&gt;
&lt;p&gt;If I set the config.time_zone in my application.rb to, for
example, Central Time, then firing up the console shows:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    &amp;gt; Rails::application.config.time_zone
   =&amp;gt; &quot;Central Time (US &amp;amp; Canada)&quot;
    &amp;gt; Rails::Application.config.active_record.default_timezone
   =&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That may be expected behavior, and according to the postgres
adapter, a nil value would cause activerecord to read the timezone
from the default value of the postgres database, as per the
following code (line 956):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      if ActiveRecord::Base.default_timezone == :utc
        execute(&quot;SET time zone 'UTC'&quot;)
      elsif @local_tz
        execute(&quot;SET time zone '#{@local_tz}'&quot;)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, the problem is that somewhere in the ActiveRecord
stack, before calling the postgres adapter, the value of
AR::Base.default_timezone is being changed from nil to 'utc'. This
causes AR to try to execute the postgres command 'set time zone
'UTC'', which on a system where 'utc' is not recognized, will give
the following error:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    PGError: ERROR:  unrecognized time zone name: &quot;UTC&quot;
    : SET time zone 'UTC'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;(This can easily go unnoticed, because in most cases 'UTC' is
valid. I discovered this problem, after much agony and hair
pulling, on a freebsd system where it turns out postgres would only
accept 'etc/utc' as a valid timezone, not 'utc'.)&lt;/p&gt;
&lt;p&gt;I can verify that AR::Base.default_timezone is being set to
'utc' by checking the value just before the above lines, in the
postgresql_adapter.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      puts ActiveRecord::Base.default_timezone
      puts Rails::Application.config.time_zone          

      if ActiveRecord::Base.default_timezone == :utc
        execute(&quot;SET time zone 'UTC'&quot;)
      elsif @local_tz
        execute(&quot;SET time zone '#{@local_tz}'&quot;)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The above, with config.time_zone set to Central Time, and
AR::Base.default_timezone not set in application.rb, will
return:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;     utc
     Central Time (US &amp;amp; Canada)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So it seems that config.time_zone is not having an effect on
AR::Base.default_timezone.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-07T02:17:54+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5324</number>
      <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
      <updated-at type="datetime">2010-08-07T02:17:55+01:00</updated-at>
      <user-id type="integer">40656</user-id>
      <version type="integer">1</version>
      <user-name>Sean</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've run into this issue too. My views depends on time zone settings and postgres adapter wrongly set it to UTC.
ActiveRecord::Base.default_timezone is :utc even if it isn't configured.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've run into this issue too. My views depends on time zone
settings and postgres adapter wrongly set it to UTC.&lt;br&gt;
ActiveRecord::Base.default_timezone is :utc even if it isn't
configured.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-10T00:25:31+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5324</number>
      <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord postgres postgresql &quot;time zone&quot; timezone</tag>
      <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
      <updated-at type="datetime">2010-09-10T00:25:33+01:00</updated-at>
      <user-id type="integer">99505</user-id>
      <version type="integer">2</version>
      <user-name>MikZ</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have the same issue as MikZ. Wrong time zone setting is breaking a view that does time calculations.

A workaround appears to be adding the following line to application.rb:

config.active_record.default_timezone = :local

This fixes the view, and the rest of my app seems unaffected.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have the same issue as MikZ. Wrong time zone setting is
breaking a view that does time calculations.&lt;/p&gt;
&lt;p&gt;A workaround appears to be adding the following line to
application.rb:&lt;/p&gt;
&lt;p&gt;config.active_record.default_timezone = :local&lt;/p&gt;
&lt;p&gt;This fixes the view, and the rest of my app seems
unaffected.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-19T21:41:22+00:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5324</number>
      <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord postgres postgresql &quot;time zone&quot; timezone</tag>
      <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
      <updated-at type="datetime">2010-11-19T21:41:24+00:00</updated-at>
      <user-id type="integer">22224</user-id>
      <version type="integer">3</version>
      <user-name>JackC</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>i've figured this out

rails are setting accessors with automatic timezone conversions
when you override acessor (with table colum) you will get to serious problems


when leaving rails default (or setting timezone) you will get nice results
but if you override accessors you will get to serious problems with that

so: don't ever override &quot;time&quot; attibutes' accessors</body>
      <body-html>&lt;div&gt;&lt;p&gt;i've figured this out&lt;/p&gt;
&lt;p&gt;rails are setting accessors with automatic timezone
conversions&lt;br&gt;
when you override acessor (with table colum) you will get to
serious problems&lt;/p&gt;
&lt;p&gt;when leaving rails default (or setting timezone) you will get
nice results&lt;br&gt;
but if you override accessors you will get to serious problems with
that&lt;/p&gt;
&lt;p&gt;so: don't ever override &quot;time&quot; attibutes' accessors&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-20T02:45:31+00:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5324</number>
      <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord postgres postgresql &quot;time zone&quot; timezone</tag>
      <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
      <updated-at type="datetime">2010-11-20T02:45:33+00:00</updated-at>
      <user-id type="integer">99505</user-id>
      <version type="integer">4</version>
      <user-name>MikZ</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am experiencing this bug, too.

I found it after I noticed that some of my reporting, which groups records by date, was returning erroneous results. PostgreSQLAdapter is setting the connection's time zone to UTC, which throws off queries that follow this pattern:

    SELECT DATE(created_at AT TIME ZONE 'UTC') ...

If the connection is properly set to the local time zone, the AT TIME ZONE part will adjust to local time before truncating to a date. If the connection is set to UTC, PostgreSQL thinks that no adjustment is needed, and times when the UTC date and local time date are different result in the wrong answer.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am experiencing this bug, too.&lt;/p&gt;
&lt;p&gt;I found it after I noticed that some of my reporting, which
groups records by date, was returning erroneous results.
PostgreSQLAdapter is setting the connection's time zone to UTC,
which throws off queries that follow this pattern:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT DATE(created_at AT TIME ZONE 'UTC') ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If the connection is properly set to the local time zone, the AT
TIME ZONE part will adjust to local time before truncating to a
date. If the connection is set to UTC, PostgreSQL thinks that no
adjustment is needed, and times when the UTC date and local time
date are different result in the wrong answer.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-27T19:13:32+00:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5324</number>
      <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord postgres postgresql &quot;time zone&quot; timezone</tag>
      <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
      <updated-at type="datetime">2010-12-27T19:13:43+00:00</updated-at>
      <user-id type="integer">48902</user-id>
      <version type="integer">5</version>
      <user-name>Steve Madsen</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-28T01:00:05+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5324</number>
      <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord postgres postgresql &quot;time zone&quot; timezone</tag>
      <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
      <updated-at type="datetime">2011-03-28T01:00:28+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">6</version>
      <user-name>rails</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-28T01:00:06+01:00</created-at>
      <creator-id type="integer">40656</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5324</number>
      <permalink>configtime_zone-not-setting-default_timezone-for-ar-causing-errors-with-postgres</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord postgres postgresql &quot;time zone&quot; timezone</tag>
      <title>config.time_zone not setting default_timezone for AR, causing errors with Postgres</title>
      <updated-at type="datetime">2011-03-28T01:00:18+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">7</version>
      <user-name>rails</user-name>
      <creator-name>Sean</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5324</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
