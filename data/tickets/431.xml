<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-16T19:17:29+01:00</created-at>
  <creator-id type="integer">20269</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">431</number>
  <permalink>table-modifying-methods-lead-to-inconsistent-objects</permalink>
  <priority type="integer">16821</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord bug enhancement patch</tag>
  <title>Table-modifying methods lead to inconsistent objects</title>
  <updated-at type="datetime">2008-10-05T15:15:09+01:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">4</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Gunnar Wolf</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/431</url>
  <priority-name nil="true"></priority-name>
  <original-body>When calling the column-related methods which modify a table's structure from ActiveRecord::ConnectionAdapters::SchemaStatements (i.e. add_column, remove_column, change_column, rename_column) not from a migration but from the application itself (i.e. when your application allows for table plasticity), the existing models remain with a stale definition - Take as an example the following console interaction:

  &gt;&gt; Person
  Person(id: integer, name: string)
  &gt;&gt; Person.connection.add_column :people, :thing_id, :integer
  =&gt; []
  &gt;&gt; Person
  =&gt; Person(id: integer, name: string)

To be able to use the new column, I have to do:

  &gt;&gt; Person.reset_column_information
  =&gt; nil
  &gt;&gt; Person
  =&gt; Person(id: integer, name: string, thing_id: integer)

So, what am I proposing? To modify the four mentioned methods so that, if there is a matching class defined in the current environment (i.e. no point in doing this when doing migrations, only if the classes have been brought to life), the model should be sent the reset_column_information.

The patch is trivial, I'm currently just checking it - but of course, I have not yet come up with a test case :) And I'd like some input before doing so. 

In any case, expect my patch to appear here shortly.</original-body>
  <latest-body>When calling the column-related methods which modify a table's structure from ActiveRecord::ConnectionAdapters::SchemaStatements (i.e. add_column, remove_column, change_column, rename_column) not from a migration but from the application itself (i.e. when your application allows for table plasticity), the existing models remain with a stale definition - Take as an example the following console interaction:

  &gt;&gt; Person
  Person(id: integer, name: string)
  &gt;&gt; Person.connection.add_column :people, :thing_id, :integer
  =&gt; []
  &gt;&gt; Person
  =&gt; Person(id: integer, name: string)

To be able to use the new column, I have to do:

  &gt;&gt; Person.reset_column_information
  =&gt; nil
  &gt;&gt; Person
  =&gt; Person(id: integer, name: string, thing_id: integer)

So, what am I proposing? To modify the four mentioned methods so that, if there is a matching class defined in the current environment (i.e. no point in doing this when doing migrations, only if the classes have been brought to life), the model should be sent the reset_column_information.

The patch is trivial, I'm currently just checking it - but of course, I have not yet come up with a test case :) And I'd like some input before doing so. 

In any case, expect my patch to appear here shortly.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
When calling the column-related methods which modify a table's structure from ActiveRecord::ConnectionAdapters::SchemaStatements (i.e. add_column, remove_column, change_column, rename_column) not from a migration but from the application itself (i.e. when your application allows for table plasticity), the existing models remain with a stale definition - Take as an example the following console interaction:
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person
&lt;/p&gt;&lt;p&gt;
Person(id: integer, name: string)
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person.connection.add_column :people, :thing_id, :integer
&lt;/p&gt;&lt;p&gt;
=&gt; []
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person
&lt;/p&gt;&lt;p&gt;
=&gt; Person(id: integer, name: string)
&lt;/p&gt;&lt;p&gt;
To be able to use the new column, I have to do:
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person.reset_column_information
&lt;/p&gt;&lt;p&gt;
=&gt; nil
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person
&lt;/p&gt;&lt;p&gt;
=&gt; Person(id: integer, name: string, thing_id: integer)
&lt;/p&gt;&lt;p&gt;
So, what am I proposing? To modify the four mentioned methods so that, if there is a matching class defined in the current environment (i.e. no point in doing this when doing migrations, only if the classes have been brought to life), the model should be sent the reset_column_information.
&lt;/p&gt;&lt;p&gt;
The patch is trivial, I'm currently just checking it - but of course, I have not yet come up with a test case :) And I'd like some input before doing so.
&lt;/p&gt;&lt;p&gt;
In any case, expect my patch to appear here shortly.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When calling the column-related methods which modify a table's structure from ActiveRecord::ConnectionAdapters::SchemaStatements (i.e. add_column, remove_column, change_column, rename_column) not from a migration but from the application itself (i.e. when your application allows for table plasticity), the existing models remain with a stale definition - Take as an example the following console interaction:

  &gt;&gt; Person
  Person(id: integer, name: string)
  &gt;&gt; Person.connection.add_column :people, :thing_id, :integer
  =&gt; []
  &gt;&gt; Person
  =&gt; Person(id: integer, name: string)

To be able to use the new column, I have to do:

  &gt;&gt; Person.reset_column_information
  =&gt; nil
  &gt;&gt; Person
  =&gt; Person(id: integer, name: string, thing_id: integer)

So, what am I proposing? To modify the four mentioned methods so that, if there is a matching class defined in the current environment (i.e. no point in doing this when doing migrations, only if the classes have been brought to life), the model should be sent the reset_column_information.

The patch is trivial, I'm currently just checking it - but of course, I have not yet come up with a test case :) And I'd like some input before doing so. 

In any case, expect my patch to appear here shortly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
When calling the column-related methods which modify a table's structure from ActiveRecord::ConnectionAdapters::SchemaStatements (i.e. add_column, remove_column, change_column, rename_column) not from a migration but from the application itself (i.e. when your application allows for table plasticity), the existing models remain with a stale definition - Take as an example the following console interaction:
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person
&lt;/p&gt;&lt;p&gt;
Person(id: integer, name: string)
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person.connection.add_column :people, :thing_id, :integer
&lt;/p&gt;&lt;p&gt;
=&gt; []
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person
&lt;/p&gt;&lt;p&gt;
=&gt; Person(id: integer, name: string)
&lt;/p&gt;&lt;p&gt;
To be able to use the new column, I have to do:
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person.reset_column_information
&lt;/p&gt;&lt;p&gt;
=&gt; nil
&lt;/p&gt;&lt;p&gt;
&gt;&gt; Person
&lt;/p&gt;&lt;p&gt;
=&gt; Person(id: integer, name: string, thing_id: integer)
&lt;/p&gt;&lt;p&gt;
So, what am I proposing? To modify the four mentioned methods so that, if there is a matching class defined in the current environment (i.e. no point in doing this when doing migrations, only if the classes have been brought to life), the model should be sent the reset_column_information.
&lt;/p&gt;&lt;p&gt;
The patch is trivial, I'm currently just checking it - but of course, I have not yet come up with a test case :) And I'd like some input before doing so.
&lt;/p&gt;&lt;p&gt;
In any case, expect my patch to appear here shortly.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T19:17:30+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">431</number>
      <permalink>table-modifying-methods-lead-to-inconsistent-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Table-modifying methods lead to inconsistent objects</title>
      <updated-at type="datetime">2008-06-16T19:17:30+01:00</updated-at>
      <user-id type="integer">20269</user-id>
      <version type="integer">1</version>
      <user-name>Gunnar Wolf</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/431</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please comment on the attached patch - This is a first step only, I have not created any test cases, nor really tested it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Please comment on the attached patch - This is a first step only, I have not created any test cases, nor really tested it.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-16T19:32:09+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">431</number>
      <permalink>table-modifying-methods-lead-to-inconsistent-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Table-modifying methods lead to inconsistent objects</title>
      <updated-at type="datetime">2008-06-16T19:32:09+01:00</updated-at>
      <user-id type="integer">20269</user-id>
      <version type="integer">2</version>
      <user-name>Gunnar Wolf</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/431</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-02T02:41:22+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">431</number>
      <permalink>table-modifying-methods-lead-to-inconsistent-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord bug enhancement patch</tag>
      <title>Table-modifying methods lead to inconsistent objects</title>
      <updated-at type="datetime">2008-07-02T02:41:22+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/431</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-05T15:15:05+01:00</created-at>
      <creator-id type="integer">20269</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">431</number>
      <permalink>table-modifying-methods-lead-to-inconsistent-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord bug enhancement patch</tag>
      <title>Table-modifying methods lead to inconsistent objects</title>
      <updated-at type="datetime">2008-10-05T15:15:09+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">4</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Gunnar Wolf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/431</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>b91ab53d503775a8447a7440453c0ba74174441d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-16T19:32:09+01:00</created-at>
      <filename>0001-Refresh-the-model-if-it-is-defined-on.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">27678</id>
      <size type="integer">4151</size>
      <uploader-id type="integer">20269</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/27678/0001-Refresh-the-model-if-it-is-defined-on.patch</url>
    </attachment>
  </attachments>
</ticket>
