<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-01T04:19:57+01:00</created-at>
  <creator-id type="integer">24325</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">738</number>
  <permalink>made-associationcollection-honor-uniq</permalink>
  <priority type="integer">202</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord bug patch</tag>
  <title>Fixed AssociationCollection#&lt;&lt; resulting in unexpected values in @target when :uniq =&gt; true</title>
  <updated-at type="datetime">2008-08-08T14:19:58+01:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">6</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>Ernie Miller</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/738</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This small patch updates AssociationCollection#&lt;&lt; to skip the addition of a new record if it already exists in the collection, if the reflection has its :uniq option set to true.

It seems like a logical route to take, but I'm not 100% convinced it's a great idea -- seems like something that would have already been implemented if there weren't any good cases against it.

Still, since a recurring misunderstanding seems to be that :uniq will prevent duplicates from being created (despite the API documentation never claiming it should) it seemed worth submitting.</original-body>
  <latest-body>This small patch updates AssociationCollection#&lt;&lt; to skip the addition of a new record if it already exists in the collection, if the reflection has its :uniq option set to true.

It seems like a logical route to take, but I'm not 100% convinced it's a great idea -- seems like something that would have already been implemented if there weren't any good cases against it.

Still, since a recurring misunderstanding seems to be that :uniq will prevent duplicates from being created (despite the API documentation never claiming it should) it seemed worth submitting.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
This small patch updates AssociationCollection#&amp;lt;&amp;lt; to skip the addition of a new record if it already exists in the collection, if the reflection has its :uniq option set to true.
&lt;/p&gt;&lt;p&gt;
It seems like a logical route to take, but I'm not 100% convinced it's a great idea -- seems like something that would have already been implemented if there weren't any good cases against it.
&lt;/p&gt;&lt;p&gt;
Still, since a recurring misunderstanding seems to be that :uniq will prevent duplicates from being created (despite the API documentation never claiming it should) it seemed worth submitting.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>When AssociationCollection#&lt;&lt; is called, it invokes #add_record_to_target_with_callbacks, which doesn't pay any attention to the reflection's :uniq option before pushing to the @target array, and can result in unexpected values showing up in @target until @target is reloaded. This patch resolves this issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
When AssociationCollection#&amp;lt;&amp;lt; is called, it invokes #add_record_to_target_with_callbacks, which doesn't pay any attention to the reflection's :uniq option before pushing to the @target array, and can result in unexpected values showing up in @target until @target is reloaded. This patch resolves this issue.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-02T16:49:27+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">738</number>
      <permalink>made-associationcollection-honor-uniq</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch</tag>
      <title>Fixed AssociationCollection#&lt;&lt; resulting in unexpected values in @target when :uniq =&gt; true</title>
      <updated-at type="datetime">2008-08-02T16:49:27+01:00</updated-at>
      <user-id type="integer">24325</user-id>
      <version type="integer">1</version>
      <user-name>Ernie Miller</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Attaching updated patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Attaching updated patch.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-02T16:50:09+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">738</number>
      <permalink>made-associationcollection-honor-uniq</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord enhancement patch</tag>
      <title>Fixed AssociationCollection#&lt;&lt; resulting in unexpected values in @target when :uniq =&gt; true</title>
      <updated-at type="datetime">2008-08-02T16:50:09+01:00</updated-at>
      <user-id type="integer">24325</user-id>
      <version type="integer">2</version>
      <user-name>Ernie Miller</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1 for this feature. Should we fire callbacks for already duplicate records?

In patch:

@target &lt;&lt; record unless @reflection.options[:uniq] &amp;&amp; @target.include?(record)
callback(:after_add, record)

Why not:

unless @target.include?(record)
  @target &lt;&lt; record unless @reflection.options[:uniq]
  callback(:after_add, record)
end

Cheers.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for this feature. Should we fire callbacks for already duplicate records?&lt;/p&gt;

&lt;p&gt;In patch:&lt;/p&gt;

&lt;p&gt;@target &amp;lt;&amp;lt; record unless @reflection.options[:uniq] &amp;amp;&amp;amp; @target.include?(record)
callback(:after_add, record)&lt;/p&gt;

&lt;p&gt;Why not:&lt;/p&gt;

&lt;p&gt;unless @target.include?(record)
  @target &amp;lt;&amp;lt; record unless @reflection.options[:uniq]
  callback(:after_add, record)
end&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-07T04:24:42+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord enhancement patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">738</number>
      <permalink>made-associationcollection-honor-uniq</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch</tag>
      <title>Fixed AssociationCollection#&lt;&lt; resulting in unexpected values in @target when :uniq =&gt; true</title>
      <updated-at type="datetime">2008-08-07T04:24:42+01:00</updated-at>
      <user-id type="integer">8322</user-id>
      <version type="integer">3</version>
      <user-name>wildchild</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I debated about that. In the end, since ActiveRecord doesn't actually prevent duplicate records in the DB, but only in the @target array, when :uniq is set, I felt it would be presumptuous to mess with callbacks. There could be a very legitimate bit of data massaging going on there.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I debated about that. In the end, since ActiveRecord doesn't actually prevent duplicate records in the DB, but only in the @target array, when :uniq is set, I felt it would be presumptuous to mess with callbacks. There could be a very legitimate bit of data massaging going on there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-07T11:46:08+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">738</number>
      <permalink>made-associationcollection-honor-uniq</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch</tag>
      <title>Fixed AssociationCollection#&lt;&lt; resulting in unexpected values in @target when :uniq =&gt; true</title>
      <updated-at type="datetime">2008-08-07T11:46:08+01:00</updated-at>
      <user-id type="integer">24325</user-id>
      <version type="integer">4</version>
      <user-name>Ernie Miller</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Shouldn't it raise an exception if you try to do this?  Silently ignoring the call seems like a potential cause of lots of bugs.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Shouldn't it raise an exception if you try to do this?  Silently ignoring the call seems like a potential cause of lots of bugs.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-08T13:50:47+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">738</number>
      <permalink>made-associationcollection-honor-uniq</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch</tag>
      <title>Fixed AssociationCollection#&lt;&lt; resulting in unexpected values in @target when :uniq =&gt; true</title>
      <updated-at type="datetime">2008-08-08T13:50:47+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-08-08T14:19:58+01:00</created-at>
      <creator-id type="integer">24325</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">738</number>
      <permalink>made-associationcollection-honor-uniq</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord bug patch</tag>
      <title>Fixed AssociationCollection#&lt;&lt; resulting in unexpected values in @target when :uniq =&gt; true</title>
      <updated-at type="datetime">2008-08-08T14:19:58+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">6</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Ernie Miller</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/738</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>8472401f42dd8e0ccb61ef3bbbee4e0fa0f2b336</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-02T16:50:09+01:00</created-at>
      <filename>association_collection_uniq_push.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">36646</id>
      <size type="integer">2204</size>
      <uploader-id type="integer">24325</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/36646/association_collection_uniq_push.diff</url>
    </attachment>
  </attachments>
</ticket>
