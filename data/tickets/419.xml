<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-15T02:47:24+01:00</created-at>
  <creator-id type="integer">23439</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">419</number>
  <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord associations create enhancement has_many patch tested</tag>
  <title>has_many :conditions and named_scope should alter creates from within it</title>
  <updated-at type="datetime">2008-07-09T14:22:24+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">8</version>
  <user-name>Repository</user-name>
  <creator-name>Alex</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
  <priority-name nil="true"></priority-name>
  <original-body>Assume I have a class Post. Post has a boolean field 'posted', indicating whether the post has been posted or not. I also have another class, Blog. If I want the blog to have many Posts, which is just any posts in general, or published posts:

@@@ ruby
class Blog &lt; ActiveRecord::Base
    has_many :posts
    has_many :published_posts, :conditions =&gt; {:posted =&gt; true}, :class_name =&gt; 'Post'
end
@@@

Blog.published_posts.find(:all) works just as expected. But what if I want to do the following in order to have the blog post it immediately:

@@@ ruby
Blog.published_posts.create(:title =&gt; 'The Blog Post')
@@@

*This doesn't automatically alter the condition of :posted to true*. This seems odd, and inconsistent since the only way to access this record is from Blog.posts, rather than Blog.published_posts, where I created it from.

The obvious problem that arises is that if the conditions are not exactly specific about which alterations need to be done such as 'date &lt; 2008' the create cannot work with this. I suggest that to patch this, if a hash is being used for conditions it can be used on either a create or a find since the values are specific. Otherwise :conditions only applies to the find and an alternate :create_conditions can be used for creates.</original-body>
  <latest-body>Assume I have a class Post. Post has a boolean field 'posted', indicating whether the post has been posted or not. I also have another class, Blog. If I want the blog to have many Posts, which is just any posts in general, or published posts:

@@@ ruby
class Blog &lt; ActiveRecord::Base
    has_many :posts
    has_many :published_posts, :conditions =&gt; {:posted =&gt; true}, :class_name =&gt; 'Post'
end
@@@

Blog.published_posts.find(:all) works just as expected. But what if I want to do the following in order to have the blog post it immediately:

@@@ ruby
Blog.published_posts.create(:title =&gt; 'The Blog Post')
@@@

*This doesn't automatically alter the condition of :posted to true*. This seems odd, and inconsistent since the only way to access this record is from Blog.posts, rather than Blog.published_posts, where I created it from.

The obvious problem that arises is that if the conditions are not exactly specific about which alterations need to be done such as 'date &lt; 2008' the create cannot work with this. I suggest that to patch this, if a hash is being used for conditions it can be used on either a create or a find since the values are specific. Otherwise :conditions only applies to the find and an alternate :create_conditions can be used for creates.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Assume I have a class Post. Post has a boolean field 'posted', indicating whether the post has been posted or not. I also have another class, Blog. If I want the blog to have many Posts, which is just any posts in general, or published posts:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Blog &amp;lt; ActiveRecord::Base
    has_many :posts
    has_many :published_posts, :conditions =&amp;gt; {:posted =&amp;gt; true}, :class_name =&amp;gt; 'Post'
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Blog.published_posts.find(:all) works just as expected. But what if I want to do the following in order to have the blog post it immediately:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Blog.published_posts.create(:title =&amp;gt; 'The Blog Post')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;strong&gt;This doesn't automatically alter the condition of  to true&lt;/strong&gt;. This seems odd, and inconsistent since the only way to access this record is from Blog.posts, rather than Blog.published_posts, where I created it from.
&lt;/p&gt;&lt;p&gt;
The obvious problem that arises is that if the conditions are not exactly specific about which alterations need to be done such as 'date &amp;lt; 2008' the create cannot work with this. I suggest that to patch this, if a hash is being used for conditions it can be used on either a create or a find since the values are specific. Otherwise :conditions only applies to the find and an alternate :create_conditions can be used for creates.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This has been a problem in rails for a very long time and I am shocked that it has not been fixed yet. What I say here about has_many essentially applies just the same to named_scope.

Assume I have a class Post. Post has a boolean field 'published', indicating whether the post has been published or not. I also have another class, Blog. If I want the blog to have many posts, which is just any posts in general, and to also have only posts which have been published:

@@@ ruby
class Blog &lt; ActiveRecord::Base
    has_many :posts
    has_many :published_posts, :conditions =&gt; {:published =&gt; true}, :class_name =&gt; 'Post'
end
@@@

Blog.published_posts.find(:all) works just as expected. But what if I want to do the following in order to have the blog post it immediately:

@@@ ruby
Blog.published_posts.create(:title =&gt; 'The Blog Post')
@@@

*This doesn't automatically alter the condition of :published to true*. This seems odd, and inconsistent since the only way to access this record is from Blog.posts, rather than Blog.published_posts, where I created it from.

The obvious problem that arises is that if the conditions are not exactly specific about which alterations need to be done such as 'date &lt; 2008' the create cannot work with this. I suggest that to patch this, if a hash is being used for conditions it can be used on either a create or a find since the values are specific. Otherwise :conditions only applies to the find and an alternate :create_conditions can be used for creates.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This has been a problem in rails for a very long time and I am shocked that it has not been fixed yet. What I say here about has_many essentially applies just the same to named_scope.
&lt;/p&gt;&lt;p&gt;
Assume I have a class Post. Post has a boolean field 'published', indicating whether the post has been published or not. I also have another class, Blog. If I want the blog to have many posts, which is just any posts in general, and to also have only posts which have been published:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Blog &amp;lt; ActiveRecord::Base
    has_many :posts
    has_many :published_posts, :conditions =&amp;gt; {:published =&amp;gt; true}, :class_name =&amp;gt; 'Post'
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Blog.published_posts.find(:all) works just as expected. But what if I want to do the following in order to have the blog post it immediately:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Blog.published_posts.create(:title =&amp;gt; 'The Blog Post')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;strong&gt;This doesn't automatically alter the condition of  to true&lt;/strong&gt;. This seems odd, and inconsistent since the only way to access this record is from Blog.posts, rather than Blog.published_posts, where I created it from.
&lt;/p&gt;&lt;p&gt;
The obvious problem that arises is that if the conditions are not exactly specific about which alterations need to be done such as 'date &amp;lt; 2008' the create cannot work with this. I suggest that to patch this, if a hash is being used for conditions it can be used on either a create or a find since the values are specific. Otherwise :conditions only applies to the find and an alternate :create_conditions can be used for creates.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-15T03:05:56+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-06-15T03:05:56+01:00</updated-at>
      <user-id type="integer">23439</user-id>
      <version type="integer">1</version>
      <user-name>Alex</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That'd be a nice addition for Hash :conditions. Please do investigate! Have create look at :conditions in the :find scope and check for a Hash.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
That'd be a nice addition for Hash :conditions. Please do investigate! Have create look at :conditions in the :find scope and check for a Hash.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-15T04:29:21+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-06-15T04:29:21+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Regarding &quot;this has been a problem in rails for a very long time and I am shocked that it has not been fixed yet&quot;

Typically :conditions could not be interpreted purely as an attributes hash. Only relatively recently were :conditions hashes introduced. This wasn't a problem even then, just a missing feature. What is shocking about this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Regarding &quot;this has been a problem in rails for a very long time and I am shocked that it has not been fixed yet&quot;
&lt;/p&gt;&lt;p&gt;
Typically :conditions could not be interpreted purely as an attributes hash. Only relatively recently were :conditions hashes introduced. This wasn't a problem even then, just a missing feature. What is shocking about this?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-15T04:32:05+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-06-15T04:32:05+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This has already been added in commit c23c9bd1 in response to ticket http://dev.rubyonrails.org/ticket/11393

Or am I missing something?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This has already been added in commit c23c9bd1 in response to ticket &lt;a href=&quot;http://dev.rubyonrails.org/ticket/11393&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
Or am I missing something?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-18T02:55:18+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-06-18T02:55:18+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">4</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, this was my ticket as well I put this ticket in to include named_scope and because I wasn't sure if that original Trac site was being used anymore.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Yes, this was my ticket as well I put this ticket in to include named_scope and because I wasn't sure if that original Trac site was being used anymore.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-18T03:54:10+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-06-18T03:54:10+01:00</updated-at>
      <user-id type="integer">23439</user-id>
      <version type="integer">5</version>
      <user-name>Alex</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here a possible patch which adds build, create and create! methods to the named_scope similar to associations.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Here a possible patch which adds build, create and create! methods to the named_scope similar to associations.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-18T06:44:33+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-06-18T06:44:33+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">6</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-18T14:43:38+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-06-18T14:43:38+01:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">7</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [84af99e78dbf65b7faa92313acf8457cb0c2b510]) Ensure NamedScope#build/create/create!/new works as expected when named scope has hash conditions. [Daniel Guettler, Pratik Naik] [#419 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/84af99e78dbf65b7faa92313acf8457cb0c2b510</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [84af99e78dbf65b7faa92313acf8457cb0c2b510]) Ensure NamedScope#build/create/create!/new works as expected when named scope has hash conditions. [Daniel Guettler, Pratik Naik] [#419 state:resolved]
&lt;/p&gt;&lt;p&gt;
Signed-off-by: Pratik Naik 
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/84af99e78dbf65b7faa92313acf8457cb0c2b510&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-07-09T14:22:24+01:00</created-at>
      <creator-id type="integer">23439</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">419</number>
      <permalink>has_many-conditions-should-alter-creates-from-within-it</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord associations create enhancement has_many patch tested</tag>
      <title>has_many :conditions and named_scope should alter creates from within it</title>
      <updated-at type="datetime">2008-07-09T14:22:24+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">8</version>
      <user-name>Repository</user-name>
      <creator-name>Alex</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/419</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ee0c7f01577ef51d3e465583cea8acf7cb33cc66</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-06-18T06:44:33+01:00</created-at>
      <filename>named_scope_with_conditions.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">27983</id>
      <size type="integer">2386</size>
      <uploader-id type="integer">2529</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/27983/named_scope_with_conditions.patch</url>
    </attachment>
  </attachments>
</ticket>
