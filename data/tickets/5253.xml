<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-30T19:01:11+01:00</created-at>
  <creator-id type="integer">10618</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5253</number>
  <permalink>rails-30-rc-cannot-capture-exception-when-database-goes-down</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>blocker database exception fatal rails3</tag>
  <title>Rails 3.0 RC cannot capture exception when database goes down!</title>
  <updated-at type="datetime">2010-10-07T06:33:47+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">5</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Jaroslaw Zabiello</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5253</url>
  <priority-name>Low</priority-name>
  <original-body>This is serious error because does not allow for creating self healing applications. 

When database MySQL goes down, Rails is going down together! There is no way to avoid default error message on the screen and to capture the exception. This problem happens even if I there were not created any models (but configure/database.yml was pointing to the database) 

Rails' methods like &quot;rescue_from&quot; are useless over here because the exception is not propagated to higher layers of the framework. So Rails application raises exception which CANNOT be captured by any controller! This behaviour resembles nasty PHP fatal error. I hope it will be fixed before final release.

http://gist.github.com/500875</original-body>
  <latest-body>This is serious error because does not allow for creating self healing applications. 

When database MySQL goes down, Rails is going down together! There is no way to avoid default error message on the screen and to capture the exception. This problem happens even if I there were not created any models (but configure/database.yml was pointing to the database) 

Rails' methods like &quot;rescue_from&quot; are useless over here because the exception is not propagated to higher layers of the framework. So Rails application raises exception which CANNOT be captured by any controller! This behaviour resembles nasty PHP fatal error. I hope it will be fixed before final release.

http://gist.github.com/500875</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This is serious error because does not allow for creating self
healing applications.&lt;/p&gt;
&lt;p&gt;When database MySQL goes down, Rails is going down together!
There is no way to avoid default error message on the screen and to
capture the exception. This problem happens even if I there were
not created any models (but configure/database.yml was pointing to
the database)&lt;/p&gt;
&lt;p&gt;Rails' methods like &quot;rescue_from&quot; are useless over here because
the exception is not propagated to higher layers of the framework.
So Rails application raises exception which CANNOT be captured by
any controller! This behaviour resembles nasty PHP fatal error. I
hope it will be fixed before final release.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://gist.github.com/500875&quot;&gt;http://gist.github.com/500875&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is serious error because does not allow for creating self healing applications. 

When database MySQL goes down, Rails is going down together! There is no way to avoid default error message on the screen and to capture the exception. This problem happens even if I there were not created any models (but configure/database.yml was pointing to the database) 

Rails' methods like &quot;rescue_from&quot; are useless over here because the exception is not propagated to higher layers of the framework. So Rails application raises exception which CANNOT be captured by any controller! This behaviour resembles nasty PHP fatal error. I hope it will be fixed before final release.

http://gist.github.com/500875</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is serious error because does not allow for creating self
healing applications.&lt;/p&gt;
&lt;p&gt;When database MySQL goes down, Rails is going down together!
There is no way to avoid default error message on the screen and to
capture the exception. This problem happens even if I there were
not created any models (but configure/database.yml was pointing to
the database)&lt;/p&gt;
&lt;p&gt;Rails' methods like &quot;rescue_from&quot; are useless over here because
the exception is not propagated to higher layers of the framework.
So Rails application raises exception which CANNOT be captured by
any controller! This behaviour resembles nasty PHP fatal error. I
hope it will be fixed before final release.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://gist.github.com/500875&quot;&gt;http://gist.github.com/500875&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-30T19:01:11+01:00</created-at>
      <creator-id type="integer">10618</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5253</number>
      <permalink>rails-30-rc-cannot-capture-exception-when-database-goes-down</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>blocker database exception fatal rails3</tag>
      <title>Rails 3.0 RC cannot capture exception when database goes down!</title>
      <updated-at type="datetime">2010-07-30T19:01:12+01:00</updated-at>
      <user-id type="integer">10618</user-id>
      <version type="integer">1</version>
      <user-name>Jaroslaw Zabiello</user-name>
      <creator-name>Jaroslaw Zabiello</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5253</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-30T19:10:11+01:00</created-at>
      <creator-id type="integer">10618</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5253</number>
      <permalink>rails-30-rc-cannot-capture-exception-when-database-goes-down</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>blocker database exception fatal rails3</tag>
      <title>Rails 3.0 RC cannot capture exception when database goes down!</title>
      <updated-at type="datetime">2010-07-30T19:10:12+01:00</updated-at>
      <user-id type="integer">10618</user-id>
      <version type="integer">2</version>
      <user-name>Jaroslaw Zabiello</user-name>
      <creator-name>Jaroslaw Zabiello</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5253</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>i found similar issues as i wrote some workers with the nanite gem and activerecord
and found myself hacking PostgreSQLAdapter AbstractAdapter and ConnectionPool..

best of all was that there is a ActiveRecord::ConnectionNotEstablished but its only used when no connection could be established at the beginning. If the connection is lost any time later PostgreSQLAdapter throws a PGError and AbstractAdapter simply converts this in a StatementInvalid exception.</body>
      <body-html>&lt;div&gt;&lt;p&gt;i found similar issues as i wrote some workers with the nanite
gem and activerecord&lt;br&gt;
and found myself hacking PostgreSQLAdapter AbstractAdapter and
ConnectionPool..&lt;/p&gt;
&lt;p&gt;best of all was that there is a
ActiveRecord::ConnectionNotEstablished but its only used when no
connection could be established at the beginning. If the connection
is lost any time later PostgreSQLAdapter throws a PGError and
AbstractAdapter simply converts this in a StatementInvalid
exception.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-01T14:21:51+01:00</created-at>
      <creator-id type="integer">10618</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5253</number>
      <permalink>rails-30-rc-cannot-capture-exception-when-database-goes-down</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>blocker database exception fatal rails3</tag>
      <title>Rails 3.0 RC cannot capture exception when database goes down!</title>
      <updated-at type="datetime">2010-08-01T14:21:56+01:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">3</version>
      <user-name>Kane</user-name>
      <creator-name>Jaroslaw Zabiello</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5253</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The easiest way to go about this is to create your own middleware, and insert it before the ActiveRecord::QueryCache middleware in your application.rb. This middleware can catch the exception, rescue and do the self-healing bit.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The easiest way to go about this is to create your own
middleware, and insert it before the ActiveRecord::QueryCache
middleware in your application.rb. This middleware can catch the
exception, rescue and do the self-healing bit.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-03T04:05:41+01:00</created-at>
      <creator-id type="integer">10618</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5253</number>
      <permalink>rails-30-rc-cannot-capture-exception-when-database-goes-down</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>blocker database exception fatal rails3</tag>
      <title>Rails 3.0 RC cannot capture exception when database goes down!</title>
      <updated-at type="datetime">2010-08-03T04:05:44+01:00</updated-at>
      <user-id type="integer">20836</user-id>
      <version type="integer">4</version>
      <user-name>Lawrence Pit</user-name>
      <creator-name>Jaroslaw Zabiello</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5253</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I agree with Lawrence.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with Lawrence.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-07T06:33:46+01:00</created-at>
      <creator-id type="integer">10618</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5253</number>
      <permalink>rails-30-rc-cannot-capture-exception-when-database-goes-down</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>blocker database exception fatal rails3</tag>
      <title>Rails 3.0 RC cannot capture exception when database goes down!</title>
      <updated-at type="datetime">2010-10-07T06:33:47+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">5</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Jaroslaw Zabiello</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5253</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
