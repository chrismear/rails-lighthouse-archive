<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-21T01:02:55+00:00</created-at>
  <creator-id type="integer">20319</creator-id>
  <milestone-due-on type="datetime">2011-02-27T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">101623</milestone-id>
  <number type="integer">6023</number>
  <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>patch</tag>
  <title>Unable to find by subclasses of String in activerecord</title>
  <updated-at type="datetime">2011-02-12T21:58:23+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">12</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Fluxx</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
  <milestone-title>3.0.5</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>We have a subclass of String that we use for encapsulating some URL and domain normalization logic, in a very similar way to how rails does `#html_safe`.  We recently upgraded from Rails 3.0.1 to Rails 3.0.3, and it appears some of the arel refactoring has affected the ability to find records by objects that are not one of a set of a few predefined classes.

Here is a simplified example of the problem.  As you can see, you can create objects with &quot;string&quot; values that are subclasses of string, but you cannot actually issue a find to locate the object the same way:

@@@
Loading development environment (Rails 3.0.3)
irb(main):001:0&gt; class Foo &lt; String; end
=&gt; nil
irb(main):002:0&gt; new_text = Foo.new(&quot;ruby on rails&quot;)
=&gt; &quot;ruby on rails&quot;
irb(main):003:0&gt; Keyword
=&gt; Keyword(id: integer, text: string, created_at: datetime, updated_at: datetime, crc32: integer)
irb(main):004:0&gt; Keyword.create(:text =&gt; new_text)
=&gt; #&lt;Keyword id: 11, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-20 16:48:09&quot;, updated_at: &quot;2010-11-20 16:48:09&quot;, crc32: -83612301&gt;
irb(main):005:0&gt; Keyword.find_by_text(new_text)
NoMethodError: undefined method `visit_Foo' for #&lt;Arel::Visitors::MySQL:0x104d0f4d0&gt;
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:235:in `visit_Arel_Nodes_Equality'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:109:in `visit_Arel_Nodes_Grouping'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `map'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:15:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `map'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:10:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:5:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:19:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/connection_pool.rb:110:in `with_connection'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:17:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/tree_manager.rb:19:in `to_sql'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `find_by_attributes'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `method_missing'
@@@

Digging through the Arel source some, it appears that it is calling `obj.class.name` to lookup the visitor.  Obviously, there isn't a visit_Foo method.

Possible options to fix this:

* Check if the passed value's class is one of the known set, and if not recurse up the inheritance tree until one of the known set is found
* Simply fall back to visit_String if visit_ForeignClassName is called.

Thoughts?</original-body>
  <latest-body>We have a subclass of String that we use for encapsulating some URL and domain normalization logic, in a very similar way to how rails does `#html_safe`.  We recently upgraded from Rails 3.0.1 to Rails 3.0.3, and it appears some of the arel refactoring has affected the ability to find records by objects that are not one of a set of a few predefined classes.

Here is a simplified example of the problem.  As you can see, you can create objects with &quot;string&quot; values that are subclasses of string, but you cannot actually issue a find to locate the object the same way:

@@@
Loading development environment (Rails 3.0.3)
irb(main):001:0&gt; class Foo &lt; String; end
=&gt; nil
irb(main):002:0&gt; new_text = Foo.new(&quot;ruby on rails&quot;)
=&gt; &quot;ruby on rails&quot;
irb(main):003:0&gt; Keyword
=&gt; Keyword(id: integer, text: string, created_at: datetime, updated_at: datetime, crc32: integer)
irb(main):004:0&gt; Keyword.create(:text =&gt; new_text)
=&gt; #&lt;Keyword id: 11, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-20 16:48:09&quot;, updated_at: &quot;2010-11-20 16:48:09&quot;, crc32: -83612301&gt;
irb(main):005:0&gt; Keyword.find_by_text(new_text)
NoMethodError: undefined method `visit_Foo' for #&lt;Arel::Visitors::MySQL:0x104d0f4d0&gt;
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:235:in `visit_Arel_Nodes_Equality'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:109:in `visit_Arel_Nodes_Grouping'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `map'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:15:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `map'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:10:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:5:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:19:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/connection_pool.rb:110:in `with_connection'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:17:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/tree_manager.rb:19:in `to_sql'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `find_by_attributes'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `method_missing'
@@@

Digging through the Arel source some, it appears that it is calling `obj.class.name` to lookup the visitor.  Obviously, there isn't a visit_Foo method.

Possible options to fix this:

* Check if the passed value's class is one of the known set, and if not recurse up the inheritance tree until one of the known set is found
* Simply fall back to visit_String if visit_ForeignClassName is called.

Thoughts?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;We have a subclass of String that we use for encapsulating some
URL and domain normalization logic, in a very similar way to how
rails does &lt;code&gt;#html_safe&lt;/code&gt;. We recently upgraded from Rails
3.0.1 to Rails 3.0.3, and it appears some of the arel refactoring
has affected the ability to find records by objects that are not
one of a set of a few predefined classes.&lt;/p&gt;
&lt;p&gt;Here is a simplified example of the problem. As you can see, you
can create objects with &quot;string&quot; values that are subclasses of
string, but you cannot actually issue a find to locate the object
the same way:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Loading development environment (Rails 3.0.3)
irb(main):001:0&amp;gt; class Foo &amp;lt; String; end
=&amp;gt; nil
irb(main):002:0&amp;gt; new_text = Foo.new(&quot;ruby on rails&quot;)
=&amp;gt; &quot;ruby on rails&quot;
irb(main):003:0&amp;gt; Keyword
=&amp;gt; Keyword(id: integer, text: string, created_at: datetime, updated_at: datetime, crc32: integer)
irb(main):004:0&amp;gt; Keyword.create(:text =&amp;gt; new_text)
=&amp;gt; #&amp;lt;Keyword id: 11, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-20 16:48:09&quot;, updated_at: &quot;2010-11-20 16:48:09&quot;, crc32: -83612301&amp;gt;
irb(main):005:0&amp;gt; Keyword.find_by_text(new_text)
NoMethodError: undefined method `visit_Foo' for #&amp;lt;Arel::Visitors::MySQL:0x104d0f4d0&amp;gt;
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:235:in `visit_Arel_Nodes_Equality'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:109:in `visit_Arel_Nodes_Grouping'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `map'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:15:in `visit_Arel_Nodes_SelectCore'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `map'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:10:in `visit_Arel_Nodes_SelectStatement'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:5:in `accept'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:19:in `accept'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/connection_pool.rb:110:in `with_connection'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:17:in `accept'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/tree_manager.rb:19:in `to_sql'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `find_by_attributes'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `method_missing'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Digging through the Arel source some, it appears that it is
calling &lt;code&gt;obj.class.name&lt;/code&gt; to lookup the visitor.
Obviously, there isn't a visit_Foo method.&lt;/p&gt;
&lt;p&gt;Possible options to fix this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check if the passed value's class is one of the known set, and
if not recurse up the inheritance tree until one of the known set
is found&lt;/li&gt;
&lt;li&gt;Simply fall back to visit_String if visit_ForeignClassName is
called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We have a subclass of String that we use for encapsulating some URL and domain normalization logic, in a very similar way to how rails does `#html_safe`.  We recently upgraded from Rails 3.0.1 to Rails 3.0.3, and it appears some of the arel refactoring has affected the ability to find records by objects that are not one of a set of a few predefined classes.

Here is a simplified example of the problem.  As you can see, you can create objects with &quot;string&quot; values that are subclasses of string, but you cannot actually issue a find to locate the object the same way:

@@@
Loading development environment (Rails 3.0.3)
irb(main):001:0&gt; class Foo &lt; String; end
=&gt; nil
irb(main):002:0&gt; new_text = Foo.new(&quot;ruby on rails&quot;)
=&gt; &quot;ruby on rails&quot;
irb(main):003:0&gt; Keyword
=&gt; Keyword(id: integer, text: string, created_at: datetime, updated_at: datetime, crc32: integer)
irb(main):004:0&gt; Keyword.create(:text =&gt; new_text)
=&gt; #&lt;Keyword id: 11, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-20 16:48:09&quot;, updated_at: &quot;2010-11-20 16:48:09&quot;, crc32: -83612301&gt;
irb(main):005:0&gt; Keyword.find_by_text(new_text)
NoMethodError: undefined method `visit_Foo' for #&lt;Arel::Visitors::MySQL:0x104d0f4d0&gt;
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:235:in `visit_Arel_Nodes_Equality'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:109:in `visit_Arel_Nodes_Grouping'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `map'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:15:in `visit_Arel_Nodes_SelectCore'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `map'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:10:in `visit_Arel_Nodes_SelectStatement'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:5:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:19:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/connection_pool.rb:110:in `with_connection'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:17:in `accept'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/tree_manager.rb:19:in `to_sql'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `find_by_attributes'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `method_missing'
@@@

Digging through the Arel source some, it appears that it is calling `obj.class.name` to lookup the visitor.  Obviously, there isn't a visit_Foo method.

Possible options to fix this:

* Check if the passed value's class is one of the known set, and if not recurse up the inheritance tree until one of the known set is found
* Simply fall back to visit_String if visit_ForeignClassName is called.

Thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;We have a subclass of String that we use for encapsulating some
URL and domain normalization logic, in a very similar way to how
rails does &lt;code&gt;#html_safe&lt;/code&gt;. We recently upgraded from Rails
3.0.1 to Rails 3.0.3, and it appears some of the arel refactoring
has affected the ability to find records by objects that are not
one of a set of a few predefined classes.&lt;/p&gt;
&lt;p&gt;Here is a simplified example of the problem. As you can see, you
can create objects with &quot;string&quot; values that are subclasses of
string, but you cannot actually issue a find to locate the object
the same way:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Loading development environment (Rails 3.0.3)
irb(main):001:0&amp;gt; class Foo &amp;lt; String; end
=&amp;gt; nil
irb(main):002:0&amp;gt; new_text = Foo.new(&quot;ruby on rails&quot;)
=&amp;gt; &quot;ruby on rails&quot;
irb(main):003:0&amp;gt; Keyword
=&amp;gt; Keyword(id: integer, text: string, created_at: datetime, updated_at: datetime, crc32: integer)
irb(main):004:0&amp;gt; Keyword.create(:text =&amp;gt; new_text)
=&amp;gt; #&amp;lt;Keyword id: 11, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-20 16:48:09&quot;, updated_at: &quot;2010-11-20 16:48:09&quot;, crc32: -83612301&amp;gt;
irb(main):005:0&amp;gt; Keyword.find_by_text(new_text)
NoMethodError: undefined method `visit_Foo' for #&amp;lt;Arel::Visitors::MySQL:0x104d0f4d0&amp;gt;
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:235:in `visit_Arel_Nodes_Equality'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:109:in `visit_Arel_Nodes_Grouping'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `map'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:89:in `visit_Arel_Nodes_SelectCore'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:15:in `visit_Arel_Nodes_SelectCore'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `map'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:77:in `visit_Arel_Nodes_SelectStatement'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/mysql.rb:10:in `visit_Arel_Nodes_SelectStatement'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:5:in `accept'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:19:in `accept'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/connection_adapters/abstract/connection_pool.rb:110:in `with_connection'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/to_sql.rb:17:in `accept'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/tree_manager.rb:19:in `to_sql'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation.rb:64:in `to_a'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:333:in `find_first'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:122:in `first'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/relation/finder_methods.rb:234:in `find_by_attributes'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/activerecord-3.0.3/lib/active_record/base.rb:987:in `method_missing'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Digging through the Arel source some, it appears that it is
calling &lt;code&gt;obj.class.name&lt;/code&gt; to lookup the visitor.
Obviously, there isn't a visit_Foo method.&lt;/p&gt;
&lt;p&gt;Possible options to fix this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check if the passed value's class is one of the known set, and
if not recurse up the inheritance tree until one of the known set
is found&lt;/li&gt;
&lt;li&gt;Simply fall back to visit_String if visit_ForeignClassName is
called.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-21T01:02:55+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-21T01:02:57+00:00</updated-at>
      <user-id type="integer">20319</user-id>
      <version type="integer">1</version>
      <user-name>Fluxx</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 on this. How was this handled on Rails 3.0.1? Why didn't it fail before?

For a quick fix, you can try:
@@@
 Keyword.find_by_text(new_text.to_s)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 on this. How was this handled on Rails 3.0.1? Why didn't it
fail before?&lt;/p&gt;
&lt;p&gt;For a quick fix, you can try:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; Keyword.find_by_text(new_text.to_s)&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-21T15:17:48+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-21T15:17:56+00:00</updated-at>
      <user-id type="integer">123547</user-id>
      <version type="integer">2</version>
      <user-name>Andr&#233;s Mej&#237;a</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So I dug in to the Arel and AR source a little bit and came up with a patch (attached) that seems to preserve this behavior.  Feedback would be great. I ran the mysql and mysql2 tests with the change and everything passes.

I *am* seeing the &quot;test_no_automatic_reconnection_after_timeout&quot; fail consistently even on master, which is weird.  After I got the tests running last night (with a MySQL upgrade) they all passed, but this morning the no_automatic_reconnection test isn't passing at all.  Not sure what's going on there, but the patch shouldn't be affecting that behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So I dug in to the Arel and AR source a little bit and came up
with a patch (attached) that seems to preserve this behavior.
Feedback would be great. I ran the mysql and mysql2 tests with the
change and everything passes.&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;am&lt;/em&gt; seeing the
&quot;test_no_automatic_reconnection_after_timeout&quot; fail consistently
even on master, which is weird. After I got the tests running last
night (with a MySQL upgrade) they all passed, but this morning the
no_automatic_reconnection test isn't passing at all. Not sure
what's going on there, but the patch shouldn't be affecting that
behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-21T19:07:30+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-21T19:07:34+00:00</updated-at>
      <user-id type="integer">20319</user-id>
      <version type="integer">3</version>
      <user-name>Fluxx</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I should also add that it appears that `.where` with array conditions works, while `.find` with the same conditions causes the exception:

@@@
Loading development environment (Rails 3.0.3)
irb(main):001:0&gt; class Foo &lt; String; end
=&gt; nil
irb(main):002:0&gt; new_text = Foo.new(&quot;ruby on rails&quot;)
=&gt; &quot;ruby on rails&quot;
irb(main):003:0&gt; Keyword
=&gt; Keyword(id: integer, text: string, created_at: datetime, updated_at: datetime, crc32: integer)
irb(main):004:0&gt; Keyword.create(:text =&gt; new_text)
=&gt; #&lt;Keyword id: 7, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-29 09:22:27&quot;, updated_at: &quot;2010-11-29 09:22:27&quot;, crc32: -83612301&gt;
irb(main):005:0* Keyword.where(&quot;text = ?&quot;, new_text)
=&gt; [#&lt;Keyword id: 7, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-29 09:22:27&quot;, updated_at: &quot;2010-11-29 09:22:27&quot;, crc32: -83612301&gt;]
irb(main):006:0&gt; Keyword.find(&quot;text = ?&quot;, new_text)
NoMethodError: undefined method `visit_Foo' for #&lt;Arel::Visitors::MySQL:0x104f7deb0&gt;
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
	from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit
	[...]
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I should also add that it appears that &lt;code&gt;.where&lt;/code&gt; with
array conditions works, while &lt;code&gt;.find&lt;/code&gt; with the same
conditions causes the exception:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Loading development environment (Rails 3.0.3)
irb(main):001:0&amp;gt; class Foo &amp;lt; String; end
=&amp;gt; nil
irb(main):002:0&amp;gt; new_text = Foo.new(&quot;ruby on rails&quot;)
=&amp;gt; &quot;ruby on rails&quot;
irb(main):003:0&amp;gt; Keyword
=&amp;gt; Keyword(id: integer, text: string, created_at: datetime, updated_at: datetime, crc32: integer)
irb(main):004:0&amp;gt; Keyword.create(:text =&amp;gt; new_text)
=&amp;gt; #&amp;lt;Keyword id: 7, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-29 09:22:27&quot;, updated_at: &quot;2010-11-29 09:22:27&quot;, crc32: -83612301&amp;gt;
irb(main):005:0* Keyword.where(&quot;text = ?&quot;, new_text)
=&amp;gt; [#&amp;lt;Keyword id: 7, text: &quot;ruby on rails&quot;, created_at: &quot;2010-11-29 09:22:27&quot;, updated_at: &quot;2010-11-29 09:22:27&quot;, crc32: -83612301&amp;gt;]
irb(main):006:0&amp;gt; Keyword.find(&quot;text = ?&quot;, new_text)
NoMethodError: undefined method `visit_Foo' for #&amp;lt;Arel::Visitors::MySQL:0x104f7deb0&amp;gt;
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `send'
    from /opt/local/lib/ruby/gems/1.8/gems/arel-2.0.4/lib/arel/visitors/visitor.rb:15:in `visit
    [...]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-29T17:27:20+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-29T17:27:33+00:00</updated-at>
      <user-id type="integer">20319</user-id>
      <version type="integer">4</version>
      <user-name>Fluxx</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The patch seems fine, though, I have to ask whether Rails should really implement this?  The reason is because ActiveRecord cannot successfully round-trip your custom string.

Let me show an example:

@@@ ruby
Loading development environment (Rails 3.0.3)
&gt;&gt; class BenString &lt; String; end
=&gt; nil
&gt;&gt; ben = BenString.new('ben')
=&gt; &quot;ben&quot;
&gt;&gt; tag = Tags.create(:name =&gt; ben)
=&gt; #&lt;Tags id: 2, name: &quot;ben&quot;, created_at: &quot;2010-11-30 06:26:54&quot;, updated_at: &quot;2010-11-30 06:26:54&quot;&gt;
&gt;&gt; tag.reload
=&gt; #&lt;Tags id: 2, name: &quot;ben&quot;, created_at: &quot;2010-11-30 06:26:54&quot;, updated_at: &quot;2010-11-30 06:26:54&quot;&gt;
&gt;&gt; ben.class == tag.name.class
=&gt; false
&gt;&gt;
@@@

The `BenString` class information is lost during the round trip.

I'm happy to add this patch for the 3.0.x series along with a deprecation warning.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The patch seems fine, though, I have to ask whether Rails should
really implement this? The reason is because ActiveRecord cannot
successfully round-trip your custom string.&lt;/p&gt;
&lt;p&gt;Let me show an example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Loading development environment (Rails 3.0.3)
&amp;gt;&amp;gt; class BenString &amp;lt; String; end
=&amp;gt; nil
&amp;gt;&amp;gt; ben = BenString.new('ben')
=&amp;gt; &quot;ben&quot;
&amp;gt;&amp;gt; tag = Tags.create(:name =&amp;gt; ben)
=&amp;gt; #&amp;lt;Tags id: 2, name: &quot;ben&quot;, created_at: &quot;2010-11-30 06:26:54&quot;, updated_at: &quot;2010-11-30 06:26:54&quot;&amp;gt;
&amp;gt;&amp;gt; tag.reload
=&amp;gt; #&amp;lt;Tags id: 2, name: &quot;ben&quot;, created_at: &quot;2010-11-30 06:26:54&quot;, updated_at: &quot;2010-11-30 06:26:54&quot;&amp;gt;
&amp;gt;&amp;gt; ben.class == tag.name.class
=&amp;gt; false
&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;BenString&lt;/code&gt; class information is lost during the
round trip.&lt;/p&gt;
&lt;p&gt;I'm happy to add this patch for the 3.0.x series along with a
deprecation warning.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T06:31:34+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-30T06:31:47+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">5</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>True, though it seems that activerecord just `#inspect`s everything on the way in, so it always looses any custom classes.  It just seems weird to me to allow creation of objects with anything that responds to `#inspect` but then blow up when using that same object in a finder.

My main question I guess is what the expected behavior when you try to do a `#find`/`#where` using a class that isn't part of the &quot;main core classes.&quot;  Right now you get a very cryptic `NoMethodError: undefined method `visit_Foo' for #&lt;Arel::Visitors::MySQL:0x104f85430&gt;` error.

It seems fine to have Arel only support a specific set of classes (ones it has a visitor for), that's not its job.  Does activerecord then need to do some kind of enforcement/transformation on the data?  Some possible options are:

* Call `#inspect` on any object used in a finder
* Check if the object's class is one of the known set, and if not recurse up the inheritance tree until one of the known set is found
* Reject the unknown object and raise an exception.

I would defer to others with more experience on what the right answer is, I was just more bringing it up as an issue and inconsistent behavior.</body>
      <body-html>&lt;div&gt;&lt;p&gt;True, though it seems that activerecord just
&lt;code&gt;#inspect&lt;/code&gt;s everything on the way in, so it always
looses any custom classes. It just seems weird to me to allow
creation of objects with anything that responds to
&lt;code&gt;#inspect&lt;/code&gt; but then blow up when using that same object
in a finder.&lt;/p&gt;
&lt;p&gt;My main question I guess is what the expected behavior when you
try to do a &lt;code&gt;#find&lt;/code&gt;/&lt;code&gt;#where&lt;/code&gt; using a class
that isn't part of the &quot;main core classes.&quot; Right now you get a
very cryptic &lt;code&gt;NoMethodError: undefined method&lt;/code&gt;visit_Foo'
for
#&amp;lt;Arel::Visitors::MySQL:0x104f85430&amp;gt;&lt;code&gt;error.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It seems fine to have Arel only support a specific set of
classes (ones it has a visitor for), that's not its job. Does
activerecord then need to do some kind of
enforcement/transformation on the data? Some possible options
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call &lt;code&gt;#inspect&lt;/code&gt; on any object used in a finder&lt;/li&gt;
&lt;li&gt;Check if the object's class is one of the known set, and if not
recurse up the inheritance tree until one of the known set is
found&lt;/li&gt;
&lt;li&gt;Reject the unknown object and raise an exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would defer to others with more experience on what the right
answer is, I was just more bringing it up as an issue and
inconsistent behavior.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T18:06:41+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-30T18:06:53+00:00</updated-at>
      <user-id type="integer">20319</user-id>
      <version type="integer">6</version>
      <user-name>Fluxx</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Also seeing this. In my case, it was with an ActiveSupport::SafeBuffer on mysql.
While looking up the issue on google, found a similar issue on postgresql reported on https://github.com/ProtectedMethod/restful_acl/issues/issue/9

The provided patch won't work in this case since ActiveSupport::SafeBuffer implements to_s by returning self.

I was thinking on adding a `method_missing` implementation on the ToSql visitor delegating to visit_String if the parameter.is_a?(String)

I'm not so sure that's the best approach, specially after reading the latter comments on this report (i.e. keep arel light and have active record do the checks/conversions).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Also seeing this. In my case, it was with an
ActiveSupport::SafeBuffer on mysql.&lt;br&gt;
While looking up the issue on google, found a similar issue on
postgresql reported on &lt;a href=
&quot;https://github.com/ProtectedMethod/restful_acl/issues/issue/9&quot;&gt;https://github.com/ProtectedMethod/restful_acl/issues/issue/9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The provided patch won't work in this case since
ActiveSupport::SafeBuffer implements to_s by returning self.&lt;/p&gt;
&lt;p&gt;I was thinking on adding a &lt;code&gt;method_missing&lt;/code&gt;
implementation on the ToSql visitor delegating to visit_String if
the parameter.is_a?(String)&lt;/p&gt;
&lt;p&gt;I'm not so sure that's the best approach, specially after
reading the latter comments on this report (i.e. keep arel light
and have active record do the checks/conversions).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T18:30:59+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-30T18:31:14+00:00</updated-at>
      <user-id type="integer">50409</user-id>
      <version type="integer">7</version>
      <user-name>Abel Mui&#241;o</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, I agree this is inconsistent behavior (and that sucks!)  But the problem is, how does it know to convert to a string vs an integer.  From your example:

@@@ ruby
Keyword.find(&quot;text = ?&quot;, new_text)
@@@

Since we're using arbitrary SQL in this example, how can active record determine that it should cast to a string vs an integer?  It can't detect that &quot;text&quot; is a string column vs a numeric vs a date (etc) without parsing the SQL and querying the database.  `inspect` can't be arbitrarily called for the same reasons.

The reason the insert statement worked is because currently, AR is just doing string concatenation for insert statements.  As we move AR to rely more on ARel for building SQL statements, this feature will break on inserts too.

I would rather we have a solid coercion protocol in AR and reject objects that can't be coerced.

In the mean time, here is a work around that will always be supported and will work with Rails 3.0.3.  You can teach ARel about any custom types you want:

@@@
&gt;&gt; class BenString &lt; String; end
=&gt; nil
&gt;&gt; Tags.find_by_name BenString.new('ben') rescue 'doh'
=&gt; &quot;doh&quot;
&gt;&gt; Arel::Visitors::Visitor::DISPATCH[BenString] = :visit_String
=&gt; :visit_String
&gt;&gt; Tags.find_by_name BenString.new('ben') rescue 'doh'
=&gt; #&lt;Tags id: 1, name: &quot;ben&quot;, created_at: &quot;2010-11-30 06:26:10&quot;, updated_at: &quot;2010-11-30 06:26:10&quot;&gt;
&gt;&gt;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, I agree this is inconsistent behavior (and that sucks!) But
the problem is, how does it know to convert to a string vs an
integer. From your example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Keyword.find(&quot;text = ?&quot;, new_text)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Since we're using arbitrary SQL in this example, how can active
record determine that it should cast to a string vs an integer? It
can't detect that &quot;text&quot; is a string column vs a numeric vs a date
(etc) without parsing the SQL and querying the database.
&lt;code&gt;inspect&lt;/code&gt; can't be arbitrarily called for the same
reasons.&lt;/p&gt;
&lt;p&gt;The reason the insert statement worked is because currently, AR
is just doing string concatenation for insert statements. As we
move AR to rely more on ARel for building SQL statements, this
feature will break on inserts too.&lt;/p&gt;
&lt;p&gt;I would rather we have a solid coercion protocol in AR and
reject objects that can't be coerced.&lt;/p&gt;
&lt;p&gt;In the mean time, here is a work around that will always be
supported and will work with Rails 3.0.3. You can teach ARel about
any custom types you want:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; class BenString &amp;lt; String; end
=&amp;gt; nil
&amp;gt;&amp;gt; Tags.find_by_name BenString.new('ben') rescue 'doh'
=&amp;gt; &quot;doh&quot;
&amp;gt;&amp;gt; Arel::Visitors::Visitor::DISPATCH[BenString] = :visit_String
=&amp;gt; :visit_String
&amp;gt;&amp;gt; Tags.find_by_name BenString.new('ben') rescue 'doh'
=&amp;gt; #&amp;lt;Tags id: 1, name: &quot;ben&quot;, created_at: &quot;2010-11-30 06:26:10&quot;, updated_at: &quot;2010-11-30 06:26:10&quot;&amp;gt;
&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T18:54:02+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-30T18:54:20+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">8</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Oh well that's an awesome workaround, Aaron.  Thanks!  We'll use that for now.

I'm with you also on a solid coercion protocol as well.  Being stricter about this stuff is the best idea long term.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Oh well that's an awesome workaround, Aaron. Thanks! We'll use
that for now.&lt;/p&gt;
&lt;p&gt;I'm with you also on a solid coercion protocol as well. Being
stricter about this stuff is the best idea long term.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-30T19:02:00+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-30T19:02:14+00:00</updated-at>
      <user-id type="integer">20319</user-id>
      <version type="integer">9</version>
      <user-name>Fluxx</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Fluxx excellent!  :-)

I've pushed a new version of ARel that should fix the problem for you.  It will spit out deprecation notices if you have -w set, but I won't actually deprecate this until we get solid coercion code in AR.

Try ARel version 2.0.5.

Hope that helps!</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Fluxx excellent! :-)&lt;/p&gt;
&lt;p&gt;I've pushed a new version of ARel that should fix the problem
for you. It will spit out deprecation notices if you have -w set,
but I won't actually deprecate this until we get solid coercion
code in AR.&lt;/p&gt;
&lt;p&gt;Try ARel version 2.0.5.&lt;/p&gt;
&lt;p&gt;Hope that helps!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-30T19:13:52+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-30T19:14:06+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">10</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Assuming that passed types have particular class names (`'String'`) rather than just particular behaviors (`respond_to? :to_s`) breaks a fundamental O-O paradigm. 

&gt; how does it know to convert to a string vs an integer

The target type is readily available from the model's columns.

@@@
irb(main):029:0&gt; Keyword.columns_hash['text'].type
=&gt; :string
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Assuming that passed types have particular class names
(&lt;code&gt;'String'&lt;/code&gt;) rather than just particular behaviors
(&lt;code&gt;respond_to? :to_s&lt;/code&gt;) breaks a fundamental O-O
paradigm.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;how does it know to convert to a string vs an integer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The target type is readily available from the model's
columns.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;irb(main):029:0&amp;gt; Keyword.columns_hash['text'].type
=&amp;gt; :string&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-30T19:17:08+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2010-11-30T19:17:21+00:00</updated-at>
      <user-id type="integer">126296</user-id>
      <version type="integer">11</version>
      <user-name>Ken Woodruff</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/42275)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/42275&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-12T21:58:23+00:00</created-at>
      <creator-id type="integer">20319</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 92071
</diffable-attributes>
      <milestone-id type="integer">101623</milestone-id>
      <number type="integer">6023</number>
      <permalink>unable-to-find-by-subclasses-of-string-in-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>patch</tag>
      <title>Unable to find by subclasses of String in activerecord</title>
      <updated-at type="datetime">2011-02-12T21:58:23+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">12</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Fluxx</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6023</url>
      <milestone-title>3.0.5</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>493e356b15cf4aeb14584ae2934933201429f0cb</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-11-21T19:07:30+00:00</created-at>
      <filename>to_s_on_finders.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">781822</id>
      <size type="integer">1915</size>
      <uploader-id type="integer">20319</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/781822/to_s_on_finders.diff</url>
    </attachment>
  </attachments>
</ticket>
