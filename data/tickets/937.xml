<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-29T21:26:52+01:00</created-at>
  <creator-id type="integer">22096</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">937</number>
  <permalink>size-method-ignores-group-by-on-has_many</permalink>
  <priority type="integer">386</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activerecord bug has_many patch</tag>
  <title>size method ignores &quot;group by&quot; on has_many</title>
  <updated-at type="datetime">2008-09-15T17:33:59+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">4</version>
  <user-name>Repository</user-name>
  <creator-name>matthewgarysmith (at gmail)</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/937</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>A has_many that uses the :group option, returns invalid results for the size method.

@@@ ruby
class Book &lt; ActiveRecord::Base
  has_many :reviews
  has_many :reviewers, :through =&gt; :reviews, :group =&gt; &quot;reviews.id&quot;
end

class Review &lt; ActiveRecord::Base
  belongs_to :book
  belongs_to :reviewer
end

class Reviewer &lt; ActiveRecord::Base
  has_many :reviews
  has_many :books, :through =&gt; :reviews, :group =&gt; &quot;books.id&quot;
end
@@@

After create a bunch of reviews...

@@@ ruby
  alan = Reviewer.find_by_name(&quot;alan&quot;)
  alan.books.size # =&gt; 4
  alan.books.to_a.size # =&gt; 2
@@@

This is the SQL generated by the second line ignores the :group option:
@@@ sql
SELECT count(*) AS count_all FROM &quot;books&quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&quot;reviews&quot;.reviewer_id = 1)) 
@@@

it should be more like the follow, no?

@@@ sql
SELECT count(distinct books.id) AS count_all FROM &quot;books&quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&quot;reviews&quot;.reviewer_id = 1)) 
@@@

Attached are detailed steps to reproduce the bug.</original-body>
  <latest-body>A has_many that uses the :group option, returns invalid results for the size method.

@@@ ruby
class Book &lt; ActiveRecord::Base
  has_many :reviews
  has_many :reviewers, :through =&gt; :reviews, :group =&gt; &quot;reviews.id&quot;
end

class Review &lt; ActiveRecord::Base
  belongs_to :book
  belongs_to :reviewer
end

class Reviewer &lt; ActiveRecord::Base
  has_many :reviews
  has_many :books, :through =&gt; :reviews, :group =&gt; &quot;books.id&quot;
end
@@@

After create a bunch of reviews...

@@@ ruby
  alan = Reviewer.find_by_name(&quot;alan&quot;)
  alan.books.size # =&gt; 4
  alan.books.to_a.size # =&gt; 2
@@@

This is the SQL generated by the second line ignores the :group option:
@@@ sql
SELECT count(*) AS count_all FROM &quot;books&quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&quot;reviews&quot;.reviewer_id = 1)) 
@@@

it should be more like the follow, no?

@@@ sql
SELECT count(distinct books.id) AS count_all FROM &quot;books&quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&quot;reviews&quot;.reviewer_id = 1)) 
@@@

Attached are detailed steps to reproduce the bug.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;A has_many that uses the :group option, returns invalid results
for the size method.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Book &amp;lt; ActiveRecord::Base
  has_many :reviews
  has_many :reviewers, :through =&amp;gt; :reviews, :group =&amp;gt; &amp;quot;reviews.id&amp;quot;
end

class Review &amp;lt; ActiveRecord::Base
  belongs_to :book
  belongs_to :reviewer
end

class Reviewer &amp;lt; ActiveRecord::Base
  has_many :reviews
  has_many :books, :through =&amp;gt; :reviews, :group =&amp;gt; &amp;quot;books.id&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After create a bunch of reviews...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  alan = Reviewer.find_by_name(&amp;quot;alan&amp;quot;)
  alan.books.size # =&amp;gt; 4
  alan.books.to_a.size # =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the SQL generated by the second line ignores the :group
option:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(*) AS count_all FROM &amp;quot;books&amp;quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&amp;quot;reviews&amp;quot;.reviewer_id = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it should be more like the follow, no?&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(distinct books.id) AS count_all FROM &amp;quot;books&amp;quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&amp;quot;reviews&amp;quot;.reviewer_id = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Attached are detailed steps to reproduce the bug.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A has_many that uses the :group option, returns invalid results for the size method.

@@@ ruby
class Book &lt; ActiveRecord::Base
  has_many :reviews
  has_many :reviewers, :through =&gt; :reviews, :group =&gt; &quot;reviews.id&quot;
end

class Review &lt; ActiveRecord::Base
  belongs_to :book
  belongs_to :reviewer
end

class Reviewer &lt; ActiveRecord::Base
  has_many :reviews
  has_many :books, :through =&gt; :reviews, :group =&gt; &quot;books.id&quot;
end
@@@

After create a bunch of reviews...

@@@ ruby
  alan = Reviewer.find_by_name(&quot;alan&quot;)
  alan.books.size # =&gt; 4
  alan.books.to_a.size # =&gt; 2
@@@

This is the SQL generated by the second line ignores the :group option:
@@@ sql
SELECT count(*) AS count_all FROM &quot;books&quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&quot;reviews&quot;.reviewer_id = 1)) 
@@@

it should be more like the follow, no?

@@@ sql
SELECT count(distinct books.id) AS count_all FROM &quot;books&quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&quot;reviews&quot;.reviewer_id = 1)) 
@@@

Attached are detailed steps to reproduce the bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A has_many that uses the :group option, returns invalid results
for the size method.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Book &amp;lt; ActiveRecord::Base
  has_many :reviews
  has_many :reviewers, :through =&amp;gt; :reviews, :group =&amp;gt; &amp;quot;reviews.id&amp;quot;
end

class Review &amp;lt; ActiveRecord::Base
  belongs_to :book
  belongs_to :reviewer
end

class Reviewer &amp;lt; ActiveRecord::Base
  has_many :reviews
  has_many :books, :through =&amp;gt; :reviews, :group =&amp;gt; &amp;quot;books.id&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After create a bunch of reviews...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  alan = Reviewer.find_by_name(&amp;quot;alan&amp;quot;)
  alan.books.size # =&amp;gt; 4
  alan.books.to_a.size # =&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the SQL generated by the second line ignores the :group
option:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(*) AS count_all FROM &amp;quot;books&amp;quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&amp;quot;reviews&amp;quot;.reviewer_id = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it should be more like the follow, no?&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT count(distinct books.id) AS count_all FROM &amp;quot;books&amp;quot; INNER JOIN reviews ON books.id = reviews.book_id WHERE ((&amp;quot;reviews&amp;quot;.reviewer_id = 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Attached are detailed steps to reproduce the bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-29T21:26:53+01:00</created-at>
      <creator-id type="integer">22096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">937</number>
      <permalink>size-method-ignores-group-by-on-has_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many</tag>
      <title>size method ignores &quot;group by&quot; on has_many</title>
      <updated-at type="datetime">2008-08-29T21:26:53+01:00</updated-at>
      <user-id type="integer">22096</user-id>
      <version type="integer">1</version>
      <user-name>matthewgarysmith (at gmail)</user-name>
      <creator-name>matthewgarysmith (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/937</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm pretty sure this used to work before, 2.1.0 and edge.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm pretty sure this used to work before, 2.1.0 and edge.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T20:42:41+01:00</created-at>
      <creator-id type="integer">22096</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">937</number>
      <permalink>size-method-ignores-group-by-on-has_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many</tag>
      <title>size method ignores &quot;group by&quot; on has_many</title>
      <updated-at type="datetime">2008-09-10T20:42:44+01:00</updated-at>
      <user-id type="integer">16430</user-id>
      <version type="integer">2</version>
      <user-name>Assaf Arkin</user-name>
      <creator-name>matthewgarysmith (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/937</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here is the patch to fix this, includes a test to verify that the :group option is included when the target hasn't been loaded.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is the patch to fix this, includes a test to verify that
the :group option is included when the target hasn't been
loaded.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-12T16:11:57+01:00</created-at>
      <creator-id type="integer">22096</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord bug has_many
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">937</number>
      <permalink>size-method-ignores-group-by-on-has_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many patch</tag>
      <title>size method ignores &quot;group by&quot; on has_many</title>
      <updated-at type="datetime">2008-09-12T16:12:05+01:00</updated-at>
      <user-id type="integer">16138</user-id>
      <version type="integer">3</version>
      <user-name>Emilio Tagua</user-name>
      <creator-name>matthewgarysmith (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/937</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [dc8bf7515de85f5bc28d17e96edf4a3e74a858da]) When counting grouped records the target should be loaded to return a valid groups count result.

Without this change count_records will group for the count in the query and return erroneous results.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#937 state:committed]
http://github.com/rails/rails/commit/dc8bf7515de85f5bc28d17e96edf4a3e74a858da</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [dc8bf7515de85f5bc28d17e96edf4a3e74a858da]) When counting
grouped records the target should be loaded to return a valid
groups count result.&lt;/p&gt;
&lt;p&gt;Without this change count_records will group for the count in
the query and return erroneous results.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt; [&lt;a href=&quot;/projects/8994/tickets/937&quot; title=&quot;Ticket #937&quot;&gt;#937&lt;/a&gt;
state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/dc8bf7515de85f5bc28d17e96edf4a3e74a858da&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-15T17:33:58+01:00</created-at>
      <creator-id type="integer">22096</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">937</number>
      <permalink>size-method-ignores-group-by-on-has_many</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activerecord bug has_many patch</tag>
      <title>size method ignores &quot;group by&quot; on has_many</title>
      <updated-at type="datetime">2008-09-15T17:33:59+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>matthewgarysmith (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/937</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>17aa8512f54b2c19bd357620c472775564d8413e</code>
      <content-type>application/x-sh</content-type>
      <created-at type="datetime">2008-08-29T21:26:53+01:00</created-at>
      <filename>has_many_group_by_count_bug.sh</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">42625</id>
      <size type="integer">2528</size>
      <uploader-id type="integer">22096</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/42625/has_many_group_by_count_bug.sh</url>
    </attachment>
    <attachment type="Attachment">
      <code>42e0a88fe2d41a6a1b66498b0ac0046bb048be55</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-09-15T17:25:10+01:00</created-at>
      <filename>fix_group_option_in_has_many_associations.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">45980</id>
      <size type="integer">1970</size>
      <uploader-id type="integer">16138</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/45980/fix_group_option_in_has_many_associations.diff</url>
    </attachment>
  </attachments>
</ticket>
