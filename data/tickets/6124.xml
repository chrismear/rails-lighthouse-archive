<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-12-07T10:38:14+00:00</created-at>
  <creator-id type="integer">105986</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6124</number>
  <permalink>count-and-other-calculations-do-not-consider-scoped-group-option</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>&quot;23x 2310&quot; &quot;activerecord scopes&quot;</tag>
  <title>count (and other calculations) do not consider scoped :group option</title>
  <updated-at type="datetime">2011-03-08T00:00:26+00:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">3</version>
  <user-name>rails</user-name>
  <creator-name>Sokolov Yura</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6124</url>
  <priority-name nil="true"></priority-name>
  <original-body>In Rails 2.3.x calculation methods do not counts scoped :group parameter.

Given model like

    class Reply &lt; ActiveRecord::Base
      named_scope :group_by_topic_id, :group =&gt; 'replies.topic_id'
    end

I've got following results in console
    ree-1.8.7-2010.02 &gt; Reply.count(:group=&gt;'replies.topic_id')
      SQL (0.8ms)   SELECT count(*) AS count_all, replies.topic_id AS replies_topic_id FROM &quot;replies&quot; GROUP BY replies.topic_id 
     =&gt; #&lt;OrderedHash {1=&gt;2, 2=&gt;1, 4=&gt;3}&gt; 
    ree-1.8.7-2010.02 &gt; Reply.group_by_topic_id.count
      SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
     =&gt; 6 
    ree-1.8.7-2010.02 &gt; Reply.instance_exec do with_scope(:find=&gt;{:group=&gt;'replies.topic_id'}) do count end end
      SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
     =&gt; 6 

I think it is wrong and it differs from Rails3 behaviour.</original-body>
  <latest-body>In Rails 2.3.x calculation methods do not counts scoped :group parameter.

Given model like

    class Reply &lt; ActiveRecord::Base
      named_scope :group_by_topic_id, :group =&gt; 'replies.topic_id'
    end

I've got following results in console
    ree-1.8.7-2010.02 &gt; Reply.count(:group=&gt;'replies.topic_id')
      SQL (0.8ms)   SELECT count(*) AS count_all, replies.topic_id AS replies_topic_id FROM &quot;replies&quot; GROUP BY replies.topic_id 
     =&gt; #&lt;OrderedHash {1=&gt;2, 2=&gt;1, 4=&gt;3}&gt; 
    ree-1.8.7-2010.02 &gt; Reply.group_by_topic_id.count
      SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
     =&gt; 6 
    ree-1.8.7-2010.02 &gt; Reply.instance_exec do with_scope(:find=&gt;{:group=&gt;'replies.topic_id'}) do count end end
      SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
     =&gt; 6 

I think it is wrong and it differs from Rails3 behaviour.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In Rails 2.3.x calculation methods do not counts scoped :group
parameter.&lt;/p&gt;
&lt;p&gt;Given model like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Reply &amp;lt; ActiveRecord::Base
  named_scope :group_by_topic_id, :group =&amp;gt; 'replies.topic_id'
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've got following results in console&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ree-1.8.7-2010.02 &amp;gt; Reply.count(:group=&amp;gt;'replies.topic_id')
  SQL (0.8ms)   SELECT count(*) AS count_all, replies.topic_id AS replies_topic_id FROM &quot;replies&quot; GROUP BY replies.topic_id 
 =&amp;gt; #&amp;lt;OrderedHash {1=&amp;gt;2, 2=&amp;gt;1, 4=&amp;gt;3}&amp;gt; 
ree-1.8.7-2010.02 &amp;gt; Reply.group_by_topic_id.count
  SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
 =&amp;gt; 6 
ree-1.8.7-2010.02 &amp;gt; Reply.instance_exec do with_scope(:find=&amp;gt;{:group=&amp;gt;'replies.topic_id'}) do count end end
  SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
 =&amp;gt; 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think it is wrong and it differs from Rails3 behaviour.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In Rails 2.3.x calculation methods do not counts scoped :group parameter.

Given model like

    class Reply &lt; ActiveRecord::Base
      named_scope :group_by_topic_id, :group =&gt; 'replies.topic_id'
    end

I've got following results in console
    ree-1.8.7-2010.02 &gt; Reply.count(:group=&gt;'replies.topic_id')
      SQL (0.8ms)   SELECT count(*) AS count_all, replies.topic_id AS replies_topic_id FROM &quot;replies&quot; GROUP BY replies.topic_id 
     =&gt; #&lt;OrderedHash {1=&gt;2, 2=&gt;1, 4=&gt;3}&gt; 
    ree-1.8.7-2010.02 &gt; Reply.group_by_topic_id.count
      SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
     =&gt; 6 
    ree-1.8.7-2010.02 &gt; Reply.instance_exec do with_scope(:find=&gt;{:group=&gt;'replies.topic_id'}) do count end end
      SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
     =&gt; 6 

I think it is wrong and it differs from Rails3 behaviour.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In Rails 2.3.x calculation methods do not counts scoped :group
parameter.&lt;/p&gt;
&lt;p&gt;Given model like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Reply &amp;lt; ActiveRecord::Base
  named_scope :group_by_topic_id, :group =&amp;gt; 'replies.topic_id'
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've got following results in console&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ree-1.8.7-2010.02 &amp;gt; Reply.count(:group=&amp;gt;'replies.topic_id')
  SQL (0.8ms)   SELECT count(*) AS count_all, replies.topic_id AS replies_topic_id FROM &quot;replies&quot; GROUP BY replies.topic_id 
 =&amp;gt; #&amp;lt;OrderedHash {1=&amp;gt;2, 2=&amp;gt;1, 4=&amp;gt;3}&amp;gt; 
ree-1.8.7-2010.02 &amp;gt; Reply.group_by_topic_id.count
  SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
 =&amp;gt; 6 
ree-1.8.7-2010.02 &amp;gt; Reply.instance_exec do with_scope(:find=&amp;gt;{:group=&amp;gt;'replies.topic_id'}) do count end end
  SQL (0.5ms)   SELECT count(*) AS count_all FROM &quot;replies&quot; 
 =&amp;gt; 6&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think it is wrong and it differs from Rails3 behaviour.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-07T10:38:14+00:00</created-at>
      <creator-id type="integer">105986</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6124</number>
      <permalink>count-and-other-calculations-do-not-consider-scoped-group-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;2.3.x 2.3.10&quot; &quot;activerecord scopes&quot;</tag>
      <title>count (and other calculations) do not consider scoped :group option</title>
      <updated-at type="datetime">2010-12-07T10:40:04+00:00</updated-at>
      <user-id type="integer">105986</user-id>
      <version type="integer">1</version>
      <user-name>Sokolov Yura</user-name>
      <creator-name>Sokolov Yura</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6124</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-08T00:00:11+00:00</created-at>
      <creator-id type="integer">105986</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:tag: &quot;\&quot;2.3.x 2.3.10\&quot; \&quot;activerecord scopes\&quot;&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6124</number>
      <permalink>count-and-other-calculations-do-not-consider-scoped-group-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;23x 2310&quot; &quot;activerecord scopes&quot;</tag>
      <title>count (and other calculations) do not consider scoped :group option</title>
      <updated-at type="datetime">2011-03-08T00:00:26+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Sokolov Yura</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6124</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-08T00:00:11+00:00</created-at>
      <creator-id type="integer">105986</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6124</number>
      <permalink>count-and-other-calculations-do-not-consider-scoped-group-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;23x 2310&quot; &quot;activerecord scopes&quot;</tag>
      <title>count (and other calculations) do not consider scoped :group option</title>
      <updated-at type="datetime">2011-03-08T00:00:21+00:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Sokolov Yura</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6124</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>380c7626a4ea4e6c90f0dc6f5e10dce9ac21e042</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-12-07T10:38:14+00:00</created-at>
      <filename>calculate_scope_group.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">806049</id>
      <size type="integer">2797</size>
      <uploader-id type="integer">105986</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/806049/calculate_scope_group.diff</url>
    </attachment>
  </attachments>
</ticket>
