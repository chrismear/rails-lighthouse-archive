<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-25T01:38:19+00:00</created-at>
  <creator-id type="integer">42916</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6621</number>
  <permalink>explicit-callback-cancellation-instead-of-implicit-based-on-return-value</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>activerecord callbacks</tag>
  <title>explicit callback cancellation instead of implicit based on return value</title>
  <updated-at type="datetime">2011-03-31T00:06:04+01:00</updated-at>
  <user-id type="integer">42916</user-id>
  <version type="integer">4</version>
  <user-name>Greg Hazel</user-name>
  <creator-name>Greg Hazel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6621</url>
  <priority-name>Low</priority-name>
  <original-body>I was recently bit by a bug where User records were silently not being saved. Here's a mini example of the sort of error I had:

@@@ ruby
class User &lt; ActiveRecord::Base

  before_create :foo

  def foo
    if self.age &gt; 30
      self.completed_survey = self.prequalified
    else
      self.completed_survey = true
    end
  end

end

# this one saves
user = User.create(:age =&gt; 15, :prequalified =&gt; false)
# this one also saves
user = User.create(:age =&gt; 35, :prequalified =&gt; true)
# this one does not save!
user = User.create(:age =&gt; 35, :prequalified =&gt; false)
@@@

Can you spot the error? The title of the bug gives it away. If the user is over 30 and prequalified is false, foo will accidentally return false and returning false from a before_create callback cancels the save. Also, using User.create instead of User.create! meant no exception was raised, so it went unnoticed for awhile.

This ticket is a proposal to change the interface so that save cancellation is explicit rather than implicit. Something like self.abort_save! could raise a cancel exception. The old interface could be slowly deprecated by warning when false is returned.

If this code was written, would it be accepted?</original-body>
  <latest-body>I was recently bit by a bug where User records were silently not being saved. Here's a mini example of the sort of error I had:

@@@ ruby
class User &lt; ActiveRecord::Base

  before_create :foo

  def foo
    if self.age &gt; 30
      self.completed_survey = self.prequalified
    else
      self.completed_survey = true
    end
  end

end

# this one saves
user = User.create(:age =&gt; 15, :prequalified =&gt; false)
# this one also saves
user = User.create(:age =&gt; 35, :prequalified =&gt; true)
# this one does not save!
user = User.create(:age =&gt; 35, :prequalified =&gt; false)
@@@

Can you spot the error? The title of the bug gives it away. If the user is over 30 and prequalified is false, foo will accidentally return false and returning false from a before_create callback cancels the save. Also, using User.create instead of User.create! meant no exception was raised, so it went unnoticed for awhile.

This ticket is a proposal to change the interface so that save cancellation is explicit rather than implicit. Something like self.abort_save! could raise a cancel exception. The old interface could be slowly deprecated by warning when false is returned.

If this code was written, would it be accepted?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I was recently bit by a bug where User records were silently not
being saved. Here's a mini example of the sort of error I had:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base

  before_create :foo

  def foo
    if self.age &amp;gt; 30
      self.completed_survey = self.prequalified
    else
      self.completed_survey = true
    end
  end

end

# this one saves
user = User.create(:age =&amp;gt; 15, :prequalified =&amp;gt; false)
# this one also saves
user = User.create(:age =&amp;gt; 35, :prequalified =&amp;gt; true)
# this one does not save!
user = User.create(:age =&amp;gt; 35, :prequalified =&amp;gt; false)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Can you spot the error? The title of the bug gives it away. If
the user is over 30 and prequalified is false, foo will
accidentally return false and returning false from a before_create
callback cancels the save. Also, using User.create instead of
User.create! meant no exception was raised, so it went unnoticed
for awhile.&lt;/p&gt;
&lt;p&gt;This ticket is a proposal to change the interface so that save
cancellation is explicit rather than implicit. Something like
self.abort_save! could raise a cancel exception. The old interface
could be slowly deprecated by warning when false is returned.&lt;/p&gt;
&lt;p&gt;If this code was written, would it be accepted?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I was recently bit by a bug where User records were silently not being saved. Here's a mini example of the sort of error I had:

@@@ ruby
class User &lt; ActiveRecord::Base

  before_create :foo

  def foo
    if self.age &gt; 30
      self.completed_survey = self.prequalified
    else
      self.completed_survey = true
    end
  end

end

# this one saves
user = User.create(:age =&gt; 15, :prequalified =&gt; false)
# this one also saves
user = User.create(:age =&gt; 35, :prequalified =&gt; true)
# this one does not save!
user = User.create(:age =&gt; 35, :prequalified =&gt; false)
@@@

Can you spot the error? The title of the bug gives it away. If the user is over 30 and prequalified is false, foo will accidentally return false and returning false from a before_create callback cancels the save. Also, using User.create instead of User.create! meant no exception was raised, so it went unnoticed for awhile.

This ticket is a proposal to change the interface so that save cancellation is explicit rather than implicit. Something like self.abort_save! could raise a cancel exception. The old interface could be slowly deprecated by warning when false is returned.

If this code was written, would it be accepted?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was recently bit by a bug where User records were silently not
being saved. Here's a mini example of the sort of error I had:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base

  before_create :foo

  def foo
    if self.age &amp;gt; 30
      self.completed_survey = self.prequalified
    else
      self.completed_survey = true
    end
  end

end

# this one saves
user = User.create(:age =&amp;gt; 15, :prequalified =&amp;gt; false)
# this one also saves
user = User.create(:age =&amp;gt; 35, :prequalified =&amp;gt; true)
# this one does not save!
user = User.create(:age =&amp;gt; 35, :prequalified =&amp;gt; false)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Can you spot the error? The title of the bug gives it away. If
the user is over 30 and prequalified is false, foo will
accidentally return false and returning false from a before_create
callback cancels the save. Also, using User.create instead of
User.create! meant no exception was raised, so it went unnoticed
for awhile.&lt;/p&gt;
&lt;p&gt;This ticket is a proposal to change the interface so that save
cancellation is explicit rather than implicit. Something like
self.abort_save! could raise a cancel exception. The old interface
could be slowly deprecated by warning when false is returned.&lt;/p&gt;
&lt;p&gt;If this code was written, would it be accepted?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-25T01:38:19+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6621</number>
      <permalink>explicit-callback-cancellation-instead-of-implicit-based-on-return-value</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord callbacks</tag>
      <title>explicit callback cancellation instead of implicit based on return value</title>
      <updated-at type="datetime">2011-03-25T01:38:55+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">1</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6621</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry, changing this behaviour would break loads of applications.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, changing this behaviour would break loads of
applications.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-25T07:12:08+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6621</number>
      <permalink>explicit-callback-cancellation-instead-of-implicit-based-on-return-value</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord callbacks</tag>
      <title>explicit callback cancellation instead of implicit based on return value</title>
      <updated-at type="datetime">2011-03-25T07:12:19+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6621</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>No, it wouldn't. As I described there is an obvious deprecation path which could be used to prevent application breakage. If you still don't think a long deprecation path is sufficient, how about a global option which defaults to the current behavior?

Leaving a bad interface will break future applications (like mine, just recently).

[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;No, it wouldn't. As I described there is an obvious deprecation
path which could be used to prevent application breakage. If you
still don't think a long deprecation path is sufficient, how about
a global option which defaults to the current behavior?&lt;/p&gt;
&lt;p&gt;Leaving a bad interface will break future applications (like
mine, just recently).&lt;/p&gt;
&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-25T07:38:47+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: wontfix
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6621</number>
      <permalink>explicit-callback-cancellation-instead-of-implicit-based-on-return-value</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord callbacks</tag>
      <title>explicit callback cancellation instead of implicit based on return value</title>
      <updated-at type="datetime">2011-03-25T07:38:58+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">3</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6621</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Another use who experienced breakage due to the current behavior:

http://factore.ca/on-the-floor/77-rails-gotcha-with-before-validation</body>
      <body-html>&lt;div&gt;&lt;p&gt;Another use who experienced breakage due to the current
behavior:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://factore.ca/on-the-floor/77-rails-gotcha-with-before-validation&quot;&gt;
http://factore.ca/on-the-floor/77-rails-gotcha-with-before-validation&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-31T00:05:53+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6621</number>
      <permalink>explicit-callback-cancellation-instead-of-implicit-based-on-return-value</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord callbacks</tag>
      <title>explicit callback cancellation instead of implicit based on return value</title>
      <updated-at type="datetime">2011-03-31T00:06:04+01:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">4</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6621</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
