<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-25T12:13:41+00:00</created-at>
  <creator-id type="integer">12845</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">4825</number>
  <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>patch</tag>
  <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
  <updated-at type="datetime">2010-11-25T12:13:41+00:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">30</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Wincent Colaiuta</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Just noticed a behavior change that was introduced on 6 June by commit ab764ec (&quot;Makes text_helper methods sanitize the input if the input is not safe or :safe =&gt; true option is not provided&quot;).

Specifically I noticed the change in the &quot;truncate&quot; method, but I see that the same change has been applied to other methods as well.

Under Rails 2, and under Rails 3 up until the recent commit, the &quot;truncate&quot; method did exactly what its name and documentation imply: it returned a possibly shortened version of the string.

After this commit, it returns a string which has not only been marked HTML safe, but potentially transformed in other ways after having been run through the &quot;sanitize&quot; method. The commit message doesn't explain why this is a desirable behavior change, and to be honest, I can't really see how it could be desirable...

Here's my use case: issue tracker listing with &quot;summary&quot; field in a table column, truncated to 30 characters.

Before commit ab764ec, a user could create issues with summaries like:

@@@
&lt;script&gt; tags not working in admin section
@@@

or

@@@
missing &lt;em&gt; tag in blog title
@@@

When displayed in the listing, these would end up getting HTML escaped (explicitly via h() in Rails 2, and automatically in Rails 3) and would appear correctly in the table.

After commit ab8764ec we now get erratic behavior. A summary like:

@@@
&lt;script&gt; tags not working in admin section
@@@

now gets sanitized away to nothing (an empty string) due to the invocation of the sanitize method which deletes the &quot;script&quot; tag and everything after it as well (now that's what I call truncation!), and a summary like

@@@
missing &lt;em&gt; tag in blog title
@@@

is allowed through unchanged, but is marked as HTML safe and so the &quot;em&quot; tag now appears unescaped and the presentation of the table is broken (unwanted italics).

My main concern with this commit is that the name of the method &quot;truncate&quot; doesn't in any way imply that this kind of action is going to be taken (possible mutilation of string, and automatic marking as HTML safe).

So I think perhaps the commit should be reverted, at least the part of it that touches the &quot;truncate&quot; method and possibly the rest as well. Or at least an explanation of what it does, in addition to truncating, be added to the documentation.

If it's decided that the change stays in, at least the &quot;:safe&quot; option which the commit adds should be documented, seeing as this provides a way for callers to get the old behavior back if desired.</original-body>
  <latest-body>Just noticed a behavior change that was introduced on 6 June by commit ab764ec (&quot;Makes text_helper methods sanitize the input if the input is not safe or :safe =&gt; true option is not provided&quot;).

Specifically I noticed the change in the &quot;truncate&quot; method, but I see that the same change has been applied to other methods as well.

Under Rails 2, and under Rails 3 up until the recent commit, the &quot;truncate&quot; method did exactly what its name and documentation imply: it returned a possibly shortened version of the string.

After this commit, it returns a string which has not only been marked HTML safe, but potentially transformed in other ways after having been run through the &quot;sanitize&quot; method. The commit message doesn't explain why this is a desirable behavior change, and to be honest, I can't really see how it could be desirable...

Here's my use case: issue tracker listing with &quot;summary&quot; field in a table column, truncated to 30 characters.

Before commit ab764ec, a user could create issues with summaries like:

@@@
&lt;script&gt; tags not working in admin section
@@@

or

@@@
missing &lt;em&gt; tag in blog title
@@@

When displayed in the listing, these would end up getting HTML escaped (explicitly via h() in Rails 2, and automatically in Rails 3) and would appear correctly in the table.

After commit ab8764ec we now get erratic behavior. A summary like:

@@@
&lt;script&gt; tags not working in admin section
@@@

now gets sanitized away to nothing (an empty string) due to the invocation of the sanitize method which deletes the &quot;script&quot; tag and everything after it as well (now that's what I call truncation!), and a summary like

@@@
missing &lt;em&gt; tag in blog title
@@@

is allowed through unchanged, but is marked as HTML safe and so the &quot;em&quot; tag now appears unescaped and the presentation of the table is broken (unwanted italics).

My main concern with this commit is that the name of the method &quot;truncate&quot; doesn't in any way imply that this kind of action is going to be taken (possible mutilation of string, and automatic marking as HTML safe).

So I think perhaps the commit should be reverted, at least the part of it that touches the &quot;truncate&quot; method and possibly the rest as well. Or at least an explanation of what it does, in addition to truncating, be added to the documentation.

If it's decided that the change stays in, at least the &quot;:safe&quot; option which the commit adds should be documented, seeing as this provides a way for callers to get the old behavior back if desired.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Just noticed a behavior change that was introduced on 6 June by
commit ab764ec (&quot;Makes text_helper methods sanitize the input if
the input is not safe or :safe =&amp;gt; true option is not
provided&quot;).&lt;/p&gt;
&lt;p&gt;Specifically I noticed the change in the &quot;truncate&quot; method, but
I see that the same change has been applied to other methods as
well.&lt;/p&gt;
&lt;p&gt;Under Rails 2, and under Rails 3 up until the recent commit, the
&quot;truncate&quot; method did exactly what its name and documentation
imply: it returned a possibly shortened version of the string.&lt;/p&gt;
&lt;p&gt;After this commit, it returns a string which has not only been
marked HTML safe, but potentially transformed in other ways after
having been run through the &quot;sanitize&quot; method. The commit message
doesn't explain why this is a desirable behavior change, and to be
honest, I can't really see how it could be desirable...&lt;/p&gt;
&lt;p&gt;Here's my use case: issue tracker listing with &quot;summary&quot; field
in a table column, truncated to 30 characters.&lt;/p&gt;
&lt;p&gt;Before commit ab764ec, a user could create issues with summaries
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt; tags not working in admin section&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;missing &amp;lt;em&amp;gt; tag in blog title&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When displayed in the listing, these would end up getting HTML
escaped (explicitly via h() in Rails 2, and automatically in Rails
3) and would appear correctly in the table.&lt;/p&gt;
&lt;p&gt;After commit ab8764ec we now get erratic behavior. A summary
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt; tags not working in admin section&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;now gets sanitized away to nothing (an empty string) due to the
invocation of the sanitize method which deletes the &quot;script&quot; tag
and everything after it as well (now that's what I call
truncation!), and a summary like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;missing &amp;lt;em&amp;gt; tag in blog title&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is allowed through unchanged, but is marked as HTML safe and so
the &quot;em&quot; tag now appears unescaped and the presentation of the
table is broken (unwanted italics).&lt;/p&gt;
&lt;p&gt;My main concern with this commit is that the name of the method
&quot;truncate&quot; doesn't in any way imply that this kind of action is
going to be taken (possible mutilation of string, and automatic
marking as HTML safe).&lt;/p&gt;
&lt;p&gt;So I think perhaps the commit should be reverted, at least the
part of it that touches the &quot;truncate&quot; method and possibly the rest
as well. Or at least an explanation of what it does, in addition to
truncating, be added to the documentation.&lt;/p&gt;
&lt;p&gt;If it's decided that the change stays in, at least the &quot;:safe&quot;
option which the commit adds should be documented, seeing as this
provides a way for callers to get the old behavior back if
desired.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Just noticed a behavior change that was introduced on 6 June by commit ab764ec (&quot;Makes text_helper methods sanitize the input if the input is not safe or :safe =&gt; true option is not provided&quot;).

Specifically I noticed the change in the &quot;truncate&quot; method, but I see that the same change has been applied to other methods as well.

Under Rails 2, and under Rails 3 up until the recent commit, the &quot;truncate&quot; method did exactly what its name and documentation imply: it returned a possibly shortened version of the string.

After this commit, it returns a string which has not only been marked HTML safe, but potentially transformed in other ways after having been run through the &quot;sanitize&quot; method. The commit message doesn't explain why this is a desirable behavior change, and to be honest, I can't really see how it could be desirable...

Here's my use case: issue tracker listing with &quot;summary&quot; field in a table column, truncated to 30 characters.

Before commit ab764ec, a user could create issues with summaries like:

@@@
&lt;script&gt; tags not working in admin section
@@@

or

@@@
missing &lt;em&gt; tag in blog title
@@@

When displayed in the listing, these would end up getting HTML escaped (explicitly via h() in Rails 2, and automatically in Rails 3) and would appear correctly in the table.

After commit ab8764ec we now get erratic behavior. A summary like:

@@@
&lt;script&gt; tags not working in admin section
@@@

now gets sanitized away to nothing (an empty string) due to the invocation of the sanitize method which deletes the &quot;script&quot; tag and everything after it as well (now that's what I call truncation!), and a summary like

@@@
missing &lt;em&gt; tag in blog title
@@@

is allowed through unchanged, but is marked as HTML safe and so the &quot;em&quot; tag now appears unescaped and the presentation of the table is broken (unwanted italics).

My main concern with this commit is that the name of the method &quot;truncate&quot; doesn't in any way imply that this kind of action is going to be taken (possible mutilation of string, and automatic marking as HTML safe).

So I think perhaps the commit should be reverted, at least the part of it that touches the &quot;truncate&quot; method and possibly the rest as well. Or at least an explanation of what it does, in addition to truncating, be added to the documentation.

If it's decided that the change stays in, at least the &quot;:safe&quot; option which the commit adds should be documented, seeing as this provides a way for callers to get the old behavior back if desired.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just noticed a behavior change that was introduced on 6 June by
commit ab764ec (&quot;Makes text_helper methods sanitize the input if
the input is not safe or :safe =&amp;gt; true option is not
provided&quot;).&lt;/p&gt;
&lt;p&gt;Specifically I noticed the change in the &quot;truncate&quot; method, but
I see that the same change has been applied to other methods as
well.&lt;/p&gt;
&lt;p&gt;Under Rails 2, and under Rails 3 up until the recent commit, the
&quot;truncate&quot; method did exactly what its name and documentation
imply: it returned a possibly shortened version of the string.&lt;/p&gt;
&lt;p&gt;After this commit, it returns a string which has not only been
marked HTML safe, but potentially transformed in other ways after
having been run through the &quot;sanitize&quot; method. The commit message
doesn't explain why this is a desirable behavior change, and to be
honest, I can't really see how it could be desirable...&lt;/p&gt;
&lt;p&gt;Here's my use case: issue tracker listing with &quot;summary&quot; field
in a table column, truncated to 30 characters.&lt;/p&gt;
&lt;p&gt;Before commit ab764ec, a user could create issues with summaries
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt; tags not working in admin section&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;missing &amp;lt;em&amp;gt; tag in blog title&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When displayed in the listing, these would end up getting HTML
escaped (explicitly via h() in Rails 2, and automatically in Rails
3) and would appear correctly in the table.&lt;/p&gt;
&lt;p&gt;After commit ab8764ec we now get erratic behavior. A summary
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt; tags not working in admin section&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;now gets sanitized away to nothing (an empty string) due to the
invocation of the sanitize method which deletes the &quot;script&quot; tag
and everything after it as well (now that's what I call
truncation!), and a summary like&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;missing &amp;lt;em&amp;gt; tag in blog title&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is allowed through unchanged, but is marked as HTML safe and so
the &quot;em&quot; tag now appears unescaped and the presentation of the
table is broken (unwanted italics).&lt;/p&gt;
&lt;p&gt;My main concern with this commit is that the name of the method
&quot;truncate&quot; doesn't in any way imply that this kind of action is
going to be taken (possible mutilation of string, and automatic
marking as HTML safe).&lt;/p&gt;
&lt;p&gt;So I think perhaps the commit should be reverted, at least the
part of it that touches the &quot;truncate&quot; method and possibly the rest
as well. Or at least an explanation of what it does, in addition to
truncating, be added to the documentation.&lt;/p&gt;
&lt;p&gt;If it's decided that the change stays in, at least the &quot;:safe&quot;
option which the commit adds should be documented, seeing as this
provides a way for callers to get the old behavior back if
desired.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-10T20:39:00+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-12T20:14:10+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">1</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Bah, Lighthouse ate the two example summaries from my post above. Trying to repost them using code tags:

The first example was:

@@@
&lt;script&gt; tags not working in admin section
@@@

The second example was:

@@@
missing &lt;em&gt; tag in blog title
@@@

So, in Rails 2 and Rails 3 up to commit ab8764ec, these would be truncated and then safely displayed in the issue listing (using the h() method in Rails 2, and automatically in Rails 3) with HTML entities for the less-than and greater-than characters.

Now, with commit ab8764ec, the first example gets sanitized away to nothing (ie. &quot;&quot;, an empty string) because the script tag and everything after it gets blown away.

And the second example is allowed through as is (ie. the &quot;em&quot; tag remains intact) but it is now marked as HTML safe and so the display of the item is messed up: the issues table now appears partially in italics and the summary reads as &quot;missing tag in blog title&quot;.

Sorry about the confusion. I hope Lighthouse doesn't chew up the examples in code tags above this time...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Bah, Lighthouse ate the two example summaries from my post
above. Trying to repost them using code tags:&lt;/p&gt;
&lt;p&gt;The first example was:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;script&amp;gt; tags not working in admin section&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The second example was:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;missing &amp;lt;em&amp;gt; tag in blog title&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So, in Rails 2 and Rails 3 up to commit ab8764ec, these would be
truncated and then safely displayed in the issue listing (using the
h() method in Rails 2, and automatically in Rails 3) with HTML
entities for the less-than and greater-than characters.&lt;/p&gt;
&lt;p&gt;Now, with commit ab8764ec, the first example gets sanitized away
to nothing (ie. &quot;&quot;, an empty string) because the script tag and
everything after it gets blown away.&lt;/p&gt;
&lt;p&gt;And the second example is allowed through as is (ie. the &quot;em&quot;
tag remains intact) but it is now marked as HTML safe and so the
display of the item is messed up: the issues table now appears
partially in italics and the summary reads as &quot;missing tag in blog
title&quot;.&lt;/p&gt;
&lt;p&gt;Sorry about the confusion. I hope Lighthouse doesn't chew up the
examples in code tags above this time...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-10T23:58:41+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-10T23:58:46+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">2</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So I spotted the &quot;Edit ticket&quot; link at the top of the page and fixed the damage in my initial post. Can't see a &quot;delete&quot; or &quot;edit&quot; link though for my follow-up comment though, which is now redundant. (Can't stand this Lighthouse UI.) Sorry about the noise.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So I spotted the &quot;Edit ticket&quot; link at the top of the page and
fixed the damage in my initial post. Can't see a &quot;delete&quot; or &quot;edit&quot;
link though for my follow-up comment though, which is now
redundant. (Can't stand this Lighthouse UI.) Sorry about the
noise.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-12T20:13:22+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-12T20:13:24+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">3</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This has been fixed in http://github.com/rails/rails/commit/b4976ce91ba003942acd3f285c6b4fb308657a69

Can you confirm?</body>
      <body-html>&lt;div&gt;&lt;p&gt;This has been fixed in &lt;a href=
&quot;http://github.com/rails/rails/commit/b4976ce91ba003942acd3f285c6b4fb308657a69&quot;&gt;
http://github.com/rails/rails/commit/b4976ce91ba003942acd3f285c6b4f...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Can you confirm?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-13T01:47:19+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-13T01:47:25+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Confirm!, now uses html_escape. Sorry about the commit message my english skills are not good enough, also i have in my todo list to write the docs about :safe =&gt; true and safe input.
BTW if you don't want your input to be escaped now you need to mark the string as safe or use :safe =&gt; true.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Confirm!, now uses html_escape. Sorry about the commit message
my english skills are not good enough, also i have in my todo list
to write the docs about :safe =&amp;gt; true and safe input.&lt;br&gt;
BTW if you don't want your input to be escaped now you need to mark
the string as safe or use :safe =&amp;gt; true.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-13T01:58:52+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-13T01:58:55+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is certainly an improvement on what was there before, at least for my use case (ie. it not longer mutilates the string in surprising ways) but I still wonder &lt;em&gt;why&lt;/em&gt; you're wanting to sanitize or escape in a &quot;truncate&quot; method.

The method is called &quot;truncate&quot;, not &quot;truncate_and_escape&quot;. At least for me, following the &quot;principal of least surprise&quot;, I would expect a &quot;truncate&quot; method to shorten a string, but not modify or transform it in other ways.

If there's something I'm missing here (like some rule that absolutely all Rails helper methods are supposed to produce &quot;safe&quot; output or something), then let me know and I'll shut up.

One thing about &quot;:safe =&gt; true&quot; though, I think it could be named better as it is a little ambiguous. ie. without looking at the source code, a reader can't know if you are saying &quot;this string is safe, so don't touch it&quot; or you are saying &quot;I want you to make this string safe, so please touch it&quot;. Ironically, in my use case, this API obliges me to say &quot;:safe =&gt; true&quot; even when my input is quite explicitly not safe at all, just because I don't want the &quot;truncate&quot; method to mess with it at that point.

&quot;:escape =&gt; true&quot; would be clearer (ie. &quot;please escape this string&quot;), with &quot;:escape =&gt; false&quot; meaning &quot;don't touch this string&quot;. &quot;:escape =&gt; true&quot; could be the default if you want to maintain the behavior that you've introduced in these two commits. You could also have &quot;:escape =&gt; :sanitize&quot; for those wanting to sanitize the input rather than just escape it. (Once again, no idea why people would want this in a &quot;truncate&quot; method...)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is certainly an improvement on what was there before, at
least for my use case (ie. it not longer mutilates the string in
surprising ways) but I still wonder &lt;em&gt;why&lt;/em&gt; you're wanting to
sanitize or escape in a &quot;truncate&quot; method.&lt;/p&gt;
&lt;p&gt;The method is called &quot;truncate&quot;, not &quot;truncate_and_escape&quot;. At
least for me, following the &quot;principal of least surprise&quot;, I would
expect a &quot;truncate&quot; method to shorten a string, but not modify or
transform it in other ways.&lt;/p&gt;
&lt;p&gt;If there's something I'm missing here (like some rule that
absolutely all Rails helper methods are supposed to produce &quot;safe&quot;
output or something), then let me know and I'll shut up.&lt;/p&gt;
&lt;p&gt;One thing about &quot;:safe =&amp;gt; true&quot; though, I think it could be
named better as it is a little ambiguous. ie. without looking at
the source code, a reader can't know if you are saying &quot;this string
is safe, so don't touch it&quot; or you are saying &quot;I want you to make
this string safe, so please touch it&quot;. Ironically, in my use case,
this API obliges me to say &quot;:safe =&amp;gt; true&quot; even when my input is
quite explicitly not safe at all, just because I don't want the
&quot;truncate&quot; method to mess with it at that point.&lt;/p&gt;
&lt;p&gt;&quot;:escape =&amp;gt; true&quot; would be clearer (ie. &quot;please escape this
string&quot;), with &quot;:escape =&amp;gt; false&quot; meaning &quot;don't touch this
string&quot;. &quot;:escape =&amp;gt; true&quot; could be the default if you want to
maintain the behavior that you've introduced in these two commits.
You could also have &quot;:escape =&amp;gt; :sanitize&quot; for those wanting to
sanitize the input rather than just escape it. (Once again, no idea
why people would want this in a &quot;truncate&quot; method...)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-13T09:14:47+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-13T09:14:53+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">6</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rails helpers methods are supposed to produce safe, i you want to improve the docs you are welcome.
Remember that in http://github.com/lifo/docrails everyone can push ... so go ahead ;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rails helpers methods are supposed to produce safe, i you want
to improve the docs you are welcome.&lt;br&gt;
Remember that in &lt;a href=
&quot;http://github.com/lifo/docrails&quot;&gt;http://github.com/lifo/docrails&lt;/a&gt;
everyone can push ... so go ahead ;)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-13T10:06:35+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-13T10:06:41+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Created a &quot;ticket4825&quot; branch to demonstrate the API change I'm proposing to resolve the ambiguity with the option name:

http://github.com/wincent/rails/tree/ticket4825

Only one commit on the branch right now:

http://github.com/wincent/rails/commit/cf7eb5868a8023e5b4b88086ce01b63a6da64cab

This implements &quot;:escape =&gt; false&quot; as well as &quot;:escape =&gt; :sanitize&quot;.

If you want the same handling applied to the other helpers which currently use &quot;:safe&quot;, let me know.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Created a &quot;ticket4825&quot; branch to demonstrate the API change I'm
proposing to resolve the ambiguity with the option name:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/wincent/rails/tree/ticket4825&quot;&gt;http://github.com/wincent/rails/tree/ticket4825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Only one commit on the branch right now:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/wincent/rails/commit/cf7eb5868a8023e5b4b88086ce01b63a6da64cab&quot;&gt;
http://github.com/wincent/rails/commit/cf7eb5868a8023e5b4b88086ce01...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This implements &quot;:escape =&amp;gt; false&quot; as well as &quot;:escape =&amp;gt;
:sanitize&quot;.&lt;/p&gt;
&lt;p&gt;If you want the same handling applied to the other helpers which
currently use &quot;:safe&quot;, let me know.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T08:25:10+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-15T08:25:17+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">8</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Wincent agree with :escape options but :escape =&gt; true or :escape =&gt; false and this always do html_escape over the param, so send a patch for this</body>
      <body-html>&lt;div&gt;&lt;p&gt;Wincent agree with :escape options but :escape =&amp;gt; true or
:escape =&amp;gt; false and this always do html_escape over the param,
so send a patch for this&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T23:27:39+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-15T23:27:44+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I mean :escape =&gt; true do html_escape, and :escape =&gt; false do nothing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I mean :escape =&amp;gt; true do html_escape, and :escape =&amp;gt;
false do nothing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T23:28:26+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-15T23:28:32+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">10</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I agree with renaming :safe to :escape (please do so in other methods for consistency) but I'm not ok with :escape =&gt; :sanitize. It is confusing and it is easier to call sanitize() yourself.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with renaming :safe to :escape (please do so in other
methods for consistency) but I'm not ok with :escape =&amp;gt;
:sanitize. It is confusing and it is easier to call sanitize()
yourself.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-15T23:28:32+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-15T23:28:36+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">11</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>To be honest, I don't see why truncate(&quot;some text&quot;, :safe) is so confusing.

You are explicitly telling the method that the input you are passing is *safe*. And not telling the method what to do with the input. Internally what the method does with safe input should be left to the method. So :escape =&gt; :sanitize is definitely not nice.

Now, by default all text helpers in Rails 3 escape their inputs. This is done so that the output can be flagged with confidence as html_safe. If you want to skip escaping, then you need to tell the method that the input is indeed safe. You can do that by either passing the :safe option or by calling html_safe on the input text, like &quot;truncate me&quot;.html_safe</body>
      <body-html>&lt;div&gt;&lt;p&gt;To be honest, I don't see why truncate(&quot;some text&quot;, :safe) is so
confusing.&lt;/p&gt;
&lt;p&gt;You are explicitly telling the method that the input you are
passing is &lt;em&gt;safe&lt;/em&gt;. And not telling the method what to do
with the input. Internally what the method does with safe input
should be left to the method. So :escape =&amp;gt; :sanitize is
definitely not nice.&lt;/p&gt;
&lt;p&gt;Now, by default all text helpers in Rails 3 escape their inputs.
This is done so that the output can be flagged with confidence as
html_safe. If you want to skip escaping, then you need to tell the
method that the input is indeed safe. You can do that by either
passing the :safe option or by calling html_safe on the input text,
like &quot;truncate me&quot;.html_safe&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-16T02:05:10+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T02:05:15+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">12</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>'safe' is an implementation detail. 'escape' is what user interface. 

I would admit that I find &lt;tt&gt;truncate(&quot;some text&quot;, :safe)&lt;/tt&gt; a bit confusing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;'safe' is an implementation detail. 'escape' is what user
interface.&lt;/p&gt;
&lt;p&gt;I would admit that I find &lt;tt&gt;truncate(&quot;some text&quot;, :safe)&lt;/tt&gt;
a bit confusing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-16T05:06:02+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T05:06:11+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">13</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>`&quot;some text&quot;.html_safe` is the *best* implementation. I don't see why it can't be like this. If the string input is html safe, then why would the truncated string change?</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;code&gt;&quot;some text&quot;.html_safe&lt;/code&gt; is the &lt;em&gt;best&lt;/em&gt;
implementation. I don't see why it can't be like this. If the
string input is html safe, then why would the truncated string
change?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-16T06:10:01+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T06:10:13+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">14</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T06:10:19+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:state: resolved
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T06:10:25+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">15</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@
:escape =&gt; :sanitize
@@@

is evidently not very popular, so forget about it. (I only added it because a commenter above requested it.)

If the default is for all Rails helpers to produce safe output, then the presence of this option (either as ':safe =&gt; true' or ':escape =&gt; false' or whatever) is a bit of an anomaly. Why would only these helpers and not all the others implement the same option?

I think it really should be as Ryan says: there should be no ':safe' or ':escape' option at all, and if you want to turn off escaping you should use it as:

@@@
truncate foo.html_safe
@@@

I am out for a few hours now but will make a proposed patch when I get back later today.</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
&lt;code&gt;:escape =&amp;gt; :sanitize&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is evidently not very popular, so forget about it. (I only added
it because a commenter above requested it.)&lt;/p&gt;
&lt;p&gt;If the default is for all Rails helpers to produce safe output,
then the presence of this option (either as ':safe =&amp;gt; true' or
':escape =&amp;gt; false' or whatever) is a bit of an anomaly. Why
would only these helpers and not all the others implement the same
option?&lt;/p&gt;
&lt;p&gt;I think it really should be as Ryan says: there should be no
':safe' or ':escape' option at all, and if you want to turn off
escaping you should use it as:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;truncate foo.html_safe&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I am out for a few hours now but will make a proposed patch when
I get back later today.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T06:51:57+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T06:52:03+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">16</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, new version just pushed to my &quot;ticket4825-2&quot; branch:

http://github.com/wincent/rails/tree/ticket4825-2

The specific commit is:

http://github.com/wincent/rails/commit/9027ceefb4fdff0629bf0ed4b9e24929dd53d0a0

This drops the &quot;:safe&quot; option in favor of marking the input with html_safe.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, new version just pushed to my &quot;ticket4825-2&quot; branch:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/wincent/rails/tree/ticket4825-2&quot;&gt;http://github.com/wincent/rails/tree/ticket4825-2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The specific commit is:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/wincent/rails/commit/9027ceefb4fdff0629bf0ed4b9e24929dd53d0a0&quot;&gt;
http://github.com/wincent/rails/commit/9027ceefb4fdff0629bf0ed4b9e2...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This drops the &quot;:safe&quot; option in favor of marking the input with
html_safe.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T15:35:38+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T15:35:44+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">17</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We can just rely on input being html_safe</body>
      <body-html>&lt;div&gt;&lt;p&gt;We can just rely on input being html_safe&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:12:23+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:assigned_user: 40272
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>patch</tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:15:26+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">18</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>the question of whether the *input* to these helpers is html_safe is *not* enough to determine whether the output will be.

I'd like to suggest we split this discussion in two.  What to do with truncate, and what to do with all the others.

truncate should simply return unsafe strings to avoid breaking things as wincent mentions at the top of this ticket.,  if you want them marked safe you use raw.   The reason not to rely on the safety of the input is this case:

@@@
  &lt;%= truncate(h(&quot;wtf&amp;&quot;), 4) %&gt;
@@@

This will return a raw ampersand to the document body, that string is *not* safe.  In this situation returning a raw string (in all cases) should be enough to ensure that there are no attack vectors, and users wanting to put raw truncated strings in their document bodies can do so with an explicit call to raw().

As for textilize and the other html generating functions,  there are various attack vectors that are similarly surprising and could leave apps open if  we rely on html safety of the input.  Consider this case:

@@@
  &lt;%= textilize(h(&quot;p{-moz-binding:url('http://golem.ph.u&amp;#x74;exas.edu/&amp;#x7E;distler/blog/files/warning.xml#xss')}&quot;)) %&gt;
@@@

h marks the input string as 'safe', however that only means that the string itself is safe, not that you can apply transformations to that string and have the result be safe.  The *only* safe way to handle the HTML generating functions is to use sanitize (as we do at present) or to return raw strings (as we used to do, to much dismay).  The option should probably be called :santize and default to true, users who want to shoot themselves in the foot can pass false for those options.</body>
      <body-html>&lt;div&gt;&lt;p&gt;the question of whether the &lt;em&gt;input&lt;/em&gt; to these helpers is
html_safe is &lt;em&gt;not&lt;/em&gt; enough to determine whether the output
will be.&lt;/p&gt;
&lt;p&gt;I'd like to suggest we split this discussion in two. What to do
with truncate, and what to do with all the others.&lt;/p&gt;
&lt;p&gt;truncate should simply return unsafe strings to avoid breaking
things as wincent mentions at the top of this ticket., if you want
them marked safe you use raw. The reason not to rely on the safety
of the input is this case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  &amp;lt;%= truncate(h(&quot;wtf&amp;amp;&quot;), 4) %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will return a raw ampersand to the document body, that
string is &lt;em&gt;not&lt;/em&gt; safe. In this situation returning a raw
string (in all cases) should be enough to ensure that there are no
attack vectors, and users wanting to put raw truncated strings in
their document bodies can do so with an explicit call to raw().&lt;/p&gt;
&lt;p&gt;As for textilize and the other html generating functions, there
are various attack vectors that are similarly surprising and could
leave apps open if we rely on html safety of the input. Consider
this case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  &amp;lt;%= textilize(h(&quot;p{-moz-binding:url('http://golem.ph.u&amp;amp;#x74;exas.edu/&amp;amp;#x7E;distler/blog/files/warning.xml#xss')}&quot;)) %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;h marks the input string as 'safe', however that only means that
the string itself is safe, not that you can apply transformations
to that string and have the result be safe. The &lt;em&gt;only&lt;/em&gt; safe
way to handle the HTML generating functions is to use sanitize (as
we do at present) or to return raw strings (as we used to do, to
much dismay). The option should probably be called :santize and
default to true, users who want to shoot themselves in the foot can
pass false for those options.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:21:00+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: patch
:assigned_user: 19965
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:21:08+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">19</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Comparing the patch you just attached to the commit I posted earlier, it looks like your patch is missing some things, like removing references to &quot;:safe&quot; in the documentation, as well as reverting the changes to the &quot;auto_link_&quot; methods that you originally introduced when you added the &quot;:safe&quot; option in commit ab764ec.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Comparing the patch you just attached to the commit I posted
earlier, it looks like your patch is missing some things, like
removing references to &quot;:safe&quot; in the documentation, as well as
reverting the changes to the &quot;auto_link_&quot; methods that you
originally introduced when you added the &quot;:safe&quot; option in commit
ab764ec.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:24:11+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:assigned_user: 40272
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>patch</tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:24:20+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">20</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've added #4878 to handle the truncate case, please use that ticket for any further discussions of that particular helper.

As for the remaining helpers, any takers for a patch to switch the option name over to :sanitize, and default it to true?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've added &lt;a href=&quot;/projects/8994/tickets/4878&quot; title=
&quot;Ticket #4878&quot;&gt;#4878&lt;/a&gt; to handle the truncate case, please use
that ticket for any further discussions of that particular
helper.&lt;/p&gt;
&lt;p&gt;As for the remaining helpers, any takers for a patch to switch
the option name over to :sanitize, and default it to true?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:27:42+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: patch
:assigned_user: 19965
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:27:50+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">21</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Bah, sorry about messing with the &quot;tag&quot; and &quot;assigned user&quot; fields... all I did was type a reply, but it conflicted with the reply that Michael just sent...

As for your comments, Michael, interesting points. Too sleepy to reply right now though, so best not to say anything.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Bah, sorry about messing with the &quot;tag&quot; and &quot;assigned user&quot;
fields... all I did was type a reply, but it conflicted with the
reply that Michael just sent...&lt;/p&gt;
&lt;p&gt;As for your comments, Michael, interesting points. Too sleepy to
reply right now though, so best not to say anything.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:29:09+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 141
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:29:17+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">22</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Doh, there we go again... another mid-air collision...</body>
      <body-html>&lt;div&gt;&lt;p&gt;Doh, there we go again... another mid-air collision...&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:29:41+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 40272
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:29:50+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">23</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Lighthouse needs to learn about optimistic locking ;)

I'll be on irc all day my time if you want to chat further, but really I think these are the only reasonable and safe options to proceed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Lighthouse needs to learn about optimistic locking ;)&lt;/p&gt;
&lt;p&gt;I'll be on irc all day my time if you want to chat further, but
really I think these are the only reasonable and safe options to
proceed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:37:59+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:38:07+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">24</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Ok, one more post before bed.

Seeing as I'm the one who originally posted this, I'd obviously be happy if the change to truncate() that you're advocating goes through.

About the other methods, I've never actually used them so my interest in them is purely academic. But the comments here have made me wonder if the blanket statement that &quot;_all_ Rails helpers return safe strings&quot; is probably a little too, er, emphatic.

I mean, while it makes _perfect_ sense for a method like &quot;link_to()&quot; (and many others) to return an HTML-safe string, methods like &quot;truncate()&quot; should probably be used just like they always were:

ie. if you didn't trust the input, you did h(truncate(input))...

And sometimes even if you did &quot;trust&quot; it, you never knew if it could cut a &quot;safe&quot; tag in half and produce invalid HTML, so if you wanted to cover your butt you had to act accordingly. Feed HTML fragments into it at your own risk.

Cause &quot;truncate&quot; someone seems lower level than that of a typical helper... it shouldn't even know about HTML. It should just do one thing: chop strings.

I guess what I'm saying is that while it is a noble goal to be &quot;safe by default&quot;, there really are some methods where the user needs to be aware that they are transforming the input, and unless you know and control the input _exactly_, that transformation might produce unexpected results (not only maliciously unsafe HTML, but unmaliciously invalid HTML). So this and other methods like it, I wonder if they fall into the &quot;shoot yourself in the foot&quot; category. For these the sanitize-by-default idea is probably sensible, as long as there is a way of opting out of it like you say.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, one more post before bed.&lt;/p&gt;
&lt;p&gt;Seeing as I'm the one who originally posted this, I'd obviously
be happy if the change to truncate() that you're advocating goes
through.&lt;/p&gt;
&lt;p&gt;About the other methods, I've never actually used them so my
interest in them is purely academic. But the comments here have
made me wonder if the blanket statement that &quot;&lt;em&gt;all&lt;/em&gt; Rails
helpers return safe strings&quot; is probably a little too, er,
emphatic.&lt;/p&gt;
&lt;p&gt;I mean, while it makes &lt;em&gt;perfect&lt;/em&gt; sense for a method like
&quot;link_to()&quot; (and many others) to return an HTML-safe string,
methods like &quot;truncate()&quot; should probably be used just like they
always were:&lt;/p&gt;
&lt;p&gt;ie. if you didn't trust the input, you did
h(truncate(input))...&lt;/p&gt;
&lt;p&gt;And sometimes even if you did &quot;trust&quot; it, you never knew if it
could cut a &quot;safe&quot; tag in half and produce invalid HTML, so if you
wanted to cover your butt you had to act accordingly. Feed HTML
fragments into it at your own risk.&lt;/p&gt;
&lt;p&gt;Cause &quot;truncate&quot; someone seems lower level than that of a
typical helper... it shouldn't even know about HTML. It should just
do one thing: chop strings.&lt;/p&gt;
&lt;p&gt;I guess what I'm saying is that while it is a noble goal to be
&quot;safe by default&quot;, there really are some methods where the user
needs to be aware that they are transforming the input, and unless
you know and control the input &lt;em&gt;exactly&lt;/em&gt;, that
transformation might produce unexpected results (not only
maliciously unsafe HTML, but unmaliciously invalid HTML). So this
and other methods like it, I wonder if they fall into the &quot;shoot
yourself in the foot&quot; category. For these the sanitize-by-default
idea is probably sensible, as long as there is a way of opting out
of it like you say.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T22:45:36+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T22:45:45+01:00</updated-at>
      <user-id type="integer">12845</user-id>
      <version type="integer">25</version>
      <user-name>Wincent Colaiuta</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>yes, I agree with that statement.  The goal shouldn't be 'all helpers are safe' but rather 'all helpers that can be are safe'.

The truncate case being a great case in point, there's just not really any way to guarantee that for all possible offsets, the truncated string will be safe.  In those cases we just have to be sure that the result won't destroy your app, and the safest way to do that is to leave it as unsafe so it gets escaped.  Ideally those cases can be limited to a few helpers, the previous situation where you called textilize and got escaped html was shitty.</body>
      <body-html>&lt;div&gt;&lt;p&gt;yes, I agree with that statement. The goal shouldn't be 'all
helpers are safe' but rather 'all helpers that can be are
safe'.&lt;/p&gt;
&lt;p&gt;The truncate case being a great case in point, there's just not
really any way to guarantee that for all possible offsets, the
truncated string will be safe. In those cases we just have to be
sure that the result won't destroy your app, and the safest way to
do that is to leave it as unsafe so it gets escaped. Ideally those
cases can be limited to a few helpers, the previous situation where
you called textilize and got escaped html was shitty.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-16T23:08:22+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-16T23:09:53+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">26</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Solved in #4878</body>
      <body-html>&lt;div&gt;&lt;p&gt;Solved in &lt;a href=&quot;/projects/8994/tickets/4878&quot; title=
&quot;Ticket #4878&quot;&gt;#4878&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-17T15:42:21+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-17T15:42:29+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">27</version>
      <user-name>DHH</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've made text_helpers methods which return html to return it as safe and sanitize the input always unless :sanitize =&gt; false is set as Koz requested :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've made text_helpers methods which return html to return it as
safe and sanitize the input always unless :sanitize =&amp;gt; false is
set as Koz requested :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-17T17:00:37+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:state: resolved
:tag: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>patch</tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-17T17:00:46+01:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">28</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [84d387bc0f3f3f6641b08d0ce40e924f09105c19]) Make text_helpers methods which return valid html to return it as safe and sanitize the input always unless :sanitize =&gt; false is set

[#4825 state:committed]

Signed-off-by: David Heinemeier Hansson &lt;david@loudthinking.com&gt;
http://github.com/rails/rails/commit/84d387bc0f3f3f6641b08d0ce40e924f09105c19</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/84d387bc0f3f3f6641b08d0ce40e924f09105c19&quot;
title=
&quot;Changeset [84d387bc0f3f3f6641b08d0ce40e924f09105c19]&quot;&gt;[84d387bc0f3f3f6641b08d0ce40e924f09105c19]&lt;/a&gt;)
Make text_helpers methods which return valid html to return it as
safe and sanitize the input always unless :sanitize =&amp;gt; false is
set&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/4825&quot; title=
&quot;Ticket #4825&quot;&gt;#4825&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: David Heinemeier Hansson &lt;a href=
&quot;mailto:david@loudthinking.com&quot;&gt;david@loudthinking.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/84d387bc0f3f3f6641b08d0ce40e924f09105c19&quot;&gt;
http://github.com/rails/rails/commit/84d387bc0f3f3f6641b08d0ce40e92...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-17T19:34:17+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>patch</tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-06-17T19:34:28+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">29</version>
      <user-name>Repository</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:56+01:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:milestone: 74033
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>patch</tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-10-15T23:01:56+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">30</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs the only boot sale&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs for cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap kids uggs&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap classic tall ugg boots 5815 mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uk cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;super cheap ugg classic mini boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots with zips&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg sunburst boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;really cheap ugg classic mini&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for $64&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots for cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg slippers cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap authentic uggs&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for sale in uk&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots mulberry&lt;/a&gt; So You Can Buy It Now!

&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg brand boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots uk&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg australia boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discount ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale authorized&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;us ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;mens ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;australian ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;fur inside ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;kids ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg bailey boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;shopping for ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg mini boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;womens ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;lowest price ugg boots&lt;/a&gt;,&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt; baby ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg style boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;knock off ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots discount&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discounted ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg roseberry boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;purple ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sydney&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots store&lt;/a&gt; SO Cheap With Free Shipping!

&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store Outlet&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UK UGG Store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg factory store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet stores&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet store locations in pa hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg boots store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia sandals kids&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;boot shoes store ugg hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store locater&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia kids&lt;/a&gt; Thats ugg store uk online shop!

&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;tall boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;cardy ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;uggs sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy chocolate&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots cream&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg mosaic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg tall boot sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;cheap classic tall ugg boots 5815 mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;sundance tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots classic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg adirondack tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall wool&lt;/a&gt;. Have You Best Choice, Buy It Now!


&lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Classic Short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Short Boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;Short uggs&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Shop online&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;authentic ugg australia women's classic short #5825 - black sheepskin&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg fern suede classic short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg in grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg short boots fushia&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots 8 short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short black&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;eggplant short ugg&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;short classic ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;short ugg boots chestnut womens&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots black short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short black paisley&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short sku&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg women's classic short&lt;/a&gt;, Buy It Now! 

&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Triplet&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots 5803, UGG Boots 1873&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots USA&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;bailey button ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots at macys&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty- kids grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button crinkle leather&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triplet boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button blackberry wine&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;discount ugg bailey button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button 5803 grey size 10&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boot grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button cheap&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triple&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty&lt;/a&gt;, Buy It Now!</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs the only boot sale&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs for cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap kids uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap classic tall ugg boots 5815
mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs cheap&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uk cheap ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;super cheap ugg classic mini
boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots
with zips&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg
sunburst boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;really
cheap ugg classic mini&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for $64&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots for cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg slippers cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap authentic uggs&lt;/a&gt;,&lt;br&gt;
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for sale in
uk&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots
mulberry&lt;/a&gt; So You Can Buy It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg brand boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots uk&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sale&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg australia boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;discount ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale
authorized&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;us ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;mens ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;australian ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;fur inside ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;kids ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg bailey
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;adirondack tall
ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;shopping for
ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg mini
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;womens ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;lowest price ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;baby ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg style
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;knock off ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
discount&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots
sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discounted ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg roseberry
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;purple ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
sydney&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
cheap&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
store&lt;/a&gt; SO Cheap With Free Shipping!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store Outlet&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;UK UGG Store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;ugg factory store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet stores&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet store locations
in pa hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg
store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg boots
store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg
australia sandals kids&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;boot shoes store ugg hit bg&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store locater&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia
kids&lt;/a&gt; Thats ugg store uk online shop!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;tall boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;cardy ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;uggs sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots on sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy chocolate&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg boots cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots cream&lt;/a&gt;,
&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boot&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg mosaic tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg tall boot sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;cheap classic tall ugg boots 5815
mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic tall ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall
boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;sundance tall ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots classic
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg adirondack
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall
wool&lt;/a&gt;. Have You Best Choice, Buy It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Classic Short&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;UGG Short Boots&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;Short uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;UGG Shop online&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;authentic ugg australia women's classic
short&lt;/a&gt; &lt;a href=&quot;/projects/8994/tickets/5825&quot; title=
&quot;Ticket #5825&quot;&gt;#5825&lt;/a&gt; - black sheepskin,&lt;br&gt;
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg fern suede classic short&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg in grey&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg short boots fushia&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots 8 short&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;ugg ultra short black&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;eggplant short ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;short classic ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;short ugg boots chestnut womens&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots black short&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short black
paisley&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short
boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short sku&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg women's classic short&lt;/a&gt;, Buy
It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Triplet&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Bomber&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots 5803, UGG Boots
1873&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots USA&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;bailey button ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots
bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boots at macys&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots
- bailey button novelty- kids grey&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button crinkle
leather&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey
button triplet boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg
bailey button blackberry wine&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;discount ugg bailey button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button
boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
5803 grey size 10&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg
bailey button boot grey&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triple&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty&lt;/a&gt;,
Buy It Now!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-25T12:09:43+00:00</created-at>
      <creator-id type="integer">12845</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">4825</number>
      <permalink>some-text-helper-methods-inappropriately-calling-sanitize</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>patch</tag>
      <title>Some text helper methods inappropriately calling &quot;sanitize&quot;</title>
      <updated-at type="datetime">2010-11-25T12:13:41+00:00</updated-at>
      <user-id type="integer">126682</user-id>
      <version type="integer">31</version>
      <user-name>sunnyabc</user-name>
      <creator-name>Wincent Colaiuta</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4825</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2b0832299befe8bc6d686536ebaf6add38be4c85</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-16T22:12:23+01:00</created-at>
      <filename>no-more-safe-true-on-options-now-we-rely-on-input-s.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">562446</id>
      <size type="integer">5504</size>
      <uploader-id type="integer">40272</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/562446/no-more-safe-true-on-options-now-we-rely-on-input-s.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>ceb54eedb19281874423c35ac24fe6bf2966f1b3</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-17T17:00:37+01:00</created-at>
      <filename>make-text_helpers-methods-which-return-valid-html-to.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">563721</id>
      <size type="integer">11795</size>
      <uploader-id type="integer">40272</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/563721/make-text_helpers-methods-which-return-valid-html-to.patch</url>
    </attachment>
  </attachments>
</ticket>
