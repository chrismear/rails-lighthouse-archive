<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-07T06:59:09+00:00</created-at>
  <creator-id type="integer">8163</creator-id>
  <milestone-due-on type="datetime">2009-01-31T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">1904</number>
  <permalink>rack-middleware-parse-request-parameters-twice</permalink>
  <priority type="integer">46</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>rack</tag>
  <title>rack middleware parse request parameters twice</title>
  <updated-at type="datetime">2009-02-10T20:30:35+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">5</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Eugene Pimenov</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1904</url>
  <priority-name nil="true"></priority-name>
  <original-body>Rack::MethodOverride parses request parameters, then forgets about it. Rails routes parse it again a bit later.

If I make an upload request, I'll end up with pairs of identical RackMultipart files.</original-body>
  <latest-body>Rack::MethodOverride parses request parameters, then forgets about it. Rails routes parse it again a bit later.

If I make an upload request, I'll end up with pairs of identical RackMultipart files.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Rack::MethodOverride parses request parameters, then forgets
about it. Rails routes parse it again a bit later.&lt;/p&gt;
&lt;p&gt;If I make an upload request, I'll end up with pairs of identical
RackMultipart files.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Rack::MethodOverride parses request parameters, then forgets about it. Rails routes parse it again a bit later.

If I make an upload request, I'll end up with pairs of identical RackMultipart files.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rack::MethodOverride parses request parameters, then forgets
about it. Rails routes parse it again a bit later.&lt;/p&gt;
&lt;p&gt;If I make an upload request, I'll end up with pairs of identical
RackMultipart files.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T06:59:09+00:00</created-at>
      <creator-id type="integer">8163</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1904</number>
      <permalink>rack-middleware-parse-request-parameters-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>rack</tag>
      <title>rack middleware parse request parameters twice</title>
      <updated-at type="datetime">2009-02-07T06:59:10+00:00</updated-at>
      <user-id type="integer">8163</user-id>
      <version type="integer">1</version>
      <user-name>Eugene Pimenov</user-name>
      <creator-name>Eugene Pimenov</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1904</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you please test on edge as well. Also, failing unit tests to prove the issue would be appreciated.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you please test on edge as well. Also, failing unit tests to
prove the issue would be appreciated.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-07T22:14:50+00:00</created-at>
      <creator-id type="integer">8163</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1904</number>
      <permalink>rack-middleware-parse-request-parameters-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>rack</tag>
      <title>rack middleware parse request parameters twice</title>
      <updated-at type="datetime">2009-02-07T22:14:56+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Eugene Pimenov</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1904</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Appears to be fixed by a recent upgrade of rack.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Appears to be fixed by a recent upgrade of rack.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-10T19:48:04+00:00</created-at>
      <creator-id type="integer">8163</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1904</number>
      <permalink>rack-middleware-parse-request-parameters-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>rack</tag>
      <title>rack middleware parse request parameters twice</title>
      <updated-at type="datetime">2009-02-10T19:48:07+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Eugene Pimenov</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1904</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>No, it's not.

Test something like:
@@@
    Rack::Request.any_instance.expects(:POST).once.returns({})
    @dispatcher.call({&quot;REQUEST_METHOD&quot; =&gt; &quot;POST&quot;, &quot;rack.input&quot; =&gt; StringIO.new(&quot;&quot;), &quot;REQUEST_URI&quot; =&gt; &quot;/&quot;})
@@@

where dispatcher is ActionController::Dispatcher. I'll provide normal test case later.

The problem because of Rack::MethodOverride has that code
@@@
        req = Request.new(env)
        method = req.POST[METHOD_OVERRIDE_PARAM_KEY] ||
          env[HTTP_METHOD_OVERRIDE_HEADER]
@@@

It uses Rack::Request, instead of ActionController::Request. ActionController::Request saves itself into rack env, so doesn't parse arguments twice. Rack::Request parses arguments every time POST is invoked. 

To fix that problem locally, I monkey-patched Rack::MethodOverride to use ActionController::Request.</body>
      <body-html>&lt;div&gt;&lt;p&gt;No, it's not.&lt;/p&gt;
&lt;p&gt;Test something like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
    Rack::Request.any_instance.expects(:POST).once.returns({})
    @dispatcher.call({&amp;quot;REQUEST_METHOD&amp;quot; =&amp;gt; &amp;quot;POST&amp;quot;, &amp;quot;rack.input&amp;quot; =&amp;gt; StringIO.new(&amp;quot;&amp;quot;), &amp;quot;REQUEST_URI&amp;quot; =&amp;gt; &amp;quot;/&amp;quot;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where dispatcher is ActionController::Dispatcher. I'll provide
normal test case later.&lt;/p&gt;
&lt;p&gt;The problem because of Rack::MethodOverride has that code&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
        req = Request.new(env)
        method = req.POST[METHOD_OVERRIDE_PARAM_KEY] ||
          env[HTTP_METHOD_OVERRIDE_HEADER]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It uses Rack::Request, instead of ActionController::Request.
ActionController::Request saves itself into rack env, so doesn't
parse arguments twice. Rack::Request parses arguments every time
POST is invoked.&lt;/p&gt;
&lt;p&gt;To fix that problem locally, I monkey-patched
Rack::MethodOverride to use ActionController::Request.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-10T20:05:43+00:00</created-at>
      <creator-id type="integer">8163</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1904</number>
      <permalink>rack-middleware-parse-request-parameters-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>rack</tag>
      <title>rack middleware parse request parameters twice</title>
      <updated-at type="datetime">2009-02-10T20:05:48+00:00</updated-at>
      <user-id type="integer">8163</user-id>
      <version type="integer">4</version>
      <user-name>Eugene Pimenov</user-name>
      <creator-name>Eugene Pimenov</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1904</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@ ruby
    def POST
      if @env[&quot;rack.request.form_input&quot;].eql? @env[&quot;rack.input&quot;]
        @env[&quot;rack.request.form_hash&quot;]
      elsif form_data?
        @env[&quot;rack.request.form_input&quot;] = @env[&quot;rack.input&quot;]
        unless @env[&quot;rack.request.form_hash&quot;] =
            Utils::Multipart.parse_multipart(env)
          form_vars = @env[&quot;rack.input&quot;].read

          # Fix for Safari Ajax postings that always append \0
          form_vars.sub!(/\0\z/, '')

          @env[&quot;rack.request.form_vars&quot;] = form_vars
          @env[&quot;rack.request.form_hash&quot;] = Utils.parse_query(form_vars)

          begin
            @env[&quot;rack.input&quot;].rewind if @env[&quot;rack.input&quot;].respond_to?(:rewind)
          rescue Errno::ESPIPE
            # Handles exceptions raised by input streams that cannot be rewound
            # such as when using plain CGI under Apache
          end
        end
        @env[&quot;rack.request.form_hash&quot;]
      else
        {}
      end
    end
@@@

Rack caches the result from Request#POST to @env[&quot;rack.request.form_hash&quot;].</body>
      <body-html>&lt;div&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
    def POST
      if @env[&amp;quot;rack.request.form_input&amp;quot;].eql? @env[&amp;quot;rack.input&amp;quot;]
        @env[&amp;quot;rack.request.form_hash&amp;quot;]
      elsif form_data?
        @env[&amp;quot;rack.request.form_input&amp;quot;] = @env[&amp;quot;rack.input&amp;quot;]
        unless @env[&amp;quot;rack.request.form_hash&amp;quot;] =
            Utils::Multipart.parse_multipart(env)
          form_vars = @env[&amp;quot;rack.input&amp;quot;].read

          # Fix for Safari Ajax postings that always append \0
          form_vars.sub!(/\0\z/, '')

          @env[&amp;quot;rack.request.form_vars&amp;quot;] = form_vars
          @env[&amp;quot;rack.request.form_hash&amp;quot;] = Utils.parse_query(form_vars)

          begin
            @env[&amp;quot;rack.input&amp;quot;].rewind if @env[&amp;quot;rack.input&amp;quot;].respond_to?(:rewind)
          rescue Errno::ESPIPE
            # Handles exceptions raised by input streams that cannot be rewound
            # such as when using plain CGI under Apache
          end
        end
        @env[&amp;quot;rack.request.form_hash&amp;quot;]
      else
        {}
      end
    end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rack caches the result from Request#POST to
@env[&quot;rack.request.form_hash&quot;].&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-10T20:30:35+00:00</created-at>
      <creator-id type="integer">8163</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1904</number>
      <permalink>rack-middleware-parse-request-parameters-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>rack</tag>
      <title>rack middleware parse request parameters twice</title>
      <updated-at type="datetime">2009-02-10T20:30:35+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">5</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Eugene Pimenov</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1904</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
</ticket>
