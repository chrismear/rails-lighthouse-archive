<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-09T12:47:17+00:00</created-at>
  <creator-id type="integer">66277</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3554</number>
  <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
  <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
  <updated-at type="datetime">2011-02-02T19:03:38+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Nick</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm using columns with an sql_type (MySQL) of DECIMAL(40,0) to store very large numbers (128-bit - IPv6 addresses, if you're curious). 

The column definition in the migration I wrote is:
t.decimal    :ip_number,  :null =&gt; false, :default =&gt; 0, :precision =&gt; 40, :scale =&gt; 0

When I run rake db:schema:dump I get this:
t.column &quot;ip_number&quot;, :integer, :limit =&gt; 40, :precision =&gt; 40, :scale =&gt; 0, :default =&gt; 0, :null =&gt; false

(In both 2.1.2 and git master)

I looked through the code and the issue is the simplified_type method of ActiveRecord::ConnectionAdapters::Column class:
http://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb

[...]
def simplified_type(field_type)
  case field_type
[...]
    when /decimal|numeric|number/i
      extract_scale(field_type) == 0 ? :integer : :decimal
[...]
  end
end

If the decimal(n,0) column is storing numbers larger than the maximum allowable value for the integer type, this code is broken.

I hesitate to suggest a particular patch as I don't know a great deal about SQL data types - but I'd suggest always preserving the 'decimal' type regardless of the scale.</original-body>
  <latest-body>I'm using columns with an sql_type (MySQL) of DECIMAL(40,0) to store very large numbers (128-bit - IPv6 addresses, if you're curious). 

The column definition in the migration I wrote is:
t.decimal    :ip_number,  :null =&gt; false, :default =&gt; 0, :precision =&gt; 40, :scale =&gt; 0

When I run rake db:schema:dump I get this:
t.column &quot;ip_number&quot;, :integer, :limit =&gt; 40, :precision =&gt; 40, :scale =&gt; 0, :default =&gt; 0, :null =&gt; false

(In both 2.1.2 and git master)

I looked through the code and the issue is the simplified_type method of ActiveRecord::ConnectionAdapters::Column class:
http://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb

[...]
def simplified_type(field_type)
  case field_type
[...]
    when /decimal|numeric|number/i
      extract_scale(field_type) == 0 ? :integer : :decimal
[...]
  end
end

If the decimal(n,0) column is storing numbers larger than the maximum allowable value for the integer type, this code is broken.

I hesitate to suggest a particular patch as I don't know a great deal about SQL data types - but I'd suggest always preserving the 'decimal' type regardless of the scale.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm using columns with an sql_type (MySQL) of DECIMAL(40,0) to
store very large numbers (128-bit - IPv6 addresses, if you're
curious).&lt;/p&gt;
&lt;p&gt;The column definition in the migration I wrote is:&lt;br&gt;
t.decimal :ip_number, :null =&amp;gt; false, :default =&amp;gt; 0,
:precision =&amp;gt; 40, :scale =&amp;gt; 0&lt;/p&gt;
&lt;p&gt;When I run rake db:schema:dump I get this:&lt;br&gt;
t.column &quot;ip_number&quot;, :integer, :limit =&amp;gt; 40, :precision =&amp;gt;
40, :scale =&amp;gt; 0, :default =&amp;gt; 0, :null =&amp;gt; false&lt;/p&gt;
&lt;p&gt;(In both 2.1.2 and git master)&lt;/p&gt;
&lt;p&gt;I looked through the code and the issue is the simplified_type
method of ActiveRecord::ConnectionAdapters::Column class:&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb&quot;&gt;
http://github.com/rails/rails/blob/master/activerecord/lib/active_r...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[...] def simplified_type(field_type)&lt;br&gt;
case field_type [...]&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;when /decimal|numeric|number/i
  extract_scale(field_type) == 0 ? :integer : :decimal&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[...] end end&lt;/p&gt;
&lt;p&gt;If the decimal(n,0) column is storing numbers larger than the
maximum allowable value for the integer type, this code is
broken.&lt;/p&gt;
&lt;p&gt;I hesitate to suggest a particular patch as I don't know a great
deal about SQL data types - but I'd suggest always preserving the
'decimal' type regardless of the scale.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm using columns with an sql_type (MySQL) of DECIMAL(40,0) to store very large numbers (128-bit - IPv6 addresses, if you're curious). 

The column definition in the migration I wrote is:
t.decimal    :ip_number,  :null =&gt; false, :default =&gt; 0, :precision =&gt; 40, :scale =&gt; 0

When I run rake db:schema:dump I get this:
t.column &quot;ip_number&quot;, :integer, :limit =&gt; 40, :precision =&gt; 40, :scale =&gt; 0, :default =&gt; 0, :null =&gt; false

(In both 2.1.2 and git master)

I looked through the code and the issue is the simplified_type method of ActiveRecord::ConnectionAdapters::Column class:
http://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb

[...]
def simplified_type(field_type)
  case field_type
[...]
    when /decimal|numeric|number/i
      extract_scale(field_type) == 0 ? :integer : :decimal
[...]
  end
end

If the decimal(n,0) column is storing numbers larger than the maximum allowable value for the integer type, this code is broken.

I hesitate to suggest a particular patch as I don't know a great deal about SQL data types - but I'd suggest always preserving the 'decimal' type regardless of the scale.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm using columns with an sql_type (MySQL) of DECIMAL(40,0) to
store very large numbers (128-bit - IPv6 addresses, if you're
curious).&lt;/p&gt;
&lt;p&gt;The column definition in the migration I wrote is:&lt;br&gt;
t.decimal :ip_number, :null =&amp;gt; false, :default =&amp;gt; 0,
:precision =&amp;gt; 40, :scale =&amp;gt; 0&lt;/p&gt;
&lt;p&gt;When I run rake db:schema:dump I get this:&lt;br&gt;
t.column &quot;ip_number&quot;, :integer, :limit =&amp;gt; 40, :precision =&amp;gt;
40, :scale =&amp;gt; 0, :default =&amp;gt; 0, :null =&amp;gt; false&lt;/p&gt;
&lt;p&gt;(In both 2.1.2 and git master)&lt;/p&gt;
&lt;p&gt;I looked through the code and the issue is the simplified_type
method of ActiveRecord::ConnectionAdapters::Column class:&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/schema_definitions.rb&quot;&gt;
http://github.com/rails/rails/blob/master/activerecord/lib/active_r...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[...] def simplified_type(field_type)&lt;br&gt;
case field_type [...]&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;when /decimal|numeric|number/i
  extract_scale(field_type) == 0 ? :integer : :decimal&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;[...] end end&lt;/p&gt;
&lt;p&gt;If the decimal(n,0) column is storing numbers larger than the
maximum allowable value for the integer type, this code is
broken.&lt;/p&gt;
&lt;p&gt;I hesitate to suggest a particular patch as I don't know a great
deal about SQL data types - but I'd suggest always preserving the
'decimal' type regardless of the scale.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-09T12:47:17+00:00</created-at>
      <creator-id type="integer">66277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3554</number>
      <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
      <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
      <updated-at type="datetime">2009-12-09T12:47:18+00:00</updated-at>
      <user-id type="integer">66277</user-id>
      <version type="integer">1</version>
      <user-name>Nick</user-name>
      <creator-name>Nick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Having played with this some more, I've got a better idea of the conceptual nature of the problem.

A column's simplified_type seems to be there to specify the Ruby type that best represents the data in a particular sql_type - so specifying DECIMAL(n,0) as an integer actually makes a lot of sense in that context, and makes a lot of things easier when working with these numbers in ruby (since you're passing around Fixnum or Bignum objects, not BigDecimal ones).

The issue is that a column's type is conflated with it's simplified_type - it's assumed that the two are equivalent, when in fact they are not all the time (although they are almost all the time. Maybe this is the only case where the logic is wrong?)

I think SchemaDumper should probably use sql_type directly, rather than attempting to reconstruct it from the simplified_type and the variously parsed options. Alternatively, there should be a canonical_type (or just type) and a simplified_type (containing what type has currently). Then everything that cares about the best Ruby representation of the object can use simplified_type, and SchemaDumper and other things that interface with the database can use canonical_type/type.

Maybe.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Having played with this some more, I've got a better idea of the
conceptual nature of the problem.&lt;/p&gt;
&lt;p&gt;A column's simplified_type seems to be there to specify the Ruby
type that best represents the data in a particular sql_type - so
specifying DECIMAL(n,0) as an integer actually makes a lot of sense
in that context, and makes a lot of things easier when working with
these numbers in ruby (since you're passing around Fixnum or Bignum
objects, not BigDecimal ones).&lt;/p&gt;
&lt;p&gt;The issue is that a column's type is conflated with it's
simplified_type - it's assumed that the two are equivalent, when in
fact they are not all the time (although they are almost all the
time. Maybe this is the only case where the logic is wrong?)&lt;/p&gt;
&lt;p&gt;I think SchemaDumper should probably use sql_type directly,
rather than attempting to reconstruct it from the simplified_type
and the variously parsed options. Alternatively, there should be a
canonical_type (or just type) and a simplified_type (containing
what type has currently). Then everything that cares about the best
Ruby representation of the object can use simplified_type, and
SchemaDumper and other things that interface with the database can
use canonical_type/type.&lt;/p&gt;
&lt;p&gt;Maybe.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-09T16:48:37+00:00</created-at>
      <creator-id type="integer">66277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3554</number>
      <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
      <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
      <updated-at type="datetime">2009-12-09T16:48:40+00:00</updated-at>
      <user-id type="integer">66277</user-id>
      <version type="integer">2</version>
      <user-name>Nick</user-name>
      <creator-name>Nick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Current monkey-patch. This gets almost everything right (although I wouldn't want to see it inside activerecord!) with one exception: the schema_dumper sets the default to 0.0 (it should be 0).

@@@ruby module ActiveRecord
  module ConnectionAdapters
    class Column
      alias_method :base_simplified_type, :simplified_type
      def simplified_type(field_type)
        if field_type.match(/decimal|numeric|number/) &amp;&amp;
           extract_scale(field_type) == 0 &amp;&amp;
           caller.select {|c| c.match(/schema_dumper/) }.nitems &gt; 0
          :decimal 
        else
          base_simplified_type(field_type)
        end  
      end
    end
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Current monkey-patch. This gets almost everything right
(although I wouldn't want to see it inside activerecord!) with one
exception: the schema_dumper sets the default to 0.0 (it should be
0).&lt;/p&gt;
&lt;p&gt;@@@ruby module ActiveRecord module ConnectionAdapters&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Column
  alias_method :base_simplified_type, :simplified_type
  def simplified_type(field_type)
    if field_type.match(/decimal|numeric|number/) &amp;amp;&amp;amp;
       extract_scale(field_type) == 0 &amp;amp;&amp;amp;
       caller.select {|c| c.match(/schema_dumper/) }.nitems &amp;gt; 0
      :decimal 
    else
      base_simplified_type(field_type)
    end  
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;

&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-09T17:09:27+00:00</created-at>
      <creator-id type="integer">66277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3554</number>
      <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
      <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
      <updated-at type="datetime">2009-12-09T17:09:31+00:00</updated-at>
      <user-id type="integer">66277</user-id>
      <version type="integer">3</version>
      <user-name>Nick</user-name>
      <creator-name>Nick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Isn't this fixed with commit 532219fd091837a9312a301c74e0fbf06abab3a8 ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Isn't this fixed with commit
532219fd091837a9312a301c74e0fbf06abab3a8 ?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-07T14:18:02+01:00</created-at>
      <creator-id type="integer">66277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3554</number>
      <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
      <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
      <updated-at type="datetime">2010-05-07T14:18:07+01:00</updated-at>
      <user-id type="integer">16504</user-id>
      <version type="integer">4</version>
      <user-name>Marius Nuennerich</user-name>
      <creator-name>Nick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That does indeed fix the issue - excellent stuff! :)

/Nick</body>
      <body-html>&lt;div&gt;&lt;p&gt;That does indeed fix the issue - excellent stuff! :)&lt;/p&gt;
&lt;p&gt;/Nick&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-07T14:31:09+01:00</created-at>
      <creator-id type="integer">66277</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3554</number>
      <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
      <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
      <updated-at type="datetime">2010-05-07T14:31:11+01:00</updated-at>
      <user-id type="integer">66277</user-id>
      <version type="integer">5</version>
      <user-name>Nick</user-name>
      <creator-name>Nick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:02:29+00:00</created-at>
      <creator-id type="integer">66277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3554</number>
      <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
      <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
      <updated-at type="datetime">2011-02-02T19:03:38+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Nick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:02:30+00:00</created-at>
      <creator-id type="integer">66277</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3554</number>
      <permalink>decimal-columns-with-a-scale-of-0-are-broken-using-ruby-schemas</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord columns datatypes decimal schema schema_dumper sql</tag>
      <title>Decimal columns with a scale of 0 are broken using ruby schemas</title>
      <updated-at type="datetime">2011-02-02T19:03:33+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Nick</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3554</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
