From 12d4c8629837fdfc680206342f1b4281df221359 Mon Sep 17 00:00:00 2001
From: thedarkone <thedarkone2@gmail.com>
Date: Tue, 24 Mar 2009 01:18:58 +0100
Subject: [PATCH] Fix template extension parsing. [#2315 state:resolved] [#2284 state:resolved]

---
 actionpack/lib/action_view/template.rb    |   44 +++++++++-------------------
 actionpack/test/template/template_test.rb |   32 +++++++++++++++++++++
 2 files changed, 46 insertions(+), 30 deletions(-)
 create mode 100644 actionpack/test/template/template_test.rb

diff --git a/actionpack/lib/action_view/template.rb b/actionpack/lib/action_view/template.rb
index c339c8a..c82f20a 100644
--- a/actionpack/lib/action_view/template.rb
+++ b/actionpack/lib/action_view/template.rb
@@ -212,46 +212,30 @@ module ActionView #:nodoc:
       end
 
       def valid_locale?(locale)
-        I18n.available_locales.include?(locale.to_sym)
+        locale && I18n.available_locales.include?(locale.to_sym)
       end
 
       # Returns file split into an array
       #   [base_path, name, locale, format, extension]
       def split(file)
         if m = file.to_s.match(/^(.*\/)?([^\.]+)\.(.*)$/)
-          base_path = m[1]
-          name = m[2]
-          extensions = m[3]
-        else
-          return
+          [m[1], m[2], *parse_extensions(m[3])]
         end
+      end
 
-        locale = nil
-        format = nil
-        extension = nil
-
-        if m = extensions.split(".")
-          if valid_locale?(m[0]) && m[1] && valid_extension?(m[2]) # All three
-            locale = m[0]
-            format = m[1]
-            extension = m[2]
-          elsif m[0] && m[1] && valid_extension?(m[2]) # Multipart formats
-            format = "#{m[0]}.#{m[1]}"
-            extension = m[2]
-          elsif valid_locale?(m[0]) && valid_extension?(m[1]) # locale and extension
-            locale = m[0]
-            extension = m[1]
-          elsif valid_extension?(m[1]) # format and extension
-            format = m[0]
-            extension = m[1]
-          elsif valid_extension?(m[0]) # Just extension
-            extension = m[0]
-          else # No extension
-            format = m[0]
-          end
+      # returns parsed extensions as an array
+      #   [locale, format, extension]
+      def parse_extensions(extensions)
+        exts = extensions.split(".")
+
+        if extension = valid_extension?(exts.last) && exts.pop || nil
+          locale = valid_locale?(exts.first) && exts.shift || nil
+          format = exts.join('.') if exts.any? # join('.') is needed for multipart templates
+        else # no extension, just format
+          format = exts.last
         end
 
-        [base_path, name, locale, format, extension]
+        [locale, format, extension]
       end
   end
 end
diff --git a/actionpack/test/template/template_test.rb b/actionpack/test/template/template_test.rb
new file mode 100644
index 0000000..7caec7a
--- /dev/null
+++ b/actionpack/test/template/template_test.rb
@@ -0,0 +1,32 @@
+require 'abstract_unit'
+
+class TemplateTest < Test::Unit::TestCase
+  def test_template_path_parsing
+    with_options :base_path => nil, :name => 'abc', :locale => nil, :format => 'html', :extension => 'erb' do |t|
+      t.assert_parses_template_path 'abc.en.html.erb',        :locale => 'en'
+      t.assert_parses_template_path 'abc.en.plain.html.erb',  :locale => 'en', :format => 'plain.html'
+      t.assert_parses_template_path 'abc.html.erb'
+      t.assert_parses_template_path 'abc.plain.html.erb',     :format => 'plain.html'
+      t.assert_parses_template_path 'abc.erb',                :format => nil
+      t.assert_parses_template_path 'abc.html',               :extension => nil
+      
+      t.assert_parses_template_path '_abc.html.erb',          :name => '_abc'
+      
+      t.assert_parses_template_path 'test/abc.html.erb',      :base_path => 'test'
+      t.assert_parses_template_path './test/abc.html.erb',    :base_path => './test'
+      t.assert_parses_template_path '../test/abc.html.erb',   :base_path => '../test'
+      
+      t.assert_parses_template_path 'abc',                    :extension => nil, :format => nil, :name => nil
+      t.assert_parses_template_path 'abc.xxx',                :extension => nil, :format => 'xxx', :name => 'abc'
+      t.assert_parses_template_path 'abc.html.xxx',           :extension => nil, :format => 'xxx', :name => 'abc'
+    end
+  end
+
+  private
+  def assert_parses_template_path(path, parse_results)
+    template = ActionView::Template.new(path, '')
+    parse_results.each_pair do |k, v|
+      assert_block(%Q{Expected template to parse #{k.inspect} from "#{path}" as #{v.inspect}, but got #{template.send(k).inspect}}) { v == template.send(k) }
+    end
+  end
+end
-- 
1.6.0.1

