<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-05T20:51:35+00:00</created-at>
  <creator-id type="integer">26479</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6534</number>
  <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>active_support bugs core_ext patch time timewithzone</tag>
  <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
  <updated-at type="datetime">2011-03-21T02:49:18+00:00</updated-at>
  <user-id type="integer">141984</user-id>
  <version type="integer">7</version>
  <user-name>Ryan Orr</user-name>
  <creator-name>Marc-Andr&#233; Lafortune</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
  <priority-name nil="true"></priority-name>
  <original-body>If `foo.eql?(bar)` returns `true` then so should `bar.eql?(foo)`.
Moreover, `foo.hash` must then be the same as `bar.hash`.
Otherwise the `Hash` lookup will fail. `TimeWithZone` want to act like a `Time`, but currently:

@@@
bar = Time.utc(2000)
foo = bar.in_time_zone

foo.eql?(bar) # =&gt; true
bar.eql?(foo) # =&gt; false
foo.hash == bar.hash # =&gt; false (only in Ruby 1.9)
@@@
The attached patch fixes this. Since TimeWithZone wants to be freely replaceable with a Time:
@@@
bar.eql?(foo) # =&gt; now true
foo.hash == bar.hash # =&gt; now true (even in Ruby 1.9)
@@@

There is also a problem with DateTime vs TimeWithZone:
@@@
dt = foo.to_datetime
foo.eql?(dt)  # =&gt; true
dt.eql?(foo)  # =&gt; false
dt.hash == foo # =&gt; false.
@@@

Since `DateTime` and a `Time` are both builtin classes and that a `Time` is never `eql?` to a `DateTime` or vice-versa (as per the doc and the implementation), the patch also insures that a `TimeWithZone` can not be eql? to a `DateTime`:
@@@
foo.eql?(dt)  # =&gt; now false
@@@

Thanks</original-body>
  <latest-body>If `foo.eql?(bar)` returns `true` then so should `bar.eql?(foo)`.
Moreover, `foo.hash` must then be the same as `bar.hash`.
Otherwise the `Hash` lookup will fail. `TimeWithZone` want to act like a `Time`, but currently:

@@@
bar = Time.utc(2000)
foo = bar.in_time_zone

foo.eql?(bar) # =&gt; true
bar.eql?(foo) # =&gt; false
foo.hash == bar.hash # =&gt; false (only in Ruby 1.9)
@@@
The attached patch fixes this. Since TimeWithZone wants to be freely replaceable with a Time:
@@@
bar.eql?(foo) # =&gt; now true
foo.hash == bar.hash # =&gt; now true (even in Ruby 1.9)
@@@

There is also a problem with DateTime vs TimeWithZone:
@@@
dt = foo.to_datetime
foo.eql?(dt)  # =&gt; true
dt.eql?(foo)  # =&gt; false
dt.hash == foo # =&gt; false.
@@@

Since `DateTime` and a `Time` are both builtin classes and that a `Time` is never `eql?` to a `DateTime` or vice-versa (as per the doc and the implementation), the patch also insures that a `TimeWithZone` can not be eql? to a `DateTime`:
@@@
foo.eql?(dt)  # =&gt; now false
@@@

Thanks</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If &lt;code&gt;foo.eql?(bar)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; then so
should &lt;code&gt;bar.eql?(foo)&lt;/code&gt;.&lt;br&gt;
Moreover, &lt;code&gt;foo.hash&lt;/code&gt; must then be the same as
&lt;code&gt;bar.hash&lt;/code&gt;.&lt;br&gt;
Otherwise the &lt;code&gt;Hash&lt;/code&gt; lookup will fail.
&lt;code&gt;TimeWithZone&lt;/code&gt; want to act like a &lt;code&gt;Time&lt;/code&gt;, but
currently:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bar = Time.utc(2000)
foo = bar.in_time_zone

foo.eql?(bar) # =&amp;gt; true
bar.eql?(foo) # =&amp;gt; false
foo.hash == bar.hash # =&amp;gt; false (only in Ruby 1.9)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The attached patch fixes this. Since TimeWithZone wants to be
freely replaceable with a Time:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bar.eql?(foo) # =&amp;gt; now true
foo.hash == bar.hash # =&amp;gt; now true (even in Ruby 1.9)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is also a problem with DateTime vs TimeWithZone:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dt = foo.to_datetime
foo.eql?(dt)  # =&amp;gt; true
dt.eql?(foo)  # =&amp;gt; false
dt.hash == foo # =&amp;gt; false.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;DateTime&lt;/code&gt; and a &lt;code&gt;Time&lt;/code&gt; are both
builtin classes and that a &lt;code&gt;Time&lt;/code&gt; is never
&lt;code&gt;eql?&lt;/code&gt; to a &lt;code&gt;DateTime&lt;/code&gt; or vice-versa (as per
the doc and the implementation), the patch also insures that a
&lt;code&gt;TimeWithZone&lt;/code&gt; can not be eql? to a
&lt;code&gt;DateTime&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo.eql?(dt)  # =&amp;gt; now false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If `foo.eql?(bar)` returns `true` then so should `bar.eql?(foo)`.
Moreover, `foo.hash` must then be the same as `bar.hash`.
Otherwise the `Hash` lookup will fail. `TimeWithZone` want to act like a `Time`, but currently:

@@@
bar = Time.utc(2000)
foo = bar.in_time_zone

foo.eql?(bar) # =&gt; true
bar.eql?(foo) # =&gt; false
foo.hash == bar.hash # =&gt; false (only in Ruby 1.9)
@@@
The attached patch fixes this. Since TimeWithZone wants to be freely replaceable with a Time:
@@@
bar.eql?(foo) # =&gt; now true
foo.hash == bar.hash # =&gt; now true (even in Ruby 1.9)
@@@

There is also a problem with DateTime vs TimeWithZone:
@@@
dt = foo.to_datetime
foo.eql?(dt)  # =&gt; true
dt.eql?(foo)  # =&gt; false
dt.hash == foo # =&gt; false.
@@@

Since `DateTime` and a `Time` are both builtin classes and that a `Time` is never `eql?` to a `DateTime` or vice-versa (as per the doc and the implementation), the patch also insures that a `TimeWithZone` can not be eql? to a `DateTime`:
@@@
foo.eql?(dt)  # =&gt; now false
@@@

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;If &lt;code&gt;foo.eql?(bar)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; then so
should &lt;code&gt;bar.eql?(foo)&lt;/code&gt;.&lt;br&gt;
Moreover, &lt;code&gt;foo.hash&lt;/code&gt; must then be the same as
&lt;code&gt;bar.hash&lt;/code&gt;.&lt;br&gt;
Otherwise the &lt;code&gt;Hash&lt;/code&gt; lookup will fail.
&lt;code&gt;TimeWithZone&lt;/code&gt; want to act like a &lt;code&gt;Time&lt;/code&gt;, but
currently:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bar = Time.utc(2000)
foo = bar.in_time_zone

foo.eql?(bar) # =&amp;gt; true
bar.eql?(foo) # =&amp;gt; false
foo.hash == bar.hash # =&amp;gt; false (only in Ruby 1.9)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The attached patch fixes this. Since TimeWithZone wants to be
freely replaceable with a Time:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bar.eql?(foo) # =&amp;gt; now true
foo.hash == bar.hash # =&amp;gt; now true (even in Ruby 1.9)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;There is also a problem with DateTime vs TimeWithZone:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;dt = foo.to_datetime
foo.eql?(dt)  # =&amp;gt; true
dt.eql?(foo)  # =&amp;gt; false
dt.hash == foo # =&amp;gt; false.&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;DateTime&lt;/code&gt; and a &lt;code&gt;Time&lt;/code&gt; are both
builtin classes and that a &lt;code&gt;Time&lt;/code&gt; is never
&lt;code&gt;eql?&lt;/code&gt; to a &lt;code&gt;DateTime&lt;/code&gt; or vice-versa (as per
the doc and the implementation), the patch also insures that a
&lt;code&gt;TimeWithZone&lt;/code&gt; can not be eql? to a
&lt;code&gt;DateTime&lt;/code&gt;:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;foo.eql?(dt)  # =&amp;gt; now false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-05T20:51:35+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6534</number>
      <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support bugs core_ext patch time timewithzone</tag>
      <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
      <updated-at type="datetime">2011-03-05T20:51:37+00:00</updated-at>
      <user-id type="integer">26479</user-id>
      <version type="integer">1</version>
      <user-name>Marc-Andr&#233; Lafortune</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-05T20:52:28+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6534</number>
      <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support bugs core_ext patch time timewithzone</tag>
      <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
      <updated-at type="datetime">2011-03-05T20:52:29+00:00</updated-at>
      <user-id type="integer">26479</user-id>
      <version type="integer">2</version>
      <user-name>Marc-Andr&#233; Lafortune</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It seems to me that these objects should behave like regular ruby objects do. For instance:

@@@
10 == 10.00 # Same value
=&gt; true
10.eql?(10.00) # Same value different type
=&gt; false
@@@

Using the latter code as an example, I would expect Time and TimeWithZone to behave like this:

@@@
bar = Time.utc(2000)
foo = bar.in_time_zone
foo.eql?(bar)
=&gt; false
bar.eql?(foo)
=&gt; false
@@@

It seems like making eql? more lenient is removing that flexibility in testing for types. I do believe that `foo.eql?(bar)` should produce the same result as `bar.eql?(foo)`, but I think that if foo and bar are of different types (Time) and (ActiveSupport::TimeWithZone) the eql? comparison should resolve to false.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It seems to me that these objects should behave like regular
ruby objects do. For instance:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;10 == 10.00 # Same value
=&amp;gt; true
10.eql?(10.00) # Same value different type
=&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Using the latter code as an example, I would expect Time and
TimeWithZone to behave like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;bar = Time.utc(2000)
foo = bar.in_time_zone
foo.eql?(bar)
=&amp;gt; false
bar.eql?(foo)
=&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It seems like making eql? more lenient is removing that
flexibility in testing for types. I do believe that
&lt;code&gt;foo.eql?(bar)&lt;/code&gt; should produce the same result as
&lt;code&gt;bar.eql?(foo)&lt;/code&gt;, but I think that if foo and bar are of
different types (Time) and (ActiveSupport::TimeWithZone) the eql?
comparison should resolve to false.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-12T01:26:38+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6534</number>
      <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support bugs core_ext patch time timewithzone</tag>
      <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
      <updated-at type="datetime">2011-03-12T01:26:41+00:00</updated-at>
      <user-id type="integer">135031</user-id>
      <version type="integer">3</version>
      <user-name>Pan Thomakos</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>`Floats` and `Integers` are quite different: there is no bijection between them and they don't respond to the same methods (e.g. you can't do `10.0.times{}`).

Note that regular objects do not distinguish class with `eql?`:

@@@
class MyString &lt; String; end
MyString.new(&quot;foo&quot;).eql?(&quot;foo&quot;) # =&gt; true
@@@

In any case, one shouldn't care about class/type but about what objects respond to.

Unless I'm mistaken, TimeWithZone is the same as Time, except that it allows for a timezone information and that timezone information is not considered when doing comparisons.

`TimeWithZone` is meant to be so similar to a `Time` that `TimeWithZone#to_time` returns... a `TimeWithZone`. My impression is that one shouldn't have to care too much about what is a `Time` and what is a `TimeWithZone`; I'd like to use Hash lookups without caring either.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;code&gt;Floats&lt;/code&gt; and &lt;code&gt;Integers&lt;/code&gt; are quite
different: there is no bijection between them and they don't
respond to the same methods (e.g. you can't do
&lt;code&gt;10.0.times{}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Note that regular objects do not distinguish class with
&lt;code&gt;eql?&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class MyString &amp;lt; String; end
MyString.new(&quot;foo&quot;).eql?(&quot;foo&quot;) # =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In any case, one shouldn't care about class/type but about what
objects respond to.&lt;/p&gt;
&lt;p&gt;Unless I'm mistaken, TimeWithZone is the same as Time, except
that it allows for a timezone information and that timezone
information is not considered when doing comparisons.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TimeWithZone&lt;/code&gt; is meant to be so similar to a
&lt;code&gt;Time&lt;/code&gt; that &lt;code&gt;TimeWithZone#to_time&lt;/code&gt; returns...
a &lt;code&gt;TimeWithZone&lt;/code&gt;. My impression is that one shouldn't
have to care too much about what is a &lt;code&gt;Time&lt;/code&gt; and what is
a &lt;code&gt;TimeWithZone&lt;/code&gt;; I'd like to use Hash lookups without
caring either.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-12T18:28:58+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6534</number>
      <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support bugs core_ext patch time timewithzone</tag>
      <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
      <updated-at type="datetime">2011-03-12T18:29:01+00:00</updated-at>
      <user-id type="integer">26479</user-id>
      <version type="integer">4</version>
      <user-name>Marc-Andr&#233; Lafortune</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>What you write makes sense. After taking a look at the class documentation this does seem to be the intent.

I like your implementation, it's simple and elegant, and I was able to get tests to pass in both 1.9.2 and 1.8.7.

You mentioned that your patch ensures that TimeWithZone cannot eql? a DateTime. Unless I am mistaken I didn't see a test for this. Would it be worth adding one?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What you write makes sense. After taking a look at the class
documentation this does seem to be the intent.&lt;/p&gt;
&lt;p&gt;I like your implementation, it's simple and elegant, and I was
able to get tests to pass in both 1.9.2 and 1.8.7.&lt;/p&gt;
&lt;p&gt;You mentioned that your patch ensures that TimeWithZone cannot
eql? a DateTime. Unless I am mistaken I didn't see a test for this.
Would it be worth adding one?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-12T20:29:31+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6534</number>
      <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support bugs core_ext patch time timewithzone</tag>
      <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
      <updated-at type="datetime">2011-03-12T20:29:35+00:00</updated-at>
      <user-id type="integer">135031</user-id>
      <version type="integer">5</version>
      <user-name>Pan Thomakos</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks for testing on your side.

Yes, it could be worthwhile to add a test as you suggest.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for testing on your side.&lt;/p&gt;
&lt;p&gt;Yes, it could be worthwhile to add a test as you suggest.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-13T19:48:33+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6534</number>
      <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support bugs core_ext patch time timewithzone</tag>
      <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
      <updated-at type="datetime">2011-03-13T19:48:37+00:00</updated-at>
      <user-id type="integer">26479</user-id>
      <version type="integer">6</version>
      <user-name>Marc-Andr&#233; Lafortune</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I too ran the code that you made and thought it made sense. I added the test that Pan Thomakos discussed in this updated patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I too ran the code that you made and thought it made sense. I
added the test that Pan Thomakos discussed in this updated
patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-21T02:49:12+00:00</created-at>
      <creator-id type="integer">26479</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6534</number>
      <permalink>patch-fixing-inconsistencies-with-timewithzonehasheql</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_support bugs core_ext patch time timewithzone</tag>
      <title>[PATCH] Fixing inconsistencies with Time{WithZone}#{hash,eql?}</title>
      <updated-at type="datetime">2011-03-21T02:49:18+00:00</updated-at>
      <user-id type="integer">141984</user-id>
      <version type="integer">7</version>
      <user-name>Ryan Orr</user-name>
      <creator-name>Marc-Andr&#233; Lafortune</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6534</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>03ed3f2bef29d9bfcc8e3a1bce8fcd66c7820d4c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-05T20:52:28+00:00</created-at>
      <filename>time_eql_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">944497</id>
      <size type="integer">4204</size>
      <uploader-id type="integer">26479</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/944497/time_eql_patch.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>3f9fd4607461975fbaa22a68dfecc9c0c57dc32a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-21T02:49:12+00:00</created-at>
      <filename>0001-fixed-bugs-with-time-zone.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">968359</id>
      <size type="integer">4254</size>
      <uploader-id type="integer">141984</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/968359/0001-fixed-bugs-with-time-zone.patch</url>
    </attachment>
  </attachments>
</ticket>
