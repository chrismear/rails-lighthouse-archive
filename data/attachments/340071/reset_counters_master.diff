From 9fdc25db020cfab496bcf578563be40bdedda14d Mon Sep 17 00:00:00 2001
From: Gabe da Silveira <gabe@websaviour.com>
Date: Wed, 2 Dec 2009 15:28:54 -0800
Subject: [PATCH] Replace reset_counter_cache with reset_counters that has API inline with existing update_counters method

---
 activerecord/lib/active_record/base.rb |   21 +++++++++++++--------
 activerecord/test/cases/base_test.rb   |    4 ++--
 2 files changed, 15 insertions(+), 10 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index e04684d..321bba4 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -967,20 +967,25 @@ module ActiveRecord #:nodoc:
         connection.select_value(sql, "#{name} Count").to_i
       end
 
-      # Reset a counter cache for all records.
+      # Resets one or more counter caches to their correct value using an SQL
+      # count query.  This is useful when adding new counter caches, or if the
+      # counter has been corrupted or modified directly by SQL.
       #
       # ==== Parameters
       #
-      # * +association_name+ - The name of of the association counter cache to reset
+      # * +id+ - The id of the object you wish to reset a counter on.
+      # * +counters+ - One or more counter names to reset
       #
       # ==== Examples
-      #   # For all Post records reset the comments_count
-      #   Post.reset_counter_cache(:comments)
-      def reset_counter_cache(association)
-        child_class = reflect_on_association(association).klass
-        counter_name = child_class.reflect_on_association(self.name.downcase.to_sym).counter_cache_column
+      #
+      #   # For Post with id #1 records reset the comments_count
+      #   Post.reset_counters(1, :comments)
+      def reset_counters(id, *counters)
+        object = find(id)
+        counters.each do |association|
+          child_class = reflect_on_association(association).klass
+          counter_name = child_class.reflect_on_association(self.name.downcase.to_sym).counter_cache_column
 
-        find_each do |object|
           connection.update("UPDATE #{quoted_table_name} SET #{connection.quote_column_name(counter_name)} = #{object.send(association).count} WHERE #{connection.quote_column_name(primary_key)} = #{quote_value(object.id)}", "#{name} UPDATE")
         end
       end
diff --git a/activerecord/test/cases/base_test.rb b/activerecord/test/cases/base_test.rb
index 737ca01..4c16cb4 100755
--- a/activerecord/test/cases/base_test.rb
+++ b/activerecord/test/cases/base_test.rb
@@ -680,13 +680,13 @@ class BasicsTest < ActiveRecord::TestCase
     assert_equal -2, Topic.find(2).replies_count
   end
 
-  def test_reset_counter_cache
+  def test_reset_counters
     assert_equal 1, Topic.find(1).replies_count
 
     Topic.increment_counter("replies_count", 1)
     assert_equal 2, Topic.find(1).replies_count
 
-    Topic.reset_counter_cache(:replies)
+    Topic.reset_counters(1, :replies)
     assert_equal 1, Topic.find(1).replies_count
   end
 
-- 
1.6.0.2

