<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-11-10T23:04:09+00:00</created-at>
  <creator-id type="integer">24104</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3478</number>
  <permalink>activesupport-time-calculators-beginning_of_year-etc-do-not-change-the-timezone-when-crossing-dst-boundaries</permalink>
  <priority type="integer">176551</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>ActiveSupport Time Calculators (beginning_of_year etc.) do not change the timezone when crossing DST boundaries</title>
  <updated-at type="datetime">2010-03-09T14:18:34+00:00</updated-at>
  <user-id type="integer">24104</user-id>
  <version type="integer">4</version>
  <user-name>Christian Weyer</user-name>
  <creator-name>Christian Weyer</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3478</url>
  <priority-name nil="true"></priority-name>
  <original-body>The beginning_of_year, beginning_of_month, beginning_of_day, end_of_year, end_of_month, end_of_day functions wrongly assume that the beginning/end of the respective period always has the same timezone as the date it was calculated from.

In the following example for beginning_of_year this is only true when the date we calculate from lies not within the daylight savings time period.

Example:
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year
=&gt; Thu, 01 Jan 2009 00:00:00 +0100
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year.utc
=&gt; Wed, 31 Dec 2008 23:00:00 +0000

Gives the correct time for CET and in the database the correct time for UTC.

But when we do this in summer:
&gt;&gt; DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year
=&gt; Thu, 01 Jan 2009 00:00:00 +0200
&gt;&gt; DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year.utc
=&gt; Wed, 31 Dec 2008 22:00:00 +0000

the timezone is just kept. Although the beginning of the year (as well as the end of the year)
is not in the CEST zone, but CET. This leads to wrong data in the database when Rails transforms
the date to UTC, subtracting one hour too much.</original-body>
  <latest-body>The beginning_of_year, beginning_of_month, beginning_of_day, end_of_year, end_of_month, end_of_day functions wrongly assume that the beginning/end of the respective period always has the same timezone as the date it was calculated from.

In the following example for beginning_of_year this is only true when the date we calculate from lies not within the daylight savings time period.

Example:
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year
=&gt; Thu, 01 Jan 2009 00:00:00 +0100
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year.utc
=&gt; Wed, 31 Dec 2008 23:00:00 +0000

Gives the correct time for CET and in the database the correct time for UTC.

But when we do this in summer:
&gt;&gt; DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year
=&gt; Thu, 01 Jan 2009 00:00:00 +0200
&gt;&gt; DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year.utc
=&gt; Wed, 31 Dec 2008 22:00:00 +0000

the timezone is just kept. Although the beginning of the year (as well as the end of the year)
is not in the CEST zone, but CET. This leads to wrong data in the database when Rails transforms
the date to UTC, subtracting one hour too much.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The beginning_of_year, beginning_of_month, beginning_of_day,
end_of_year, end_of_month, end_of_day functions wrongly assume that
the beginning/end of the respective period always has the same
timezone as the date it was calculated from.&lt;/p&gt;
&lt;p&gt;In the following example for beginning_of_year this is only true
when the date we calculate from lies not within the daylight
savings time period.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year
=&amp;gt; Thu, 01 Jan 2009 00:00:00 +0100 DateTime.parse('2009-01-05
23:12:11 CET').beginning_of_year.utc =&amp;gt; Wed, 31 Dec 2008
23:00:00 +0000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gives the correct time for CET and in the database the correct
time for UTC.&lt;/p&gt;
&lt;p&gt;But when we do this in summer:&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year
=&amp;gt; Thu, 01 Jan 2009 00:00:00 +0200 DateTime.parse('2009-06-05
23:12:11 CEST').beginning_of_year.utc =&amp;gt; Wed, 31 Dec 2008
22:00:00 +0000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;the timezone is just kept. Although the beginning of the year
(as well as the end of the year)&lt;br&gt;
is not in the CEST zone, but CET. This leads to wrong data in the
database when Rails transforms&lt;br&gt;
the date to UTC, subtracting one hour too much.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The beginning_of_year, beginning_of_month, beginning_of_day, end_of_year, end_of_month, end_of_day functions wrongly assume that the beginning/end of the respective period always has the same timezone as the date it was calculated from.

In the following example for beginning_of_year this is only true when the date we calculate from lies not within the daylight savings time period.

Example:
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year
=&gt; Thu, 01 Jan 2009 00:00:00 +0100
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year.utc
=&gt; Wed, 31 Dec 2008 23:00:00 +0000

Gives the correct time for CET and in the database the correct time for UTC.

But when we do this in summer:
&gt;&gt; DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year
=&gt; Thu, 01 Jan 2009 00:00:00 +0200
&gt;&gt; DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year.utc
=&gt; Wed, 31 Dec 2008 22:00:00 +0000

the timezone is just kept. Although the beginning of the year (as well as the end of the year)
is not in the CEST zone, but CET. This leads to wrong data in the database when Rails transforms
the date to UTC, subtracting one hour too much.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The beginning_of_year, beginning_of_month, beginning_of_day,
end_of_year, end_of_month, end_of_day functions wrongly assume that
the beginning/end of the respective period always has the same
timezone as the date it was calculated from.&lt;/p&gt;
&lt;p&gt;In the following example for beginning_of_year this is only true
when the date we calculate from lies not within the daylight
savings time period.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year
=&amp;gt; Thu, 01 Jan 2009 00:00:00 +0100 DateTime.parse('2009-01-05
23:12:11 CET').beginning_of_year.utc =&amp;gt; Wed, 31 Dec 2008
23:00:00 +0000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Gives the correct time for CET and in the database the correct
time for UTC.&lt;/p&gt;
&lt;p&gt;But when we do this in summer:&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;DateTime.parse('2009-06-05 23:12:11 CEST').beginning_of_year
=&amp;gt; Thu, 01 Jan 2009 00:00:00 +0200 DateTime.parse('2009-06-05
23:12:11 CEST').beginning_of_year.utc =&amp;gt; Wed, 31 Dec 2008
22:00:00 +0000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;the timezone is just kept. Although the beginning of the year
(as well as the end of the year)&lt;br&gt;
is not in the CEST zone, but CET. This leads to wrong data in the
database when Rails transforms&lt;br&gt;
the date to UTC, subtracting one hour too much.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-10T23:04:09+00:00</created-at>
      <creator-id type="integer">24104</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3478</number>
      <permalink>activesupport-time-calculators-beginning_of_year-etc-do-not-change-the-timezone-when-crossing-dst-boundaries</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveSupport Time Calculators (beginning_of_year etc.) do not change the timezone when crossing DST boundaries</title>
      <updated-at type="datetime">2009-11-10T23:04:12+00:00</updated-at>
      <user-id type="integer">24104</user-id>
      <version type="integer">1</version>
      <user-name>Christian Weyer</user-name>
      <creator-name>Christian Weyer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3478</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't believe that this is an issue. If you look at the chaining for DateTime.parse('2009-01-05 23:12:11 CET').beginning_of_year.utc

DateTime is parsing a date, then giving the beginning of that year (in local time). The returned date is then transformed to UTC.

Resolving your issue would be more likely to apply the UTC first and work from a UTC perspective.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't believe that this is an issue. If you look at the
chaining for DateTime.parse('2009-01-05 23:12:11
CET').beginning_of_year.utc&lt;/p&gt;
&lt;p&gt;DateTime is parsing a date, then giving the beginning of that
year (in local time). The returned date is then transformed to
UTC.&lt;/p&gt;
&lt;p&gt;Resolving your issue would be more likely to apply the UTC first
and work from a UTC perspective.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-09T11:27:55+00:00</created-at>
      <creator-id type="integer">24104</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3478</number>
      <permalink>activesupport-time-calculators-beginning_of_year-etc-do-not-change-the-timezone-when-crossing-dst-boundaries</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveSupport Time Calculators (beginning_of_year etc.) do not change the timezone when crossing DST boundaries</title>
      <updated-at type="datetime">2010-03-09T11:27:56+00:00</updated-at>
      <user-id type="integer">29520</user-id>
      <version type="integer">2</version>
      <user-name>jufemaiz</user-name>
      <creator-name>Christian Weyer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3478</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Indeed, this isn't an issue, you're just coming across a limitation of the DateTime class.

The DateTime class doesn't have any knowledge of daylight savings time, unfortunately, which means that DateTime#beginning_of_year won't be able to adjust for that. In other words, DateTime#beginning_of_year will preserve the local offset of the DateTime instance it's called on, and just change the date and time values. That's the best we can do with the information given.

DateTime.parse does have a limited understanding of time zones -- it understands that &quot;CET&quot; represents a +0100 offset in the beginning of the year, and that &quot;CEST&quot; represents a +0200 offset. But this is a very naive implementation:

@@@ ruby
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CET')
=&gt; Mon, 05 Jan 2009 23:12:11 +0100
&gt;&gt; DateTime.parse('2009-01-05 23:12:11 CEST')
=&gt; Mon, 05 Jan 2009 23:12:11 +0200
@@@

... I can force Jan 5 to be CEST, even though that's not correct.

Best if you avoid DateTime.parse, unless you really want an instance of DateTime. If you need to parse a time from a string, and you know which time zone this time needs to be in, you can use TimeZone.parse:

@@@ ruby
&gt;&gt; Time.zone = 'Paris'
=&gt; &quot;Paris&quot;
&gt;&gt; Time.zone.parse '2009-06-05 23:12:11'
=&gt; Fri, 05 Jun 2009 23:12:11 CEST +02:00
&gt;&gt; Time.zone.parse('2009-06-05 23:12:11').beginning_of_year
=&gt; Thu, 01 Jan 2009 00:00:00 CET +01:00
@@@

Time.parse has the unfortunate behavior of interpreting nonsense as Time.now, which makes it pretty much unusable:

@@@ ruby
&gt;&gt; Time.parse 'no time here'
=&gt; Tue Mar 09 08:04:31 -0600 2010
@@@

... which is probably why you're using DateTime.parse. (Time.zone.parse doesn't do this, fyi.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Indeed, this isn't an issue, you're just coming across a
limitation of the DateTime class.&lt;/p&gt;
&lt;p&gt;The DateTime class doesn't have any knowledge of daylight
savings time, unfortunately, which means that
DateTime#beginning_of_year won't be able to adjust for that. In
other words, DateTime#beginning_of_year will preserve the local
offset of the DateTime instance it's called on, and just change the
date and time values. That's the best we can do with the
information given.&lt;/p&gt;
&lt;p&gt;DateTime.parse does have a limited understanding of time zones
-- it understands that &quot;CET&quot; represents a +0100 offset in the
beginning of the year, and that &quot;CEST&quot; represents a +0200 offset.
But this is a very naive implementation:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; DateTime.parse('2009-01-05 23:12:11 CET')
=&amp;gt; Mon, 05 Jan 2009 23:12:11 +0100
&amp;gt;&amp;gt; DateTime.parse('2009-01-05 23:12:11 CEST')
=&amp;gt; Mon, 05 Jan 2009 23:12:11 +0200&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;... I can force Jan 5 to be CEST, even though that's not
correct.&lt;/p&gt;
&lt;p&gt;Best if you avoid DateTime.parse, unless you really want an
instance of DateTime. If you need to parse a time from a string,
and you know which time zone this time needs to be in, you can use
TimeZone.parse:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; Time.zone = 'Paris'
=&amp;gt; &quot;Paris&quot;
&amp;gt;&amp;gt; Time.zone.parse '2009-06-05 23:12:11'
=&amp;gt; Fri, 05 Jun 2009 23:12:11 CEST +02:00
&amp;gt;&amp;gt; Time.zone.parse('2009-06-05 23:12:11').beginning_of_year
=&amp;gt; Thu, 01 Jan 2009 00:00:00 CET +01:00&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Time.parse has the unfortunate behavior of interpreting nonsense
as Time.now, which makes it pretty much unusable:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; Time.parse 'no time here'
=&amp;gt; Tue Mar 09 08:04:31 -0600 2010&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;... which is probably why you're using DateTime.parse.
(Time.zone.parse doesn't do this, fyi.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-09T14:06:27+00:00</created-at>
      <creator-id type="integer">24104</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3478</number>
      <permalink>activesupport-time-calculators-beginning_of_year-etc-do-not-change-the-timezone-when-crossing-dst-boundaries</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>ActiveSupport Time Calculators (beginning_of_year etc.) do not change the timezone when crossing DST boundaries</title>
      <updated-at type="datetime">2010-03-09T14:06:32+00:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">3</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Christian Weyer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3478</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I found a a way around this problem in the meantime as well, but I still think that the time span calculators should care about if the timezone needs to adjusted. Without that, the time zone support seems incomplete to me, or at least the documentation should make it very clear, that DST crossing time spans will be computed incorrectly. Otherwise people (like me) may assume rails time zone support works even in this more &quot;difficult&quot; cases.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I found a a way around this problem in the meantime as well, but
I still think that the time span calculators should care about if
the timezone needs to adjusted. Without that, the time zone support
seems incomplete to me, or at least the documentation should make
it very clear, that DST crossing time spans will be computed
incorrectly. Otherwise people (like me) may assume rails time zone
support works even in this more &quot;difficult&quot; cases.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-09T14:18:31+00:00</created-at>
      <creator-id type="integer">24104</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3478</number>
      <permalink>activesupport-time-calculators-beginning_of_year-etc-do-not-change-the-timezone-when-crossing-dst-boundaries</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>ActiveSupport Time Calculators (beginning_of_year etc.) do not change the timezone when crossing DST boundaries</title>
      <updated-at type="datetime">2010-03-09T14:18:34+00:00</updated-at>
      <user-id type="integer">24104</user-id>
      <version type="integer">4</version>
      <user-name>Christian Weyer</user-name>
      <creator-name>Christian Weyer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3478</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
