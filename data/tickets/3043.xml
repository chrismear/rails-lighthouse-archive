<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-08-12T16:09:44+01:00</created-at>
  <creator-id type="integer">41366</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3043</number>
  <permalink>has_one-through-not-working-with-new_record-breaks-validation</permalink>
  <priority type="integer">45734</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>has_one :through not working with new_record, breaks validation</title>
  <updated-at type="datetime">2010-10-11T10:58:06+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">4</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Paul Hinze</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3043</url>
  <priority-name nil="true"></priority-name>
  <original-body>I believe that when a through association is set, even if the record hasn't yet been saved, that the setters and getters on the instance's association should still work as expected.

Given the following models:

@@@ ruby 
class User &lt; ActiveRecord::Base
  has_many :accounts
end

class Account &lt; ActiveRecord::Base
  belongs_to :user
  has_many   :orders
end

class Order &lt; ActiveRecord::Base
  belongs_to :account
  has_one    :user,   :through =&gt; :account
end
@@@

We happily move along setting up a new object:

@@@
&gt;&gt; o = Order.new
=&gt; #&lt;Order id: nil, ... &gt;
&gt;&gt; o.account = Account.first
=&gt; #&lt;Account id: 12345, ... &gt;
&gt;&gt; o.account.user
=&gt; #&lt;User id: 23456, ... &gt;
&gt;&gt; o.user
=&gt; nil
@@@

But that last doesn't make sense... if `o.account.user` is available it seams reasonable to expect that `o.user` would be readily accessible, but it is not.

This has implications in validation, too.  Say I wanted to this validation on my order:

@@@ ruby
class Order &lt; ActiveRecord::Base
  validates_presence_of :user
@@@

Because the instance `o` cannot 'see' the user without being saved, and it cannot be saved without the validation passing, you have a validation rule that will never pass.

So it's possible that rails just &quot;isn't supposed to work this way&quot;, but I think the examples I've given make for fairly reasonable expected functionality.

I've attached a couple of test cases that fail on `2-3-stable` and `master` that I believe express the behavior I'm describing here.

I'm happy to hack up a patch to make this work, but first I'd like confirmation that this is behavior that rails *should* have.

Assigning to Michael since he was the name that came up in #1749, which also had to do with `has_one :through`.

Thanks for your time!</original-body>
  <latest-body>I believe that when a through association is set, even if the record hasn't yet been saved, that the setters and getters on the instance's association should still work as expected.

Given the following models:

@@@ ruby 
class User &lt; ActiveRecord::Base
  has_many :accounts
end

class Account &lt; ActiveRecord::Base
  belongs_to :user
  has_many   :orders
end

class Order &lt; ActiveRecord::Base
  belongs_to :account
  has_one    :user,   :through =&gt; :account
end
@@@

We happily move along setting up a new object:

@@@
&gt;&gt; o = Order.new
=&gt; #&lt;Order id: nil, ... &gt;
&gt;&gt; o.account = Account.first
=&gt; #&lt;Account id: 12345, ... &gt;
&gt;&gt; o.account.user
=&gt; #&lt;User id: 23456, ... &gt;
&gt;&gt; o.user
=&gt; nil
@@@

But that last doesn't make sense... if `o.account.user` is available it seams reasonable to expect that `o.user` would be readily accessible, but it is not.

This has implications in validation, too.  Say I wanted to this validation on my order:

@@@ ruby
class Order &lt; ActiveRecord::Base
  validates_presence_of :user
@@@

Because the instance `o` cannot 'see' the user without being saved, and it cannot be saved without the validation passing, you have a validation rule that will never pass.

So it's possible that rails just &quot;isn't supposed to work this way&quot;, but I think the examples I've given make for fairly reasonable expected functionality.

I've attached a couple of test cases that fail on `2-3-stable` and `master` that I believe express the behavior I'm describing here.

I'm happy to hack up a patch to make this work, but first I'd like confirmation that this is behavior that rails *should* have.

Assigning to Michael since he was the name that came up in #1749, which also had to do with `has_one :through`.

Thanks for your time!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I believe that when a through association is set, even if the
record hasn't yet been saved, that the setters and getters on the
instance's association should still work as expected.&lt;/p&gt;
&lt;p&gt;Given the following models:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class User &amp;lt; ActiveRecord::Base
  has_many :accounts
end

class Account &amp;lt; ActiveRecord::Base
  belongs_to :user
  has_many   :orders
end

class Order &amp;lt; ActiveRecord::Base
  belongs_to :account
  has_one    :user,   :through =&amp;gt; :account
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We happily move along setting up a new object:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;gt;&amp;gt; o = Order.new
=&amp;gt; #&amp;lt;Order id: nil, ... &amp;gt;
&amp;gt;&amp;gt; o.account = Account.first
=&amp;gt; #&amp;lt;Account id: 12345, ... &amp;gt;
&amp;gt;&amp;gt; o.account.user
=&amp;gt; #&amp;lt;User id: 23456, ... &amp;gt;
&amp;gt;&amp;gt; o.user
=&amp;gt; nil
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that last doesn't make sense... if
&lt;code&gt;o.account.user&lt;/code&gt; is available it seams reasonable to
expect that &lt;code&gt;o.user&lt;/code&gt; would be readily accessible, but it
is not.&lt;/p&gt;
&lt;p&gt;This has implications in validation, too. Say I wanted to this
validation on my order:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Order &amp;lt; ActiveRecord::Base
  validates_presence_of :user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because the instance &lt;code&gt;o&lt;/code&gt; cannot 'see' the user
without being saved, and it cannot be saved without the validation
passing, you have a validation rule that will never pass.&lt;/p&gt;
&lt;p&gt;So it's possible that rails just &quot;isn't supposed to work this
way&quot;, but I think the examples I've given make for fairly
reasonable expected functionality.&lt;/p&gt;
&lt;p&gt;I've attached a couple of test cases that fail on
&lt;code&gt;2-3-stable&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt; that I believe
express the behavior I'm describing here.&lt;/p&gt;
&lt;p&gt;I'm happy to hack up a patch to make this work, but first I'd
like confirmation that this is behavior that rails &lt;em&gt;should&lt;/em&gt;
have.&lt;/p&gt;
&lt;p&gt;Assigning to Michael since he was the name that came up in
&lt;a href=&quot;/projects/8994/tickets/1749&quot; title=&quot;Ticket #1749&quot;&gt;#1749&lt;/a&gt;, which also had to do with &lt;code&gt;has_one
:through&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for your time!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I believe that when a through association is set, even if the record hasn't yet been saved, that the setters and getters on the instance's association should still work as expected.

Given the following models:

@@@ ruby 
class User &lt; ActiveRecord::Base
  has_many :accounts
end

class Account &lt; ActiveRecord::Base
  belongs_to :user
  has_many   :orders
end

class Order &lt; ActiveRecord::Base
  belongs_to :account
  has_one    :user,   :through =&gt; :account
end
@@@

We happily move along setting up a new object:

@@@
&gt;&gt; o = Order.new
=&gt; #&lt;Order id: nil, ... &gt;
&gt;&gt; o.account = Account.first
=&gt; #&lt;Account id: 12345, ... &gt;
&gt;&gt; o.account.user
=&gt; #&lt;User id: 23456, ... &gt;
&gt;&gt; o.user
=&gt; nil
@@@

But that last doesn't make sense... if `o.account.user` is available it seams reasonable to expect that `o.user` would be readily accessible, but it is not.

This has implications in validation, too.  Say I wanted to this validation on my order:

@@@ ruby
class Order &lt; ActiveRecord::Base
  validates_presence_of :user
@@@

Because the instance `o` cannot 'see' the user without being saved, and it cannot be saved without the validation passing, you have a validation rule that will never pass.

So it's possible that rails just &quot;isn't supposed to work this way&quot;, but I think the examples I've given make for fairly reasonable expected functionality.

I've attached a couple of test cases that fail on `2-3-stable` and `master` that I believe express the behavior I'm describing here.

I'm happy to hack up a patch to make this work, but first I'd like confirmation that this is behavior that rails *should* have.

Assigning to Michael since he was the name that came up in #1749, which also had to do with `has_one :through`.

Thanks for your time!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I believe that when a through association is set, even if the
record hasn't yet been saved, that the setters and getters on the
instance's association should still work as expected.&lt;/p&gt;
&lt;p&gt;Given the following models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :accounts
end

class Account &amp;lt; ActiveRecord::Base
  belongs_to :user
  has_many   :orders
end

class Order &amp;lt; ActiveRecord::Base
  belongs_to :account
  has_one    :user,   :through =&amp;gt; :account
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We happily move along setting up a new object:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; o = Order.new
=&amp;gt; #&amp;lt;Order id: nil, ... &amp;gt;
&amp;gt;&amp;gt; o.account = Account.first
=&amp;gt; #&amp;lt;Account id: 12345, ... &amp;gt;
&amp;gt;&amp;gt; o.account.user
=&amp;gt; #&amp;lt;User id: 23456, ... &amp;gt;
&amp;gt;&amp;gt; o.user
=&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;But that last doesn't make sense... if
&lt;code&gt;o.account.user&lt;/code&gt; is available it seams reasonable to
expect that &lt;code&gt;o.user&lt;/code&gt; would be readily accessible, but it
is not.&lt;/p&gt;
&lt;p&gt;This has implications in validation, too. Say I wanted to this
validation on my order:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Order &amp;lt; ActiveRecord::Base
  validates_presence_of :user&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Because the instance &lt;code&gt;o&lt;/code&gt; cannot 'see' the user
without being saved, and it cannot be saved without the validation
passing, you have a validation rule that will never pass.&lt;/p&gt;
&lt;p&gt;So it's possible that rails just &quot;isn't supposed to work this
way&quot;, but I think the examples I've given make for fairly
reasonable expected functionality.&lt;/p&gt;
&lt;p&gt;I've attached a couple of test cases that fail on
&lt;code&gt;2-3-stable&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt; that I believe
express the behavior I'm describing here.&lt;/p&gt;
&lt;p&gt;I'm happy to hack up a patch to make this work, but first I'd
like confirmation that this is behavior that rails &lt;em&gt;should&lt;/em&gt;
have.&lt;/p&gt;
&lt;p&gt;Assigning to Michael since he was the name that came up in
&lt;a href=&quot;/projects/8994/tickets/1749&quot; title=
&quot;Ticket #1749&quot;&gt;#1749&lt;/a&gt;, which also had to do with &lt;code&gt;has_one
:through&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for your time!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-12T16:09:44+01:00</created-at>
      <creator-id type="integer">41366</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3043</number>
      <permalink>has_one-through-not-working-with-new_record-breaks-validation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable has_one through validation</tag>
      <title>has_one :through not working with new_record, breaks validation</title>
      <updated-at type="datetime">2009-08-12T16:09:48+01:00</updated-at>
      <user-id type="integer">41366</user-id>
      <version type="integer">1</version>
      <user-name>Paul Hinze</user-name>
      <creator-name>Paul Hinze</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3043</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:46:56+01:00</created-at>
      <creator-id type="integer">41366</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3043</number>
      <permalink>has_one-through-not-working-with-new_record-breaks-validation</permalink>
      <priority type="integer">45734</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2-3-stable has_one through validation</tag>
      <title>has_one :through not working with new_record, breaks validation</title>
      <updated-at type="datetime">2010-10-06T06:47:00+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Paul Hinze</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3043</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T10:58:00+01:00</created-at>
      <creator-id type="integer">41366</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2-3-stable has_one through validation
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3043</number>
      <permalink>has_one-through-not-working-with-new_record-breaks-validation</permalink>
      <priority type="integer">45734</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>has_one :through not working with new_record, breaks validation</title>
      <updated-at type="datetime">2010-10-11T10:58:06+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Paul Hinze</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3043</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>c4af5c575256791e86a7609fe9999219732fcbb3</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-08-12T16:09:45+01:00</created-at>
      <filename>test_has_one_through_accessors_on_new_record_instances.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">241938</id>
      <size type="integer">1336</size>
      <uploader-id type="integer">41366</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/241938/test_has_one_through_accessors_on_new_record_instances.patch</url>
    </attachment>
  </attachments>
</ticket>
