<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-02T10:43:23+01:00</created-at>
  <creator-id type="integer">99411</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5383</number>
  <permalink>as-dependencies-resolver-broken-not-missing-constant-error</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activesupport dependencies rails3.0rc</tag>
  <title>AS dependencies resolver broken: not missing constant error</title>
  <updated-at type="datetime">2010-10-02T10:43:23+01:00</updated-at>
  <user-id type="integer">99411</user-id>
  <version type="integer">3</version>
  <user-name>gucki</user-name>
  <creator-name>gucki</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5383</url>
  <priority-name>Low</priority-name>
  <original-body>&lt;pre&gt;
controllers/manage/cars_controller.rb
# encoding: utf-8
class Manage::CarsController &lt; ApplicationController
  def index
    Car.new
  end
end

models/manage/car.rb
# encoding: utf-8
class Manage::Car
end
&lt;/pre&gt;

Using only Car instead of Manage::Car inside the controller make rails fail in production mode with with ArgumentError, Manage is is not missing constant Car! (rails 3rc and master).

A little debugging shows that the following code is executed on each request (but it should only be called once on startup):
Dependencies: called load_missing_constant(Manage::CarsController, :Car)
Dependencies: called load_missing_constant(Manage, :Car)</original-body>
  <latest-body>&lt;pre&gt;
controllers/manage/cars_controller.rb
# encoding: utf-8
class Manage::CarsController &lt; ApplicationController
  def index
    Car.new
  end
end

models/manage/car.rb
# encoding: utf-8
class Manage::Car
end
&lt;/pre&gt;

Using only Car instead of Manage::Car inside the controller make rails fail in production mode with with ArgumentError, Manage is is not missing constant Car! (rails 3rc and master).

A little debugging shows that the following code is executed on each request (but it should only be called once on startup):
Dependencies: called load_missing_constant(Manage::CarsController, :Car)
Dependencies: called load_missing_constant(Manage, :Car)</latest-body>
  <original-body-html>&lt;div&gt;&lt;pre&gt;
controllers/manage/cars_controller.rb
# encoding: utf-8
class Manage::CarsController &amp;lt; ApplicationController
  def index
    Car.new
  end
end

models/manage/car.rb
# encoding: utf-8
class Manage::Car
end
&lt;/pre&gt;
&lt;p&gt;Using only Car instead of Manage::Car inside the controller make
rails fail in production mode with with ArgumentError, Manage is is
not missing constant Car! (rails 3rc and master).&lt;/p&gt;
&lt;p&gt;A little debugging shows that the following code is executed on
each request (but it should only be called once on startup):&lt;br&gt;
Dependencies: called load_missing_constant(Manage::CarsController,
:Car)&lt;br&gt;
Dependencies: called load_missing_constant(Manage, :Car)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;pre&gt;
controllers/manage/cars_controller.rb
# encoding: utf-8
class Manage::CarsController &lt; ApplicationController
  def index
    Car.new
  end
end

models/manage/car.rb
# encoding: utf-8
class Manage::Car
end
&lt;/pre&gt;

Using only Car instead of Manage::Car inside the controller make rails fail in production mode with with ArgumentError, Manage is is not missing constant Car! (rails 3rc and master).

A little debugging shows that the following code is executed on each request (but it should only be called once on startup):
Dependencies: called load_missing_constant(Manage::CarsController, :Car)
Dependencies: called load_missing_constant(Manage, :Car)</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
controllers/manage/cars_controller.rb
# encoding: utf-8
class Manage::CarsController &amp;lt; ApplicationController
  def index
    Car.new
  end
end

models/manage/car.rb
# encoding: utf-8
class Manage::Car
end
&lt;/pre&gt;
&lt;p&gt;Using only Car instead of Manage::Car inside the controller make
rails fail in production mode with with ArgumentError, Manage is is
not missing constant Car! (rails 3rc and master).&lt;/p&gt;
&lt;p&gt;A little debugging shows that the following code is executed on
each request (but it should only be called once on startup):&lt;br&gt;
Dependencies: called load_missing_constant(Manage::CarsController,
:Car)&lt;br&gt;
Dependencies: called load_missing_constant(Manage, :Car)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-15T14:23:44+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5383</number>
      <permalink>as-dependencies-resolver-broken-not-missing-constant-error</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport dependencies rails3.0rc</tag>
      <title>AS dependencies resolver broken: not missing constant error</title>
      <updated-at type="datetime">2010-08-15T14:23:46+01:00</updated-at>
      <user-id type="integer">99411</user-id>
      <version type="integer">1</version>
      <user-name>gucki</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5383</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Whilst this is almost a duplicate of #2283, it is subtly different in that it's more to do with how Ruby searches for constants. If you eliminate Rails from the equation and just do pure Ruby:

@@@ ruby
#!/usr/bin/ruby

module Manage; end
class Manage::Car; end

class Manage::CarsController
  def self.index; Car; end
end

p Manage::CarsController.index
@@@

This script will generate a NameError. However if you nest the class like so:

@@@
#!/usr/bin/ruby

module Manage; end
class Manage::Car; end

module Manage
  class CarsController
    def self.index; Car; end
  end
end

p Manage::CarsController.index
@@@

This will find the Manage::Car class correctly. Using this and applying it to your situation if you rewrite the controller as follows it will work:

@@@ ruby
module Manage  
  class CarsController &lt; ApplicationController
    def index
      Car.new
    end
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Whilst this is almost a duplicate of &lt;a href=
&quot;/projects/8994/tickets/2283&quot; title=&quot;Ticket #2283&quot;&gt;#2283&lt;/a&gt;, it is
subtly different in that it's more to do with how Ruby searches for
constants. If you eliminate Rails from the equation and just do
pure Ruby:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;#!/usr/bin/ruby

module Manage; end
class Manage::Car; end

class Manage::CarsController
  def self.index; Car; end
end

p Manage::CarsController.index&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This script will generate a NameError. However if you nest the
class like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;#!/usr/bin/ruby

module Manage; end
class Manage::Car; end

module Manage
  class CarsController
    def self.index; Car; end
  end
end

p Manage::CarsController.index&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This will find the Manage::Car class correctly. Using this and
applying it to your situation if you rewrite the controller as
follows it will work:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module Manage  
  class CarsController &amp;lt; ApplicationController
    def index
      Car.new
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-18T16:35:13+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5383</number>
      <permalink>as-dependencies-resolver-broken-not-missing-constant-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activesupport dependencies rails3.0rc</tag>
      <title>AS dependencies resolver broken: not missing constant error</title>
      <updated-at type="datetime">2010-08-18T16:35:19+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5383</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The main problem is that the behavior of rails is different when cache_classes is true/ false.

The following code should always work:

@@@
require 'rubygems'
require 'active_support'

module Aa
end

module Aa::Bb
  def self.lala
    Bb.new
  end
end

class Bb
  def initialize
    puts &quot;aa&quot;
  end
end

Aa::Bb.lala
@@@

It works, but only when cache_classes is true. When cache_classes is false, the following error occurs:

@@@
Aa is not missing constant Bb!
@@@

Doing something similar in a real project, I sometimes also get:

@@@
undefined method `new' for Aa::Bb:Module (NoMethodError)
@@@

To reproduce with rails master (3.1.0.beta) just create a new project then create the files [models/aa.rb models/bb.rb models/aa/bb.rb] (contents see above) and put the code &quot;Aa::Bb.lala&quot; in any controller action. Then compare the results with cache_classes set to true/false.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The main problem is that the behavior of rails is different when
cache_classes is true/ false.&lt;/p&gt;
&lt;p&gt;The following code should always work:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;require 'rubygems'
require 'active_support'

module Aa
end

module Aa::Bb
  def self.lala
    Bb.new
  end
end

class Bb
  def initialize
    puts &quot;aa&quot;
  end
end

Aa::Bb.lala&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It works, but only when cache_classes is true. When
cache_classes is false, the following error occurs:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Aa is not missing constant Bb!&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Doing something similar in a real project, I sometimes also
get:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;undefined method `new' for Aa::Bb:Module (NoMethodError)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;To reproduce with rails master (3.1.0.beta) just create a new
project then create the files [models/aa.rb models/bb.rb
models/aa/bb.rb] (contents see above) and put the code
&quot;Aa::Bb.lala&quot; in any controller action. Then compare the results
with cache_classes set to true/false.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-29T01:39:28+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5383</number>
      <permalink>as-dependencies-resolver-broken-not-missing-constant-error</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activesupport dependencies rails3.0rc</tag>
      <title>AS dependencies resolver broken: not missing constant error</title>
      <updated-at type="datetime">2010-09-29T01:39:31+01:00</updated-at>
      <user-id type="integer">99411</user-id>
      <version type="integer">3</version>
      <user-name>gucki</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5383</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
