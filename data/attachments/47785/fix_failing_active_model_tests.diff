From 87ae24510f387b4785e3c8a787ceef11c13455dd Mon Sep 17 00:00:00 2001
From: Chad Fowler <chad@chad-fowlers-mac-pro.local>
Date: Mon, 22 Sep 2008 14:30:05 -0600
Subject: [PATCH] Fixed failing tests for when mocha is not installed

---
 activemodel/test/observing_test.rb           |   14 ++++++++------
 activemodel/test/state_machine/event_test.rb |   18 ++++++++++--------
 2 files changed, 18 insertions(+), 14 deletions(-)

diff --git a/activemodel/test/observing_test.rb b/activemodel/test/observing_test.rb
index 6e124de..76ec524 100644
--- a/activemodel/test/observing_test.rb
+++ b/activemodel/test/observing_test.rb
@@ -107,12 +107,14 @@ class ObserverTest < ActiveModel::TestCase
     assert instance.send(:observed_classes).include?(ObservedModel), "ObservedModel not in #{instance.send(:observed_classes).inspect}"
   end
   
-  test "calls existing observer event" do
-    foo = Foo.new
-    FooObserver.instance.stub = stub
-    FooObserver.instance.stub.expects(:event_with).with(foo)
-    Foo.send(:changed)
-    Foo.send(:notify_observers, :on_spec, foo)
+  uses_mocha 'existing observer event' do
+    test "calls existing observer event" do
+      foo = Foo.new
+      FooObserver.instance.stub = stub
+      FooObserver.instance.stub.expects(:event_with).with(foo)
+      Foo.send(:changed)
+      Foo.send(:notify_observers, :on_spec, foo)
+    end
   end
   
   test "skips nonexistent observer event" do
diff --git a/activemodel/test/state_machine/event_test.rb b/activemodel/test/state_machine/event_test.rb
index 40b630d..32d9309 100644
--- a/activemodel/test/state_machine/event_test.rb
+++ b/activemodel/test/state_machine/event_test.rb
@@ -37,15 +37,17 @@ class EventBeingFiredTest < ActiveModel::TestCase
       event.fire(nil)
     end
   end
+  
+  uses_mocha 'state inspection' do
+    test 'should return the state of the first matching transition it finds' do
+      event = ActiveModel::StateMachine::Event.new(nil, :event) do
+        transitions :to => :closed, :from => [:open, :received]
+      end
 
-  test 'should return the state of the first matching transition it finds' do
-    event = ActiveModel::StateMachine::Event.new(nil, :event) do
-      transitions :to => :closed, :from => [:open, :received]
-    end
+      obj = stub
+      obj.stubs(:current_state).returns(:open)
 
-    obj = stub
-    obj.stubs(:current_state).returns(:open)
-
-    assert_equal :closed, event.fire(obj)
+      assert_equal :closed, event.fire(obj)
+    end
   end
 end
-- 
1.6.0.2

