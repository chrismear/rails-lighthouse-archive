From 78b1200ebd12637cd6a435633892006471738da8 Mon Sep 17 00:00:00 2001
From: Jon Buda <jon.buda@gmail.com>
Date: Tue, 27 Jul 2010 20:04:36 -0500
Subject: [PATCH] fixed joining of attributes when using find_or_create_by with multiple attributes through an association

---
 .../associations/association_collection.rb         |    2 +-
 .../associations/has_many_associations_test.rb     |    9 +++++++++
 2 files changed, 10 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index 4ce3b34..b5159ee 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -422,7 +422,7 @@ module ActiveRecord
           match = DynamicFinderMatch.match(method)
           if match && match.creator?
             attributes = match.attribute_names
-            return send(:"find_by_#{attributes.join('and')}", *args) || create(Hash[attributes.zip(args)])
+            return send(:"find_by_#{attributes.join('_and_')}", *args) || create(Hash[attributes.zip(args)])
           end
 
           if @target.respond_to?(method) || (!@reflection.klass.respond_to?(method) && Class.respond_to?(method))
diff --git a/activerecord/test/cases/associations/has_many_associations_test.rb b/activerecord/test/cases/associations/has_many_associations_test.rb
index 6fe737a..45795dd 100644
--- a/activerecord/test/cases/associations/has_many_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_associations_test.rb
@@ -166,6 +166,15 @@ class HasManyAssociationsTest < ActiveRecord::TestCase
     companies(:first_firm).readonly_clients.find(:all).each { |c| assert_raise(ActiveRecord::ReadOnlyRecord) { c.save!  } }
     companies(:first_firm).readonly_clients.find(:all).each { |c| assert c.readonly? }
   end
+  
+  def test_dynamic_find_or_create_from_two_attributes_using_an_association
+    author = authors(:david)
+    number_of_posts = Post.count
+    another = author.posts.find_or_create_by_title_and_body("Another Post","This is the Body")
+    assert_equal number_of_posts + 1, Post.count
+    assert_equal another, author.posts.find_or_create_by_title_and_body("Another Post","This is the Body")
+    assert !another.new_record?
+  end
 
   def test_cant_save_has_many_readonly_association
     authors(:david).readonly_comments.each { |c| assert_raise(ActiveRecord::ReadOnlyRecord) { c.save! } }
-- 
1.7.0.5

