<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">12714</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-13T05:14:41+01:00</created-at>
  <creator-id type="integer">52698</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6698</number>
  <permalink>rackrequestcontent_charset-is-always-blank-due-to-actiondispatchmimenegotationcontent_type</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Rack::Request#content_charset is always blank due to ActionDispatch::MimeNegotation#content_type</title>
  <updated-at type="datetime">2011-04-16T03:08:12+01:00</updated-at>
  <user-id type="integer">114903</user-id>
  <version type="integer">2</version>
  <user-name>laptopbatteries</user-name>
  <creator-name>Ryan D Johnson</creator-name>
  <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6698</url>
  <priority-name nil="true"></priority-name>
  <original-body>It looks like #4109 was intended to fix this in commit 77a2a3d9b3aa461437ced326ea4a70112a8c68ed -- but the content_type method  introduced there doesn't do what it needs to. Probably it should be omitted in favor of letting Rack::Request#content_type do its normal thing.

Here's an overview of the problem: 

ActionDispatch::Request includes ActionDispatch::Http::MimeNegotiation, which overrides content_type from Rack::Request

Rack::Requset#content_type just dumps env['CONTENT_TYPE'], which will include the charset: 

    def content_type
      content_type = @env['CONTENT_TYPE']
      content_type.nil? || content_type.empty? ? nil : content_type
    end

ActionDispatch::Http::MimeNegotiation does a Mime::Type#lookup as content_mime_type (the Mime::Type used to come back directly from #content_type; that's what 77a2a3 fixed, returning the mime type string instead). 

      def content_mime_type
        @env[&quot;action_dispatch.request.content_type&quot;] ||= begin
          if @env['CONTENT_TYPE'] =~ /^([^,\;]*)/
            Mime::Type.lookup($1.strip.downcase)
          else
            nil
          end
        end
      end

      def content_type
        content_mime_type &amp;&amp; content_mime_type.to_s
      end

Unfortunately, although the new content_type implementation returns a string, it's stripped of the charset. This renders Rack::Request#content_charset (and #media_type_params) useless: 

    def media_type_params
      return {} if content_type.nil?
      Hash[*content_type.split(/\s*[;,]\s*/)[1..-1].
        collect { |s| s.split('=', 2) }.
        map { |k,v| [k.downcase, v] }.flatten]
    end

    def content_charset
      media_type_params['charset']
    end

It would be really great if request.body could end up with the proper encoding at the end of the day. But even if that isn't going to happen right away, at least request.raw_post.force_encoding( request.content_charset ) should work. As is, I have to reparse the request.env['CONTENT_TYPE'] to get the charset.

Attaching a patch which implements the suggestion. The unit test modification leads to a failure without the lib change and passes with it. All other action pack tests pass with the patch.</original-body>
  <latest-body>It looks like #4109 was intended to fix this in commit 77a2a3d9b3aa461437ced326ea4a70112a8c68ed -- but the content_type method  introduced there doesn't do what it needs to. Probably it should be omitted in favor of letting Rack::Request#content_type do its normal thing.

Here's an overview of the problem: 

ActionDispatch::Request includes ActionDispatch::Http::MimeNegotiation, which overrides content_type from Rack::Request

Rack::Requset#content_type just dumps env['CONTENT_TYPE'], which will include the charset: 

    def content_type
      content_type = @env['CONTENT_TYPE']
      content_type.nil? || content_type.empty? ? nil : content_type
    end

ActionDispatch::Http::MimeNegotiation does a Mime::Type#lookup as content_mime_type (the Mime::Type used to come back directly from #content_type; that's what 77a2a3 fixed, returning the mime type string instead). 

      def content_mime_type
        @env[&quot;action_dispatch.request.content_type&quot;] ||= begin
          if @env['CONTENT_TYPE'] =~ /^([^,\;]*)/
            Mime::Type.lookup($1.strip.downcase)
          else
            nil
          end
        end
      end

      def content_type
        content_mime_type &amp;&amp; content_mime_type.to_s
      end

Unfortunately, although the new content_type implementation returns a string, it's stripped of the charset. This renders Rack::Request#content_charset (and #media_type_params) useless: 

    def media_type_params
      return {} if content_type.nil?
      Hash[*content_type.split(/\s*[;,]\s*/)[1..-1].
        collect { |s| s.split('=', 2) }.
        map { |k,v| [k.downcase, v] }.flatten]
    end

    def content_charset
      media_type_params['charset']
    end

It would be really great if request.body could end up with the proper encoding at the end of the day. But even if that isn't going to happen right away, at least request.raw_post.force_encoding( request.content_charset ) should work. As is, I have to reparse the request.env['CONTENT_TYPE'] to get the charset.

Attaching a patch which implements the suggestion. The unit test modification leads to a failure without the lib change and passes with it. All other action pack tests pass with the patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It looks like &lt;a href=&quot;/projects/8994/tickets/4109&quot; title=
&quot;Ticket #4109&quot;&gt;#4109&lt;/a&gt; was intended to fix this in commit
77a2a3d9b3aa461437ced326ea4a70112a8c68ed -- but the content_type
method introduced there doesn't do what it needs to. Probably it
should be omitted in favor of letting Rack::Request#content_type do
its normal thing.&lt;/p&gt;
&lt;p&gt;Here's an overview of the problem:&lt;/p&gt;
&lt;p&gt;ActionDispatch::Request includes
ActionDispatch::Http::MimeNegotiation, which overrides content_type
from Rack::Request&lt;/p&gt;
&lt;p&gt;Rack::Requset#content_type just dumps env['CONTENT_TYPE'], which
will include the charset:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def content_type
  content_type = @env['CONTENT_TYPE']
  content_type.nil? || content_type.empty? ? nil : content_type
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ActionDispatch::Http::MimeNegotiation does a Mime::Type#lookup
as content_mime_type (the Mime::Type used to come back directly
from #content_type; that's what 77a2a3 fixed, returning the mime
type string instead).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def content_mime_type
    @env[&quot;action_dispatch.request.content_type&quot;] ||= begin
      if @env['CONTENT_TYPE'] =~ /^([^,\;]*)/
        Mime::Type.lookup($1.strip.downcase)
      else
        nil
      end
    end
  end

  def content_type
    content_mime_type &amp;amp;&amp;amp; content_mime_type.to_s
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unfortunately, although the new content_type implementation
returns a string, it's stripped of the charset. This renders
Rack::Request#content_charset (and #media_type_params) useless:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def media_type_params
  return {} if content_type.nil?
  Hash[*content_type.split(/\s*[;,]\s*/)[1..-1].
    collect { |s| s.split('=', 2) }.
    map { |k,v| [k.downcase, v] }.flatten]
end

def content_charset
  media_type_params['charset']
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It would be really great if request.body could end up with the
proper encoding at the end of the day. But even if that isn't going
to happen right away, at least request.raw_post.force_encoding(
request.content_charset ) should work. As is, I have to reparse the
request.env['CONTENT_TYPE'] to get the charset.&lt;/p&gt;
&lt;p&gt;Attaching a patch which implements the suggestion. The unit test
modification leads to a failure without the lib change and passes
with it. All other action pack tests pass with the patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It looks like #4109 was intended to fix this in commit 77a2a3d9b3aa461437ced326ea4a70112a8c68ed -- but the content_type method  introduced there doesn't do what it needs to. Probably it should be omitted in favor of letting Rack::Request#content_type do its normal thing.

Here's an overview of the problem: 

ActionDispatch::Request includes ActionDispatch::Http::MimeNegotiation, which overrides content_type from Rack::Request

Rack::Requset#content_type just dumps env['CONTENT_TYPE'], which will include the charset: 

    def content_type
      content_type = @env['CONTENT_TYPE']
      content_type.nil? || content_type.empty? ? nil : content_type
    end

ActionDispatch::Http::MimeNegotiation does a Mime::Type#lookup as content_mime_type (the Mime::Type used to come back directly from #content_type; that's what 77a2a3 fixed, returning the mime type string instead). 

      def content_mime_type
        @env[&quot;action_dispatch.request.content_type&quot;] ||= begin
          if @env['CONTENT_TYPE'] =~ /^([^,\;]*)/
            Mime::Type.lookup($1.strip.downcase)
          else
            nil
          end
        end
      end

      def content_type
        content_mime_type &amp;&amp; content_mime_type.to_s
      end

Unfortunately, although the new content_type implementation returns a string, it's stripped of the charset. This renders Rack::Request#content_charset (and #media_type_params) useless: 

    def media_type_params
      return {} if content_type.nil?
      Hash[*content_type.split(/\s*[;,]\s*/)[1..-1].
        collect { |s| s.split('=', 2) }.
        map { |k,v| [k.downcase, v] }.flatten]
    end

    def content_charset
      media_type_params['charset']
    end

It would be really great if request.body could end up with the proper encoding at the end of the day. But even if that isn't going to happen right away, at least request.raw_post.force_encoding( request.content_charset ) should work. As is, I have to reparse the request.env['CONTENT_TYPE'] to get the charset.

Attaching a patch which implements the suggestion. The unit test modification leads to a failure without the lib change and passes with it. All other action pack tests pass with the patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It looks like &lt;a href=&quot;/projects/8994/tickets/4109&quot; title=
&quot;Ticket #4109&quot;&gt;#4109&lt;/a&gt; was intended to fix this in commit
77a2a3d9b3aa461437ced326ea4a70112a8c68ed -- but the content_type
method introduced there doesn't do what it needs to. Probably it
should be omitted in favor of letting Rack::Request#content_type do
its normal thing.&lt;/p&gt;
&lt;p&gt;Here's an overview of the problem:&lt;/p&gt;
&lt;p&gt;ActionDispatch::Request includes
ActionDispatch::Http::MimeNegotiation, which overrides content_type
from Rack::Request&lt;/p&gt;
&lt;p&gt;Rack::Requset#content_type just dumps env['CONTENT_TYPE'], which
will include the charset:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def content_type
  content_type = @env['CONTENT_TYPE']
  content_type.nil? || content_type.empty? ? nil : content_type
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;ActionDispatch::Http::MimeNegotiation does a Mime::Type#lookup
as content_mime_type (the Mime::Type used to come back directly
from #content_type; that's what 77a2a3 fixed, returning the mime
type string instead).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def content_mime_type
    @env[&quot;action_dispatch.request.content_type&quot;] ||= begin
      if @env['CONTENT_TYPE'] =~ /^([^,\;]*)/
        Mime::Type.lookup($1.strip.downcase)
      else
        nil
      end
    end
  end

  def content_type
    content_mime_type &amp;amp;&amp;amp; content_mime_type.to_s
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Unfortunately, although the new content_type implementation
returns a string, it's stripped of the charset. This renders
Rack::Request#content_charset (and #media_type_params) useless:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def media_type_params
  return {} if content_type.nil?
  Hash[*content_type.split(/\s*[;,]\s*/)[1..-1].
    collect { |s| s.split('=', 2) }.
    map { |k,v| [k.downcase, v] }.flatten]
end

def content_charset
  media_type_params['charset']
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It would be really great if request.body could end up with the
proper encoding at the end of the day. But even if that isn't going
to happen right away, at least request.raw_post.force_encoding(
request.content_charset ) should work. As is, I have to reparse the
request.env['CONTENT_TYPE'] to get the charset.&lt;/p&gt;
&lt;p&gt;Attaching a patch which implements the suggestion. The unit test
modification leads to a failure without the lib change and passes
with it. All other action pack tests pass with the patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-13T05:14:41+01:00</created-at>
      <creator-id type="integer">52698</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6698</number>
      <permalink>rackrequestcontent_charset-is-always-blank-due-to-actiondispatchmimenegotationcontent_type</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rack::Request#content_charset is always blank due to ActionDispatch::MimeNegotation#content_type</title>
      <updated-at type="datetime">2011-04-13T05:14:48+01:00</updated-at>
      <user-id type="integer">52698</user-id>
      <version type="integer">1</version>
      <user-name>Ryan D Johnson</user-name>
      <creator-name>Ryan D Johnson</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6698</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">12714</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;a href=&quot;http://www.rolexreplicascollection.net/&quot;&gt;rolex watches&lt;/a&gt; are very common in our &lt;a href=&quot;http://www.rolexreplicascollection.net/audemars-piguet-watches-c-114.html&quot;&gt;Audemars Piguet Replicas&lt;/a&gt;  lifes, there are quite several well known &lt;a href=&quot;http://www.freereplicawatches.com&quot;&gt;wrist watches&lt;/a&gt;  brands, the majority &lt;a href=&quot;http://www.rolexreplicascollection.net/gucci-watches-c-117.html&quot;&gt;Gucci Replicas&lt;/a&gt;  of them are Swiss bands,  &lt;a href=&quot;http://www.rolexreplicascollection.net/panerai-watches-c-118.html&quot;&gt;Panerai Replicas&lt;/a&gt; ,and it is &lt;a href=&quot;http://www.rolexreplicascollection.net/omega-watches-c-127.html&quot;&gt;Omega Replicas&lt;/a&gt; unlikely, unless the &lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;replica watches&lt;/a&gt; 's owner is filthy rich and equally careless &lt;a href=&quot;http://www.replicawatches.uk.net/breitling-watches-c-11.html&quot;&gt;replica breitling&lt;/a&gt; with his, Even the highest quality, Some &lt;a href=&quot;http://www.replicawatches.uk.net/omega-watches-c-27.html&quot;&gt;replica omega&lt;/a&gt; are believed to be to acquire luxury wrist that are &lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;Replica Concord&lt;/a&gt; founded of gold or platinum or other high priced materials. placing on these wrist &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;fake rolex&lt;/a&gt; certainly will make us stand out from other &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;Swiss Replica Watch&lt;/a&gt; people.Does everyone can afford these genuine, &lt;a href=&quot;http://www.replicawatches.uk.net/tag-heuer-watches-c-35.html&quot;&gt;replica tag heuer&lt;/a&gt; Taking your or &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch&lt;/a&gt; ? When should expensive &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch uk&lt;/a&gt; , before you take your precious?</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.rolexreplicascollection.net/&quot;&gt;rolex
watches&lt;/a&gt; are very common in our &lt;a href=
&quot;http://www.rolexreplicascollection.net/audemars-piguet-watches-c-114.html&quot;&gt;
Audemars Piguet Replicas&lt;/a&gt; lifes, there are quite several well
known &lt;a href=&quot;http://www.freereplicawatches.com&quot;&gt;wrist watches&lt;/a&gt;
brands, the majority &lt;a href=
&quot;http://www.rolexreplicascollection.net/gucci-watches-c-117.html&quot;&gt;Gucci
Replicas&lt;/a&gt; of them are Swiss bands, &lt;a href=
&quot;http://www.rolexreplicascollection.net/panerai-watches-c-118.html&quot;&gt;
Panerai Replicas&lt;/a&gt; ,and it is &lt;a href=
&quot;http://www.rolexreplicascollection.net/omega-watches-c-127.html&quot;&gt;Omega
Replicas&lt;/a&gt; unlikely, unless the &lt;a href=
&quot;http://www.replica-watches-uk.net/&quot;&gt;replica watches&lt;/a&gt; 's owner
is filthy rich and equally careless &lt;a href=
&quot;http://www.replicawatches.uk.net/breitling-watches-c-11.html&quot;&gt;replica
breitling&lt;/a&gt; with his, Even the highest quality, Some &lt;a href=
&quot;http://www.replicawatches.uk.net/omega-watches-c-27.html&quot;&gt;replica
omega&lt;/a&gt; are believed to be to acquire luxury wrist that are
&lt;a href=&quot;http://www.replica-watches-uk.net/&quot;&gt;Replica Concord&lt;/a&gt;
founded of gold or platinum or other high priced materials. placing
on these wrist &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;fake
rolex&lt;/a&gt; certainly will make us stand out from other &lt;a href=
&quot;http://www.replicawatches.uk.net/&quot;&gt;Swiss Replica Watch&lt;/a&gt;
people.Does everyone can afford these genuine, &lt;a href=
&quot;http://www.replicawatches.uk.net/tag-heuer-watches-c-35.html&quot;&gt;replica
tag heuer&lt;/a&gt; Taking your or &lt;a href=
&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch&lt;/a&gt; ? When should
expensive &lt;a href=&quot;http://www.replicawatches.uk.net/&quot;&gt;replica watch
uk&lt;/a&gt; , before you take your precious?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-16T03:08:06+01:00</created-at>
      <creator-id type="integer">52698</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6698</number>
      <permalink>rackrequestcontent_charset-is-always-blank-due-to-actiondispatchmimenegotationcontent_type</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rack::Request#content_charset is always blank due to ActionDispatch::MimeNegotation#content_type</title>
      <updated-at type="datetime">2011-04-16T03:08:12+01:00</updated-at>
      <user-id type="integer">114903</user-id>
      <version type="integer">2</version>
      <user-name>laptopbatteries</user-name>
      <creator-name>Ryan D Johnson</creator-name>
      <assigned-user-name>Yehuda Katz (wycats)</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6698</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f02a9e2db4f88df6e494300c4554378c989f01e0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-04-13T05:14:42+01:00</created-at>
      <filename>request_content_charset_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">1010849</id>
      <size type="integer">1188</size>
      <uploader-id type="integer">52698</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/1010849/request_content_charset_fix.diff</url>
    </attachment>
  </attachments>
</ticket>
