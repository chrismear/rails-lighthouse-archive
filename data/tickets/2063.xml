<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-24T22:18:22+00:00</created-at>
  <creator-id type="integer">39170</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2063</number>
  <permalink>choosing-join-operator-for-hash-joins</permalink>
  <priority type="integer">1294</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord joins patch</tag>
  <title>Choosing join operator for hash joins</title>
  <updated-at type="datetime">2009-03-09T16:56:42+00:00</updated-at>
  <user-id type="integer">39170</user-id>
  <version type="integer">5</version>
  <user-name>Steffen Bartsch</user-name>
  <creator-name>Steffen Bartsch</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2063</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hash join parameters are great for named_scopes. In particular, if those are about to be chained. The developer can easily add additional joins even if joins in earlier named_scopes are unknown at coding time.  A good example would be an authorization plugin, limiting the scope of queries according to authorization rules that are unknown beforehand (we are doing just that in [declarative_authorization](http://github.com/stffn/declarative_authorization)).

Only being able to use INNER JOINs cripples hash joins, though.  OR'ed authorization rules (to stay with the example) won't work if associations are involved as INNER JOIN forces every joined table to have at least one match.

The supplied (very simple) patch adds a :join_operator parameter to find, letting the caller choose if the joins should use :inner_join or :left_join and defaulting to :inner_join, of course.</original-body>
  <latest-body>Hash join parameters are great for named_scopes. In particular, if those are about to be chained. The developer can easily add additional joins even if joins in earlier named_scopes are unknown at coding time.  A good example would be an authorization plugin, limiting the scope of queries according to authorization rules that are unknown beforehand (we are doing just that in [declarative_authorization](http://github.com/stffn/declarative_authorization)).

Only being able to use INNER JOINs cripples hash joins, though.  OR'ed authorization rules (to stay with the example) won't work if associations are involved as INNER JOIN forces every joined table to have at least one match.

The supplied (very simple) patch adds a :join_operator parameter to find, letting the caller choose if the joins should use :inner_join or :left_join and defaulting to :inner_join, of course.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hash join parameters are great for named_scopes. In particular,
if those are about to be chained. The developer can easily add
additional joins even if joins in earlier named_scopes are unknown
at coding time. A good example would be an authorization plugin,
limiting the scope of queries according to authorization rules that
are unknown beforehand (we are doing just that in &lt;a href=&quot;http://github.com/stffn/declarative_authorization&quot;&gt;declarative_authorization&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Only being able to use INNER JOINs cripples hash joins, though.
OR'ed authorization rules (to stay with the example) won't work if
associations are involved as INNER JOIN forces every joined table
to have at least one match.&lt;/p&gt;
&lt;p&gt;The supplied (very simple) patch adds a :join_operator parameter
to find, letting the caller choose if the joins should use
:inner_join or :left_join and defaulting to :inner_join, of
course.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hash join parameters are great for named_scopes. In particular, if those are about to be chained. The developer can easily add additional joins even if joins in earlier named_scopes are unknown at coding time.  A good example would be an authorization plugin, limiting the scope of queries according to authorization rules that are unknown beforehand (we are doing just that in [declarative_authorization](http://github.com/stffn/declarative_authorization)).

Only being able to use INNER JOINs cripples hash joins, though.  OR'ed authorization rules (to stay with the example) won't work if associations are involved as INNER JOIN forces every joined table to have at least one match.

The supplied (very simple) patch adds a :join_operator parameter to find, letting the caller choose if the joins should use :inner_join or :left_join and defaulting to :inner_join, of course.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hash join parameters are great for named_scopes. In particular,
if those are about to be chained. The developer can easily add
additional joins even if joins in earlier named_scopes are unknown
at coding time. A good example would be an authorization plugin,
limiting the scope of queries according to authorization rules that
are unknown beforehand (we are doing just that in &lt;a href=&quot;http://github.com/stffn/declarative_authorization&quot;&gt;declarative_authorization&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Only being able to use INNER JOINs cripples hash joins, though.
OR'ed authorization rules (to stay with the example) won't work if
associations are involved as INNER JOIN forces every joined table
to have at least one match.&lt;/p&gt;
&lt;p&gt;The supplied (very simple) patch adds a :join_operator parameter
to find, letting the caller choose if the joins should use
:inner_join or :left_join and defaulting to :inner_join, of
course.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-24T22:18:22+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2063</number>
      <permalink>choosing-join-operator-for-hash-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord joins patch</tag>
      <title>Choosing join operator for hash joins</title>
      <updated-at type="datetime">2009-02-24T22:18:27+00:00</updated-at>
      <user-id type="integer">39170</user-id>
      <version type="integer">1</version>
      <user-name>Steffen Bartsch</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2063</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't really like the API for this as it still suffers from the restriction that all joins have to have the same operator.  If we were going to make this more flexible, we should make it so that the operators can be specified on a per join basis.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't really like the API for this as it still suffers from
the restriction that all joins have to have the same operator. If
we were going to make this more flexible, we should make it so that
the operators can be specified on a per join basis.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-02T05:03:26+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2063</number>
      <permalink>choosing-join-operator-for-hash-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord joins patch</tag>
      <title>Choosing join operator for hash joins</title>
      <updated-at type="datetime">2009-03-02T05:03:30+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2063</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I understand this objection.  The syntax for per-join selection of join operators would be quite ugly, though.  But it is really not helpful to resort to :include for LEFT JOINs, so what about this:

@@@ ruby
Project.find(:all,
:joins =&gt; {
  :third_parties =&gt; {:branches =&gt; :employees}},
  :project_managers
}

:joins =&gt; {
  [:left_join, :third_parties] =&gt; {
     :branches =&gt; :employees}},
  [:left_join, :project_managers]
}
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I understand this objection. The syntax for per-join selection
of join operators would be quite ugly, though. But it is really not
helpful to resort to :include for LEFT JOINs, so what about
this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Project.find(:all,
:joins =&amp;gt; {
  :third_parties =&amp;gt; {:branches =&amp;gt; :employees}},
  :project_managers
}

:joins =&amp;gt; {
  [:left_join, :third_parties] =&amp;gt; {
     :branches =&amp;gt; :employees}},
  [:left_join, :project_managers]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-02T08:26:11+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2063</number>
      <permalink>choosing-join-operator-for-hash-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord joins patch</tag>
      <title>Choosing join operator for hash joins</title>
      <updated-at type="datetime">2009-03-02T08:26:17+00:00</updated-at>
      <user-id type="integer">39170</user-id>
      <version type="integer">3</version>
      <user-name>Steffen Bartsch</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2063</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yeah, that's quite ugly as you mentioned.  Can we hold off making a
call till after 2.3?  I agree that this is something we have to look
at, just don't think we should block a release on it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah, that's quite ugly as you mentioned. Can we hold off making
a call till after 2.3? I agree that this is something we have to
look at, just don't think we should block a release on it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-09T04:17:19+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2063</number>
      <permalink>choosing-join-operator-for-hash-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord joins patch</tag>
      <title>Choosing join operator for hash joins</title>
      <updated-at type="datetime">2009-03-09T04:17:20+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">4</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2063</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Yes, this needs some more discussion.  Wasn't meant to block 2.3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, this needs some more discussion. Wasn't meant to block
2.3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-09T16:56:37+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2063</number>
      <permalink>choosing-join-operator-for-hash-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord joins patch</tag>
      <title>Choosing join operator for hash joins</title>
      <updated-at type="datetime">2009-03-09T16:56:42+00:00</updated-at>
      <user-id type="integer">39170</user-id>
      <version type="integer">5</version>
      <user-name>Steffen Bartsch</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2063</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>974e8392565f4eba978c4b1ab78ee70e67d5460d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-02-24T22:18:22+00:00</created-at>
      <filename>add_join_operator_option.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">92545</id>
      <size type="integer">4755</size>
      <uploader-id type="integer">39170</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/92545/add_join_operator_option.diff</url>
    </attachment>
  </attachments>
</ticket>
