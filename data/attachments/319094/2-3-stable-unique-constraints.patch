From f259b38eee1b2a14507868e835f2ac187263a616 Mon Sep 17 00:00:00 2001
From: Jordan Brough <jordan@animoto.com>
Date: Wed, 11 Nov 2009 13:31:34 -0700
Subject: [PATCH] Friendly ActiveRecord error handling for db-enforced unique constraints

---
 activerecord/lib/active_record.rb                  |    1 +
 activerecord/lib/active_record/base.rb             |    4 ++
 .../connection_adapters/abstract_adapter.rb        |    7 +++
 .../connection_adapters/mysql_adapter.rb           |   12 ++++++
 .../connection_adapters/postgresql_adapter.rb      |    7 +++
 .../connection_adapters/sqlite_adapter.rb          |    7 +++
 activerecord/lib/active_record/locale/en.yml       |    2 +
 .../lib/active_record/unique_constraints.rb        |   24 ++++++++++++
 activerecord/test/cases/adapter_test.rb            |   35 +++++++++++++++++
 activerecord/test/cases/unique_constraints_test.rb |   40 ++++++++++++++++++++
 activerecord/test/models/unique_item.rb            |    2 +
 activerecord/test/schema/schema.rb                 |   15 +++++++
 12 files changed, 156 insertions(+), 0 deletions(-)
 create mode 100644 activerecord/lib/active_record/unique_constraints.rb
 create mode 100644 activerecord/test/cases/unique_constraints_test.rb
 create mode 100644 activerecord/test/models/unique_item.rb

diff --git a/activerecord/lib/active_record.rb b/activerecord/lib/active_record.rb
index 2f8c5c7..8469255 100644
--- a/activerecord/lib/active_record.rb
+++ b/activerecord/lib/active_record.rb
@@ -68,6 +68,7 @@ module ActiveRecord
   autoload :TestCase, 'active_record/test_case'
   autoload :Timestamp, 'active_record/timestamp'
   autoload :Transactions, 'active_record/transactions'
+  autoload :UniqueConstraints, 'active_record/unique_constraints'
   autoload :Validations, 'active_record/validations'
 
   module Locking
diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index d6b264c..1fe6bf8 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -3177,6 +3177,10 @@ module ActiveRecord #:nodoc:
     include AutosaveAssociation, NestedAttributes
 
     include Aggregations, Transactions, Reflection, Batches, Calculations, Serialization
+
+    # UniqueConstraints needs to be included after Transactions, because we need #save_with_unique_constraints
+    # to rescue after the transaction has been resolved for postgres.
+    include UniqueConstraints
   end
 end
 
diff --git a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
index 6b7b363..6adea19 100755
--- a/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
@@ -197,6 +197,13 @@ module ActiveRecord
         end
       end
 
+      # given an ActiveRecord::RecordNotUnique exception and a table name this returns the index whose
+      # unique constraint was violated, or nil if it can't determine the index
+      def index_for_record_not_unique(not_unique_exception, table_name) #:nodoc:
+        # override in derived class
+        nil
+      end
+
       protected
         def log(sql, name)
           if block_given?
diff --git a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
index 5414a1d..635a8fc 100644
--- a/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/mysql_adapter.rb
@@ -571,6 +571,18 @@ module ActiveRecord
         where_sql
       end
 
+      def index_for_record_not_unique(exception, table_name) #:nodoc:
+        case exception.message
+        when /Duplicate entry.*for key (\d+)/
+          index_position = $1.to_i
+          # minus two b/c mysql message is one-based + rails excludes primary key index from indexes list
+          indexes(table_name)[index_position - 2]
+        when /Duplicate entry.*for key '(\w+)'/
+          index_name = $1
+          indexes(table_name).detect { |i| i.name == index_name }
+        end
+      end
+
       protected
 
         def translate_exception(exception, message)
diff --git a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
index b1cac88..c313082 100644
--- a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
@@ -941,6 +941,13 @@ module ActiveRecord
         sql.replace "SELECT * FROM (#{sql}) AS id_list ORDER BY #{order}"
       end
 
+      def index_for_record_not_unique(exception, table_name) #:nodoc:
+        if match = exception.message.match(/unique constraint "(\w+)"/)
+          index_name = match[1]
+          indexes(table_name).detect { |i| i.name == index_name }
+        end
+      end
+
       protected
         # Returns the version of the connected PostgreSQL version.
         def postgresql_version
diff --git a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
index 79eea1d..31519f1 100644
--- a/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/sqlite_adapter.rb
@@ -315,6 +315,13 @@ module ActiveRecord
         "INSERT INTO #{table_name} VALUES(NULL)"
       end
 
+      def index_for_record_not_unique(exception, table_name) #:nodoc:
+        if match = exception.message.match(/column(?:s)? (.*) (?:is|are) not unique/)
+          index_columns = match[1].split(', ')
+          indexes(table_name).detect { |i| i.columns == index_columns }
+        end
+      end
+
       protected
         def select(sql, name = nil) #:nodoc:
           execute(sql, name).map do |row|
diff --git a/activerecord/lib/active_record/locale/en.yml b/activerecord/lib/active_record/locale/en.yml
index 2813524..a7dec95 100644
--- a/activerecord/lib/active_record/locale/en.yml
+++ b/activerecord/lib/active_record/locale/en.yml
@@ -15,6 +15,8 @@ en:
         too_short: "is too short (minimum is {{count}} characters)"
         wrong_length: "is the wrong length (should be {{count}} characters)"
         taken: "has already been taken"
+        taken_multiple: "has already been taken for {{context}}"
+        taken_generic: "Unique requirement not met"
         not_a_number: "is not a number"
         greater_than: "must be greater than {{count}}"
         greater_than_or_equal_to: "must be greater than or equal to {{count}}"
diff --git a/activerecord/lib/active_record/unique_constraints.rb b/activerecord/lib/active_record/unique_constraints.rb
new file mode 100644
index 0000000..99e6353
--- /dev/null
+++ b/activerecord/lib/active_record/unique_constraints.rb
@@ -0,0 +1,24 @@
+module ActiveRecord
+  # See ActiveRecord::Transactions::ClassMethods for documentation.
+  module UniqueConstraints
+    def self.included(base)
+      base.class_eval do
+        alias_method_chain :save, :unique_constraints
+      end
+    end
+
+    def save_with_unique_constraints(perform_validation = true) #:nodoc:
+      save_without_unique_constraints(perform_validation)
+    rescue ActiveRecord::RecordNotUnique => e
+      index = connection.index_for_record_not_unique(e.original_exception, self.class.table_name)
+      if !index
+        errors.add_to_base(I18n.translate(:'activerecord.errors.messages.taken_generic'))
+      elsif index.columns.size == 1
+        errors.add(index.columns.first, :taken, :value => attributes[index.columns.first])
+      else
+        errors.add(index.columns.first, :taken_multiple, :context => index.columns.slice(1..-1).join('/'), :value => attributes[index.columns.first])
+      end
+      false
+    end
+  end
+end
\ No newline at end of file
diff --git a/activerecord/test/cases/adapter_test.rb b/activerecord/test/cases/adapter_test.rb
index 4797112..0883ea0 100644
--- a/activerecord/test/cases/adapter_test.rb
+++ b/activerecord/test/cases/adapter_test.rb
@@ -157,4 +157,39 @@ class AdapterTest < ActiveRecord::TestCase
       end
     end
   end
+
+  # tests for db-enforced unique constraints
+  unique_scenarios = {
+    :single         => {:sql => "INSERT INTO unique_items(uniq) VALUES('abc')",
+                        :expected => ['uniq']},
+    :single_named   => {:sql => "INSERT INTO unique_items(uniq_named) VALUES('abc')",
+                        :expected => ['uniq_named']},
+    :multiple       => {:sql => "INSERT INTO unique_items(uniq_1, uniq_2, uniq_3) VALUES('a', 'b', 'c')",
+                        :expected => ['uniq_1', 'uniq_2', 'uniq_3']},
+    :multiple_named => {:sql => "INSERT INTO unique_items(uniq_1_named, uniq_2_named, uniq_3_named) VALUES('a', 'b', 'c')",
+                        :expected => ['uniq_1_named', 'uniq_2_named', 'uniq_3_named']}
+  }
+  unique_scenarios.each do |name, data|
+    test "finds index for unique constraint #{name}" do
+      @connection.execute data[:sql]
+      exception = get_exception(ActiveRecord::RecordNotUnique) do
+        @connection.execute data[:sql]
+      end
+      # postgres can't query indexes until transaction is rolled back
+      @connection.rollback_db_transaction if current_adapter?(:PostgreSQLAdapter)
+      assert_equal data[:expected], @connection.index_for_record_not_unique(exception, 'unique_items').columns
+    end
+  end
+
+  protected
+
+  def get_exception(expected_exception)
+    begin
+      yield
+    rescue expected_exception => e
+      e
+    else
+      flunk "Expected #{expected_exception} exception"
+    end
+  end
 end
diff --git a/activerecord/test/cases/unique_constraints_test.rb b/activerecord/test/cases/unique_constraints_test.rb
new file mode 100644
index 0000000..2b5d0ee
--- /dev/null
+++ b/activerecord/test/cases/unique_constraints_test.rb
@@ -0,0 +1,40 @@
+require "cases/helper"
+require 'models/unique_item'
+
+class UniquenessValidationTest < ActiveRecord::TestCase
+
+  def test_validate_uniqueness_on_create
+    valid_item = UniqueItem.create!(:uniq => 'abc')
+    invalid_item = UniqueItem.create(:uniq => 'abc')
+    assert_equal "has already been taken", invalid_item.errors[:uniq]
+  end
+
+  def test_validate_uniqueness_on_save
+    item_1 = UniqueItem.create!(:uniq => 'abc')
+    item_2 = UniqueItem.create!(:uniq => 'xyz')
+    item_2.uniq = item_1.uniq
+    item_2.save
+    assert_equal "has already been taken", item_2.errors[:uniq]
+  end
+
+  def test_validate_uniqueness_on_update
+    item_1 = UniqueItem.create!(:uniq => 'abc')
+    item_2 = UniqueItem.create!(:uniq => 'xyz')
+    item_2.update_attributes(:uniq => item_1.uniq)
+    assert_equal "has already been taken", item_2.errors[:uniq]
+  end
+
+  def test_validate_uniqueness_multiple
+    valid_item = UniqueItem.create!(:uniq_1 => 'a', :uniq_2 => 'b', :uniq_3 => 'c')
+    invalid_item = UniqueItem.create(:uniq_1 => 'a', :uniq_2 => 'b', :uniq_3 => 'c')
+    assert_equal "has already been taken for uniq_2/uniq_3", invalid_item.errors[:uniq_1]
+  end
+
+  def test_validate_uniqueness_generic
+    ActiveRecord::Base.connection.expects(:index_for_record_not_unique).returns(nil)
+    valid_item = UniqueItem.create!(:uniq_1 => 'a', :uniq_2 => 'b', :uniq_3 => 'c')
+    invalid_item = UniqueItem.create(:uniq_1 => 'a', :uniq_2 => 'b', :uniq_3 => 'c')
+    assert_equal "Unique requirement not met", invalid_item.errors[:base]
+  end
+
+end
\ No newline at end of file
diff --git a/activerecord/test/models/unique_item.rb b/activerecord/test/models/unique_item.rb
new file mode 100644
index 0000000..3c6f6f0
--- /dev/null
+++ b/activerecord/test/models/unique_item.rb
@@ -0,0 +1,2 @@
+class UniqueItem < ActiveRecord::Base
+end
\ No newline at end of file
diff --git a/activerecord/test/schema/schema.rb b/activerecord/test/schema/schema.rb
index 984c5ba..8d64e51 100644
--- a/activerecord/test/schema/schema.rb
+++ b/activerecord/test/schema/schema.rb
@@ -479,6 +479,21 @@ ActiveRecord::Schema.define do
     end
   end
 
+  create_table :unique_items, :force => true do |t|
+    t.string :uniq
+    t.string :uniq_1
+    t.string :uniq_2
+    t.string :uniq_3
+    t.string :uniq_named
+    t.string :uniq_1_named
+    t.string :uniq_2_named
+    t.string :uniq_3_named
+  end
+  add_index :unique_items, [:uniq], :unique => true
+  add_index :unique_items, [:uniq_named], :unique => true, :name => 'unique_named_single_index'
+  add_index :unique_items, [:uniq_1, :uniq_2, :uniq_3], :unique => true
+  add_index :unique_items, [:uniq_1_named, :uniq_2_named, :uniq_3_named], :unique => true, :name => 'unique_named_multiple_index'
+
   except 'SQLite' do
     # fk_test_has_fk should be before fk_test_has_pk
     create_table :fk_test_has_fk, :force => true do |t|
-- 
1.6.1.2

