From 6ff0f0e2766d1200763d0a58682f23cc92391de6 Mon Sep 17 00:00:00 2001
From: pivotal <pivotal@camp.flood.pivotallabs.com>
Date: Tue, 28 Jul 2009 19:07:21 -0700
Subject: [PATCH] Check that parameters passed to functional tests are the proper type.

---
 actionpack/lib/action_controller/test_process.rb   |   22 +++-
 actionpack/test/controller/base_test.rb            |  135 ++++++++++++++++++--
 actionpack/test/controller/caching_test.rb         |   10 +-
 actionpack/test/controller/logging_test.rb         |    8 +-
 actionpack/test/controller/render_test.rb          |   44 +++----
 .../controller/request_forgery_protection_test.rb  |   48 ++++----
 actionpack/test/controller/routing_test.rb         |    6 +-
 actionpack/test/controller/test_test.rb            |   26 +---
 actionpack/test/template/url_helper_test.rb        |   16 +-
 9 files changed, 209 insertions(+), 106 deletions(-)

diff --git a/actionpack/lib/action_controller/test_process.rb b/actionpack/lib/action_controller/test_process.rb
index 9de3fab..d7976f9 100644
--- a/actionpack/lib/action_controller/test_process.rb
+++ b/actionpack/lib/action_controller/test_process.rb
@@ -96,15 +96,13 @@ module ActionController #:nodoc:
       extra_keys = ActionController::Routing::Routes.extra_keys(parameters)
       non_path_parameters = get? ? query_parameters : request_parameters
       parameters.each do |key, value|
-        if value.is_a? Fixnum
-          value = value.to_s
-        elsif value.is_a? Array
-          value = ActionController::Routing::PathSegment::Result.new(value)
-        end
+        value = ActionController::Routing::PathSegment::Result.new(value) if value.is_a? Array
 
         if extra_keys.include?(key.to_sym)
+          verify_proper_param(value)
           non_path_parameters[key] = value
         else
+          verify_proper_param(value, :route_param)
           path_parameters[key.to_s] = value
         end
       end
@@ -151,6 +149,20 @@ module ActionController #:nodoc:
 
         params.to_query
       end
+
+      def verify_proper_param(value, route_param = false)
+        case value
+          when Hash
+            value.values.each { |element| verify_proper_param(element) }
+          when Array
+            value.each { |element| verify_proper_param(element) }
+          when String, ActionController::TestUploadedFile, NilClass
+          when ActiveRecord::Base
+            raise ArgumentError.new("ActiveRecords are only valid as values for routing path parameters") unless route_param
+          else
+            raise ArgumentError.new("Test requests should have only string or file upload parameters")
+        end
+      end
   end
 
   # A refactoring of TestResponse to allow the same behavior to be applied
diff --git a/actionpack/test/controller/base_test.rb b/actionpack/test/controller/base_test.rb
index 9523189..9fc1c14 100644
--- a/actionpack/test/controller/base_test.rb
+++ b/actionpack/test/controller/base_test.rb
@@ -9,12 +9,12 @@ module Submodule
     def public_action
       render :nothing => true
     end
-    
+
     hide_action :hidden_action
     def hidden_action
       raise "Noooo!"
     end
-    
+
     def another_hidden_action
     end
     hide_action :another_hidden_action
@@ -27,26 +27,27 @@ class EmptyController < ActionController::Base
 end
 class NonEmptyController < ActionController::Base
   def public_action
+    head :ok
   end
-  
+
   hide_action :hidden_action
   def hidden_action
   end
 end
 
 class MethodMissingController < ActionController::Base
-  
+
   hide_action :shouldnt_be_called
   def shouldnt_be_called
     raise "NO WAY!"
   end
-  
+
 protected
-  
+
   def method_missing(selector)
     render :text => selector.to_s
   end
-  
+
 end
 
 class DefaultUrlOptionsController < ActionController::Base
@@ -76,7 +77,7 @@ class ControllerInstanceTests < Test::Unit::TestCase
     @empty = EmptyController.new
     @contained = Submodule::ContainedEmptyController.new
     @empty_controllers = [@empty, @contained, Submodule::SubclassedController.new]
-    
+
     @non_empty_controllers = [NonEmptyController.new,
                               Submodule::ContainedNonEmptyController.new]
   end
@@ -132,28 +133,28 @@ class PerformActionTest < ActionController::TestCase
 
     rescue_action_in_public!
   end
-  
+
   def test_get_on_priv_should_show_selector
     use_controller MethodMissingController
     get :shouldnt_be_called
     assert_response :success
     assert_equal 'shouldnt_be_called', @response.body
   end
-  
+
   def test_method_missing_is_not_an_action_name
     use_controller MethodMissingController
     assert ! @controller.__send__(:action_methods).include?('method_missing')
-    
+
     get :method_missing
     assert_response :success
     assert_equal 'method_missing', @response.body
   end
-  
+
   def test_get_on_hidden_should_fail
     use_controller NonEmptyController
     get :hidden_action
     assert_response 404
-    
+
     get :another_hidden_action
     assert_response 404
   end
@@ -215,3 +216,111 @@ class EnsureNamedRoutesWorksTicket22BugTest < Test::Unit::TestCase
     ActionController::Routing::Routes.load!
   end
 end
+
+require 'active_record'
+class AModel < ActiveRecord::Base
+  set_table_name nil
+  def self.columns; []; end
+
+  def to_param
+    "a-param"
+  end
+end
+
+module ParameterTypeTestHelper
+  private
+
+  def non_strings
+    [1, Time.now, 1.0, /hello/, :symbol]
+  end
+
+  def fake_active_record
+    AModel.new
+  end
+end
+
+class ParameterTypeTests < ActionController::TestCase
+  include ParameterTypeTestHelper
+
+  tests NonEmptyController
+
+  def setup
+    ActionController::Routing::Routes.load!
+  end
+
+  def test_string_values_for_parameters_should_not_raise_an_exception
+    assert_nothing_raised { get :public_action, :wibble => "a string" }
+  end
+
+  def test_non_string_values_for_parameters_should_raise_an_exception
+    non_strings.each do |non_string|
+      assert_raises(ArgumentError) { get :public_action, :wibble => non_string }
+    end
+  end
+
+  def test_string_values_for_nested_parameters_should_not_raise_an_exception
+    assert_nothing_raised { get :public_action, :wibble => { :thing => "a string" } }
+  end
+
+  def test_non_string_values_for_nested_parameters_should_raise_an_exception
+    non_strings.each do |not_a_string|
+      assert_raises(ArgumentError) { get :public_action, :wibble => { :thing => not_a_string } }
+    end
+  end
+
+  def test_string_values_for_array_parameters_should_not_raise_an_exception
+    assert_nothing_raised { get :public_action, :wibbles => ["one", "two"] }
+  end
+
+  def test_non_string_values_for_array_parameters_should_raise_an_exception
+    non_strings.each do |not_a_string|
+      assert_raises(ArgumentError) { get :public_action, :wibbles => ["one", not_a_string] }
+    end
+  end
+
+  def test_file_upload_values_for_parameters_should_not_raise_an_exception
+    files_dir = File.dirname(__FILE__) + '/../fixtures/multipart'
+    assert_nothing_raised { get :public_action, :wibble => fixture_file_upload(files_dir + "/mona_lisa.jpg", "image/jpg") }
+  end
+
+  def test_nil_values_for_parameters_should_not_raise_an_exception
+    assert_nothing_raised { get :public_action, :wibble => nil }
+  end
+
+  def test_non_string_values_for_session_or_flash_parameters_should_not_raise_an_exception
+    non_strings.each do |not_a_string|
+      assert_nothing_raised { get :public_action, {}, { :foozle => not_a_string } }
+      assert_nothing_raised { get :public_action, {}, {}, { :foozle => not_a_string } }
+    end
+  end
+end
+
+class RoutingParameterTypeTests < ActionController::TestCase
+  include ParameterTypeTestHelper
+
+  tests NonEmptyController
+
+  def setup
+    ActionController::Routing::Routes.draw do |map|
+      map.foo "foo", :path_prefix => "parents/:parent_id", :controller => 'non_empty', :action => 'public_action'
+    end
+  end
+
+  def teardown
+    ActionController::Routing::Routes.load!
+  end
+
+  def test_string_values_for_route_parameters_should_not_raise_an_exception
+    assert_nothing_raised { get :public_action, :parent_id => "parent-param", :wibble => "a string" }
+  end
+
+  def test_non_string_values_for_route_parameters_should_raise_an_exception
+    non_strings.each do |not_a_string|
+      assert_raises(ArgumentError) { get :public_action, :parent_id => not_a_string, :wibble => "a_string" }
+    end
+  end
+
+  def test_active_record_subclass_values_for_route_parameters_should_not_raise_an_exception
+    assert_nothing_raised { get :public_action, :parent_id => fake_active_record, :wibble => "a string" }
+  end
+end
diff --git a/actionpack/test/controller/caching_test.rb b/actionpack/test/controller/caching_test.rb
index 6dcb67e..09ecf3d 100644
--- a/actionpack/test/controller/caching_test.rb
+++ b/actionpack/test/controller/caching_test.rb
@@ -330,7 +330,7 @@ class ActionCacheTest < ActionController::TestCase
     assert fragment_exist?('test.host/edit')
     reset!
 
-    get :edit, :id => 1
+    get :edit, :id => '1'
     assert fragment_exist?('test.host/1;edit')
   end
 
@@ -361,8 +361,8 @@ class ActionCacheTest < ActionController::TestCase
     cached_time = content_to_cache
     reset!
 
-    @request.set_REQUEST_URI "/action_caching_test/expire.xml"
-    get :expire, :format => :xml
+    @request.set_REQUEST_URI "/action_caching_test/expire"
+    get :expire#, :format => 'xml'    #TODO Why does this test pass with no format set?
     reset!
 
     get :index
@@ -455,8 +455,8 @@ class ActionCacheTest < ActionController::TestCase
 
   def test_correct_content_type_is_returned_for_cache_hit_on_action_with_string_key_from_proc
     # run it twice to cache it the first time
-    get :edit, :id => 1, :format => 'xml'
-    get :edit, :id => 1, :format => 'xml'
+    get :edit, :id => '1', :format => 'xml'
+    get :edit, :id => '1', :format => 'xml'
     assert_equal 'application/xml', @response.content_type
   end
 
diff --git a/actionpack/test/controller/logging_test.rb b/actionpack/test/controller/logging_test.rb
index 3c93685..9d05c28 100644
--- a/actionpack/test/controller/logging_test.rb
+++ b/actionpack/test/controller/logging_test.rb
@@ -11,7 +11,7 @@ class LoggingTest < ActionController::TestCase
 
   class MockLogger
     attr_reader :logged
-    
+
     def method_missing(method, *args)
       @logged ||= []
       @logged << args.first
@@ -27,19 +27,19 @@ class LoggingTest < ActionController::TestCase
   end
 
   def test_logging_with_parameters
-    get :show, :id => 10
+    get :show, :id => '10'
     assert_equal 3, logs.size
 
     params = logs.detect {|l| l =~ /Parameters/ }
     assert_equal 'Parameters: {"id"=>"10"}', params
   end
-  
+
   private
 
   def set_logger
     @controller.logger = MockLogger.new
   end
-  
+
   def logs
     @logs ||= @controller.logger.logged.compact.map {|l| l.strip}
   end
diff --git a/actionpack/test/controller/render_test.rb b/actionpack/test/controller/render_test.rb
index 112e9ef..e475ed5 100644
--- a/actionpack/test/controller/render_test.rb
+++ b/actionpack/test/controller/render_test.rb
@@ -36,35 +36,35 @@ class TestController < ActionController::Base
       render :action => 'hello_world'
     end
   end
-  
+
   def conditional_hello_with_public_header
     if stale?(:last_modified => Time.now.utc.beginning_of_day, :etag => [:foo, 123], :public => true)
       render :action => 'hello_world'
     end
   end
-  
+
   def conditional_hello_with_public_header_and_expires_at
     expires_in 1.minute
     if stale?(:last_modified => Time.now.utc.beginning_of_day, :etag => [:foo, 123], :public => true)
       render :action => 'hello_world'
     end
   end
-  
+
   def conditional_hello_with_expires_in
     expires_in 1.minute
     render :action => 'hello_world'
   end
-  
+
   def conditional_hello_with_expires_in_with_public
     expires_in 1.minute, :public => true
     render :action => 'hello_world'
   end
-  
+
   def conditional_hello_with_expires_in_with_public_with_more_keys
     expires_in 1.minute, :public => true, 'max-stale' => 5.hours
     render :action => 'hello_world'
   end
-  
+
   def conditional_hello_with_expires_in_with_public_with_more_keys_old_syntax
     expires_in 1.minute, :public => true, :private => nil, 'max-stale' => 5.hours
     render :action => 'hello_world'
@@ -1073,20 +1073,16 @@ class RenderTest < ActionController::TestCase
   end
 
   def test_render_in_an_rjs_template_should_pick_html_templates_when_available
-    [:js, "js"].each do |format|
-      assert_nothing_raised do
-        get :render_implicit_html_template, :format => format
-        assert_equal %(document.write("Hello world\\n");), @response.body
-      end
+    assert_nothing_raised do
+      get :render_implicit_html_template, :format => 'js'
+      assert_equal %(document.write("Hello world\\n");), @response.body
     end
   end
 
   def test_explicitly_rendering_an_html_template_with_implicit_html_template_renders_should_be_possible_from_an_rjs_template
-    [:js, "js"].each do |format|
-      assert_nothing_raised do
-        get :render_explicit_html_template, :format => format
-        assert_equal %(document.write("Hello world\\n");), @response.body
-      end
+    assert_nothing_raised do
+      get :render_explicit_html_template, :format => 'js'
+      assert_equal %(document.write("Hello world\\n");), @response.body
     end
   end
 
@@ -1101,7 +1097,7 @@ class RenderTest < ActionController::TestCase
   end
 
   def test_should_implicitly_render_js_template_without_layout
-    get :render_implicit_js_template_without_layout, :format => :js
+    get :render_implicit_js_template_without_layout, :format => 'js'
     assert_no_match /<html>/, @response.body
   end
 
@@ -1111,7 +1107,7 @@ class RenderTest < ActionController::TestCase
   end
 
   def test_should_render_formatted_xml_erb_template
-    get :formatted_xml_erb, :format => :xml
+    get :formatted_xml_erb, :format => 'xml'
     assert_equal '<test>passed formatted xml erb</test>', @response.body
   end
 
@@ -1557,22 +1553,22 @@ class ExpiresInRenderTest < ActionController::TestCase
   def setup
     @request.host = "www.nextangle.com"
   end
-  
+
   def test_expires_in_header
     get :conditional_hello_with_expires_in
     assert_equal "max-age=60, private", @response.headers["Cache-Control"]
   end
-  
+
   def test_expires_in_header_with_public
     get :conditional_hello_with_expires_in_with_public
     assert_equal "max-age=60, public", @response.headers["Cache-Control"]
   end
-  
+
   def test_expires_in_header_with_additional_headers
     get :conditional_hello_with_expires_in_with_public_with_more_keys
     assert_equal "max-age=60, public, max-stale=18000", @response.headers["Cache-Control"]
   end
-  
+
   def test_expires_in_old_syntax
     get :conditional_hello_with_expires_in_with_public_with_more_keys_old_syntax
     assert_equal "max-age=60, public, max-stale=18000", @response.headers["Cache-Control"]
@@ -1669,12 +1665,12 @@ class EtagRenderTest < ActionController::TestCase
     get :conditional_hello_with_bangs
     assert_response :not_modified
   end
-  
+
   def test_etag_with_public_true_should_set_header
     get :conditional_hello_with_public_header
     assert_equal "public", @response.headers['Cache-Control']
   end
-  
+
   def test_etag_with_public_true_should_set_header_and_retain_other_headers
     get :conditional_hello_with_public_header_and_expires_at
     assert_equal "max-age=60, public", @response.headers['Cache-Control']
diff --git a/actionpack/test/controller/request_forgery_protection_test.rb b/actionpack/test/controller/request_forgery_protection_test.rb
index 83925ed..0af4464 100644
--- a/actionpack/test/controller/request_forgery_protection_test.rb
+++ b/actionpack/test/controller/request_forgery_protection_test.rb
@@ -10,11 +10,11 @@ module RequestForgeryProtectionActions
   def index
     render :inline => "<%= form_tag('/') {} %>"
   end
-  
+
   def show_button
     render :inline => "<%= button_to('New', '/') {} %>"
   end
-  
+
   def remote_form
     render :inline => "<% form_remote_tag(:url => '/') {} %>"
   end
@@ -22,7 +22,7 @@ module RequestForgeryProtectionActions
   def unsafe
     render :text => 'pwn'
   end
-  
+
   def rescue_action(e) raise e end
 end
 
@@ -34,11 +34,11 @@ end
 
 class FreeCookieController < RequestForgeryProtectionController
   self.allow_forgery_protection = false
-  
+
   def index
     render :inline => "<%= form_tag('/') {} %>"
   end
-  
+
   def show_button
     render :inline => "<%= button_to('New', '/') {} %>"
   end
@@ -50,7 +50,7 @@ module RequestForgeryProtectionTests
   def teardown
     ActionController::Base.request_forgery_protection_token = nil
   end
-  
+
 
   def test_should_render_form_with_token_tag
      get :index
@@ -79,17 +79,17 @@ module RequestForgeryProtectionTests
 
   def test_should_not_allow_html_post_without_token
     @request.env['CONTENT_TYPE'] = Mime::URL_ENCODED_FORM.to_s
-    assert_raise(ActionController::InvalidAuthenticityToken) { post :index, :format => :html }
+    assert_raise(ActionController::InvalidAuthenticityToken) { post :index, :format => 'html' }
   end
-  
+
   def test_should_not_allow_html_put_without_token
     @request.env['CONTENT_TYPE'] = Mime::URL_ENCODED_FORM.to_s
-    assert_raise(ActionController::InvalidAuthenticityToken) { put :index, :format => :html }
+    assert_raise(ActionController::InvalidAuthenticityToken) { put :index, :format => 'html' }
   end
-  
+
   def test_should_not_allow_html_delete_without_token
     @request.env['CONTENT_TYPE'] = Mime::URL_ENCODED_FORM.to_s
-    assert_raise(ActionController::InvalidAuthenticityToken) { delete :index, :format => :html }
+    assert_raise(ActionController::InvalidAuthenticityToken) { delete :index, :format => 'html' }
   end
 
   def test_should_allow_api_formatted_post_without_token
@@ -151,51 +151,51 @@ module RequestForgeryProtectionTests
       delete :index, :format => 'xml'
     end
   end
-  
+
   def test_should_allow_xhr_post_without_token
     assert_nothing_raised { xhr :post, :index }
   end
-  
+
   def test_should_allow_xhr_put_without_token
     assert_nothing_raised { xhr :put, :index }
   end
-  
+
   def test_should_allow_xhr_delete_without_token
     assert_nothing_raised { xhr :delete, :index }
   end
-  
+
   def test_should_allow_xhr_post_with_encoded_form_content_type_without_token
     @request.env['CONTENT_TYPE'] = Mime::URL_ENCODED_FORM.to_s
     assert_nothing_raised { xhr :post, :index }
   end
-  
+
   def test_should_allow_post_with_token
     post :index, :authenticity_token => @token
     assert_response :success
   end
-  
+
   def test_should_allow_put_with_token
     put :index, :authenticity_token => @token
     assert_response :success
   end
-  
+
   def test_should_allow_delete_with_token
     delete :index, :authenticity_token => @token
     assert_response :success
   end
-  
+
   def test_should_allow_post_with_xml
     @request.env['CONTENT_TYPE'] = Mime::XML.to_s
     post :index, :format => 'xml'
     assert_response :success
   end
-  
+
   def test_should_allow_put_with_xml
     @request.env['CONTENT_TYPE'] = Mime::XML.to_s
     put :index, :format => 'xml'
     assert_response :success
   end
-  
+
   def test_should_allow_delete_with_xml
     @request.env['CONTENT_TYPE'] = Mime::XML.to_s
     delete :index, :format => 'xml'
@@ -228,17 +228,17 @@ class FreeCookieControllerTest < ActionController::TestCase
 
     ActiveSupport::SecureRandom.stubs(:base64).returns(@token)
   end
-  
+
   def test_should_not_render_form_with_token_tag
     get :index
     assert_select 'form>div>input[name=?][value=?]', 'authenticity_token', @token, false
   end
-  
+
   def test_should_not_render_button_to_with_token_tag
     get :show_button
     assert_select 'form>div>input[name=?][value=?]', 'authenticity_token', @token, false
   end
-  
+
   def test_should_allow_all_methods_without_token
     [:post, :put, :delete].each do |method|
       assert_nothing_raised { send(method, :index)}
diff --git a/actionpack/test/controller/routing_test.rb b/actionpack/test/controller/routing_test.rb
index 9375942..0252d0b 100644
--- a/actionpack/test/controller/routing_test.rb
+++ b/actionpack/test/controller/routing_test.rb
@@ -753,7 +753,7 @@ class LegacyRouteSetTests < Test::Unit::TestCase
 
     ActionController::Routing.use_controllers! %w(content admin/user admin/news_feed)
   end
-  
+
   def teardown
     @rs.clear!
   end
@@ -2559,10 +2559,10 @@ class RouteLoadingTest < Test::Unit::TestCase
 
     routes.reload
   end
-  
+
   def test_load_multiple_configurations
     routes.add_configuration_file("engines.rb")
-    
+
     File.expects(:stat).at_least_once.returns(@stat)
 
     routes.expects(:load).with('./config/routes.rb')
diff --git a/actionpack/test/controller/test_test.rb b/actionpack/test/controller/test_test.rb
index 3924b28..79169fb 100644
--- a/actionpack/test/controller/test_test.rb
+++ b/actionpack/test/controller/test_test.rb
@@ -131,14 +131,14 @@ XML
   end
 
   def test_raw_post_handling
-    params = {:page => {:name => 'page name'}, 'some key' => 123}
+    params = {:page => {:name => 'page name'}, 'some key' => '123'}
     post :render_raw_post, params.dup
 
     assert_equal params.to_query, @response.body
   end
 
   def test_body_stream
-    params = { :page => { :name => 'page name' }, 'some key' => 123 }
+    params = { :page => { :name => 'page name' }, 'some key' => '123' }
 
     post :render_body, params.dup
 
@@ -200,13 +200,13 @@ XML
   end
 
   def test_process_with_request_uri_with_params
-    process :test_uri, :id => 7
+    process :test_uri, :id => '7'
     assert_equal "/test_test/test/test_uri/7", @response.body
   end
 
   def test_process_with_request_uri_with_params_with_explicit_uri
     @request.set_REQUEST_URI "/explicit/uri"
-    process :test_uri, :id => 7
+    process :test_uri, :id => '7'
     assert_equal "/explicit/uri", @response.body
   end
 
@@ -222,9 +222,9 @@ XML
   end
 
   def test_multiple_calls
-    process :test_only_one_param, :left => true
+    process :test_only_one_param, :left => '1'
     assert_equal "OK", @response.body
-    process :test_only_one_param, :right => true
+    process :test_only_one_param, :right => '1'
     assert_equal "OK", @response.body
   end
 
@@ -454,11 +454,6 @@ XML
     )
   end
 
-  def test_id_converted_to_string
-    get :test_params, :id => 20, :foo => Object.new
-    assert_kind_of String, @request.path_parameters['id']
-  end
-
   def test_array_path_parameter_handled_properly
     with_routing do |set|
       set.draw do |map|
@@ -472,15 +467,6 @@ XML
     end
   end
 
-  def test_assert_realistic_path_parameters
-    get :test_params, :id => 20, :foo => Object.new
-
-    # All elements of path_parameters should use string keys
-    @request.path_parameters.keys.each do |key|
-      assert_kind_of String, key
-    end
-  end
-
   def test_with_routing_places_routes_back
     assert ActionController::Routing::Routes
     routes_id = ActionController::Routing::Routes.object_id
diff --git a/actionpack/test/template/url_helper_test.rb b/actionpack/test/template/url_helper_test.rb
index 5900709..5e07276 100644
--- a/actionpack/test/template/url_helper_test.rb
+++ b/actionpack/test/template/url_helper_test.rb
@@ -258,21 +258,21 @@ class UrlHelperTest < ActionView::TestCase
     assert current_page?({ :action => "show", :controller => "weblog" })
     assert current_page?("http://www.example.com/weblog/show")
   end
-  
+
   def test_current_page_ignoring_params
     @controller.request = RequestMock.new("http://www.example.com/weblog/show?order=desc&page=1")
     @controller.url = "http://www.example.com/weblog/show?order=desc&page=1"
     assert current_page?({ :action => "show", :controller => "weblog" })
     assert current_page?("http://www.example.com/weblog/show")
   end
-  
+
   def test_current_page_with_params_that_match
     @controller.request = RequestMock.new("http://www.example.com/weblog/show?order=desc&page=1")
     @controller.url = "http://www.example.com/weblog/show?order=desc&page=1"
     assert current_page?({ :action => "show", :controller => "weblog", :order => "desc", :page => "1" })
     assert current_page?("http://www.example.com/weblog/show?order=desc&amp;page=1")
   end
-  
+
   def test_link_unless_current
     @controller.request = RequestMock.new("http://www.example.com/weblog/show")
     @controller.url = "http://www.example.com/weblog/show"
@@ -352,7 +352,7 @@ class UrlHelperTest < ActionView::TestCase
     assert_dom_equal "<script type=\"text/javascript\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%4d%79%20%65%6d%61%69%6c%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", "My email", :encode => "javascript", :replace_at => "(at)", :replace_dot => "(dot)")
     assert_dom_equal "<script type=\"text/javascript\">eval(decodeURIComponent('%64%6f%63%75%6d%65%6e%74%2e%77%72%69%74%65%28%27%3c%61%20%68%72%65%66%3d%22%6d%61%69%6c%74%6f%3a%6d%65%40%64%6f%6d%61%69%6e%2e%63%6f%6d%22%3e%6d%65%28%61%74%29%64%6f%6d%61%69%6e%28%64%6f%74%29%63%6f%6d%3c%2f%61%3e%27%29%3b'))</script>", mail_to("me@domain.com", nil, :encode => "javascript", :replace_at => "(at)", :replace_dot => "(dot)")
   end
-  
+
   def protect_against_forgery?
     false
   end
@@ -472,7 +472,7 @@ class LinkToUnlessCurrentWithControllerTest < ActionView::TestCase
 
   def test_link_to_unless_current_shows_link
     with_restful_routing do
-      get :show, :id => 1
+      get :show, :id => '1'
       assert_equal "<a href=\"/tasks\">tasks</a>\n" +
         "<a href=\"#{@request.protocol}#{@request.host_with_port}/tasks\">tasks</a>",
         @response.body
@@ -577,7 +577,7 @@ class PolymorphicControllerTest < ActionView::TestCase
     @controller = WorkshopsController.new
 
     with_restful_routing do
-      get :show, :id => 1
+      get :show, :id => '1'
       assert_equal "/workshops/1\n<a href=\"/workshops/1\">Workshop</a>", @response.body
     end
   end
@@ -586,7 +586,7 @@ class PolymorphicControllerTest < ActionView::TestCase
     @controller = SessionsController.new
 
     with_restful_routing do
-      get :index, :workshop_id => 1
+      get :index, :workshop_id => '1'
       assert_equal "/workshops/1/sessions\n<a href=\"/workshops/1/sessions\">Session</a>", @response.body
     end
   end
@@ -595,7 +595,7 @@ class PolymorphicControllerTest < ActionView::TestCase
     @controller = SessionsController.new
 
     with_restful_routing do
-      get :show, :workshop_id => 1, :id => 1
+      get :show, :workshop_id => '1', :id => '1'
       assert_equal "/workshops/1/sessions/1\n<a href=\"/workshops/1/sessions/1\">Session</a>", @response.body
     end
   end
-- 
1.6.1

