<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-14T07:28:38+00:00</created-at>
  <creator-id type="integer">99411</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4615</number>
  <permalink>polymorphic_path-not-dry-at-all</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>dry polymorphic_path routing</tag>
  <title>polymorphic_path not dry at all</title>
  <updated-at type="datetime">2011-02-14T07:28:38+00:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">6</version>
  <user-name>Andrew White</user-name>
  <creator-name>gucki</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
  <priority-name nil="true"></priority-name>
  <original-body>Hi there,

please consider the following simple example of nested resources:

Models:
team.rb (Team)
team/member.rb (Team::Member)
team/member/job.rb (Team::Member::Job)

Routes:
Test::Application.routes.draw do
  resources :team do
    resources :members do
      resources :jobs
    end
  end
end

Setup some data:
t = Team.create
3.times { t.members.create }
m = t.members.find(3)
5.times { m.jobs.create }

Testing polymorphic routes:
t = Team.find(1)
m = t.members.find(3)
j = m.jobs.find(5)

app.polymorphic_path(m)
 =&gt; ActionController::RoutingError: No route matches {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;members&quot;, :team_id=&gt;#&lt;Team::Member id: 3, team_id: 1, created_at: &quot;2010-05-16 09:29:29&quot;, updated_at: &quot;2010-05-16 09:29:29&quot;&gt;}

app.polymorphic_path([t, m])
 =&gt; NoMethodError: undefined method `team_team_member_path' for #&lt;ActionDispatch::Integration::Session:0x00000003cc2bf0&gt;

The only way to solve this error is to make the routes much more complex by using namespaces in them.

But most important the usage of polymorphic_path doesn't really look DRY to me because you always have to specify all parents of a nested resource in each and every polymorphic_path.

To make polymorphic_path DRY and solve the problem with the needed routing complexity (namespaces), I put the following few lines into polymorphic_routes.rb at line 112 (inside polymorphic_url).

      namespaces = record.class.name.split('::')
      if namespaces.size&gt;1
        chain = [args.shift]
        namespaces.pop
        namespaces.reverse.each do |namespace|
          chain &lt;&lt; chain.last.send(namespace.downcase)
        end      
        args.unshift *chain.reverse
      end

This simply assembles all the parents of the object passed. It should also be very backwards compatible as most people don't put their models into subfolders using namespaces (I guess?).

So after monkey patching the calls which failed before now work just fine and are really dry:

app.polymorphic_path(m)
 =&gt; &quot;/team/1/members/3&quot; 

app.polymorphic_path(j)
 =&gt; &quot;/team/1/members/3/jobs/5&quot; 

What do you think? :)</original-body>
  <latest-body>Hi there,

please consider the following simple example of nested resources:

Models:
team.rb (Team)
team/member.rb (Team::Member)
team/member/job.rb (Team::Member::Job)

Routes:
Test::Application.routes.draw do
  resources :team do
    resources :members do
      resources :jobs
    end
  end
end

Setup some data:
t = Team.create
3.times { t.members.create }
m = t.members.find(3)
5.times { m.jobs.create }

Testing polymorphic routes:
t = Team.find(1)
m = t.members.find(3)
j = m.jobs.find(5)

app.polymorphic_path(m)
 =&gt; ActionController::RoutingError: No route matches {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;members&quot;, :team_id=&gt;#&lt;Team::Member id: 3, team_id: 1, created_at: &quot;2010-05-16 09:29:29&quot;, updated_at: &quot;2010-05-16 09:29:29&quot;&gt;}

app.polymorphic_path([t, m])
 =&gt; NoMethodError: undefined method `team_team_member_path' for #&lt;ActionDispatch::Integration::Session:0x00000003cc2bf0&gt;

The only way to solve this error is to make the routes much more complex by using namespaces in them.

But most important the usage of polymorphic_path doesn't really look DRY to me because you always have to specify all parents of a nested resource in each and every polymorphic_path.

To make polymorphic_path DRY and solve the problem with the needed routing complexity (namespaces), I put the following few lines into polymorphic_routes.rb at line 112 (inside polymorphic_url).

      namespaces = record.class.name.split('::')
      if namespaces.size&gt;1
        chain = [args.shift]
        namespaces.pop
        namespaces.reverse.each do |namespace|
          chain &lt;&lt; chain.last.send(namespace.downcase)
        end      
        args.unshift *chain.reverse
      end

This simply assembles all the parents of the object passed. It should also be very backwards compatible as most people don't put their models into subfolders using namespaces (I guess?).

So after monkey patching the calls which failed before now work just fine and are really dry:

app.polymorphic_path(m)
 =&gt; &quot;/team/1/members/3&quot; 

app.polymorphic_path(j)
 =&gt; &quot;/team/1/members/3/jobs/5&quot; 

What do you think? :)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;please consider the following simple example of nested
resources:&lt;/p&gt;
&lt;p&gt;Models:&lt;br&gt;
team.rb (Team)&lt;br&gt;
team/member.rb (Team::Member)&lt;br&gt;
team/member/job.rb (Team::Member::Job)&lt;/p&gt;
&lt;p&gt;Routes:&lt;br&gt;
Test::Application.routes.draw do&lt;br&gt;
resources :team do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resources :members do
  resources :jobs
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Setup some data:&lt;br&gt;
t = Team.create&lt;br&gt;
3.times { t.members.create }&lt;br&gt;
m = t.members.find(3)&lt;br&gt;
5.times { m.jobs.create }&lt;/p&gt;
&lt;p&gt;Testing polymorphic routes:&lt;br&gt;
t = Team.find(1)&lt;br&gt;
m = t.members.find(3)&lt;br&gt;
j = m.jobs.find(5)&lt;/p&gt;
&lt;p&gt;app.polymorphic_path(m)&lt;br&gt;
=&amp;gt; ActionController::RoutingError: No route matches
{:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;members&quot;,
:team_id=&amp;gt;#&amp;lt;Team::Member id: 3, team_id: 1, created_at:
&quot;2010-05-16 09:29:29&quot;, updated_at: &quot;2010-05-16 09:29:29&quot;&amp;gt;}&lt;/p&gt;
&lt;p&gt;app.polymorphic_path([t, m])&lt;br&gt;
=&amp;gt; NoMethodError: undefined method &lt;code&gt;team_team_member_path'
for
#&amp;lt;ActionDispatch::Integration::Session:0x00000003cc2bf0&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The only way to solve this error is to make the routes much more
complex by using namespaces in them.&lt;/p&gt;
&lt;p&gt;But most important the usage of polymorphic_path doesn't really
look DRY to me because you always have to specify all parents of a
nested resource in each and every polymorphic_path.&lt;/p&gt;
&lt;p&gt;To make polymorphic_path DRY and solve the problem with the
needed routing complexity (namespaces), I put the following few
lines into polymorphic_routes.rb at line 112 (inside
polymorphic_url).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  namespaces = record.class.name.split('::')
  if namespaces.size&amp;gt;1
    chain = [args.shift]
    namespaces.pop
    namespaces.reverse.each do |namespace|
      chain &amp;lt;&amp;lt; chain.last.send(namespace.downcase)
    end      
    args.unshift *chain.reverse
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This simply assembles all the parents of the object passed. It
should also be very backwards compatible as most people don't put
their models into subfolders using namespaces (I guess?).&lt;/p&gt;
&lt;p&gt;So after monkey patching the calls which failed before now work
just fine and are really dry:&lt;/p&gt;
&lt;p&gt;app.polymorphic_path(m)&lt;br&gt;
=&amp;gt; &quot;/team/1/members/3&quot;&lt;/p&gt;
&lt;p&gt;app.polymorphic_path(j)&lt;br&gt;
=&amp;gt; &quot;/team/1/members/3/jobs/5&quot;&lt;/p&gt;
&lt;p&gt;What do you think? :)&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi there,

please consider the following simple example of nested resources:

Models:
team.rb (Team)
team/member.rb (Team::Member)
team/member/job.rb (Team::Member::Job)

Routes:
Test::Application.routes.draw do
  resources :team do
    resources :members do
      resources :jobs
    end
  end
end

Setup some data:
t = Team.create
3.times { t.members.create }
m = t.members.find(3)
5.times { m.jobs.create }

Testing polymorphic routes:
t = Team.find(1)
m = t.members.find(3)
j = m.jobs.find(5)

app.polymorphic_path(m)
 =&gt; ActionController::RoutingError: No route matches {:action=&gt;&quot;destroy&quot;, :controller=&gt;&quot;members&quot;, :team_id=&gt;#&lt;Team::Member id: 3, team_id: 1, created_at: &quot;2010-05-16 09:29:29&quot;, updated_at: &quot;2010-05-16 09:29:29&quot;&gt;}

app.polymorphic_path([t, m])
 =&gt; NoMethodError: undefined method `team_team_member_path' for #&lt;ActionDispatch::Integration::Session:0x00000003cc2bf0&gt;

The only way to solve this error is to make the routes much more complex by using namespaces in them.

But most important the usage of polymorphic_path doesn't really look DRY to me because you always have to specify all parents of a nested resource in each and every polymorphic_path.

To make polymorphic_path DRY and solve the problem with the needed routing complexity (namespaces), I put the following few lines into polymorphic_routes.rb at line 112 (inside polymorphic_url).

      namespaces = record.class.name.split('::')
      if namespaces.size&gt;1
        chain = [args.shift]
        namespaces.pop
        namespaces.reverse.each do |namespace|
          chain &lt;&lt; chain.last.send(namespace.downcase)
        end      
        args.unshift *chain.reverse
      end

This simply assembles all the parents of the object passed. It should also be very backwards compatible as most people don't put their models into subfolders using namespaces (I guess?).

So after monkey patching the calls which failed before now work just fine and are really dry:

app.polymorphic_path(m)
 =&gt; &quot;/team/1/members/3&quot; 

app.polymorphic_path(j)
 =&gt; &quot;/team/1/members/3/jobs/5&quot; 

What do you think? :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi there,&lt;/p&gt;
&lt;p&gt;please consider the following simple example of nested
resources:&lt;/p&gt;
&lt;p&gt;Models:&lt;br&gt;
team.rb (Team)&lt;br&gt;
team/member.rb (Team::Member)&lt;br&gt;
team/member/job.rb (Team::Member::Job)&lt;/p&gt;
&lt;p&gt;Routes:&lt;br&gt;
Test::Application.routes.draw do&lt;br&gt;
resources :team do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resources :members do
  resources :jobs
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Setup some data:&lt;br&gt;
t = Team.create&lt;br&gt;
3.times { t.members.create }&lt;br&gt;
m = t.members.find(3)&lt;br&gt;
5.times { m.jobs.create }&lt;/p&gt;
&lt;p&gt;Testing polymorphic routes:&lt;br&gt;
t = Team.find(1)&lt;br&gt;
m = t.members.find(3)&lt;br&gt;
j = m.jobs.find(5)&lt;/p&gt;
&lt;p&gt;app.polymorphic_path(m)&lt;br&gt;
=&amp;gt; ActionController::RoutingError: No route matches
{:action=&amp;gt;&quot;destroy&quot;, :controller=&amp;gt;&quot;members&quot;,
:team_id=&amp;gt;#&amp;lt;Team::Member id: 3, team_id: 1, created_at:
&quot;2010-05-16 09:29:29&quot;, updated_at: &quot;2010-05-16 09:29:29&quot;&amp;gt;}&lt;/p&gt;
&lt;p&gt;app.polymorphic_path([t, m])&lt;br&gt;
=&amp;gt; NoMethodError: undefined method &lt;code&gt;team_team_member_path'
for
#&amp;lt;ActionDispatch::Integration::Session:0x00000003cc2bf0&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The only way to solve this error is to make the routes much more
complex by using namespaces in them.&lt;/p&gt;
&lt;p&gt;But most important the usage of polymorphic_path doesn't really
look DRY to me because you always have to specify all parents of a
nested resource in each and every polymorphic_path.&lt;/p&gt;
&lt;p&gt;To make polymorphic_path DRY and solve the problem with the
needed routing complexity (namespaces), I put the following few
lines into polymorphic_routes.rb at line 112 (inside
polymorphic_url).&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  namespaces = record.class.name.split('::')
  if namespaces.size&amp;gt;1
    chain = [args.shift]
    namespaces.pop
    namespaces.reverse.each do |namespace|
      chain &amp;lt;&amp;lt; chain.last.send(namespace.downcase)
    end      
    args.unshift *chain.reverse
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This simply assembles all the parents of the object passed. It
should also be very backwards compatible as most people don't put
their models into subfolders using namespaces (I guess?).&lt;/p&gt;
&lt;p&gt;So after monkey patching the calls which failed before now work
just fine and are really dry:&lt;/p&gt;
&lt;p&gt;app.polymorphic_path(m)&lt;br&gt;
=&amp;gt; &quot;/team/1/members/3&quot;&lt;/p&gt;
&lt;p&gt;app.polymorphic_path(j)&lt;br&gt;
=&amp;gt; &quot;/team/1/members/3/jobs/5&quot;&lt;/p&gt;
&lt;p&gt;What do you think? :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T12:30:01+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2010-05-16T12:32:15+01:00</updated-at>
      <user-id type="integer">99411</user-id>
      <version type="integer">1</version>
      <user-name>gucki</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here's a little optimized version. Better performance and only invoke if a single record is passed to polymorphic_path. This improve backwards compatibility even more :)

      unless record_or_hash_or_array.is_a?(Array)
        namespaces = record.class.name.split('::')
        if namespaces.size&gt;1
          data = args.first
          namespaces.pop
          namespaces.reverse.each do |namespace|
            data = data.send(namespace.downcase)
            args.unshift data
          end
        end
      end</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here's a little optimized version. Better performance and only
invoke if a single record is passed to polymorphic_path. This
improve backwards compatibility even more :)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  unless record_or_hash_or_array.is_a?(Array)
    namespaces = record.class.name.split('::')
    if namespaces.size&amp;gt;1
      data = args.first
      namespaces.pop
      namespaces.reverse.each do |namespace|
        data = data.send(namespace.downcase)
        args.unshift data
      end
    end
  end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T13:24:45+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2010-05-16T13:24:48+01:00</updated-at>
      <user-id type="integer">99411</user-id>
      <version type="integer">2</version>
      <user-name>gucki</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Have you tried overriding model_name in the member and job models? e.g:

@@@ ruby
class Team::Member &lt; ActiveRecord::Base
  def self.model_name
    ActiveSupport::ModelName.new(&quot;Member&quot;)
  end
end
@@@

After doing this app.polymorphic_path([t, m]) should work.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Have you tried overriding model_name in the member and job
models? e.g:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Team::Member &amp;lt; ActiveRecord::Base
  def self.model_name
    ActiveSupport::ModelName.new(&quot;Member&quot;)
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After doing this app.polymorphic_path([t, m]) should work.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-07T09:09:00+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2010-06-07T09:09:05+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">3</version>
      <user-name>Andrew White</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good solution! But, as you said, this is specific to your application so it does not make sense in Rails itself.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good solution! But, as you said, this is specific to your
application so it does not make sense in Rails itself.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-07T09:32:32+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2010-06-07T09:32:38+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">4</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks Andrew. But this is only a solution to the error but not for the problem that the whole thing is still not DRY.

Specifying a path with app.polymorphic_path([t, m]) seems not DRY to me. One should only have to specify app.polymorphic_path(m) as the parent (here team) could be resolved from the namespace, as my code above does.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks Andrew. But this is only a solution to the error but not
for the problem that the whole thing is still not DRY.&lt;/p&gt;
&lt;p&gt;Specifying a path with app.polymorphic_path([t, m]) seems not
DRY to me. One should only have to specify app.polymorphic_path(m)
as the parent (here team) could be resolved from the namespace, as
my code above does.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-07T09:39:39+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2010-06-07T09:39:47+01:00</updated-at>
      <user-id type="integer">99411</user-id>
      <version type="integer">5</version>
      <user-name>gucki</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Gucki, your solution will only work where the associations are given the default names. I'd argue that trying to tie knowledge of the model into the router is likely to end up making things worse. For example I use the model_name override method to have a generic controller for some STI models - your patch would break that by using the full class name and not the STI base class. Also I have STI models inside a collection module (e.g. Page::Components::MenuComponent) which would also break with your patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Gucki, your solution will only work where the associations are
given the default names. I'd argue that trying to tie knowledge of
the model into the router is likely to end up making things worse.
For example I use the model_name override method to have a generic
controller for some STI models - your patch would break that by
using the full class name and not the STI base class. Also I have
STI models inside a collection module (e.g.
Page::Components::MenuComponent) which would also break with your
patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-07T10:19:46+01:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2010-06-07T10:21:22+01:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">6</version>
      <user-name>Andrew White</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>thank you very much......&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/&quot;&gt;&#1605;&#1606;&#1578;&#1583;&#1610;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&#1605;&#1603;&#1610;&#1575;&#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1575;&#1586;&#1610;&#1575;&#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&#1601;&#1587;&#1575;&#1578;&#1610;&#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&#1585;&#1587;&#1575;&#1574;&#1604; 
- &#1605;&#1587;&#1580;&#1575;&#1578; - &#1608;&#1587;&#1575;&#1574;&#1591;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&#1578;&#1608;&#1576;&#1610;&#1603;&#1575;&#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&#1608;&#1592;&#1575;&#1574;&#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&#1576;&#1585;&#1608;&#1603;&#1587;&#1610;&lt;/a&gt; &lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt; &lt;a href=&quot;http://forum.line-sport.tv/&quot;&gt;&#1604;&#1575;&#1610;&#1606; &#1587;&#1576;&#1608;&#1585;&#1578;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;thank you very much......&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/&quot;&gt;&amp;#1605;&amp;#1606;&amp;#1578;&amp;#1583;&amp;#1610;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f86.html&quot;&gt;&amp;#1605;&amp;#1603;&amp;#1610;&amp;#1575;&amp;#1580;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1575;&amp;#1586;&amp;#1610;&amp;#1575;&amp;#1569;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f84.html&quot;&gt;&amp;#1601;&amp;#1587;&amp;#1575;&amp;#1578;&amp;#1610;&amp;#1606;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f17.html&quot;&gt;&amp;#1585;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1604;&lt;br&gt;
- &amp;#1605;&amp;#1587;&amp;#1580;&amp;#1575;&amp;#1578; -
&amp;#1608;&amp;#1587;&amp;#1575;&amp;#1574;&amp;#1591;&lt;/a&gt;&lt;span class=
&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=
&quot;http://www.tran33m.com/vb/f18.html&quot;&gt;&amp;#1578;&amp;#1608;&amp;#1576;&amp;#1610;&amp;#1603;&amp;#1575;&amp;#1578;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;&amp;#1608;&amp;#1592;&amp;#1575;&amp;#1574;&amp;#1601;&lt;/a&gt;&lt;span class=&quot;Apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;a href=&quot;http://www.tran33m.com/vb/f76.html&quot;&gt;jobs&lt;/a&gt;
&lt;a href=
&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;&amp;#1576;&amp;#1585;&amp;#1608;&amp;#1603;&amp;#1587;&amp;#1610;&lt;/a&gt;
&lt;a href=&quot;http://www.tran33m.com/vb/t31874.html&quot;&gt;proxy&lt;/a&gt; &lt;a href=
&quot;http://forum.line-sport.tv/&quot;&gt;&amp;#1604;&amp;#1575;&amp;#1610;&amp;#1606;
&amp;#1587;&amp;#1576;&amp;#1608;&amp;#1585;&amp;#1578;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-08T11:23:46+00:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2011-02-08T12:16:08+00:00</updated-at>
      <user-id type="integer">136126</user-id>
      <version type="integer">7</version>
      <user-name>alasiri1</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;institution along with anniversaries. Picking out amazed to be aware of precisely why these kind of chili presented in a lot more than NINE HUNDRED sophisticated types and they are 100 % hand woven!&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; You can aquire these individuals interior silver precious metal,&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&#160;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; yellow metal along with bring cherished flagstones, jewelry of the eagerness.&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; You are able to arrange a majority of these chili &lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;the actual smallest touch you would like and get a fantastic layout&lt;strong&gt;&lt;a href=&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;institution
along with anniversaries. Picking out amazed to be aware of
precisely why these kind of chili presented in a lot more than NINE
HUNDRED sophisticated types and they are 100 % hand
woven!&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-bracelets-c-3.html&quot;&gt;&lt;em&gt;Pandoras
Bracelets&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; You can aquire these individuals
interior silver precious metal,&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/pandora-charms-c-9.html&quot;&gt;&lt;em&gt;Pandora&amp;nbsp;Charms&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;
yellow metal along with bring cherished flagstones, jewelry of the
eagerness.&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;pandora
ireland&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt; You are able to arrange a majority of
these chili &lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora
NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;the actual smallest touch you would like and
get a fantastic layout&lt;strong&gt;&lt;a href=
&quot;http://www.onlinepandorajewellery.com/&quot;&gt;&lt;em&gt;Pandora
NZ&lt;/em&gt;&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-14T05:53:11+00:00</created-at>
      <creator-id type="integer">99411</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4615</number>
      <permalink>polymorphic_path-not-dry-at-all</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>dry polymorphic_path routing</tag>
      <title>polymorphic_path not dry at all</title>
      <updated-at type="datetime">2011-02-14T07:28:38+00:00</updated-at>
      <user-id type="integer">136876</user-id>
      <version type="integer">8</version>
      <user-name>pandora jewellry</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4615</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
