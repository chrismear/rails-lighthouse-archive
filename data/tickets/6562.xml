<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-11T12:37:42+00:00</created-at>
  <creator-id type="integer">136</creator-id>
  <milestone-due-on type="datetime">2011-03-27T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">103410</milestone-id>
  <number type="integer">6562</number>
  <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>before_destroy has_and_belongs_to_many patch</tag>
  <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
  <updated-at type="datetime">2011-03-23T21:49:57+00:00</updated-at>
  <user-id type="integer">15316</user-id>
  <version type="integer">11</version>
  <user-name>Aaron Patterson</user-name>
  <creator-name>Murray Steele</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
  <milestone-title>3.0.6</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Given the following models:

@@@ ruby

class Disesase &lt; ActiveRecord::Base
  has_and_belongs_to_many :fleas
  before_destroy :not_if_fleas_still_carry_it

  protected
  def not_if_fleas_still_carry_it
    raise ActiveRecord::Rollback unless fleas.empty?
  end
end

class Flea &lt; ActiveRecord::Base
  has_and_belongs_to_many :diseases
end

@@@

Then if we run the following code

@@@ ruby

plague = Disease.create
plague.fleas &lt;&lt; Flea.create
plague.fleas &lt;&lt; Flea.create

plague.fleas.reload.empty? #=&gt; false

plague.destroy
plague.destroyed? # =&gt; false

plague.fleas.reload.empty? #=&gt; true :(

@@@

e.g. a before_destroy that halts destruction of a model instance doesn't halt the clearing of the habtm join table for that instance.  The current implementation will only halt the clearing of the join table if the before_destroy throws an exception other than ActiveRecord::Rollback which is not the standard way of doing things.

This is mildly related to #6191 which fixed it so that the join table wasn't cleared before before_destroy callbacks were run.  The attached patch moves the clearing into an after_destroy instead of redefining the destroy method.</original-body>
  <latest-body>Given the following models:

@@@ ruby

class Disesase &lt; ActiveRecord::Base
  has_and_belongs_to_many :fleas
  before_destroy :not_if_fleas_still_carry_it

  protected
  def not_if_fleas_still_carry_it
    raise ActiveRecord::Rollback unless fleas.empty?
  end
end

class Flea &lt; ActiveRecord::Base
  has_and_belongs_to_many :diseases
end

@@@

Then if we run the following code

@@@ ruby

plague = Disease.create
plague.fleas &lt;&lt; Flea.create
plague.fleas &lt;&lt; Flea.create

plague.fleas.reload.empty? #=&gt; false

plague.destroy
plague.destroyed? # =&gt; false

plague.fleas.reload.empty? #=&gt; true :(

@@@

e.g. a before_destroy that halts destruction of a model instance doesn't halt the clearing of the habtm join table for that instance.  The current implementation will only halt the clearing of the join table if the before_destroy throws an exception other than ActiveRecord::Rollback which is not the standard way of doing things.

This is mildly related to #6191 which fixed it so that the join table wasn't cleared before before_destroy callbacks were run.  The attached patch moves the clearing into an after_destroy instead of redefining the destroy method.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Given the following models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class Disesase &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :fleas
  before_destroy :not_if_fleas_still_carry_it

  protected
  def not_if_fleas_still_carry_it
    raise ActiveRecord::Rollback unless fleas.empty?
  end
end

class Flea &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :diseases
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then if we run the following code&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
plague = Disease.create
plague.fleas &amp;lt;&amp;lt; Flea.create
plague.fleas &amp;lt;&amp;lt; Flea.create

plague.fleas.reload.empty? #=&amp;gt; false

plague.destroy
plague.destroyed? # =&amp;gt; false

plague.fleas.reload.empty? #=&amp;gt; true :(&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;e.g. a before_destroy that halts destruction of a model instance
doesn't halt the clearing of the habtm join table for that
instance. The current implementation will only halt the clearing of
the join table if the before_destroy throws an exception other than
ActiveRecord::Rollback which is not the standard way of doing
things.&lt;/p&gt;
&lt;p&gt;This is mildly related to &lt;a href=&quot;/projects/8994/tickets/6191&quot;
title=&quot;Ticket #6191&quot;&gt;#6191&lt;/a&gt; which fixed it so that the join
table wasn't cleared before before_destroy callbacks were run. The
attached patch moves the clearing into an after_destroy instead of
redefining the destroy method.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Given the following models:

@@@ ruby

class Disesase &lt; ActiveRecord::Base
  has_and_belongs_to_many :fleas
  before_destroy :not_if_fleas_still_carry_it

  protected
  def not_if_fleas_still_carry_it
    raise ActiveRecord::Rollback unless fleas.empty?
  end
end

class Flea &lt; ActiveRecord::Base
  has_and_belongs_to_many :diseases
end

@@@

Then if we run the following code

@@@ ruby

plague = Disease.create
plague.fleas &lt;&lt; Flea.create
plague.fleas &lt;&lt; Flea.create

plague.fleas.reload.empty? #=&gt; false

plague.destroy
plague.destroyed? # =&gt; false

plague.fleas.reload.empty? #=&gt; true :(

@@@

e.g. a before_destroy that halts destruction of a model instance doesn't halt the clearing of the habtm join table for that instance.  The current implementation will only halt the clearing of the join table if the before_destroy throws an exception other than ActiveRecord::Rollback which is not the standard way of doing things.

This is mildly related to #6191 which fixed it so that the join table wasn't cleared before before_destroy callbacks were run.  The attached patch moves the clearing into an after_destroy instead of redefining the destroy method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Given the following models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class Disesase &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :fleas
  before_destroy :not_if_fleas_still_carry_it

  protected
  def not_if_fleas_still_carry_it
    raise ActiveRecord::Rollback unless fleas.empty?
  end
end

class Flea &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :diseases
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then if we run the following code&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
plague = Disease.create
plague.fleas &amp;lt;&amp;lt; Flea.create
plague.fleas &amp;lt;&amp;lt; Flea.create

plague.fleas.reload.empty? #=&amp;gt; false

plague.destroy
plague.destroyed? # =&amp;gt; false

plague.fleas.reload.empty? #=&amp;gt; true :(&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;e.g. a before_destroy that halts destruction of a model instance
doesn't halt the clearing of the habtm join table for that
instance. The current implementation will only halt the clearing of
the join table if the before_destroy throws an exception other than
ActiveRecord::Rollback which is not the standard way of doing
things.&lt;/p&gt;
&lt;p&gt;This is mildly related to &lt;a href=&quot;/projects/8994/tickets/6191&quot;
title=&quot;Ticket #6191&quot;&gt;#6191&lt;/a&gt; which fixed it so that the join
table wasn't cleared before before_destroy callbacks were run. The
attached patch moves the clearing into an after_destroy instead of
redefining the destroy method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T12:37:42+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-11T12:37:44+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">1</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T14:27:36+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-11T14:27:46+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've also attached is a patch for 3-0-stable (the original patch is for master)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've also attached is a patch for 3-0-stable (the original patch
is for master)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T14:55:36+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-11T14:55:46+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">3</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-11T14:56:48+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-11T14:56:55+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">4</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>It seems this patch changes the current behavior such that the exception isn't re-raised.  Can you possibly provide an implementation that doesn't change the existing test?

I'm OK to change the behavior of the existing test, but not in a bugfix release.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It seems this patch changes the current behavior such that the
exception isn't re-raised. Can you possibly provide an
implementation that doesn't change the existing test?&lt;/p&gt;
&lt;p&gt;I'm OK to change the behavior of the existing test, but not in a
bugfix release.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-22T22:14:00+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-22T22:14:14+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">5</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>&gt; It seems this patch changes the current behavior such that the exception isn't re-raised.

isnt this the expceted behaviour if ActiveRecord::Rollback is raised?

&gt; ActiveRecord::Transactions::ClassMethods.transaction uses this exception to distinguish a deliberate rollback from other exceptional situations. Normally, raising an exception will cause the transaction method to rollback the database transaction and pass on the exception. But if you raise an ActiveRecord::Rollback exception, then the database transaction will be rolled back, without passing on the exception.


Also im concerned with the order of destruction.
Destroying the associated objects after the destroy violates foreign key constraints as stated in #4386.
We seem to have a major inconsistency between has_many and has_and_belongs_to_many. In has_many the dependant destroy is hooked as a before_callback

&gt; rails / activerecord / lib / active_record / associations / builder / has_many.rb 

&gt;23  model.before_destroy dependency_method_name

and has_and_belongs_to_many runs it afterwards

&gt; rails / activerecord / lib / active_record / associations / builder / has_and_belongs_to_many.rb 

&gt; 23 super # super

&gt; 24 #{name}.clear # posts.clear


I thing the goal should be to do the destruction of the associated objects after the before_destroy callbacks of the model and before the actual destroy, so before_destroy callbacks dont see any change and fk constraints can be honored.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;It seems this patch changes the current behavior such that the
exception isn't re-raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;isnt this the expceted behaviour if ActiveRecord::Rollback is
raised?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ActiveRecord::Transactions::ClassMethods.transaction uses this
exception to distinguish a deliberate rollback from other
exceptional situations. Normally, raising an exception will cause
the transaction method to rollback the database transaction and
pass on the exception. But if you raise an ActiveRecord::Rollback
exception, then the database transaction will be rolled back,
without passing on the exception.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also im concerned with the order of destruction.&lt;br&gt;
Destroying the associated objects after the destroy violates
foreign key constraints as stated in &lt;a href=
&quot;/projects/8994/tickets/4386&quot; title=&quot;Ticket #4386&quot;&gt;#4386&lt;/a&gt;.&lt;br&gt;
We seem to have a major inconsistency between has_many and
has_and_belongs_to_many. In has_many the dependant destroy is
hooked as a before_callback&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rails / activerecord / lib / active_record / associations /
builder / has_many.rb&lt;/p&gt;
&lt;p&gt;23 model.before_destroy dependency_method_name&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and has_and_belongs_to_many runs it afterwards&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;rails / activerecord / lib / active_record / associations /
builder / has_and_belongs_to_many.rb&lt;/p&gt;
&lt;p&gt;23 super # super&lt;/p&gt;
&lt;p&gt;24 #{name}.clear # posts.clear&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I thing the goal should be to do the destruction of the
associated objects after the before_destroy callbacks of the model
and before the actual destroy, so before_destroy callbacks dont see
any change and fk constraints can be honored.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T01:00:44+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-23T01:00:58+00:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">6</version>
      <user-name>Kane</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Attached reworked versions of both patches.

&gt; It seems this patch changes the current behavior such that the exception isn't re-raised. Can you 
possibly provide an implementation that doesn't change the existing test?
&gt; 
&gt; I'm OK to change the behavior of the existing test, but not in a bugfix release.

Aaron - I've redone the first commit in both patches to not change the behaviour of the Lesson object so it's before_destroy still raises a LessonError and added a (for this test only) before_destroy to Student that raises an ActiveRecord::Rollback and then tested both cases.  I think that should address your concerns, although adding a one-time before_destroy callback to Student is ugly - I'm happy to change that to something better if I can without adding a new model.

&gt; I thing the goal should be to do the destruction of the associated objects after the before_destroy callbacks of the model and before the actual destroy, so before_destroy callbacks dont see any change and fk constraints can be honored.

Kane - I think this would be a worthy goal, but I don't know how to tackle it.  I'll have a think about how we might ensure our before_destroy is always the last before_destroy.  However, should wanting to fix foreign key constraints hold up fixing this bug?  Maybe it's a separate issue, or we just need to make sure that whatever fixes #4386 also addresses what we've done here?  Aaron?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached reworked versions of both patches.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems this patch changes the current behavior such that the
exception isn't re-raised. Can you possibly provide an
implementation that doesn't change the existing test?&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I'm OK to change the behavior of the existing test, but not in a
bugfix release.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aaron - I've redone the first commit in both patches to not
change the behaviour of the Lesson object so it's before_destroy
still raises a LessonError and added a (for this test only)
before_destroy to Student that raises an ActiveRecord::Rollback and
then tested both cases. I think that should address your concerns,
although adding a one-time before_destroy callback to Student is
ugly - I'm happy to change that to something better if I can
without adding a new model.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thing the goal should be to do the destruction of the
associated objects after the before_destroy callbacks of the model
and before the actual destroy, so before_destroy callbacks dont see
any change and fk constraints can be honored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kane - I think this would be a worthy goal, but I don't know how
to tackle it. I'll have a think about how we might ensure our
before_destroy is always the last before_destroy. However, should
wanting to fix foreign key constraints hold up fixing this bug?
Maybe it's a separate issue, or we just need to make sure that
whatever fixes &lt;a href=&quot;/projects/8994/tickets/4386&quot; title=
&quot;Ticket #4386&quot;&gt;#4386&lt;/a&gt; also addresses what we've done here?
Aaron?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T12:32:31+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-23T12:32:45+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">7</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>ps. I removed the old patches so we don't get confused (as they had the same names). I hope this isn't bad form.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ps. I removed the old patches so we don't get confused (as they
had the same names). I hope this isn't bad form.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T12:34:30+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-23T12:34:41+00:00</updated-at>
      <user-id type="integer">136</user-id>
      <version type="integer">8</version>
      <user-name>Murray Steele</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>You are right, this is a seperate issue or should be addressed in #4386.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You are right, this is a seperate issue or should be addressed
in &lt;a href=&quot;/projects/8994/tickets/4386&quot; title=
&quot;Ticket #4386&quot;&gt;#4386&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T14:24:21+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-23T14:24:33+00:00</updated-at>
      <user-id type="integer">33030</user-id>
      <version type="integer">9</version>
      <user-name>Kane</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Murray awesome, thank you.  I think the foreign key fix should be dealt with in the other ticket.  :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Murray awesome, thank you. I think the foreign key fix should
be dealt with in the other ticket. :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-23T21:30:43+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:state: needs-more-info
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-23T21:30:59+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">10</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Applied and pushed.  Thanks a bunch!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Applied and pushed. Thanks a bunch!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-23T21:49:43+00:00</created-at>
      <creator-id type="integer">136</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">103410</milestone-id>
      <number type="integer">6562</number>
      <permalink>habtm-join-tables-cleared-on-destroy-even-if-a-before_destroy-says-dont</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>before_destroy has_and_belongs_to_many patch</tag>
      <title>HABTM join tables cleared on destroy even if a before_destroy says don't</title>
      <updated-at type="datetime">2011-03-23T21:49:57+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">11</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Murray Steele</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6562</url>
      <milestone-title>3.0.6</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>fea3b82721dc38149bcdebffa2ef9e68151db9d6</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-23T12:32:31+00:00</created-at>
      <filename>3-0-stable_make_habtm_join_tabl.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">973590</id>
      <size type="integer">4733</size>
      <uploader-id type="integer">136</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/973590/3-0-stable_make_habtm_join_tabl.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>56026ca8b73de1dabf879b8456956b60fae770c1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-23T12:32:32+00:00</created-at>
      <filename>make_habtm_join_table_destructi.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">973592</id>
      <size type="integer">4552</size>
      <uploader-id type="integer">136</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/973592/make_habtm_join_table_destructi.diff</url>
    </attachment>
  </attachments>
</ticket>
