<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-01T03:15:24+01:00</created-at>
  <creator-id type="integer">21652</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2388</number>
  <permalink>feature-patch-configactive_recordraise_on_illegal_mass_assignment-option</permalink>
  <priority type="integer">1547</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>active_record attributes config feature_request patch</tag>
  <title>feature patch: config.active_record.raise_on_illegal_mass_assignment option</title>
  <updated-at type="datetime">2011-02-23T22:05:57+00:00</updated-at>
  <user-id type="integer">138470</user-id>
  <version type="integer">3</version>
  <user-name>Paul Alexander</user-name>
  <creator-name>azimux</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2388</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>attr_accessor/attr_protected make it so that values that shouldn't be mass assigned but are present in the passed in hash are ignored.  I'd like to have an option to have an exception/error raised in these situation instead of just having it ignored.  

The attatched patch allows one to put

@@@ruby
config.active_record.raise_on_illegal_mass_assignment = true
@@@

into the initializer block of environment.rb and then instead of ignoring bad keys in the hash sent to attributes=/new/create/update_attributes and friends, an IllegalMassAssignmentError will be raised.

Some thoughts:
What might be cooler would be to have attr_protected! and attr_accessible! singleton methods on ActiveRecord::Base so that the behavior can be selected at the attribute instead of application level.  This would require a slightly more complicated solution since 2 sets of protected/accessible attributes has to be maintained and processed in remove_attributes_protected_from_mass_assignment().</original-body>
  <latest-body>attr_accessor/attr_protected make it so that values that shouldn't be mass assigned but are present in the passed in hash are ignored.  I'd like to have an option to have an exception/error raised in these situation instead of just having it ignored.  

The attatched patch allows one to put

@@@ruby
config.active_record.raise_on_illegal_mass_assignment = true
@@@

into the initializer block of environment.rb and then instead of ignoring bad keys in the hash sent to attributes=/new/create/update_attributes and friends, an IllegalMassAssignmentError will be raised.

Some thoughts:
What might be cooler would be to have attr_protected! and attr_accessible! singleton methods on ActiveRecord::Base so that the behavior can be selected at the attribute instead of application level.  This would require a slightly more complicated solution since 2 sets of protected/accessible attributes has to be maintained and processed in remove_attributes_protected_from_mass_assignment().</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;attr_accessor/attr_protected make it so that values that
shouldn't be mass assigned but are present in the passed in hash
are ignored. I'd like to have an option to have an exception/error
raised in these situation instead of just having it
ignored.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The attatched patch allows one to put&lt;/p&gt;
&lt;p&gt;@@@ruby config.active_record.raise_on_illegal_mass_assignment =
true&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;

into the initializer block of environment.rb and then instead of ignoring bad keys in the hash sent to attributes=/new/create/update_attributes and friends, an IllegalMassAssignmentError will be raised.

Some thoughts:
What might be cooler would be to have attr_protected! and attr_accessible! singleton methods on ActiveRecord::Base so that the behavior can be selected at the attribute instead of application level.  This would require a slightly more complicated solution since 2 sets of protected/accessible attributes has to be maintained and processed in remove_attributes_protected_from_mass_assignment().
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>attr_accessor/attr_protected make it so that values that shouldn't be mass assigned but are present in the passed in hash are ignored.  I'd like to have an option to have an exception/error raised in these situation instead of just having it ignored.  

The attatched patch allows one to put

@@@ ruby
config.active_record.raise_on_illegal_mass_assignment = true
@@@

into the initializer block of environment.rb and then instead of ignoring bad keys in the hash sent to attributes=/new/create/update_attributes and friends, an IllegalMassAssignmentError will be raised.

Some thoughts:
What might be cooler would be to have attr_protected! and attr_accessible! singleton methods on ActiveRecord::Base so that the behavior can be selected at the attribute instead of application level.  This would require a slightly more complicated solution since 2 sets of protected/accessible attributes has to be maintained and processed in remove_attributes_protected_from_mass_assignment().</body>
      <body-html>&lt;div&gt;&lt;p&gt;attr_accessor/attr_protected make it so that values that
shouldn't be mass assigned but are present in the passed in hash
are ignored. I'd like to have an option to have an exception/error
raised in these situation instead of just having it
ignored.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The attatched patch allows one to put&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
config.active_record.raise_on_illegal_mass_assignment = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into the initializer block of environment.rb and then instead of
ignoring bad keys in the hash sent to
attributes=/new/create/update_attributes and friends, an
IllegalMassAssignmentError will be raised.&lt;/p&gt;
&lt;p&gt;Some thoughts: What might be cooler would be to have
attr_protected! and attr_accessible! singleton methods on
ActiveRecord::Base so that the behavior can be selected at the
attribute instead of application level. This would require a
slightly more complicated solution since 2 sets of
protected/accessible attributes has to be maintained and processed
in remove_attributes_protected_from_mass_assignment().&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-01T03:15:24+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2388</number>
      <permalink>feature-patch-configactive_recordraise_on_illegal_mass_assignment-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record attributes config feature_request patch</tag>
      <title>feature patch: config.active_record.raise_on_illegal_mass_assignment option</title>
      <updated-at type="datetime">2009-04-01T03:26:12+01:00</updated-at>
      <user-id type="integer">21652</user-id>
      <version type="integer">1</version>
      <user-name>azimux</user-name>
      <creator-name>azimux</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2388</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>We've had this feature before, but it has since been reverted. I think it's probably a better fit for a plugin. Assigning to Jeremy as he may have more to add.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We've had this feature before, but it has since been reverted. I
think it's probably a better fit for a plugin. Assigning to Jeremy
as he may have more to add.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T19:48:54+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2388</number>
      <permalink>feature-patch-configactive_recordraise_on_illegal_mass_assignment-option</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>active_record attributes config feature_request patch</tag>
      <title>feature patch: config.active_record.raise_on_illegal_mass_assignment option</title>
      <updated-at type="datetime">2009-05-17T19:48:58+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>azimux</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2388</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Plugin available at https://rubygems.org/gems/whiny-mass-assignment</body>
      <body-html>&lt;div&gt;&lt;p&gt;Plugin available at &lt;a href=
&quot;https://rubygems.org/gems/whiny-mass-assignment&quot;&gt;https://rubygems.org/gems/whiny-mass-assignment&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-23T22:05:45+00:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2388</number>
      <permalink>feature-patch-configactive_recordraise_on_illegal_mass_assignment-option</permalink>
      <priority type="integer">1547</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>active_record attributes config feature_request patch</tag>
      <title>feature patch: config.active_record.raise_on_illegal_mass_assignment option</title>
      <updated-at type="datetime">2011-02-23T22:05:57+00:00</updated-at>
      <user-id type="integer">138470</user-id>
      <version type="integer">3</version>
      <user-name>Paul Alexander</user-name>
      <creator-name>azimux</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2388</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>750663612d0628ec015c2f323c5fde8f0313e5b9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-01T03:15:24+01:00</created-at>
      <filename>0001-Added-a-config.active_record.raise_on_illegal_mass_a.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">106390</id>
      <size type="integer">2158</size>
      <uploader-id type="integer">21652</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/106390/0001-Added-a-config.active_record.raise_on_illegal_mass_a.patch</url>
    </attachment>
  </attachments>
</ticket>
