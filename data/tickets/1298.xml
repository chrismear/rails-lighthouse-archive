<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-30T12:14:40+00:00</created-at>
  <creator-id type="integer">36017</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1298</number>
  <permalink>212-changes-activerecord-validation-sequence-for-associations</permalink>
  <priority type="integer">702</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.1.2 activerecord validations</tag>
  <title>2.1.2 changes ActiveRecord validation sequence for associations</title>
  <updated-at type="datetime">2009-03-12T16:08:15+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Ahmet Dogramaci</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1298</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Person has one ContactInfo.  

class Person &lt; ActiveRecord::Base
  has_one    :contact_info, :as =&gt; :contactable, :dependent =&gt; :destroy    
end

On rails 2.1.0 ContactInfo validation is done before Person validation.  So, I can catch the errors in the contact info in Person after_validation call back.  This is necessary since I only display a single form to the user.

When I migrate the same code to 2.1.2, it looks like ContactInfo validation is done after Person validation.  So, I can not catch the contact info error in Person after_validation call back.

To me, this looks like a problem that would affect many applications since you can not catch dependent association errors.</original-body>
  <latest-body>Person has one ContactInfo.  

class Person &lt; ActiveRecord::Base
  has_one    :contact_info, :as =&gt; :contactable, :dependent =&gt; :destroy    
end

On rails 2.1.0 ContactInfo validation is done before Person validation.  So, I can catch the errors in the contact info in Person after_validation call back.  This is necessary since I only display a single form to the user.

When I migrate the same code to 2.1.2, it looks like ContactInfo validation is done after Person validation.  So, I can not catch the contact info error in Person after_validation call back.

To me, this looks like a problem that would affect many applications since you can not catch dependent association errors.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Person has one ContactInfo.&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base has_one :contact_info, :as
=&amp;gt; :contactable, :dependent =&amp;gt; :destroy end&lt;/p&gt;
&lt;p&gt;On rails 2.1.0 ContactInfo validation is done before Person
validation. So, I can catch the errors in the contact info in
Person after_validation call back. This is necessary since I only
display a single form to the user.&lt;/p&gt;
&lt;p&gt;When I migrate the same code to 2.1.2, it looks like ContactInfo
validation is done after Person validation. So, I can not catch the
contact info error in Person after_validation call back.&lt;/p&gt;
&lt;p&gt;To me, this looks like a problem that would affect many
applications since you can not catch dependent association
errors.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Person has one ContactInfo.  

class Person &lt; ActiveRecord::Base
  has_one    :contact_info, :as =&gt; :contactable, :dependent =&gt; :destroy    
end

On rails 2.1.0 ContactInfo validation is done before Person validation.  So, I can catch the errors in the contact info in Person after_validation call back.  This is necessary since I only display a single form to the user.

When I migrate the same code to 2.1.2, it looks like ContactInfo validation is done after Person validation.  So, I can not catch the contact info error in Person after_validation call back.

To me, this looks like a problem that would affect many applications since you can not catch dependent association errors.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Person has one ContactInfo.&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base has_one :contact_info, :as
=&amp;gt; :contactable, :dependent =&amp;gt; :destroy end&lt;/p&gt;
&lt;p&gt;On rails 2.1.0 ContactInfo validation is done before Person
validation. So, I can catch the errors in the contact info in
Person after_validation call back. This is necessary since I only
display a single form to the user.&lt;/p&gt;
&lt;p&gt;When I migrate the same code to 2.1.2, it looks like ContactInfo
validation is done after Person validation. So, I can not catch the
contact info error in Person after_validation call back.&lt;/p&gt;
&lt;p&gt;To me, this looks like a problem that would affect many
applications since you can not catch dependent association
errors.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-30T12:14:41+00:00</created-at>
      <creator-id type="integer">36017</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1298</number>
      <permalink>212-changes-activerecord-validation-sequence-for-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1.2 activerecord validations</tag>
      <title>2.1.2 changes ActiveRecord validation sequence for associations</title>
      <updated-at type="datetime">2008-10-30T12:14:42+00:00</updated-at>
      <user-id type="integer">36017</user-id>
      <version type="integer">1</version>
      <user-name>Ahmet Dogramaci</user-name>
      <creator-name>Ahmet Dogramaci</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1298</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That's expected behaviour. You could also play with :validate =&gt; true/false to match your needs.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;That's expected behaviour. You could also play with :validate
=&amp;gt; true/false to match your needs.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-12T16:08:13+00:00</created-at>
      <creator-id type="integer">36017</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1298</number>
      <permalink>212-changes-activerecord-validation-sequence-for-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.1.2 activerecord validations</tag>
      <title>2.1.2 changes ActiveRecord validation sequence for associations</title>
      <updated-at type="datetime">2009-03-12T16:08:15+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Ahmet Dogramaci</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1298</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
