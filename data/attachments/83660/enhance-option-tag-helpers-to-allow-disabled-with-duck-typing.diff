From 2768cc1efe1be0c02a351e8ad80bb4e18db4ef01 Mon Sep 17 00:00:00 2001
From: Tekin Suleyman <tekin@tekin.co.uk>
Date: Wed, 28 Jan 2009 22:26:37 +0000
Subject: [PATCH] Enhance option tag helpers to support disabled options and anonymous functions to identify selected options

---
 .../lib/action_view/helpers/form_options_helper.rb |  105 ++++++++++--
 .../test/template/form_options_helper_test.rb      |  188 +++++++++++---------
 2 files changed, 199 insertions(+), 94 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_options_helper.rb b/actionpack/lib/action_view/helpers/form_options_helper.rb
index 54c82cb..c7bc17a 100644
--- a/actionpack/lib/action_view/helpers/form_options_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_options_helper.rb
@@ -6,7 +6,7 @@ module ActionView
   module Helpers
     # Provides a number of methods for turning different kinds of containers into a set of option tags.
     # == Options
-    # The <tt>collection_select</tt>, <tt>country_select</tt>, <tt>select</tt>,
+    # The <tt>collection_select</tt>, <tt>select</tt>,
     # and <tt>time_zone_select</tt> methods take an <tt>options</tt> parameter,
     # a hash.
     #
@@ -28,7 +28,7 @@ module ActionView
     #
     # Example with @post.person_id => 2:
     #
-    #   select("post", "person_id", Person.find(:all).collect {|p| [ p.name, p.id ] }, {:include_blank => 'None'})
+    #   select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] }, {:include_blank => 'None'})
     #
     # could become:
     #
@@ -43,7 +43,7 @@ module ActionView
     #
     # Example:
     #
-    #   select("post", "person_id", Person.find(:all).collect {|p| [ p.name, p.id ] }, {:prompt => 'Select Person'})
+    #   select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] }, {:prompt => 'Select Person'})
     #
     # could become:
     #
@@ -68,6 +68,36 @@ module ActionView
     #     <option value="rock">rock</option>
     #     <option value="country">country</option>
     #   </select>
+    # 
+    # * <tt>:disabled</tt> - can be a single value or an array of values that will be disabled options in the final output. 
+    # 
+    # Example:
+    # 
+    #   select("post", "category", Post::CATEGORIES, {:disabled => 'restricted'})
+    #
+    # could become:
+    #
+    #   <select name="post[category]">
+    #     <option></option>
+    #     <option>joke</option>
+    #     <option>poem</option>
+    #     <option disabled="disabled">restricted</option>
+    #   </select>
+    # 
+    # When used with the <tt>collection_select</tt> helper, <tt>:disabled</tt> can also be a Proc that identifies those options that should be disabled.
+    # 
+    # Example:
+    # 
+    #   collection_select(:post, :category_id, Category.all, :id, :name, {:disabled => lambda{|category| category.archived? }})
+    #
+    # If the categories "2008 stuff" and "Christmas" return true when the method <tt>archived?</tt> is called, this would return:
+    #   <select name="post[category_id]">
+    #     <option value="1" disabled="disabled">2008 stuff</option>
+    #     <option value="2" disabled="disabled">Christmas</option>
+    #     <option value="3">Jokes</option>
+    #     <option value="4">Poems</option>
+    #   </select>
+    #
     module FormOptionsHelper
       include ERB::Util
 
@@ -76,7 +106,7 @@ module ActionView
       # See options_for_select for the required format of the choices parameter.
       #
       # Example with @post.person_id => 1:
-      #   select("post", "person_id", Person.find(:all).collect {|p| [ p.name, p.id ] }, { :include_blank => true })
+      #   select("post", "person_id", Person.all.collect {|p| [ p.name, p.id ] }, { :include_blank => true })
       #
       # could become:
       #
@@ -94,7 +124,8 @@ module ActionView
       # In addition, this allows a single partial to be used to generate form inputs for both edit and create forms.
       #
       # By default, <tt>post.person_id</tt> is the selected option.  Specify <tt>:selected => value</tt> to use a different selection
-      # or <tt>:selected => nil</tt> to leave all options unselected.
+      # or <tt>:selected => nil</tt> to leave all options unselected. Similarly, you can specify values to be disabled in the option
+      # tags by specifying the <tt>:disabled</tt> option. This can either be a single value or an array of values to be disabled.
       def select(object, method, choices, options = {}, html_options = {})
         InstanceTag.new(object, method, self, options.delete(:object)).to_select_tag(choices, options, html_options)
       end
@@ -120,7 +151,7 @@ module ActionView
       #   end
       #
       # Sample usage (selecting the associated Author for an instance of Post, <tt>@post</tt>):
-      #   collection_select(:post, :author_id, Author.find(:all), :id, :name_with_initial, {:prompt => true})
+      #   collection_select(:post, :author_id, Author.all, :id, :name_with_initial, {:prompt => true})
       #
       # If <tt>@post.author_id</tt> is already <tt>1</tt>, this would return:
       #   <select name="post[author_id]">
@@ -186,14 +217,29 @@ module ActionView
       #   options_for_select([ "VISA", "MasterCard", "Discover" ], ["VISA", "Discover"])
       #     <option selected="selected">VISA</option>\n<option>MasterCard</option>\n<option selected="selected">Discover</option>
       #
+      # If you wish to specify disabled option tags, set +selected+ to be a hash, with <tt>:disabled</tt> being either a value
+      # or array of values to be disabled. In this case, you can use <tt>:selected</tt> to specify selected option tags.
+      # 
+      # Examples:
+      #   options_for_select(["Free", "Basic", "Advanced", "Super Platinum"], :disabled => "Super Platinum")
+      #     <option value="Free">Free</option>\n<option value="Basic">Basic</option>\n<option value="Advanced">Advanced</option>\n<option value="Super Platinum" disabled="disabled">Super Platinum</option>
+      #
+      #   options_for_select(["Free", "Basic", "Advanced", "Super Platinum"], :disabled => ["Advanced", "Super Platinum"])
+      #     <option value="Free">Free</option>\n<option value="Basic">Basic</option>\n<option value="Advanced" disabled="disabled">Advanced</option>\n<option value="Super Platinum" disabled="disabled">Super Platinum</option>
+      # 
+      #   options_for_select(["Free", "Basic", "Advanced", "Super Platinum"], :selected => "Free", :disabled => "Super Platinum")
+      #     <option value="Free" selected="selected">Free</option>\n<option value="Basic">Basic</option>\n<option value="Advanced">Advanced</option>\n<option value="Super Platinum" disabled="disabled">Super Platinum</option>
+      # 
       # NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.
       def options_for_select(container, selected = nil)
         container = container.to_a if Hash === container
+        selected, disabled = extract_selected_and_disabled(selected)
 
         options_for_select = container.inject([]) do |options, element|
           text, value = option_text_and_value(element)
           selected_attribute = ' selected="selected"' if option_value_selected?(value, selected)
-          options << %(<option value="#{html_escape(value.to_s)}"#{selected_attribute}>#{html_escape(text.to_s)}</option>)
+          disabled_attribute = ' disabled="disabled"' if disabled && option_value_selected?(value, disabled)
+          options << %(<option value="#{html_escape(value.to_s)}"#{selected_attribute}#{disabled_attribute}>#{html_escape(text.to_s)}</option>)
         end
 
         options_for_select.join("\n")
@@ -209,8 +255,15 @@ module ActionView
       # This is more often than not used inside a #select_tag like this example:
       #   select_tag 'person', options_from_collection_for_select(@people, 'id', 'name')
       #
-      # If +selected+ is specified, the element returning a match on +value_method+ will get the selected option tag.
-      # Be sure to specify the same class as the +value_method+ when specifying a selected option.
+      # If +selected+ is specified as a value or array of values, the element(s) returning a match on +value_method+
+      # will be selected option tag(s).
+      # 
+      # If +selected+ is specified as a Proc, those members of the collection that return true for the anonymous
+      # function are the selected values.
+      # 
+      # +selected+ can also be a hash, specifying both <tt>:selected</tt> and <tt>:disabled</tt> values as required.
+      # 
+      # Be sure to specify the same class as the +value_method+ when specifying selected or disabled options.
       # Failure to do this will produce undesired results. Example:
       #   options_from_collection_for_select(@people, 'id', 'name', '1')
       # Will not select a person with the id of 1 because 1 (an Integer) is not the same as '1' (a string)
@@ -220,7 +273,12 @@ module ActionView
         options = collection.map do |element|
           [element.send(text_method), element.send(value_method)]
         end
-        options_for_select(options, selected)
+        selected, disabled = extract_selected_and_disabled(selected)
+        select_deselect = {}              
+        select_deselect[:selected] = extract_values_from_collection(collection, value_method, selected)
+        select_deselect[:disabled] = extract_values_from_collection(collection, value_method, disabled)
+
+        options_for_select(options, select_deselect)
       end
 
       # Returns a string of <tt><option></tt> tags, like <tt>options_from_collection_for_select</tt>, but
@@ -238,7 +296,8 @@ module ActionView
       #   +collection+, returns a value to be used as the contents of its <tt><option></tt> tag.
       # * +selected_key+ - A value equal to the +value+ attribute for one of the <tt><option></tt> tags,
       #   which will have the +selected+ attribute set. Corresponds to the return value of one of the calls
-      #   to +option_key_method+. If +nil+, no selection is made.
+      #   to +option_key_method+. If +nil+, no selection is made. Can also be a hash if disabled values are
+      #   to be specified.
       #
       # Example object structure for use with this method:
       #   class Continent < ActiveRecord::Base
@@ -388,6 +447,24 @@ module ActionView
             value == selected
           end
         end
+
+        def extract_selected_and_disabled(selected)
+          if selected.is_a?(Hash)
+            [selected[:selected], selected[:disabled]]
+          else
+            [selected, nil]
+          end        
+        end
+
+        def extract_values_from_collection(collection, value_method, selected)
+          if selected.is_a?(Proc)
+            collection.map do |element|
+              element.send(value_method) if selected.call(element) 
+            end.compact
+          else
+            selected
+          end
+        end
     end
 
     class InstanceTag #:nodoc:
@@ -398,16 +475,18 @@ module ActionView
         add_default_name_and_id(html_options)
         value = value(object)
         selected_value = options.has_key?(:selected) ? options[:selected] : value
-        content_tag("select", add_options(options_for_select(choices, selected_value), options, selected_value), html_options)
+        disabled_value = options.has_key?(:disabled) ? options[:disabled] : nil
+        content_tag("select", add_options(options_for_select(choices, :selected => selected_value, :disabled => disabled_value), options, selected_value), html_options)
       end
 
       def to_collection_select_tag(collection, value_method, text_method, options, html_options)
         html_options = html_options.stringify_keys
         add_default_name_and_id(html_options)
         value = value(object)
+        disabled_value = options.has_key?(:disabled) ? options[:disabled] : nil
         selected_value = options.has_key?(:selected) ? options[:selected] : value
         content_tag(
-          "select", add_options(options_from_collection_for_select(collection, value_method, text_method, selected_value), options, value), html_options
+          "select", add_options(options_from_collection_for_select(collection, value_method, text_method, :selected => selected_value, :disabled => disabled_value), options, value), html_options
         )
       end
 
diff --git a/actionpack/test/template/form_options_helper_test.rb b/actionpack/test/template/form_options_helper_test.rb
index 86b321e..96347c6 100644
--- a/actionpack/test/template/form_options_helper_test.rb
+++ b/actionpack/test/template/form_options_helper_test.rb
@@ -25,43 +25,60 @@ uses_mocha "FormOptionsHelperTest" do
     end
 
     def test_collection_options
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       assert_dom_equal(
         "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\">Babe went home</option>\n<option value=\"Cabe\">Cabe went home</option>",
-        options_from_collection_for_select(@posts, "author_name", "title")
+        options_from_collection_for_select(dummy_posts, "author_name", "title")
       )
     end
 
 
     def test_collection_options_with_preselected_value
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       assert_dom_equal(
         "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" selected=\"selected\">Babe went home</option>\n<option value=\"Cabe\">Cabe went home</option>",
-        options_from_collection_for_select(@posts, "author_name", "title", "Babe")
+        options_from_collection_for_select(dummy_posts, "author_name", "title", "Babe")
       )
     end
 
     def test_collection_options_with_preselected_value_array
-        @posts = [
-          Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-          Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-          Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-        ]
+      assert_dom_equal(
+        "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" selected=\"selected\">Babe went home</option>\n<option value=\"Cabe\" selected=\"selected\">Cabe went home</option>",
+        options_from_collection_for_select(dummy_posts, "author_name", "title", [ "Babe", "Cabe" ])
+      )
+    end
 
-        assert_dom_equal(
-          "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" selected=\"selected\">Babe went home</option>\n<option value=\"Cabe\" selected=\"selected\">Cabe went home</option>",
-          options_from_collection_for_select(@posts, "author_name", "title", [ "Babe", "Cabe" ])
-        )
+    def test_collection_options_with_proc_for_selected
+      assert_dom_equal(
+        "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" selected=\"selected\">Babe went home</option>\n<option value=\"Cabe\">Cabe went home</option>",
+        options_from_collection_for_select(dummy_posts, "author_name", "title", lambda{|p| p.author_name == 'Babe' })
+      )
+    end
+
+    def test_collection_options_with_disabled_value
+      assert_dom_equal(
+        "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" disabled=\"disabled\">Babe went home</option>\n<option value=\"Cabe\">Cabe went home</option>",
+        options_from_collection_for_select(dummy_posts, "author_name", "title", :disabled => "Babe")
+      )
+    end
+
+    def test_collection_options_with_disabled_array
+      assert_dom_equal(
+        "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" disabled=\"disabled\">Babe went home</option>\n<option value=\"Cabe\" disabled=\"disabled\">Cabe went home</option>",
+        options_from_collection_for_select(dummy_posts, "author_name", "title", :disabled => [ "Babe", "Cabe" ])
+      )
+    end
+
+    def test_collection_options_with_preselected_and_disabled_value
+      assert_dom_equal(
+        "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" disabled=\"disabled\">Babe went home</option>\n<option value=\"Cabe\" selected=\"selected\">Cabe went home</option>",
+        options_from_collection_for_select(dummy_posts, "author_name", "title", :selected => "Cabe", :disabled => "Babe")
+      )
+    end
+
+    def test_collection_options_with_proc_for_disabled
+      assert_dom_equal(
+        "<option value=\"&lt;Abe&gt;\">&lt;Abe&gt; went home</option>\n<option value=\"Babe\" disabled=\"disabled\">Babe went home</option>\n<option value=\"Cabe\" disabled=\"disabled\">Cabe went home</option>",
+        options_from_collection_for_select(dummy_posts, "author_name", "title", :disabled => lambda{|p| %w(Babe Cabe).include? p.author_name })
+      )
     end
 
     def test_array_options_for_select
@@ -85,6 +102,27 @@ uses_mocha "FormOptionsHelperTest" do
         )
     end
 
+    def test_array_options_for_select_with_disabled_value
+      assert_dom_equal(
+        "<option value=\"Denmark\">Denmark</option>\n<option value=\"&lt;USA&gt;\" disabled=\"disabled\">&lt;USA&gt;</option>\n<option value=\"Sweden\">Sweden</option>",
+        options_for_select([ "Denmark", "<USA>", "Sweden" ], :disabled => "<USA>")
+      )
+    end
+
+    def test_array_options_for_select_with_disabled_array
+      assert_dom_equal(
+        "<option value=\"Denmark\">Denmark</option>\n<option value=\"&lt;USA&gt;\" disabled=\"disabled\">&lt;USA&gt;</option>\n<option value=\"Sweden\" disabled=\"disabled\">Sweden</option>",
+        options_for_select([ "Denmark", "<USA>", "Sweden" ], :disabled => ["<USA>", "Sweden"])
+      )
+    end
+
+    def test_array_options_for_select_with_selection_and_disabled_value
+      assert_dom_equal(
+        "<option value=\"Denmark\" selected=\"selected\">Denmark</option>\n<option value=\"&lt;USA&gt;\" disabled=\"disabled\">&lt;USA&gt;</option>\n<option value=\"Sweden\">Sweden</option>",
+        options_for_select([ "Denmark", "<USA>", "Sweden" ], :selected => "Denmark", :disabled => "<USA>")
+      )
+    end
+
     def test_array_options_for_string_include_in_other_string_bug_fix
         assert_dom_equal(
           "<option value=\"ruby\">ruby</option>\n<option value=\"rubyonrails\" selected=\"selected\">rubyonrails</option>",
@@ -349,7 +387,25 @@ uses_mocha "FormOptionsHelperTest" do
         select("post", "category", %w( abe <mus> hest ), :selected => 'abe')
       )
     end
-  
+
+    def test_select_with_disabled_value
+      @post = Post.new
+      @post.category = "<mus>"
+      assert_dom_equal(
+        "<select id=\"post_category\" name=\"post[category]\"><option value=\"abe\">abe</option>\n<option value=\"&lt;mus&gt;\" selected=\"selected\">&lt;mus&gt;</option>\n<option value=\"hest\" disabled=\"disabled\">hest</option></select>",
+        select("post", "category", %w( abe <mus> hest ), :disabled => 'hest')
+      )
+    end
+
+    def test_select_with_disabled_array
+      @post = Post.new
+      @post.category = "<mus>"
+      assert_dom_equal(
+        "<select id=\"post_category\" name=\"post[category]\"><option value=\"abe\" disabled=\"disabled\">abe</option>\n<option value=\"&lt;mus&gt;\" selected=\"selected\">&lt;mus&gt;</option>\n<option value=\"hest\" disabled=\"disabled\">hest</option></select>",
+        select("post", "category", %w( abe <mus> hest ), :disabled => ['hest', 'abe'])
+      )
+    end
+
     def test_select_with_index_option
       @album = Album.new
       @album.id = 1
@@ -372,33 +428,21 @@ uses_mocha "FormOptionsHelperTest" do
     end
 
     def test_collection_select
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
 
       assert_dom_equal(
         "<select id=\"post_author_name\" name=\"post[author_name]\"><option value=\"&lt;Abe&gt;\">&lt;Abe&gt;</option>\n<option value=\"Babe\" selected=\"selected\">Babe</option>\n<option value=\"Cabe\">Cabe</option></select>",
-        collection_select("post", "author_name", @posts, "author_name", "author_name")
+        collection_select("post", "author_name", dummy_posts, "author_name", "author_name")
       )
     end
 
     def test_collection_select_under_fields_for
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
 
       fields_for :post, @post do |f|
-        concat f.collection_select(:author_name, @posts, :author_name, :author_name)
+        concat f.collection_select(:author_name, dummy_posts, :author_name, :author_name)
       end
     
       assert_dom_equal(
@@ -408,17 +452,11 @@ uses_mocha "FormOptionsHelperTest" do
     end
 
     def test_collection_select_under_fields_for_with_index
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
 
       fields_for :post, @post, :index => 815 do |f|
-        concat f.collection_select(:author_name, @posts, :author_name, :author_name)
+        concat f.collection_select(:author_name, dummy_posts, :author_name, :author_name)
       end
 
       assert_dom_equal(
@@ -428,18 +466,12 @@ uses_mocha "FormOptionsHelperTest" do
     end
 
     def test_collection_select_under_fields_for_with_auto_index
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
       def @post.to_param; 815; end
 
       fields_for "post[]", @post do |f|
-        concat f.collection_select(:author_name, @posts, :author_name, :author_name)
+        concat f.collection_select(:author_name, dummy_posts, :author_name, :author_name)
       end
 
       assert_dom_equal(
@@ -449,69 +481,55 @@ uses_mocha "FormOptionsHelperTest" do
     end
 
     def test_collection_select_with_blank_and_style
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
 
       assert_dom_equal(
         "<select id=\"post_author_name\" name=\"post[author_name]\" style=\"width: 200px\"><option value=\"\"></option>\n<option value=\"&lt;Abe&gt;\">&lt;Abe&gt;</option>\n<option value=\"Babe\" selected=\"selected\">Babe</option>\n<option value=\"Cabe\">Cabe</option></select>",
-        collection_select("post", "author_name", @posts, "author_name", "author_name", { :include_blank => true }, "style" => "width: 200px")
+        collection_select("post", "author_name", dummy_posts, "author_name", "author_name", { :include_blank => true }, "style" => "width: 200px")
       )
     end
 
     def test_collection_select_with_blank_as_string_and_style
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
 
       assert_dom_equal(
         "<select id=\"post_author_name\" name=\"post[author_name]\" style=\"width: 200px\"><option value=\"\">No Selection</option>\n<option value=\"&lt;Abe&gt;\">&lt;Abe&gt;</option>\n<option value=\"Babe\" selected=\"selected\">Babe</option>\n<option value=\"Cabe\">Cabe</option></select>",
-        collection_select("post", "author_name", @posts, "author_name", "author_name", { :include_blank => 'No Selection' }, "style" => "width: 200px")
+        collection_select("post", "author_name", dummy_posts, "author_name", "author_name", { :include_blank => 'No Selection' }, "style" => "width: 200px")
       )
     end
 
     def test_collection_select_with_multiple_option_appends_array_brackets
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
 
       expected = "<select id=\"post_author_name\" name=\"post[author_name][]\" multiple=\"multiple\"><option value=\"\"></option>\n<option value=\"&lt;Abe&gt;\">&lt;Abe&gt;</option>\n<option value=\"Babe\" selected=\"selected\">Babe</option>\n<option value=\"Cabe\">Cabe</option></select>"
 
       # Should suffix default name with [].
-      assert_dom_equal expected, collection_select("post", "author_name", @posts, "author_name", "author_name", { :include_blank => true }, :multiple => true)
+      assert_dom_equal expected, collection_select("post", "author_name", dummy_posts, "author_name", "author_name", { :include_blank => true }, :multiple => true)
 
       # Shouldn't suffix custom name with [].
-      assert_dom_equal expected, collection_select("post", "author_name", @posts, "author_name", "author_name", { :include_blank => true, :name => 'post[author_name][]' }, :multiple => true)
+      assert_dom_equal expected, collection_select("post", "author_name", dummy_posts, "author_name", "author_name", { :include_blank => true, :name => 'post[author_name][]' }, :multiple => true)
     end
 
     def test_collection_select_with_blank_and_selected
-      @posts = [
-        Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
-        Post.new("Babe went home", "Babe", "To a little house", "shh!"),
-        Post.new("Cabe went home", "Cabe", "To a little house", "shh!")
-      ]
-
       @post = Post.new
       @post.author_name = "Babe"
 
       assert_dom_equal(
         %{<select id="post_author_name" name="post[author_name]"><option value=""></option>\n<option value="&lt;Abe&gt;" selected="selected">&lt;Abe&gt;</option>\n<option value="Babe">Babe</option>\n<option value="Cabe">Cabe</option></select>},
-        collection_select("post", "author_name", @posts, "author_name", "author_name", {:include_blank => true, :selected => "<Abe>"})
+        collection_select("post", "author_name", dummy_posts, "author_name", "author_name", {:include_blank => true, :selected => "<Abe>"})
+      )
+    end
+
+    def test_collection_select_with_disabled
+      @post = Post.new
+      @post.author_name = "Babe"
+
+      assert_dom_equal(
+        "<select id=\"post_author_name\" name=\"post[author_name]\"><option value=\"&lt;Abe&gt;\">&lt;Abe&gt;</option>\n<option value=\"Babe\" selected=\"selected\">Babe</option>\n<option value=\"Cabe\" disabled=\"disabled\">Cabe</option></select>",
+        collection_select("post", "author_name", dummy_posts, "author_name", "author_name", :disabled => 'Cabe')
       )
     end
 
@@ -723,6 +741,14 @@ uses_mocha "FormOptionsHelperTest" do
                      "</select>",
                      html
     end
+    
+    private
+        
+      def dummy_posts
+        [ Post.new("<Abe> went home", "<Abe>", "To a little house", "shh!"),
+          Post.new("Babe went home", "Babe", "To a little house", "shh!"),
+          Post.new("Cabe went home", "Cabe", "To a little house", "shh!") ]
+      end
 
   end
 end
-- 
1.5.5.4

