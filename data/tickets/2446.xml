<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-07T20:34:08+01:00</created-at>
  <creator-id type="integer">45857</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2446</number>
  <permalink>problem-escaping-00-with-sqlite</permalink>
  <priority type="integer">1595</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Problem escaping %00 with sqlite</title>
  <updated-at type="datetime">2011-02-02T17:33:28+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">4</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Alexey Borzenkov</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2446</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>First, how to reproduce:

$ rails example
$ cd example
$ ruby script/generate model Attachment data:binary
$ rake db:migrate
$ ruby script/console
&gt;&gt; a = Attachment.create(:data =&gt; &quot;\0\0%00\0\0&quot;)
&gt;&gt; a.data
=&gt; &quot;\000\000\000\000\000&quot;

As you can see %00 was happily replaced with \0, destroying my binary data.

I did some digging and found why this happens, but there are too many design decisions that could be involved, so I can't offer a definite fix for this. :( But here's what's going on:

There's type_cast method, that converts string data (that which came from the database, or that which came from user form) to the actual type. In case of :binary it is string_to_binary, which converts %00 and %25 to their character code equivalents. When the data comes from the database (that is for the string &quot;\0\0%00\0\0&quot; database is supposed to have &quot;%00%00%2500%00%00&quot;) it makes sense. But we just used create, which went thru write_attribute, which saved our string as it is in @attributes. Now comes the actual create call, or actually attributes_with_quotes, that uses read_attribute, which converts string representation to &quot;actual&quot; representation with type_cast, effectively turning our %00 to \0, which then, in the actual SQL statement is transformed to %00.

The problem here is that read_attribute does not distinguish between binary data that came from the database (and that needs type_cast), and binary data that came from developer via write_attribute (which must *not* be type_cast'ed). This results in destruction of any binary data that is unlucky enough to have %00 in it.

Such typecasting of binary seems to be a design flaw, and it either needs to convert binary data immediately when it comes from the database (I couldn't spot the exact spot yet, though), eliminating the need to upcast binary data (inside active_record it seems that only sqlite needs binary_to_string anyway). Or there must be a &quot;downcast&quot; when write_attribute is used, but this would lead to serious performance penalties, as it would lead to down/upcasting such binary data multiple times.</original-body>
  <latest-body>First, how to reproduce:

$ rails example
$ cd example
$ ruby script/generate model Attachment data:binary
$ rake db:migrate
$ ruby script/console
&gt;&gt; a = Attachment.create(:data =&gt; &quot;\0\0%00\0\0&quot;)
&gt;&gt; a.data
=&gt; &quot;\000\000\000\000\000&quot;

As you can see %00 was happily replaced with \0, destroying my binary data.

I did some digging and found why this happens, but there are too many design decisions that could be involved, so I can't offer a definite fix for this. :( But here's what's going on:

There's type_cast method, that converts string data (that which came from the database, or that which came from user form) to the actual type. In case of :binary it is string_to_binary, which converts %00 and %25 to their character code equivalents. When the data comes from the database (that is for the string &quot;\0\0%00\0\0&quot; database is supposed to have &quot;%00%00%2500%00%00&quot;) it makes sense. But we just used create, which went thru write_attribute, which saved our string as it is in @attributes. Now comes the actual create call, or actually attributes_with_quotes, that uses read_attribute, which converts string representation to &quot;actual&quot; representation with type_cast, effectively turning our %00 to \0, which then, in the actual SQL statement is transformed to %00.

The problem here is that read_attribute does not distinguish between binary data that came from the database (and that needs type_cast), and binary data that came from developer via write_attribute (which must *not* be type_cast'ed). This results in destruction of any binary data that is unlucky enough to have %00 in it.

Such typecasting of binary seems to be a design flaw, and it either needs to convert binary data immediately when it comes from the database (I couldn't spot the exact spot yet, though), eliminating the need to upcast binary data (inside active_record it seems that only sqlite needs binary_to_string anyway). Or there must be a &quot;downcast&quot; when write_attribute is used, but this would lead to serious performance penalties, as it would lead to down/upcasting such binary data multiple times.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;First, how to reproduce:&lt;/p&gt;
&lt;p&gt;$ rails example $ cd example $ ruby script/generate model
Attachment data:binary $ rake db:migrate $ ruby script/console&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;a = Attachment.create(:data =&amp;gt; &quot;\0\0%00\0\0&quot;) a.data =&amp;gt;
&quot;\000\000\000\000\000&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you can see %00 was happily replaced with \0, destroying my
binary data.&lt;/p&gt;
&lt;p&gt;I did some digging and found why this happens, but there are too
many design decisions that could be involved, so I can't offer a
definite fix for this. :( But here's what's going on:&lt;/p&gt;
&lt;p&gt;There's type_cast method, that converts string data (that which
came from the database, or that which came from user form) to the
actual type. In case of :binary it is string_to_binary, which
converts %00 and %25 to their character code equivalents. When the
data comes from the database (that is for the string &quot;\0\0%00\0\0&quot;
database is supposed to have &quot;%00%00%2500%00%00&quot;) it makes sense.
But we just used create, which went thru write_attribute, which
saved our string as it is in @attributes. Now comes the actual
create call, or actually attributes_with_quotes, that uses
read_attribute, which converts string representation to &quot;actual&quot;
representation with type_cast, effectively turning our %00 to \0,
which then, in the actual SQL statement is transformed to %00.&lt;/p&gt;
&lt;p&gt;The problem here is that read_attribute does not distinguish
between binary data that came from the database (and that needs
type_cast), and binary data that came from developer via
write_attribute (which must &lt;em&gt;not&lt;/em&gt; be type_cast'ed). This
results in destruction of any binary data that is unlucky enough to
have %00 in it.&lt;/p&gt;
&lt;p&gt;Such typecasting of binary seems to be a design flaw, and it
either needs to convert binary data immediately when it comes from
the database (I couldn't spot the exact spot yet, though),
eliminating the need to upcast binary data (inside active_record it
seems that only sqlite needs binary_to_string anyway). Or there
must be a &quot;downcast&quot; when write_attribute is used, but this would
lead to serious performance penalties, as it would lead to
down/upcasting such binary data multiple times.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>First, how to reproduce:

@@@
  $ rails example
  $ cd example
  $ ruby script/generate model Attachment data:binary
  $ rake db:migrate
  $ ruby script/console
  &gt;&gt; a = Attachment.create(:data =&gt; &quot;\0\0%00\0\0&quot;)
  &gt;&gt; a.data
  =&gt; &quot;\000\000\000\000\000&quot;
@@@

As you can see %00 was happily replaced with \0, destroying my binary data.

I did some digging and found why this happens, but there are too many design decisions that could be involved, so I can't offer a definite fix for this. :( But here's what's going on:

There's type_cast method, that converts string data (that which came from the database, or that which came from user form) to the actual type. In case of :binary it is binary_to_string, which converts %00 and %25 to their character code equivalents. When the data comes from the database (that is for the string &quot;\0\0%00\0\0&quot; database is supposed to have &quot;%00%00%2500%00%00&quot;) it makes sense. But we just used create, which went thru write_attribute, which saved our string as it is in @attributes. Now comes the actual create call, or actually attributes_with_quotes, that uses read_attribute, which converts string representation to &quot;actual&quot; representation with type_cast, effectively turning our %00 to \0, which then, in the actual SQL statement is transformed to %00.

The problem here is that read_attribute does not distinguish between binary data that came from the database (and that needs type_cast), and binary data that came from developer via write_attribute (which must *not* be type_cast'ed). This results in destruction of any binary data that is unlucky enough to have %00 in it.

Such typecasting of binary seems to be a design flaw, and it either needs to convert binary data immediately when it comes from the database (I couldn't spot the exact spot yet, though), eliminating the need to upcast binary data (inside active_record it seems that only sqlite needs binary_to_string anyway). Or there must be a &quot;downcast&quot; when write_attribute is used, but this would lead to serious performance penalties, as it would lead to down/upcasting such binary data multiple times.</body>
      <body-html>&lt;div&gt;&lt;p&gt;First, how to reproduce:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  $ rails example
  $ cd example
  $ ruby script/generate model Attachment data:binary
  $ rake db:migrate
  $ ruby script/console
  &amp;gt;&amp;gt; a = Attachment.create(:data =&amp;gt; &amp;quot;\0\0%00\0\0&amp;quot;)
  &amp;gt;&amp;gt; a.data
  =&amp;gt; &amp;quot;\000\000\000\000\000&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see %00 was happily replaced with \0, destroying my
binary data.&lt;/p&gt;
&lt;p&gt;I did some digging and found why this happens, but there are too
many design decisions that could be involved, so I can't offer a
definite fix for this. :( But here's what's going on:&lt;/p&gt;
&lt;p&gt;There's type_cast method, that converts string data (that which
came from the database, or that which came from user form) to the
actual type. In case of :binary it is binary_to_string, which
converts %00 and %25 to their character code equivalents. When the
data comes from the database (that is for the string &quot;\0\0%00\0\0&quot;
database is supposed to have &quot;%00%00%2500%00%00&quot;) it makes sense.
But we just used create, which went thru write_attribute, which
saved our string as it is in @attributes. Now comes the actual
create call, or actually attributes_with_quotes, that uses
read_attribute, which converts string representation to &quot;actual&quot;
representation with type_cast, effectively turning our %00 to \0,
which then, in the actual SQL statement is transformed to %00.&lt;/p&gt;
&lt;p&gt;The problem here is that read_attribute does not distinguish
between binary data that came from the database (and that needs
type_cast), and binary data that came from developer via
write_attribute (which must &lt;em&gt;not&lt;/em&gt; be type_cast'ed). This
results in destruction of any binary data that is unlucky enough to
have %00 in it.&lt;/p&gt;
&lt;p&gt;Such typecasting of binary seems to be a design flaw, and it
either needs to convert binary data immediately when it comes from
the database (I couldn't spot the exact spot yet, though),
eliminating the need to upcast binary data (inside active_record it
seems that only sqlite needs binary_to_string anyway). Or there
must be a &quot;downcast&quot; when write_attribute is used, but this would
lead to serious performance penalties, as it would lead to
down/upcasting such binary data multiple times.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-07T20:34:08+01:00</created-at>
      <creator-id type="integer">45857</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2446</number>
      <permalink>problem-escaping-00-with-sqlite</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Problem escaping %00 with sqlite</title>
      <updated-at type="datetime">2009-04-07T21:04:31+01:00</updated-at>
      <user-id type="integer">45857</user-id>
      <version type="integer">1</version>
      <user-name>Alexey Borzenkov</user-name>
      <creator-name>Alexey Borzenkov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2446</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:45+01:00</created-at>
      <creator-id type="integer">45857</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2446</number>
      <permalink>problem-escaping-00-with-sqlite</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Problem escaping %00 with sqlite</title>
      <updated-at type="datetime">2010-05-04T18:48:45+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Alexey Borzenkov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2446</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:40:00+00:00</created-at>
      <creator-id type="integer">45857</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2446</number>
      <permalink>problem-escaping-00-with-sqlite</permalink>
      <priority type="integer">1595</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Problem escaping %00 with sqlite</title>
      <updated-at type="datetime">2011-02-02T17:33:28+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Alexey Borzenkov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2446</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:40:02+00:00</created-at>
      <creator-id type="integer">45857</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2446</number>
      <permalink>problem-escaping-00-with-sqlite</permalink>
      <priority type="integer">1595</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Problem escaping %00 with sqlite</title>
      <updated-at type="datetime">2011-02-02T17:33:21+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Alexey Borzenkov</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2446</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
