From 2b8d9578a49ee250678a28bbaceec221f58086dd Mon Sep 17 00:00:00 2001
From: Nik Wakelin <nik@codetocustomer.com>
Date: Sat, 2 Aug 2008 17:44:02 +1200
Subject: [PATCH] Added MigrationProxy to defer loading of Migration classes until they are actually required by the migrator

---
 activerecord/lib/active_record/migration.rb |   36 ++++++++++++++++++++++----
 activerecord/test/cases/migration_test.rb   |   24 ++++++++++++++++-
 2 files changed, 52 insertions(+), 8 deletions(-)

diff --git a/activerecord/lib/active_record/migration.rb b/activerecord/lib/active_record/migration.rb
index 731a350..e79ac7c 100644
--- a/activerecord/lib/active_record/migration.rb
+++ b/activerecord/lib/active_record/migration.rb
@@ -348,7 +348,30 @@ module ActiveRecord
       end
     end
   end
+  
+  # MigrationProxy is used to defer loading of the actual migration classes
+  # until they are needed
+  class MigrationProxy 
+    
+    attr_accessor :name, :version, :filename
+    
+    def method_missing(meth, *args)
+      migration.send(meth, *args)
+    end
+    
+    private
 
+      def migration
+        @migration ||= load_migration
+      end
+    
+      def load_migration
+        load(filename)
+        name.constantize
+      end
+    
+  end
+  
   class Migrator#:nodoc:
     class << self
       def migrate(migrations_path, target_version = nil)
@@ -416,6 +439,7 @@ module ActiveRecord
       target = migrations.detect { |m| m.version == @target_version }
       raise UnknownMigrationVersionError.new(@target_version) if target.nil?
       unless (up? && migrated.include?(target.version.to_i)) || (down? && !migrated.include?(target.version.to_i))
+
         target.migrate(@direction)
         record_version_state_after_migrating(target.version)
       end
@@ -437,7 +461,7 @@ module ActiveRecord
       runnable.pop if down? && !target.nil?
       
       runnable.each do |migration|
-        Base.logger.info "Migrating to #{migration} (#{migration.version})"
+        Base.logger.info "Migrating to #{migration.name} (#{migration.version})"
 
         # On our way up, we skip migrating the ones we've already migrated
         # On our way down, we skip reverting the ones we've never migrated
@@ -470,11 +494,10 @@ module ActiveRecord
             raise DuplicateMigrationNameError.new(name.camelize) 
           end
           
-          load(file)
-          
-          klasses << returning(name.camelize.constantize) do |klass|
-            class << klass; attr_accessor :version end
-            klass.version = version
+          klasses << returning(MigrationProxy.new) do |migration| 
+            migration.name     = name.camelize
+            migration.version  = version
+            migration.filename = file
           end
         end
         
@@ -511,5 +534,6 @@ module ActiveRecord
       def down?
         @direction == :down
       end
+      
   end
 end
diff --git a/activerecord/test/cases/migration_test.rb b/activerecord/test/cases/migration_test.rb
index 7ecf755..0756c0c 100644
--- a/activerecord/test/cases/migration_test.rb
+++ b/activerecord/test/cases/migration_test.rb
@@ -14,7 +14,7 @@ if ActiveRecord::Base.connection.supports_migrations?
   class BigNumber < ActiveRecord::Base; end
 
   class Reminder < ActiveRecord::Base; end
-
+  
   class ActiveRecord::Migration
     class <<self
       attr_accessor :message_count
@@ -921,7 +921,27 @@ if ActiveRecord::Base.connection.supports_migrations?
       migrations[0].version == '3'
       migrations[0].name    == 'innocent_jointable'
     end
-
+    
+    def test_only_loads_pending_migrations
+      # migrate up to 1
+      ActiveRecord::Migrator.up(MIGRATIONS_ROOT + "/valid", 1)
+      
+      # now unload the migrations that have been defined
+      PeopleHaveLastNames.unloadable
+      ActiveSupport::Dependencies.remove_unloadable_constants!
+      
+      ActiveRecord::Migrator.migrate(MIGRATIONS_ROOT + "/valid", nil)        
+    
+      assert !defined? PeopleHaveLastNames
+      
+      %w(WeNeedReminders, InnocentJointable).each do |migration|
+        assert defined? migration
+      end
+      
+    ensure
+      load(MIGRATIONS_ROOT + "/valid/1_people_have_last_names.rb")
+    end
+     
     def test_migrator_interleaved_migrations
       ActiveRecord::Migrator.up(MIGRATIONS_ROOT + "/interleaved/pass_1")
 
-- 
1.5.6.1

