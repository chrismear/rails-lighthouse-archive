From e40152578dc80992e38092b495dbb4b695254731 Mon Sep 17 00:00:00 2001
From: Aaron Patterson <aaron.patterson@gmail.com>
Date: Wed, 17 Mar 2010 13:30:17 -0700
Subject: [PATCH] cleaning up a bunch of method already defined warnings [#4209 state:resolved]

---
 activemodel/lib/active_model/attribute_methods.rb  |   18 +++++++++++++++---
 .../lib/active_record/nested_attributes.rb         |    3 +++
 2 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/activemodel/lib/active_model/attribute_methods.rb b/activemodel/lib/active_model/attribute_methods.rb
index 588976f..7f2959f 100644
--- a/activemodel/lib/active_model/attribute_methods.rb
+++ b/activemodel/lib/active_model/attribute_methods.rb
@@ -90,13 +90,20 @@ module ActiveModel
       #   # => 'address_id'
       def define_attr_method(name, value=nil, &block)
         sing = singleton_class
-        sing.send :alias_method, "original_#{name}", name
+        sing.class_eval <<-eorb, __FILE__, __LINE__ + 1
+          if method_defined?(:original_#{name})
+            undef :original_#{name}
+          end
+          alias_method :original_#{name}, :#{name}
+        eorb
         if block_given?
           sing.send :define_method, name, &block
         else
           # use eval instead of a block to work around a memory leak in dev
           # mode in fcgi
-          sing.class_eval "def #{name}; #{value.to_s.inspect}; end"
+          sing.class_eval <<-eorb, __FILE__, __LINE__ + 1
+            def #{name}; #{value.to_s.inspect}; end
+          eorb
         end
       end
 
@@ -257,8 +264,13 @@ module ActiveModel
               if respond_to?(generate_method)
                 send(generate_method, attr_name)
               else
+                method_name = matcher.method_name(attr_name)
+
                 generated_attribute_methods.module_eval <<-STR, __FILE__, __LINE__+1
-                  def #{matcher.method_name(attr_name)}(*args)
+                  if method_defined?(:#{method_name})
+                    undef :#{method_name}
+                  end
+                  def #{method_name}(*args)
                     send(:#{matcher.method_missing_target}, '#{attr_name}', *args)
                   end
                 STR
diff --git a/activerecord/lib/active_record/nested_attributes.rb b/activerecord/lib/active_record/nested_attributes.rb
index bc491c3..76ec7eb 100644
--- a/activerecord/lib/active_record/nested_attributes.rb
+++ b/activerecord/lib/active_record/nested_attributes.rb
@@ -244,6 +244,9 @@ module ActiveRecord
             #   assign_nested_attributes_for_one_to_one_association(:pirate, attributes)
             # end
             class_eval <<-eoruby, __FILE__, __LINE__ + 1
+              if method_defined?(:#{association_name}_attributes=)
+                remove_method(:#{association_name}_attributes=)
+              end
               def #{association_name}_attributes=(attributes)
                 assign_nested_attributes_for_#{type}_association(:#{association_name}, attributes)
               end
-- 
1.6.6

