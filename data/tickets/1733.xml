<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-11T17:01:14+00:00</created-at>
  <creator-id type="integer">43205</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1733</number>
  <permalink>allow-finder-conditions-to-accept-string-ranges</permalink>
  <priority type="integer">1042</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord conditions find</tag>
  <title>allow finder conditions to accept string ranges</title>
  <updated-at type="datetime">2009-01-11T18:22:18+00:00</updated-at>
  <user-id type="integer">10354</user-id>
  <version type="integer">3</version>
  <user-name>Michael Klishin (antares)</user-name>
  <creator-name>Darius</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1733</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>For search forms, it is desireable to use a simple syntax for searching ranges.

In a view, I would like to be able to
&lt;code&gt;f.select :age, [&quot;18..21&quot;,&quot;21..28&quot;,&quot;25..35&quot;,&quot;35..108&quot;].map{|a|[a,a]}&lt;/code&gt;

and in the controller i would LIKE:
&lt;code&gt;Person.find(:all, :conditions=&gt;{:age=&gt;params[:person][:age]})&lt;/code&gt;

vs (I currently do):
&lt;code&gt;Person.find(:all, :conditions=&gt;{:age=&gt;extract_age_range(params[:person][:age])})
def extract_age_range(string); Range.new( ...stuff...) end&lt;/code&gt;

To pass ranges of this form through to the finders is messy; I either need to hack rails AR::Base, or alternatively add a controller method to match and translate these strings into ranges.

Making finder ranges(from some string convention) default supports restful design, and the overhead on finders is low. (an iteration of matching through the conditions hash)

This is my first patch, so I'm looking for feedback. Should this actually be a gem? Can do. Is my testing off-base? Happy to change.</original-body>
  <latest-body>For search forms, it is desireable to use a simple syntax for searching ranges.

In a view, I would like to be able to
&lt;code&gt;f.select :age, [&quot;18..21&quot;,&quot;21..28&quot;,&quot;25..35&quot;,&quot;35..108&quot;].map{|a|[a,a]}&lt;/code&gt;

and in the controller i would LIKE:
&lt;code&gt;Person.find(:all, :conditions=&gt;{:age=&gt;params[:person][:age]})&lt;/code&gt;

vs (I currently do):
&lt;code&gt;Person.find(:all, :conditions=&gt;{:age=&gt;extract_age_range(params[:person][:age])})
def extract_age_range(string); Range.new( ...stuff...) end&lt;/code&gt;

To pass ranges of this form through to the finders is messy; I either need to hack rails AR::Base, or alternatively add a controller method to match and translate these strings into ranges.

Making finder ranges(from some string convention) default supports restful design, and the overhead on finders is low. (an iteration of matching through the conditions hash)

This is my first patch, so I'm looking for feedback. Should this actually be a gem? Can do. Is my testing off-base? Happy to change.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;For search forms, it is desireable to use a simple syntax for
searching ranges.&lt;/p&gt;
&lt;p&gt;In a view, I would like to be able to f.select :age,
[&quot;18..21&quot;,&quot;21..28&quot;,&quot;25..35&quot;,&quot;35..108&quot;].map{|a|[a,a]}&lt;/p&gt;
&lt;p&gt;and in the controller i would LIKE: Person.find(:all,
:conditions=&amp;gt;{:age=&amp;gt;params[:person][:age]})&lt;/p&gt;
&lt;p&gt;vs (I currently do): Person.find(:all,
:conditions=&amp;gt;{:age=&amp;gt;extract_age_range(params[:person][:age])})
def extract_age_range(string); Range.new( ...stuff...) end&lt;/p&gt;
&lt;p&gt;To pass ranges of this form through to the finders is messy; I
either need to hack rails AR::Base, or alternatively add a
controller method to match and translate these strings into
ranges.&lt;/p&gt;
&lt;p&gt;Making finder ranges(from some string convention) default
supports restful design, and the overhead on finders is low. (an
iteration of matching through the conditions hash)&lt;/p&gt;
&lt;p&gt;This is my first patch, so I'm looking for feedback. Should this
actually be a gem? Can do. Is my testing off-base? Happy to
change.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For search forms, it is desireable to use a simple syntax for searching ranges.

In a view, I would like to be able to
&lt;code&gt;f.select :age, [&quot;18..21&quot;,&quot;21..28&quot;,&quot;25..35&quot;,&quot;35..108&quot;].map{|a|[a,a]}&lt;/code&gt;

and in the controller i would LIKE:
&lt;code&gt;Person.find(:all, :conditions=&gt;{:age=&gt;params[:person][:age]})&lt;/code&gt;

vs (I currently do):
&lt;code&gt;Person.find(:all, :conditions=&gt;{:age=&gt;extract_age_range(params[:person][:age])})
def extract_age_range(string); Range.new( ...stuff...) end&lt;/code&gt;

To pass ranges of this form through to the finders is messy; I either need to hack rails AR::Base, or alternatively add a controller method to match and translate these strings into ranges.

Making finder ranges(from some string convention) default supports restful design, and the overhead on finders is low. (an iteration of matching through the conditions hash)

This is my first patch, so I'm looking for feedback. Should this actually be a gem? Can do. Is my testing off-base? Happy to change.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For search forms, it is desireable to use a simple syntax for
searching ranges.&lt;/p&gt;
&lt;p&gt;In a view, I would like to be able to &lt;code&gt;f.select :age,
[&quot;18..21&quot;,&quot;21..28&quot;,&quot;25..35&quot;,&quot;35..108&quot;].map{|a|[a,a]}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and in the controller i would LIKE: &lt;code&gt;Person.find(:all,
:conditions=&amp;gt;{:age=&amp;gt;params[:person][:age]})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;vs (I currently do): &lt;code&gt;Person.find(:all,
:conditions=&amp;gt;{:age=&amp;gt;extract_age_range(params[:person][:age])})
def extract_age_range(string); Range.new( ...stuff...)
end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To pass ranges of this form through to the finders is messy; I
either need to hack rails AR::Base, or alternatively add a
controller method to match and translate these strings into
ranges.&lt;/p&gt;
&lt;p&gt;Making finder ranges(from some string convention) default
supports restful design, and the overhead on finders is low. (an
iteration of matching through the conditions hash)&lt;/p&gt;
&lt;p&gt;This is my first patch, so I'm looking for feedback. Should this
actually be a gem? Can do. Is my testing off-base? Happy to
change.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-11T17:01:14+00:00</created-at>
      <creator-id type="integer">43205</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1733</number>
      <permalink>allow-finder-conditions-to-accept-string-ranges</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord conditions find</tag>
      <title>allow finder conditions to accept string ranges</title>
      <updated-at type="datetime">2009-01-11T18:22:01+00:00</updated-at>
      <user-id type="integer">43205</user-id>
      <version type="integer">1</version>
      <user-name>Darius</user-name>
      <creator-name>Darius</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1733</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>the patch</body>
      <body-html>&lt;div&gt;&lt;p&gt;the patch&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-11T17:06:00+00:00</created-at>
      <creator-id type="integer">43205</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1733</number>
      <permalink>allow-finder-conditions-to-accept-string-ranges</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord conditions find</tag>
      <title>allow finder conditions to accept string ranges</title>
      <updated-at type="datetime">2009-01-11T18:22:04+00:00</updated-at>
      <user-id type="integer">43205</user-id>
      <version type="integer">2</version>
      <user-name>Darius</user-name>
      <creator-name>Darius</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1733</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Strongly against this magical feature. Params verification is important part of the work controller/models do explicitly, and adding even more magic to AR is not worth it for me. It is already the most magical piece of Ruby code out there.

If someone disagrees, reopen.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Strongly against this magical feature. Params verification is
important part of the work controller/models do explicitly, and
adding even more magic to AR is not worth it for me. It is already
the most magical piece of Ruby code out there.&lt;/p&gt;
&lt;p&gt;If someone disagrees, reopen.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-11T17:40:05+00:00</created-at>
      <creator-id type="integer">43205</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1733</number>
      <permalink>allow-finder-conditions-to-accept-string-ranges</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord conditions find</tag>
      <title>allow finder conditions to accept string ranges</title>
      <updated-at type="datetime">2009-01-11T18:22:18+00:00</updated-at>
      <user-id type="integer">10354</user-id>
      <version type="integer">3</version>
      <user-name>Michael Klishin (antares)</user-name>
      <creator-name>Darius</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1733</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>648c7ac75dc55b582907a35277ca188f3cd8c1d1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-11T17:06:00+00:00</created-at>
      <filename>finder_ranges_strings.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">77225</id>
      <size type="integer">3526</size>
      <uploader-id type="integer">43205</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/77225/finder_ranges_strings.diff</url>
    </attachment>
  </attachments>
</ticket>
