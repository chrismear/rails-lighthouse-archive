<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-17T06:48:08+00:00</created-at>
  <creator-id type="integer">103584</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">82855</milestone-id>
  <number type="integer">4961</number>
  <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag>migrations</tag>
  <title>schema_migrations already exists error on db:migrate with two-database app</title>
  <updated-at type="datetime">2011-02-17T06:48:08+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Wade Stebbings</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
  <milestone-title>2.3.10</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Although we have a unique situation with a single app connecting to two databases which also needs to perform joins across the two (mysql only), when setting this up we break migrations such that we see the following error:

  Mysql::Error: Table 'schema_migrations' already exists: CREATE TABLE `istads_dev`.`schema_migrations` (`version` varchar(255) NOT NULL) ENGINE=InnoDB

This problem was first discovered on 2.3.5 and still exists on 2.3.8.  From what I can tell from code inspection, the problem is fixed on 3.0.

I found the problematic line in:
  lib/active_record/connection_adapters/abstract/schema_statements.rb
in the initialize_schema_migrations_table method, which first tries to detect if schema_migrations exists or not.  This check fails because it is comparing the items returned from the tables method (strings of table names, not prefixed/suffixed) with the return value from ActiveRecord::Migrator.schema_migrations_table_name (which, in our case, includes the database prefix).  The check always fails, even when schema_migrations exists, thus the code to recreate it is where the exception occurs.

I've created a one-line patch which I have attached to this ticket.

I have run the following rake tests with all tests passing:
  test_mysql test_sqlite3 test_postgresql</original-body>
  <latest-body>Although we have a unique situation with a single app connecting to two databases which also needs to perform joins across the two (mysql only), when setting this up we break migrations such that we see the following error:

  Mysql::Error: Table 'schema_migrations' already exists: CREATE TABLE `istads_dev`.`schema_migrations` (`version` varchar(255) NOT NULL) ENGINE=InnoDB

This problem was first discovered on 2.3.5 and still exists on 2.3.8.  From what I can tell from code inspection, the problem is fixed on 3.0.

I found the problematic line in:
  lib/active_record/connection_adapters/abstract/schema_statements.rb
in the initialize_schema_migrations_table method, which first tries to detect if schema_migrations exists or not.  This check fails because it is comparing the items returned from the tables method (strings of table names, not prefixed/suffixed) with the return value from ActiveRecord::Migrator.schema_migrations_table_name (which, in our case, includes the database prefix).  The check always fails, even when schema_migrations exists, thus the code to recreate it is where the exception occurs.

I've created a one-line patch which I have attached to this ticket.

I have run the following rake tests with all tests passing:
  test_mysql test_sqlite3 test_postgresql</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Although we have a unique situation with a single app connecting
to two databases which also needs to perform joins across the two
(mysql only), when setting this up we break migrations such that we
see the following error:&lt;/p&gt;
&lt;p&gt;Mysql::Error: Table 'schema_migrations' already exists: CREATE
TABLE &lt;code&gt;istads_dev&lt;/code&gt;.&lt;code&gt;schema_migrations&lt;/code&gt;
(&lt;code&gt;version&lt;/code&gt; varchar(255) NOT NULL) ENGINE=InnoDB&lt;/p&gt;
&lt;p&gt;This problem was first discovered on 2.3.5 and still exists on
2.3.8. From what I can tell from code inspection, the problem is
fixed on 3.0.&lt;/p&gt;
&lt;p&gt;I found the problematic line in:&lt;br&gt;
lib/active_record/connection_adapters/abstract/schema_statements.rb
in the initialize_schema_migrations_table method, which first tries
to detect if schema_migrations exists or not. This check fails
because it is comparing the items returned from the tables method
(strings of table names, not prefixed/suffixed) with the return
value from ActiveRecord::Migrator.schema_migrations_table_name
(which, in our case, includes the database prefix). The check
always fails, even when schema_migrations exists, thus the code to
recreate it is where the exception occurs.&lt;/p&gt;
&lt;p&gt;I've created a one-line patch which I have attached to this
ticket.&lt;/p&gt;
&lt;p&gt;I have run the following rake tests with all tests passing:&lt;br&gt;
test_mysql test_sqlite3 test_postgresql&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Although we have a unique situation with a single app connecting to two databases which also needs to perform joins across the two (mysql only), when setting this up we break migrations such that we see the following error:

  Mysql::Error: Table 'schema_migrations' already exists: CREATE TABLE `istads_dev`.`schema_migrations` (`version` varchar(255) NOT NULL) ENGINE=InnoDB

This problem was first discovered on 2.3.5 and still exists on 2.3.8.  From what I can tell from code inspection, the problem is fixed on 3.0.

I found the problematic line in:
  lib/active_record/connection_adapters/abstract/schema_statements.rb
in the initialize_schema_migrations_table method, which first tries to detect if schema_migrations exists or not.  This check fails because it is comparing the items returned from the tables method (strings of table names, not prefixed/suffixed) with the return value from ActiveRecord::Migrator.schema_migrations_table_name (which, in our case, includes the database prefix).  The check always fails, even when schema_migrations exists, thus the code to recreate it is where the exception occurs.

I've created a one-line patch which I have attached to this ticket.

I have run the following rake tests with all tests passing:
  test_mysql test_sqlite3 test_postgresql</body>
      <body-html>&lt;div&gt;&lt;p&gt;Although we have a unique situation with a single app connecting
to two databases which also needs to perform joins across the two
(mysql only), when setting this up we break migrations such that we
see the following error:&lt;/p&gt;
&lt;p&gt;Mysql::Error: Table 'schema_migrations' already exists: CREATE
TABLE &lt;code&gt;istads_dev&lt;/code&gt;.&lt;code&gt;schema_migrations&lt;/code&gt;
(&lt;code&gt;version&lt;/code&gt; varchar(255) NOT NULL) ENGINE=InnoDB&lt;/p&gt;
&lt;p&gt;This problem was first discovered on 2.3.5 and still exists on
2.3.8. From what I can tell from code inspection, the problem is
fixed on 3.0.&lt;/p&gt;
&lt;p&gt;I found the problematic line in:&lt;br&gt;
lib/active_record/connection_adapters/abstract/schema_statements.rb
in the initialize_schema_migrations_table method, which first tries
to detect if schema_migrations exists or not. This check fails
because it is comparing the items returned from the tables method
(strings of table names, not prefixed/suffixed) with the return
value from ActiveRecord::Migrator.schema_migrations_table_name
(which, in our case, includes the database prefix). The check
always fails, even when schema_migrations exists, thus the code to
recreate it is where the exception occurs.&lt;/p&gt;
&lt;p&gt;I've created a one-line patch which I have attached to this
ticket.&lt;/p&gt;
&lt;p&gt;I have run the following rake tests with all tests passing:&lt;br&gt;
test_mysql test_sqlite3 test_postgresql&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-24T22:03:10+01:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2010-06-24T22:03:31+01:00</updated-at>
      <user-id type="integer">103584</user-id>
      <version type="integer">1</version>
      <user-name>Wade Stebbings</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I have not yet created a unique unit-test for this issue, but I've started looking into it.

To recreate the problem, a part of the description which skimmed-over in the description above, I have these things going on in my rails app:

* The app connects to two databases, one as the natural rails database, and one read-only metadata database which is quite huge.  Models for the metadata database inherit from an abstract class called Metadata:


class Metadata &lt; ActiveRecord::Base

  self.abstract_class = true

  def self.database_name

    metadata = &quot;#{RAILS_ENV}_metadata&quot;
    configurations[metadata]['database']
  end

  def self.connect_to_metadata_database
    metadata = &quot;#{RAILS_ENV}_metadata&quot;
    @schema_prefix = Metadata.database_name + '.'
    self.establish_connection metadata
        puts &quot;Connected to #{metadata.inspect}&quot;
  end

  connect_to_metadata_database

  def self.table_name_prefix
    @schema_prefix
  end

end


* Also, in order to deal with another problem with allowing joins to occur across the two databases, I created an initializer file, which looks like this:


class ActiveRecord::Base
  def self.set_schema_prefix
    @@schema_prefix = configurations[RAILS_ENV]['database'] + '.'
  end
  set_schema_prefix
  def self.table_name_prefix
    @@schema_prefix
  end
end

class ActiveRecord::ConnectionAdapters::MysqlAdapter
  def prefix_tables
    self.tables.map{|t| @@schema_prefix + t}
  end
  def self.set_schema_prefix
    @@schema_prefix = ActiveRecord::Base.configurations[RAILS_ENV]['database'] + '.'
  end
  set_schema_prefix
end</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have not yet created a unique unit-test for this issue, but
I've started looking into it.&lt;/p&gt;
&lt;p&gt;To recreate the problem, a part of the description which
skimmed-over in the description above, I have these things going on
in my rails app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The app connects to two databases, one as the natural rails
database, and one read-only metadata database which is quite huge.
Models for the metadata database inherit from an abstract class
called Metadata:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;class Metadata &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;p&gt;self.abstract_class = true&lt;/p&gt;
&lt;p&gt;def self.database_name&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;metadata = &quot;#{RAILS_ENV}_metadata&quot;
configurations[metadata]['database']&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;def self.connect_to_metadata_database&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;metadata = &quot;#{RAILS_ENV}_metadata&quot;
@schema_prefix = Metadata.database_name + '.'
self.establish_connection metadata
    puts &quot;Connected to #{metadata.inspect}&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;connect_to_metadata_database&lt;/p&gt;
&lt;p&gt;def self.table_name_prefix&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@schema_prefix&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Also, in order to deal with another problem with allowing joins
to occur across the two databases, I created an initializer file,
which looks like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;class ActiveRecord::Base&lt;br&gt;
def self.set_schema_prefix&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@@schema_prefix = configurations[RAILS_ENV]['database'] + '.'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end set_schema_prefix def self.table_name_prefix&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@@schema_prefix&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class ActiveRecord::ConnectionAdapters::MysqlAdapter&lt;br&gt;
def prefix_tables&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;self.tables.map{|t| @@schema_prefix + t}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end def self.set_schema_prefix&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@@schema_prefix = ActiveRecord::Base.configurations[RAILS_ENV]['database'] + '.'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end set_schema_prefix end&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-24T22:10:11+01:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2010-06-24T22:10:15+01:00</updated-at>
      <user-id type="integer">103584</user-id>
      <version type="integer">2</version>
      <user-name>Wade Stebbings</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>code-formatting got messed up above, here's another try..

@@@ ruby
class Metadata &lt; ActiveRecord::Base
  self.abstract_class = true
  def self.database_name
    metadata = &quot;#{RAILS_ENV}_metadata&quot;
    configurations[metadata]['database']
  end
  def self.connect_to_metadata_database
    metadata = &quot;#{RAILS_ENV}_metadata&quot;
    @schema_prefix = Metadata.database_name + '.'
    self.establish_connection metadata
        puts &quot;Connected to #{metadata.inspect}&quot;
  end
  connect_to_metadata_database
  def self.table_name_prefix
    @schema_prefix
  end
end
@@@


@@@ ruby
class ActiveRecord::Base
  def self.set_schema_prefix
    @@schema_prefix = configurations[RAILS_ENV]['database'] + '.'
  end
  set_schema_prefix
  def self.table_name_prefix
    @@schema_prefix
  end
end

class ActiveRecord::ConnectionAdapters::MysqlAdapter
  def prefix_tables
    self.tables.map{|t| @@schema_prefix + t}
  end
  def self.set_schema_prefix
    @@schema_prefix = ActiveRecord::Base.configurations[RAILS_ENV]['database'] + '.'
  end
  set_schema_prefix
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;code-formatting got messed up above, here's another try..&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Metadata &amp;lt; ActiveRecord::Base
  self.abstract_class = true
  def self.database_name
    metadata = &quot;#{RAILS_ENV}_metadata&quot;
    configurations[metadata]['database']
  end
  def self.connect_to_metadata_database
    metadata = &quot;#{RAILS_ENV}_metadata&quot;
    @schema_prefix = Metadata.database_name + '.'
    self.establish_connection metadata
        puts &quot;Connected to #{metadata.inspect}&quot;
  end
  connect_to_metadata_database
  def self.table_name_prefix
    @schema_prefix
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class ActiveRecord::Base
  def self.set_schema_prefix
    @@schema_prefix = configurations[RAILS_ENV]['database'] + '.'
  end
  set_schema_prefix
  def self.table_name_prefix
    @@schema_prefix
  end
end

class ActiveRecord::ConnectionAdapters::MysqlAdapter
  def prefix_tables
    self.tables.map{|t| @@schema_prefix + t}
  end
  def self.set_schema_prefix
    @@schema_prefix = ActiveRecord::Base.configurations[RAILS_ENV]['database'] + '.'
  end
  set_schema_prefix
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-24T22:13:46+01:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2010-06-24T22:13:56+01:00</updated-at>
      <user-id type="integer">103584</user-id>
      <version type="integer">3</version>
      <user-name>Wade Stebbings</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:01:44+00:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2011-02-02T19:01:12+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:01:45+00:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2011-02-02T19:00:02+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't believe this problem exists in rails 3.0 from looking at the code itself, as stated in my original posting.  This is a rails 2 issue only.  If no work on rails 2 is going to occur, even the latest of the 2.x branches, then this issue can be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I don't believe this problem exists in rails 3.0 from looking at
the code itself, as stated in my original posting. This is a rails
2 issue only. If no work on rails 2 is going to occur, even the
latest of the 2.x branches, then this issue can be closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T19:11:37+00:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2011-02-02T20:11:59+00:00</updated-at>
      <user-id type="integer">103584</user-id>
      <version type="integer">6</version>
      <user-name>Wade Stebbings</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T20:34:11+00:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: stale
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2011-02-02T20:45:39+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-17T05:56:03+00:00</created-at>
      <creator-id type="integer">103584</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">82855</milestone-id>
      <number type="integer">4961</number>
      <permalink>schema_migrations-already-exists-error-on-dbmigrate-with-two-database-app</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>migrations</tag>
      <title>schema_migrations already exists error on db:migrate with two-database app</title>
      <updated-at type="datetime">2011-02-17T06:48:08+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">8</version>
      <user-name>gfh</user-name>
      <creator-name>Wade Stebbings</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4961</url>
      <milestone-title>2.3.10</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>0ad354c987a337bc2211ad586daae1f6394950af</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-06-24T22:03:11+01:00</created-at>
      <filename>migrations_with_prefix_suffix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">572908</id>
      <size type="integer">1214</size>
      <uploader-id type="integer">103584</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/572908/migrations_with_prefix_suffix.diff</url>
    </attachment>
  </attachments>
</ticket>
