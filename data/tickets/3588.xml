<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">8406</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-16T21:51:59+00:00</created-at>
  <creator-id type="integer">73743</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3588</number>
  <permalink>autosave-true-accepts_nested_attributes_for-circular-validation-blown-stack</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>accepts_nested_attributes_for code inverse_of validates_presence_of validations</tag>
  <title>:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack</title>
  <updated-at type="datetime">2009-12-28T20:53:50+00:00</updated-at>
  <user-id type="integer">8406</user-id>
  <version type="integer">6</version>
  <user-name>Eloy Duran</user-name>
  <creator-name>Sai Emrys</creator-name>
  <assigned-user-name>Eloy Duran</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3588</url>
  <priority-name>Low</priority-name>
  <original-body>Consider the following:

class Discussion &lt; ActiveRecord::Base
  belongs_to :context, :polymorphic =&gt; true
  has_many :messages, :dependent =&gt; :destroy, :inverse =&gt; :discussion
  accepts_nested_attributes_for :messages
end

class Message &lt; ActiveRecord::Base
  belongs_to :discussion, :inverse =&gt; :messages, :autosave =&gt; true
  validates_presence_of :discussion

  def before_validation_on_create
    self.discussion ||= Discussion.new
  end
end

Scenario 1:
Create a new message and on the new record, set its discussion. Save the message, the discussion gets validated and saved properly. All is well, huzzah.

Scenario 2:
Create a new discussion together with nested message attributes. Save the discussion. It attempts to validate its messages, but they in turn try to validate their discussion, which tries to validate its messages... it recurses and blows stack. Boo.

This scenario can be prevented by turning off autosave =&gt; true, at the cost of breaking scenario 1.

This can also be prevented by turning off inverse (running from http://github.com/Fingertips/rails), at the cost of bug #2815 (#1943 may also be relevant), which makes Message's validation of its parent's existence fail. Additionally @discussion.messages.first.discussion != @discussion, which causes other issues. Fingertips' inverse_of patches nicely solve this.

I'm not sure how to fix this. Perhaps one could flag a record as having been validated at the BEGINNING of its validation cycle, and then not try to validate it again if that flag is set? This would prevent recursion, but might cause issues with mutually dependent validations of some sort that I'm failing to imagine.</original-body>
  <latest-body>Consider the following:

class Discussion &lt; ActiveRecord::Base
  belongs_to :context, :polymorphic =&gt; true
  has_many :messages, :dependent =&gt; :destroy, :inverse =&gt; :discussion
  accepts_nested_attributes_for :messages
end

class Message &lt; ActiveRecord::Base
  belongs_to :discussion, :inverse =&gt; :messages, :autosave =&gt; true
  validates_presence_of :discussion

  def before_validation_on_create
    self.discussion ||= Discussion.new
  end
end

Scenario 1:
Create a new message and on the new record, set its discussion. Save the message, the discussion gets validated and saved properly. All is well, huzzah.

Scenario 2:
Create a new discussion together with nested message attributes. Save the discussion. It attempts to validate its messages, but they in turn try to validate their discussion, which tries to validate its messages... it recurses and blows stack. Boo.

This scenario can be prevented by turning off autosave =&gt; true, at the cost of breaking scenario 1.

This can also be prevented by turning off inverse (running from http://github.com/Fingertips/rails), at the cost of bug #2815 (#1943 may also be relevant), which makes Message's validation of its parent's existence fail. Additionally @discussion.messages.first.discussion != @discussion, which causes other issues. Fingertips' inverse_of patches nicely solve this.

I'm not sure how to fix this. Perhaps one could flag a record as having been validated at the BEGINNING of its validation cycle, and then not try to validate it again if that flag is set? This would prevent recursion, but might cause issues with mutually dependent validations of some sort that I'm failing to imagine.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Consider the following:&lt;/p&gt;
&lt;p&gt;class Discussion &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :context, :polymorphic =&amp;gt; true has_many :messages,
:dependent =&amp;gt; :destroy, :inverse =&amp;gt; :discussion
accepts_nested_attributes_for :messages end&lt;/p&gt;
&lt;p&gt;class Message &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :discussion, :inverse =&amp;gt; :messages, :autosave =&amp;gt;
true validates_presence_of :discussion&lt;/p&gt;
&lt;p&gt;def before_validation_on_create&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;self.discussion ||= Discussion.new&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Scenario 1:&lt;br&gt;
Create a new message and on the new record, set its discussion.
Save the message, the discussion gets validated and saved properly.
All is well, huzzah.&lt;/p&gt;
&lt;p&gt;Scenario 2:&lt;br&gt;
Create a new discussion together with nested message attributes.
Save the discussion. It attempts to validate its messages, but they
in turn try to validate their discussion, which tries to validate
its messages... it recurses and blows stack. Boo.&lt;/p&gt;
&lt;p&gt;This scenario can be prevented by turning off autosave =&amp;gt;
true, at the cost of breaking scenario 1.&lt;/p&gt;
&lt;p&gt;This can also be prevented by turning off inverse (running from
&lt;a href=
&quot;http://github.com/Fingertips/rails)&quot;&gt;http://github.com/Fingertips/rails)&lt;/a&gt;,
at the cost of bug &lt;a href=&quot;/projects/8994/tickets/2815&quot; title=
&quot;Ticket #2815&quot;&gt;#2815&lt;/a&gt; (#1943 may also be relevant), which makes
Message's validation of its parent's existence fail. Additionally
@discussion.messages.first.discussion != @discussion, which causes
other issues. Fingertips' inverse_of patches nicely solve this.&lt;/p&gt;
&lt;p&gt;I'm not sure how to fix this. Perhaps one could flag a record as
having been validated at the BEGINNING of its validation cycle, and
then not try to validate it again if that flag is set? This would
prevent recursion, but might cause issues with mutually dependent
validations of some sort that I'm failing to imagine.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Consider the following:

    class Discussion &lt; ActiveRecord::Base
      belongs_to :context, :polymorphic =&gt; true
      has_many :messages, :dependent =&gt; :destroy, :inverse =&gt; :discussion
      accepts_nested_attributes_for :messages
    end
    
    class Message &lt; ActiveRecord::Base
      belongs_to :discussion, :inverse =&gt; :messages, :autosave =&gt; true
      validates_presence_of :discussion
    
      def before_validation_on_create
        self.discussion ||= Discussion.new
      end
    end

Scenario 1:
Create a new message. Save the message. Discussion gets created pre-validation, the discussion gets validated and everything is saved properly. All is well, huzzah.

Scenario 2:
Create a new discussion together with nested message attributes. Save the discussion. It attempts to validate its messages, but they in turn try to validate their discussion, which tries to validate its messages... it recurses and blows stack. Boo.

This scenario can be prevented by turning off autosave =&gt; true, at the cost of breaking scenario 1.

This can also be prevented by turning off inverse (running from http://github.com/Fingertips/rails), at the cost of bug #2815 (#1943 may also be relevant), which makes Message's validation of its parent's existence fail. Additionally @discussion.messages.first.discussion != @discussion, which causes other issues. Fingertips' inverse_of patches nicely solve this.

I'm not sure how to fix this. Perhaps one could flag a record as having been validated at the BEGINNING of its validation cycle, and then not try to validate it again if that flag is set? This would prevent recursion, but might cause issues with mutually dependent validations of some sort that I'm failing to imagine.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Consider the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Discussion &amp;lt; ActiveRecord::Base
  belongs_to :context, :polymorphic =&amp;gt; true
  has_many :messages, :dependent =&amp;gt; :destroy, :inverse =&amp;gt; :discussion
  accepts_nested_attributes_for :messages
end

class Message &amp;lt; ActiveRecord::Base
  belongs_to :discussion, :inverse =&amp;gt; :messages, :autosave =&amp;gt; true
  validates_presence_of :discussion

  def before_validation_on_create
    self.discussion ||= Discussion.new
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Scenario 1:&lt;br&gt;
Create a new message. Save the message. Discussion gets created
pre-validation, the discussion gets validated and everything is
saved properly. All is well, huzzah.&lt;/p&gt;
&lt;p&gt;Scenario 2:&lt;br&gt;
Create a new discussion together with nested message attributes.
Save the discussion. It attempts to validate its messages, but they
in turn try to validate their discussion, which tries to validate
its messages... it recurses and blows stack. Boo.&lt;/p&gt;
&lt;p&gt;This scenario can be prevented by turning off autosave =&amp;gt;
true, at the cost of breaking scenario 1.&lt;/p&gt;
&lt;p&gt;This can also be prevented by turning off inverse (running from
&lt;a href=
&quot;http://github.com/Fingertips/rails)&quot;&gt;http://github.com/Fingertips/rails)&lt;/a&gt;,
at the cost of bug &lt;a href=&quot;/projects/8994/tickets/2815&quot; title=
&quot;Ticket #2815&quot;&gt;#2815&lt;/a&gt; (#1943 may also be relevant), which makes
Message's validation of its parent's existence fail. Additionally
@discussion.messages.first.discussion != @discussion, which causes
other issues. Fingertips' inverse_of patches nicely solve this.&lt;/p&gt;
&lt;p&gt;I'm not sure how to fix this. Perhaps one could flag a record as
having been validated at the BEGINNING of its validation cycle, and
then not try to validate it again if that flag is set? This would
prevent recursion, but might cause issues with mutually dependent
validations of some sort that I'm failing to imagine.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-16T21:51:59+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3588</number>
      <permalink>autosave-true-accepts_nested_attributes_for-circular-validation-blown-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for code inverse_of validates_presence_of validations</tag>
      <title>:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack
</title>
      <updated-at type="datetime">2009-12-16T21:59:05+00:00</updated-at>
      <user-id type="integer">73743</user-id>
      <version type="integer">1</version>
      <user-name>Sai Emrys</user-name>
      <creator-name>Sai Emrys</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3588</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Eloy, would you mind looking at this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Eloy, would you mind looking at this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-16T22:08:31+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
:title: &quot;:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack\r\n&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3588</number>
      <permalink>autosave-true-accepts_nested_attributes_for-circular-validation-blown-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for code inverse_of validates_presence_of validations</tag>
      <title>:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack</title>
      <updated-at type="datetime">2009-12-16T22:08:32+00:00</updated-at>
      <user-id type="integer">8407</user-id>
      <version type="integer">2</version>
      <user-name>Manfred Stienstra</user-name>
      <creator-name>Sai Emrys</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3588</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://dev.rubyonrails.org/ticket/9355 may also be relevant.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;http://dev.rubyonrails.org/ticket/9355&quot;&gt;http://dev.rubyonrails.org/ticket/9355&lt;/a&gt;
may also be relevant.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-16T22:36:17+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3588</number>
      <permalink>autosave-true-accepts_nested_attributes_for-circular-validation-blown-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for code inverse_of validates_presence_of validations</tag>
      <title>:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack</title>
      <updated-at type="datetime">2009-12-16T22:36:20+00:00</updated-at>
      <user-id type="integer">73743</user-id>
      <version type="integer">3</version>
      <user-name>Sai Emrys</user-name>
      <creator-name>Sai Emrys</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3588</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I&#8217;m actually pretty glad you run into this problem, as you could verify the patch on #3533 for me :)

Please report on that ticket if the patch fixes your problem as expected, thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I&amp;#8217;m actually pretty glad you run into this problem, as you
could verify the patch on &lt;a href=&quot;/projects/8994/tickets/3533&quot;
title=&quot;Ticket #3533&quot;&gt;#3533&lt;/a&gt; for me :)&lt;/p&gt;
&lt;p&gt;Please report on that ticket if the patch fixes your problem as
expected, thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-17T10:44:30+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3588</number>
      <permalink>autosave-true-accepts_nested_attributes_for-circular-validation-blown-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for code inverse_of validates_presence_of validations</tag>
      <title>:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack</title>
      <updated-at type="datetime">2009-12-17T10:44:33+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">4</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Sai Emrys</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3588</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Actually, instead of only that patch, could you try this Rails branch? http://github.com/Fingertips/rails/tree/2-3-stable

It contains the aforementioned patch, plus a few other related ones that I'd also love to be tested by others.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Actually, instead of only that patch, could you try this Rails
branch? &lt;a href=
&quot;http://github.com/Fingertips/rails/tree/2-3-stable&quot;&gt;http://github.com/Fingertips/rails/tree/2-3-stable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It contains the aforementioned patch, plus a few other related
ones that I'd also love to be tested by others.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-17T14:41:43+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3588</number>
      <permalink>autosave-true-accepts_nested_attributes_for-circular-validation-blown-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for code inverse_of validates_presence_of validations</tag>
      <title>:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack</title>
      <updated-at type="datetime">2009-12-17T14:41:44+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">5</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Sai Emrys</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3588</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The :inverse_of patches have been pushed to 2-3-stable, closing for now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The :inverse_of patches have been pushed to 2-3-stable, closing
for now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-28T20:53:46+00:00</created-at>
      <creator-id type="integer">73743</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3588</number>
      <permalink>autosave-true-accepts_nested_attributes_for-circular-validation-blown-stack</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>accepts_nested_attributes_for code inverse_of validates_presence_of validations</tag>
      <title>:autosave =&gt; true + accepts_nested_attributes_for = circular validation &amp; blown stack</title>
      <updated-at type="datetime">2009-12-28T20:53:50+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">6</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Sai Emrys</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3588</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
