<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-03-12T10:38:52+00:00</created-at>
  <creator-id type="integer">42916</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4158</number>
  <permalink>has_one-and-belongs_to-loading-too-much</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord associations</tag>
  <title>has_one and belongs_to loading too much</title>
  <updated-at type="datetime">2010-03-12T18:23:22+00:00</updated-at>
  <user-id type="integer">19965</user-id>
  <version type="integer">2</version>
  <user-name>Jos&#233; Valim</user-name>
  <creator-name>Greg Hazel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4158</url>
  <priority-name>Low</priority-name>
  <original-body>@@@ ruby
class User &lt; ActiveRecord::Base
  has_one :profile
end

class Profile &lt; ActiveRecord::Base
  belongs_to :user
end
@@@

@@@ ruby
?&gt; current_user.profile.user.profile.user.profile.user.profile
  User Load (0.4ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
@@@

This one-liner is obviously just an demonstration of the issue. The actual situation this was discovered in was a few user methods which call methods on the profile which call methods on the user, etc.

The reflections could be aware of the symmetry and connect the two objects, preventing further loading.</original-body>
  <latest-body>@@@ ruby
class User &lt; ActiveRecord::Base
  has_one :profile
end

class Profile &lt; ActiveRecord::Base
  belongs_to :user
end
@@@

@@@ ruby
?&gt; current_user.profile.user.profile.user.profile.user.profile
  User Load (0.4ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
@@@

This one-liner is obviously just an demonstration of the issue. The actual situation this was discovered in was a few user methods which call methods on the profile which call methods on the user, etc.

The reflections could be aware of the symmetry and connect the two objects, preventing further loading.</latest-body>
  <original-body-html>&lt;div&gt;&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_one :profile
end

class Profile &amp;lt; ActiveRecord::Base
  belongs_to :user
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;?&amp;gt; current_user.profile.user.profile.user.profile.user.profile
  User Load (0.4ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This one-liner is obviously just an demonstration of the issue.
The actual situation this was discovered in was a few user methods
which call methods on the profile which call methods on the user,
etc.&lt;/p&gt;
&lt;p&gt;The reflections could be aware of the symmetry and connect the
two objects, preventing further loading.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@ ruby
class User &lt; ActiveRecord::Base
  has_one :profile
end

class Profile &lt; ActiveRecord::Base
  belongs_to :user
end
@@@

@@@ ruby
?&gt; current_user.profile.user.profile.user.profile.user.profile
  User Load (0.4ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
@@@

This one-liner is obviously just an demonstration of the issue. The actual situation this was discovered in was a few user methods which call methods on the profile which call methods on the user, etc.

The reflections could be aware of the symmetry and connect the two objects, preventing further loading.</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_one :profile
end

class Profile &amp;lt; ActiveRecord::Base
  belongs_to :user
end&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;?&amp;gt; current_user.profile.user.profile.user.profile.user.profile
  User Load (0.4ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1
  User Load (0.1ms)   SELECT * FROM `users` WHERE (`users`.`id` = 4)
  Profile Load (0.1ms)   SELECT * FROM `profiles` WHERE (`profiles`.user_id = 4) LIMIT 1&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This one-liner is obviously just an demonstration of the issue.
The actual situation this was discovered in was a few user methods
which call methods on the profile which call methods on the user,
etc.&lt;/p&gt;
&lt;p&gt;The reflections could be aware of the symmetry and connect the
two objects, preventing further loading.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-12T10:38:52+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4158</number>
      <permalink>has_one-and-belongs_to-loading-too-much</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations</tag>
      <title>has_one and belongs_to loading too much</title>
      <updated-at type="datetime">2010-03-12T10:39:25+00:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">1</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4158</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You need to use inverse_of.

has_one :profile, :inverse_of =&gt; :user

And vice-versa.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You need to use inverse_of.&lt;/p&gt;
&lt;p&gt;has_one :profile, :inverse_of =&amp;gt; :user&lt;/p&gt;
&lt;p&gt;And vice-versa.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-03-12T18:23:21+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4158</number>
      <permalink>has_one-and-belongs_to-loading-too-much</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord associations</tag>
      <title>has_one and belongs_to loading too much</title>
      <updated-at type="datetime">2010-03-12T18:23:22+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">2</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4158</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
