<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-21T01:46:04+01:00</created-at>
  <creator-id type="integer">27185</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">703</number>
  <permalink>mass-assign-update_attributes-not-handling-hash-with-id-of-existing-nested-models</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord bug has_many</tag>
  <title>Mass-assign &gt; update_attributes not handling Hash with :id of existing nested models</title>
  <updated-at type="datetime">2010-07-21T01:46:04+01:00</updated-at>
  <user-id type="integer">14890</user-id>
  <version type="integer">3</version>
  <user-name>Tarmo T&#228;nav</user-name>
  <creator-name>Glenn Powell</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/703</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I am attempting to utilize mass-assign for my models, but the system seems to break down when I use an association_collection of nested models and try to edit/update the parent model.

My create methods work fine, as the value passes into the parent's attributes is an Array of nested model attributes:

contact =&gt; { emails =&gt; [ { :address =&gt; &quot;foo@bar.com&quot; }, { :address =&gt; &quot;bar@foo.com&quot; } ] }

But, when I try to edit/update my parent model, the form's field names for the nested models include the :id of those models (which I believe is correct, as you are attempting to update those particular nested models). However, this causes the resulting value passed to the parent's update_attributes to no longer be an Array, but a Hash of this form:

contact =&gt; { emails =&gt; {&quot;5&quot; =&gt; { :address =&gt; &quot;oof@rab.com&quot; }, &quot;6&quot; =&gt; { :address =&gt; &quot;rab@oof.com&quot; } } }

Where the 5 and 6 are the :id values of the respective emails.  This gets passed into the update_attributes, which eventually gets to:

AssociationCollection.replace(other_array)

which assumes &quot;emails&quot; to be an Array instead of a Hash.

Shouldn't this replace method be &quot;smarter&quot; so that if a Hash is passed in, it will ascertain the :id values from it, and then reassign the model attributes accordingly?

Furthermore, what would happen if there were a combination of updated (existing) nested models and new nested models (with no :id in the field parameter).  I would hope that the mass-assign functionality of update_attributes handles this situation as well.</original-body>
  <latest-body>I am attempting to utilize mass-assign for my models, but the system seems to break down when I use an association_collection of nested models and try to edit/update the parent model.

My create methods work fine, as the value passes into the parent's attributes is an Array of nested model attributes:

contact =&gt; { emails =&gt; [ { :address =&gt; &quot;foo@bar.com&quot; }, { :address =&gt; &quot;bar@foo.com&quot; } ] }

But, when I try to edit/update my parent model, the form's field names for the nested models include the :id of those models (which I believe is correct, as you are attempting to update those particular nested models). However, this causes the resulting value passed to the parent's update_attributes to no longer be an Array, but a Hash of this form:

contact =&gt; { emails =&gt; {&quot;5&quot; =&gt; { :address =&gt; &quot;oof@rab.com&quot; }, &quot;6&quot; =&gt; { :address =&gt; &quot;rab@oof.com&quot; } } }

Where the 5 and 6 are the :id values of the respective emails.  This gets passed into the update_attributes, which eventually gets to:

AssociationCollection.replace(other_array)

which assumes &quot;emails&quot; to be an Array instead of a Hash.

Shouldn't this replace method be &quot;smarter&quot; so that if a Hash is passed in, it will ascertain the :id values from it, and then reassign the model attributes accordingly?

Furthermore, what would happen if there were a combination of updated (existing) nested models and new nested models (with no :id in the field parameter).  I would hope that the mass-assign functionality of update_attributes handles this situation as well.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I am attempting to utilize mass-assign for my models, but the system seems to break down when I use an association_collection of nested models and try to edit/update the parent model.
&lt;/p&gt;&lt;p&gt;
My create methods work fine, as the value passes into the parent's attributes is an Array of nested model attributes:
&lt;/p&gt;&lt;p&gt;
contact =&gt; { emails =&gt; [ { :address =&gt; &quot;&lt;a href=&quot;mailto:foo@bar.com&quot;&gt;foo@bar.com&lt;/a&gt;&quot; }, { :address =&gt; &quot;&lt;a href=&quot;mailto:bar@foo.com&quot;&gt;bar@foo.com&lt;/a&gt;&quot; } ] }
&lt;/p&gt;&lt;p&gt;
But, when I try to edit/update my parent model, the form's field names for the nested models include the :id of those models (which I believe is correct, as you are attempting to update those particular nested models). However, this causes the resulting value passed to the parent's update_attributes to no longer be an Array, but a Hash of this form:
&lt;/p&gt;&lt;p&gt;
contact =&gt; { emails =&gt; {&quot;5&quot; =&gt; { :address =&gt; &quot;&lt;a href=&quot;mailto:oof@rab.com&quot;&gt;oof@rab.com&lt;/a&gt;&quot; }, &quot;6&quot; =&gt; { :address =&gt; &quot;&lt;a href=&quot;mailto:rab@oof.com&quot;&gt;rab@oof.com&lt;/a&gt;&quot; } } }
&lt;/p&gt;&lt;p&gt;
Where the 5 and 6 are the :id values of the respective emails.  This gets passed into the update_attributes, which eventually gets to:
&lt;/p&gt;&lt;p&gt;
AssociationCollection.replace(other_array)
&lt;/p&gt;&lt;p&gt;
which assumes &quot;emails&quot; to be an Array instead of a Hash.
&lt;/p&gt;&lt;p&gt;
Shouldn't this replace method be &quot;smarter&quot; so that if a Hash is passed in, it will ascertain the :id values from it, and then reassign the model attributes accordingly?
&lt;/p&gt;&lt;p&gt;
Furthermore, what would happen if there were a combination of updated (existing) nested models and new nested models (with no :id in the field parameter).  I would hope that the mass-assign functionality of update_attributes handles this situation as well.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am attempting to utilize mass-assign for my models, but the system seems to break down when I use an association_collection of nested models and try to edit/update the parent model.

My create methods work fine, as the value passes into the parent's attributes is an Array of nested model attributes:

contact =&gt; { emails =&gt; [ { :address =&gt; &quot;foo@bar.com&quot; }, { :address =&gt; &quot;bar@foo.com&quot; } ] }

But, when I try to edit/update my parent model, the form's field names for the nested models include the :id of those models (which I believe is correct, as you are attempting to update those particular nested models). However, this causes the resulting value passed to the parent's update_attributes to no longer be an Array, but a Hash of this form:

contact =&gt; { emails =&gt; {&quot;5&quot; =&gt; { :address =&gt; &quot;oof@rab.com&quot; }, &quot;6&quot; =&gt; { :address =&gt; &quot;rab@oof.com&quot; } } }

Where the 5 and 6 are the :id values of the respective emails.  This gets passed into the update_attributes, which eventually gets to:

AssociationCollection.replace(other_array)

which assumes &quot;emails&quot; to be an Array instead of a Hash.

Shouldn't this replace method be &quot;smarter&quot; so that if a Hash is passed in, it will ascertain the :id values from it, and then reassign the model attributes accordingly?

Furthermore, what would happen if there were a combination of updated (existing) nested models and new nested models (with no :id in the field parameter).  I would hope that the mass-assign functionality of update_attributes handles this situation as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I am attempting to utilize mass-assign for my models, but the system seems to break down when I use an association_collection of nested models and try to edit/update the parent model.
&lt;/p&gt;&lt;p&gt;
My create methods work fine, as the value passes into the parent's attributes is an Array of nested model attributes:
&lt;/p&gt;&lt;p&gt;
contact =&gt; { emails =&gt; [ { :address =&gt; &quot;&lt;a href=&quot;mailto:foo@bar.com&quot;&gt;foo@bar.com&lt;/a&gt;&quot; }, { :address =&gt; &quot;&lt;a href=&quot;mailto:bar@foo.com&quot;&gt;bar@foo.com&lt;/a&gt;&quot; } ] }
&lt;/p&gt;&lt;p&gt;
But, when I try to edit/update my parent model, the form's field names for the nested models include the :id of those models (which I believe is correct, as you are attempting to update those particular nested models). However, this causes the resulting value passed to the parent's update_attributes to no longer be an Array, but a Hash of this form:
&lt;/p&gt;&lt;p&gt;
contact =&gt; { emails =&gt; {&quot;5&quot; =&gt; { :address =&gt; &quot;&lt;a href=&quot;mailto:oof@rab.com&quot;&gt;oof@rab.com&lt;/a&gt;&quot; }, &quot;6&quot; =&gt; { :address =&gt; &quot;&lt;a href=&quot;mailto:rab@oof.com&quot;&gt;rab@oof.com&lt;/a&gt;&quot; } } }
&lt;/p&gt;&lt;p&gt;
Where the 5 and 6 are the :id values of the respective emails.  This gets passed into the update_attributes, which eventually gets to:
&lt;/p&gt;&lt;p&gt;
AssociationCollection.replace(other_array)
&lt;/p&gt;&lt;p&gt;
which assumes &quot;emails&quot; to be an Array instead of a Hash.
&lt;/p&gt;&lt;p&gt;
Shouldn't this replace method be &quot;smarter&quot; so that if a Hash is passed in, it will ascertain the :id values from it, and then reassign the model attributes accordingly?
&lt;/p&gt;&lt;p&gt;
Furthermore, what would happen if there were a combination of updated (existing) nested models and new nested models (with no :id in the field parameter).  I would hope that the mass-assign functionality of update_attributes handles this situation as well.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-25T14:55:41+01:00</created-at>
      <creator-id type="integer">27185</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">703</number>
      <permalink>mass-assign-update_attributes-not-handling-hash-with-id-of-existing-nested-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many</tag>
      <title>Mass-assign &gt; update_attributes not handling Hash with :id of existing nested models</title>
      <updated-at type="datetime">2008-07-25T14:55:41+01:00</updated-at>
      <user-id type="integer">27185</user-id>
      <version type="integer">1</version>
      <user-name>Glenn Powell</user-name>
      <creator-name>Glenn Powell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/703</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>IIRC, parts of what you mention here have already &quot;made it into the current edge&quot;:http://ryandaigle.com/articles/2008/7/19/what-s-new-in-edge-rails-nested-models. A sensible implementation is at the moment being discussed at the Rails Core mailing list in &quot;this topic&quot;:http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2/93a1295ba50030a5.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
IIRC, parts of what you mention here have already &lt;a href=&quot;http://ryandaigle.com/articles/2008/7/19/what-s-new-in-edge-rails-nested-models&quot;&gt;made it into the current edge&lt;/a&gt;. A sensible implementation is at the moment being discussed at the Rails Core mailing list in &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/4049b4b313fa8be2/93a1295ba50030a5&quot;&gt;this topic&lt;/a&gt;.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-25T16:46:49+01:00</created-at>
      <creator-id type="integer">27185</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">703</number>
      <permalink>mass-assign-update_attributes-not-handling-hash-with-id-of-existing-nested-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug has_many</tag>
      <title>Mass-assign &gt; update_attributes not handling Hash with :id of existing nested models</title>
      <updated-at type="datetime">2008-07-25T16:46:49+01:00</updated-at>
      <user-id type="integer">18096</user-id>
      <version type="integer">2</version>
      <user-name>Clemens Kofler</user-name>
      <creator-name>Glenn Powell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/703</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The ideal approach to this is currently being [discussed in rails-core](http://groups.google.com/group/rubyonrails-core/browse_thread/thread/3c61e00916c365e5), but closing this ticket for now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The ideal approach to this is currently being &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/3c61e00916c365e5&quot;&gt;
discussed in rails-core&lt;/a&gt;, but closing this ticket for now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-09-18T06:24:18+01:00</created-at>
      <creator-id type="integer">27185</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord bug has_many
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">703</number>
      <permalink>mass-assign-update_attributes-not-handling-hash-with-id-of-existing-nested-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord bug has_many</tag>
      <title>Mass-assign &gt; update_attributes not handling Hash with :id of existing nested models</title>
      <updated-at type="datetime">2008-09-18T06:24:20+01:00</updated-at>
      <user-id type="integer">14890</user-id>
      <version type="integer">3</version>
      <user-name>Tarmo T&#228;nav</user-name>
      <creator-name>Glenn Powell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/703</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>h they &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/omega-deville-ladies-watch-4870-31-01-713-3775.html&quot;&gt;DeVille Ladies 4870.31.01-713&lt;/a&gt;&lt;/b&gt; could. Here comes the &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/chopard-classic-watch-3-ladies-watch-2511-1677.html&quot;&gt;fake Classic 3 ladies-2511&lt;/a&gt;&lt;/b&gt; conclusion: awareness of watch &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega watches&lt;/a&gt;&lt;/b&gt; maintenance, proper temperature, dry &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega watches&lt;/a&gt;&lt;/b&gt; str &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/oris-divers-titan-date-mens-watch-733-7562-7159mb-3116-2349.html&quot;&gt;Divers Titan Date Mens 733-7562-7159MB-3116&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/collection/chopard-watches.html&quot;&gt;Chopard watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;quality omega watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/collection/jaeger-lecoultre-watches.html&quot;&gt;Jaeger LeCoultre watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;h they &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/omega-deville-ladies-watch-4870-31-01-713-3775.html&quot;&gt;
DeVille Ladies 4870.31.01-713&lt;/a&gt;&lt;/b&gt; could. Here comes the
&lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/chopard-classic-watch-3-ladies-watch-2511-1677.html&quot;&gt;
fake Classic 3 ladies-2511&lt;/a&gt;&lt;/b&gt; conclusion: awareness of watch
&lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega
watches&lt;/a&gt;&lt;/b&gt; maintenance, proper temperature, dry &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;omega watches&lt;/a&gt;&lt;/b&gt; str
&lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega
watches&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/oris-divers-titan-date-mens-watch-733-7562-7159mb-3116-2349.html&quot;&gt;
Divers Titan Date Mens 733-7562-7159MB-3116&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;omega watches&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/collection/chopard-watches.html&quot;&gt;
Chopard watches&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;quality omega watches&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/collection/jaeger-lecoultre-watches.html&quot;&gt;
Jaeger LeCoultre watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-19T07:55:25+01:00</created-at>
      <creator-id type="integer">27185</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">703</number>
      <permalink>mass-assign-update_attributes-not-handling-hash-with-id-of-existing-nested-models</permalink>
      <priority type="integer">174</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord bug has_many</tag>
      <title>Mass-assign &gt; update_attributes not handling Hash with :id of existing nested models</title>
      <updated-at type="datetime">2010-07-21T01:46:04+01:00</updated-at>
      <user-id type="integer">107771</user-id>
      <version type="integer">4</version>
      <user-name>zhuzhu</user-name>
      <creator-name>Glenn Powell</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/703</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
