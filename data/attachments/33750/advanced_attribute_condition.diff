From 496d27bce823ffb48a14f218f603edb3878de5a9 Mon Sep 17 00:00:00 2001
From: spyfalcon <ps2000@web.de>
Date: Sun, 20 Jul 2008 11:20:38 +0200
Subject: [PATCH] Added ability to generate query with optional NULL value from condition hash

---
 activerecord/lib/active_record/base.rb |   17 ++++++++++++++++-
 activerecord/test/cases/finder_test.rb |    8 ++++++++
 2 files changed, 24 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 4f5d72a..32ad6bd 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1726,6 +1726,17 @@ module ActiveRecord #:nodoc:
           end
         end
 
+        def advanced_attribute_condition(table, attr, arg)
+          sql = "#{table}.#{connection.quote_column_name(attr)} %s"
+
+          if arg.is_a?(Array) && arg.include?(nil)
+            arg = arg.replace([arg.compact!.length == 1 ? arg.first : arg, nil])
+            "(#{arg.map { |a| sql % attribute_condition(a) } * (' OR ')})"
+          else
+            sql % attribute_condition(arg)
+          end
+        end
+
         # Interpret Array and Hash as conditions and anything else as an id.
         def expand_id_conditions(id_or_conditions)
           case id_or_conditions
@@ -2020,7 +2031,8 @@ module ActiveRecord #:nodoc:
                 table_name = connection.quote_table_name(table_name)
               end
 
-              "#{table_name}.#{connection.quote_column_name(attr)} #{attribute_condition(value)}"
+              advanced_attribute_condition(table_name, attr, value)
+
             else
               sanitize_sql_hash_for_conditions(value, connection.quote_table_name(attr.to_s))
             end
@@ -2082,6 +2094,9 @@ module ActiveRecord #:nodoc:
             if var.is_a?(Range)
               expanded << var.first
               expanded << var.last
+            elsif var.is_a?(Array) && var.include?(nil)
+              expanded << (var.compact!.length == 1 ? var.first : var)
+              expanded << nil
             else
               expanded << var
             end
diff --git a/activerecord/test/cases/finder_test.rb b/activerecord/test/cases/finder_test.rb
index b97db73..4d062b8 100644
--- a/activerecord/test/cases/finder_test.rb
+++ b/activerecord/test/cases/finder_test.rb
@@ -896,6 +896,14 @@ class FinderTest < ActiveRecord::TestCase
     assert_equal [0, 1, 1], posts.map(&:author_id).sort
   end
 
+  def test_find_with_null
+    mail = 'david@loudthinking.com'
+    assert_equal 4, Topic.find_by_sql(<<-SQL).size, "Find by SQL failed"
+    SELECT title FROM topics WHERE (author_email_address IS NULL) OR (author_email_address = '#{mail}')
+    SQL
+    assert_equal 4, Topic.count(:conditions => {:author_email_address => [mail, nil]}), "Generic conditions failed"
+  end
+
   protected
     def bind(statement, *vars)
       if vars.first.is_a?(Hash)
-- 
1.5.4.3

