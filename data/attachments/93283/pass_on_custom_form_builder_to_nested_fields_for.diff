From aa1b9b8ff4aefec71abdb8970628228db3e1289a Mon Sep 17 00:00:00 2001
From: Eloy Duran <eloy.de.enige@gmail.com>
Date: Thu, 26 Feb 2009 12:26:17 +0100
Subject: [PATCH] Pass a custom form builder on to nested fields_for calls. [#2023 state:resolved]

---
 actionpack/lib/action_view/helpers/form_helper.rb |    5 +++
 actionpack/test/template/form_helper_test.rb      |   41 +++++++++++++++++++++
 2 files changed, 46 insertions(+), 0 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_helper.rb b/actionpack/lib/action_view/helpers/form_helper.rb
index 4fef2b4..06519cb 100644
--- a/actionpack/lib/action_view/helpers/form_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_helper.rb
@@ -910,6 +910,11 @@ module ActionView
           index = ""
         end
 
+        if options[:builder]
+          args << {} unless args.last.is_a?(Hash)
+          args.last[:builder] ||= options[:builder]
+        end
+
         case record_or_name_or_array
         when String, Symbol
           if nested_attributes_association?(record_or_name_or_array)
diff --git a/actionpack/test/template/form_helper_test.rb b/actionpack/test/template/form_helper_test.rb
index 5cc81b4..654eee4 100644
--- a/actionpack/test/template/form_helper_test.rb
+++ b/actionpack/test/template/form_helper_test.rb
@@ -1001,6 +1001,47 @@ class FormHelperTest < ActionView::TestCase
     assert_dom_equal expected, output_buffer
   end
 
+  def test_form_for_with_labelled_builder_with_nested_fields_for_without_options_hash
+    klass = nil
+
+    form_for(:post, @post, :builder => LabelledFormBuilder) do |f|
+      f.fields_for(:comments, Comment.new) do |nested_fields|
+        klass = nested_fields.class
+        ''
+      end
+    end
+
+    assert_equal LabelledFormBuilder, klass
+  end
+
+  def test_form_for_with_labelled_builder_with_nested_fields_for_with_options_hash
+    klass = nil
+
+    form_for(:post, @post, :builder => LabelledFormBuilder) do |f|
+      f.fields_for(:comments, Comment.new, :index => 'foo') do |nested_fields|
+        klass = nested_fields.class
+        ''
+      end
+    end
+
+    assert_equal LabelledFormBuilder, klass
+  end
+
+  class LabelledFormBuilderSubclass < LabelledFormBuilder; end
+
+  def test_form_for_with_labelled_builder_with_nested_fields_for_with_custom_builder
+    klass = nil
+
+    form_for(:post, @post, :builder => LabelledFormBuilder) do |f|
+      f.fields_for(:comments, Comment.new, :builder => LabelledFormBuilderSubclass) do |nested_fields|
+        klass = nested_fields.class
+        ''
+      end
+    end
+
+    assert_equal LabelledFormBuilderSubclass, klass
+  end
+
   def test_form_for_with_html_options_adds_options_to_form_tag
     form_for(:post, @post, :html => {:id => 'some_form', :class => 'some_class'}) do |f| end
     expected = "<form action=\"http://www.example.com\" class=\"some_class\" id=\"some_form\" method=\"post\"></form>"
-- 
1.6.0.2


From 763a0e3d8b7939066dfdd797c9e6c326b7f5d3fb Mon Sep 17 00:00:00 2001
From: Eloy Duran <eloy.de.enige@gmail.com>
Date: Thu, 26 Feb 2009 12:36:48 +0100
Subject: [PATCH] Added documentation about nested fields_for calls taking over the custom FormBuilder class.

---
 actionpack/lib/action_view/helpers/form_helper.rb |  127 +++++++++++++--------
 1 files changed, 78 insertions(+), 49 deletions(-)

diff --git a/actionpack/lib/action_view/helpers/form_helper.rb b/actionpack/lib/action_view/helpers/form_helper.rb
index 06519cb..a589bcb 100644
--- a/actionpack/lib/action_view/helpers/form_helper.rb
+++ b/actionpack/lib/action_view/helpers/form_helper.rb
@@ -5,17 +5,24 @@ require 'action_view/helpers/form_tag_helper'
 
 module ActionView
   module Helpers
-    # Form helpers are designed to make working with models much easier compared to using just standard HTML
-    # elements by providing a set of methods for creating forms based on your models. This helper generates the HTML
-    # for forms, providing a method for each sort of input (e.g., text, password, select, and so on). When the form
-    # is submitted (i.e., when the user hits the submit button or <tt>form.submit</tt> is called via JavaScript), the form inputs will be bundled into the <tt>params</tt> object and passed back to the controller.
+    # Form helpers are designed to make working with models much easier
+    # compared to using just standard HTML elements by providing a set of
+    # methods for creating forms based on your models. This helper generates
+    # the HTML for forms, providing a method for each sort of input
+    # (e.g., text, password, select, and so on). When the form is submitted
+    # (i.e., when the user hits the submit button or <tt>form.submit</tt> is
+    # called via JavaScript), the form inputs will be bundled into the
+    # <tt>params</tt> object and passed back to the controller.
     #
-    # There are two types of form helpers: those that specifically work with model attributes and those that don't.
-    # This helper deals with those that work with model attributes; to see an example of form helpers that don't work
-    # with model attributes, check the ActionView::Helpers::FormTagHelper documentation.
+    # There are two types of form helpers: those that specifically work with
+    # model attributes and those that don't. This helper deals with those that
+    # work with model attributes; to see an example of form helpers that don't
+    # work with model attributes, check the ActionView::Helpers::FormTagHelper
+    # documentation.
     #
-    # The core method of this helper, form_for, gives you the ability to create a form for a model instance;
-    # for example, let's say that you have a model <tt>Person</tt> and want to create a new instance of it:
+    # The core method of this helper, form_for, gives you the ability to create
+    # a form for a model instance; for example, let's say that you have a model
+    # <tt>Person</tt> and want to create a new instance of it:
     #
     #     # Note: a @person variable will have been created in the controller.
     #     # For example: @person = Person.new
@@ -40,17 +47,22 @@ module ActionView
     #       <%= submit_tag 'Create' %>
     #     <% end %>
     #
-    # This example will render the <tt>people/_form</tt> partial, setting a local variable called <tt>form</tt> which references the yielded FormBuilder.
-    #
-    # The <tt>params</tt> object created when this form is submitted would look like:
+    # This example will render the <tt>people/_form</tt> partial, setting a
+    # local variable called <tt>form</tt> which references the yielded
+    # FormBuilder. The <tt>params</tt> object created when this form is
+    # submitted would look like:
     #
     #     {"action"=>"create", "controller"=>"persons", "person"=>{"first_name"=>"William", "last_name"=>"Smith"}}
     #
-    # The params hash has a nested <tt>person</tt> value, which can therefore be accessed with <tt>params[:person]</tt> in the controller.
-    # If were editing/updating an instance (e.g., <tt>Person.find(1)</tt> rather than <tt>Person.new</tt> in the controller), the objects
-    # attribute values are filled into the form (e.g., the <tt>person_first_name</tt> field would have that person's first name in it).
+    # The params hash has a nested <tt>person</tt> value, which can therefore
+    # be accessed with <tt>params[:person]</tt> in the controller. If were
+    # editing/updating an instance (e.g., <tt>Person.find(1)</tt> rather than
+    # <tt>Person.new</tt> in the controller), the objects attribute values are
+    # filled into the form (e.g., the <tt>person_first_name</tt> field would
+    # have that person's first name in it).
     #
-    # If the object name contains square brackets the id for the object will be inserted. For example:
+    # If the object name contains square brackets the id for the object will be
+    # inserted. For example:
     #
     #   <%= text_field "person[]", "name" %>
     #
@@ -58,8 +70,10 @@ module ActionView
     #
     #   <input type="text" id="person_<%= @person.id %>_name" name="person[<%= @person.id %>][name]" value="<%= @person.name %>" />
     #
-    # If the helper is being used to generate a repetitive sequence of similar form elements, for example in a partial
-    # used by <tt>render_collection_of_partials</tt>, the <tt>index</tt> option may come in handy. Example:
+    # If the helper is being used to generate a repetitive sequence of similar
+    # form elements, for example in a partial used by
+    # <tt>render_collection_of_partials</tt>, the <tt>index</tt> option may
+    # come in handy. Example:
     #
     #   <%= text_field "person", "name", "index" => 1 %>
     #
@@ -67,14 +81,17 @@ module ActionView
     #
     #   <input type="text" id="person_1_name" name="person[1][name]" value="<%= @person.name %>" />
     #
-    # An <tt>index</tt> option may also be passed to <tt>form_for</tt> and <tt>fields_for</tt>.  This automatically applies
-    # the <tt>index</tt> to all the nested fields.
+    # An <tt>index</tt> option may also be passed to <tt>form_for</tt> and
+    # <tt>fields_for</tt>.  This automatically applies the <tt>index</tt> to
+    # all the nested fields.
     #
-    # There are also methods for helping to build form tags in link:classes/ActionView/Helpers/FormOptionsHelper.html,
-    # link:classes/ActionView/Helpers/DateHelper.html, and link:classes/ActionView/Helpers/ActiveRecordHelper.html
+    # There are also methods for helping to build form tags in
+    # link:classes/ActionView/Helpers/FormOptionsHelper.html,
+    # link:classes/ActionView/Helpers/DateHelper.html, and
+    # link:classes/ActionView/Helpers/ActiveRecordHelper.html
     module FormHelper
-      # Creates a form and a scope around a specific model object that is used as
-      # a base for questioning about values for the fields.
+      # Creates a form and a scope around a specific model object that is used
+      # as a base for questioning about values for the fields.
       #
       # Rails provides succinct resource-oriented form generation with +form_for+
       # like this:
@@ -86,13 +103,15 @@ module ActionView
       #     <%= f.text_field :author %><br />
       #   <% end %>
       #
-      # There, +form_for+ is able to generate the rest of RESTful form parameters
-      # based on introspection on the record, but to understand what it does we
-      # need to dig first into the alternative generic usage it is based upon.
+      # There, +form_for+ is able to generate the rest of RESTful form
+      # parameters based on introspection on the record, but to understand what
+      # it does we need to dig first into the alternative generic usage it is
+      # based upon.
       #
       # === Generic form_for
       #
-      # The generic way to call +form_for+ yields a form builder around a model:
+      # The generic way to call +form_for+ yields a form builder around a
+      # model:
       #
       #   <% form_for :person, :url => { :action => "update" } do |f| %>
       #     <%= f.error_messages %>
@@ -103,8 +122,8 @@ module ActionView
       #   <% end %>
       #
       # There, the first argument is a symbol or string with the name of the
-      # object the form is about, and also the name of the instance variable the
-      # object is stored in.
+      # object the form is about, and also the name of the instance variable
+      # the object is stored in.
       #
       # The form builder acts as a regular form helper that somehow carries the
       # model. Thus, the idea is that
@@ -137,17 +156,18 @@ module ActionView
       # In any of its variants, the rightmost argument to +form_for+ is an
       # optional hash of options:
       #
-      # * <tt>:url</tt> - The URL the form is submitted to. It takes the same fields
-      #   you pass to +url_for+ or +link_to+. In particular you may pass here a
-      #   named route directly as well. Defaults to the current action.
+      # * <tt>:url</tt> - The URL the form is submitted to. It takes the same
+      #   fields you pass to +url_for+ or +link_to+. In particular you may pass
+      #   here a named route directly as well. Defaults to the current action.
       # * <tt>:html</tt> - Optional HTML attributes for the form tag.
       #
-      # Worth noting is that the +form_for+ tag is called in a ERb evaluation block,
-      # not an ERb output block. So that's <tt><% %></tt>, not <tt><%= %></tt>.
+      # Worth noting is that the +form_for+ tag is called in a ERb evaluation
+      # block, not an ERb output block. So that's <tt><% %></tt>, not
+      # <tt><%= %></tt>.
       #
       # Also note that +form_for+ doesn't create an exclusive scope. It's still
-      # possible to use both the stand-alone FormHelper methods and methods from
-      # FormTagHelper. For example:
+      # possible to use both the stand-alone FormHelper methods and methods
+      # from FormTagHelper. For example:
       #
       #   <% form_for :person, @person, :url => { :action => "update" } do |f| %>
       #     First name: <%= f.text_field :first_name %>
@@ -156,16 +176,16 @@ module ActionView
       #     Admin?    : <%= check_box_tag "person[admin]", @person.company.admin? %>
       #   <% end %>
       #
-      # This also works for the methods in FormOptionHelper and DateHelper that are
-      # designed to work with an object as base, like FormOptionHelper#collection_select
-      # and DateHelper#datetime_select.
+      # This also works for the methods in FormOptionHelper and DateHelper that
+      # are designed to work with an object as base, like
+      # FormOptionHelper#collection_select and DateHelper#datetime_select.
       #
       # === Resource-oriented style
       #
-      # As we said above, in addition to manually configuring the +form_for+ call,
-      # you can rely on automated resource identification, which will use the conventions
-      # and named routes of that approach. This is the preferred way to use +form_for+
-      # nowadays.
+      # As we said above, in addition to manually configuring the +form_for+
+      # call, you can rely on automated resource identification, which will use
+      # the conventions and named routes of that approach. This is the
+      # preferred way to use +form_for+ nowadays.
       #
       # For example, if <tt>@post</tt> is an existing record you want to edit
       #
@@ -205,8 +225,10 @@ module ActionView
       #
       # === Customized form builders
       #
-      # You can also build forms using a customized FormBuilder class. Subclass FormBuilder and override or define some more helpers,
-      # then use your custom builder. For example, let's say you made a helper to automatically add labels to form inputs.
+      # You can also build forms using a customized FormBuilder class. Subclass
+      # FormBuilder and override or define some more helpers, then use your
+      # custom builder. For example, let's say you made a helper to
+      # automatically add labels to form inputs.
       #
       #   <% form_for :person, @person, :url => { :action => "update" }, :builder => LabellingFormBuilder do |f| %>
       #     <%= f.text_field :first_name %>
@@ -219,16 +241,23 @@ module ActionView
       #
       #   <%= render :partial => f %>
       #
-      # The rendered template is <tt>people/_labelling_form</tt> and the local variable referencing the form builder is called <tt>labelling_form</tt>.
+      # The rendered template is <tt>people/_labelling_form</tt> and the local
+      # variable referencing the form builder is called
+      # <tt>labelling_form</tt>.
+      #
+      # The custom FormBuilder class is automatically merged with the options
+      # of a nested fields_for call, unless it's explicitely set.
       #
-      # In many cases you will want to wrap the above in another helper, so you could do something like the following:
+      # In many cases you will want to wrap the above in another helper, so you
+      # could do something like the following:
       #
       #   def labelled_form_for(record_or_name_or_array, *args, &proc)
       #     options = args.extract_options!
       #     form_for(record_or_name_or_array, *(args << options.merge(:builder => LabellingFormBuilder)), &proc)
       #   end
       #
-      # If you don't need to attach a form to a model instance, then check out FormTagHelper#form_tag.
+      # If you don't need to attach a form to a model instance, then check out
+      # FormTagHelper#form_tag.
       def form_for(record_or_name_or_array, *args, &proc)
         raise ArgumentError, "Missing block" unless block_given?
 
-- 
1.6.0.2

