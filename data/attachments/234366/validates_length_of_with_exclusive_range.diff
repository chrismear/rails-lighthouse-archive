From 1b108d4bf990860ed7b709220fa15b745bba6ad8 Mon Sep 17 00:00:00 2001
From: J. Edward Dewyea <jed@commuterdesign.com>
Date: Fri, 31 Jul 2009 13:47:20 -0400
Subject: [PATCH 1/2] Test validates_length_of with end-excluding range

---
 .../cases/validations/length_validation_test.rb    |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/activemodel/test/cases/validations/length_validation_test.rb b/activemodel/test/cases/validations/length_validation_test.rb
index 4a2f72f..acfd985 100644
--- a/activemodel/test/cases/validations/length_validation_test.rb
+++ b/activemodel/test/cases/validations/length_validation_test.rb
@@ -109,6 +109,20 @@ class LengthValidationTest < ActiveModel::TestCase
     assert t.valid?
   end

+  def test_validates_length_of_using_within_with_exclusive_range
+    Topic.validates_length_of(:title, :within => 4...10)
+
+    t = Topic.new("title" => "9 chars!!")
+    assert t.valid?
+
+    t.title = "Now I'm 10"
+    assert !t.valid?
+    assert_equal ["is too long (maximum is 9 characters)"], t.errors[:title]
+
+    t.title = "Four"
+    assert t.valid?
+  end
+
   def test_optionally_validates_length_of_using_within
     Topic.validates_length_of :title, :content, :within => 3..5, :allow_nil => true

--
1.6.2.4


From 8a25a802af4bb49c702aa7d19aefc301a06ed55a Mon Sep 17 00:00:00 2001
From: J. Edward Dewyea <jed@commuterdesign.com>
Date: Fri, 31 Jul 2009 13:50:27 -0400
Subject: [PATCH 2/2] Properly identify maximum range member when using an end-excluding range

---
 activemodel/lib/active_model/validations/length.rb |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/activemodel/lib/active_model/validations/length.rb b/activemodel/lib/active_model/validations/length.rb
index db0439d..2e6f09c 100644
--- a/activemodel/lib/active_model/validations/length.rb
+++ b/activemodel/lib/active_model/validations/length.rb
@@ -66,10 +66,10 @@ module ActiveModel

           validates_each(attrs, options) do |record, attr, value|
             value = options[:tokenizer].call(value) if value.kind_of?(String)
-            if value.nil? or value.size < option_value.begin
-              record.errors.add(attr, :too_short, :default => custom_message || options[:too_short], :count => option_value.begin)
-            elsif value.size > option_value.end
-              record.errors.add(attr, :too_long, :default => custom_message || options[:too_long], :count => option_value.end)
+            if value.nil? or value.size < option_value.min
+              record.errors.add(attr, :too_short, :default => custom_message || options[:too_short], :count => option_value.min)
+            elsif value.size > option_value.max
+              record.errors.add(attr, :too_long, :default => custom_message || options[:too_long], :count => option_value.max)
             end
           end
         when :is, :minimum, :maximum
--
1.6.2.4

