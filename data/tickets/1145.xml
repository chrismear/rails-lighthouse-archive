<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-08T23:12:03+00:00</created-at>
  <creator-id type="integer">18806</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">1145</number>
  <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag nil="true"></tag>
  <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
  <updated-at type="datetime">2010-11-08T23:12:03+00:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">36</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Matthew Moore</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
  <priority-name>Low</priority-name>
  <original-body>Short:  Any rails app using request forgery protection will find that their controllers' destroy actions are inaccessible via XML because they'll get a ActionController::InvalidAuthenticityToken.  

To recreate the problem, create an empty rails app with one scaffold, and try to access the destroy action via XML.

@@@ sh
$ rails apiapp
$ cd apiapp/
$ script/generate scaffold Foo bar:string
@@@

[make a record in the database, and then try to destroy it via XML]

@@@ log
Processing FoosController#destroy (for 127.0.0.1 at 2008-09-30 12:03:01) [DELETE]
  Session ID: c0a4f3ff9f9abc5f5e2654ded7f8de27
  Parameters: {&quot;format&quot;=&gt;&quot;xml&quot;, &quot;action&quot;=&gt;&quot;destroy&quot;, &quot;id&quot;=&gt;&quot;2&quot;, &quot;controller&quot;=&gt;&quot;foos&quot;}


ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
    /Library/Ruby/Gems/1.8/gems/actionpack-2.1.1/lib/action_controller/request_forgery_protection.rb:86:in `verify_authenticity_token'
@@@</original-body>
  <latest-body>Short:  Any rails app using request forgery protection will find that their controllers' destroy actions are inaccessible via XML because they'll get a ActionController::InvalidAuthenticityToken.  

To recreate the problem, create an empty rails app with one scaffold, and try to access the destroy action via XML.

@@@ sh
$ rails apiapp
$ cd apiapp/
$ script/generate scaffold Foo bar:string
@@@

[make a record in the database, and then try to destroy it via XML]

@@@ log
Processing FoosController#destroy (for 127.0.0.1 at 2008-09-30 12:03:01) [DELETE]
  Session ID: c0a4f3ff9f9abc5f5e2654ded7f8de27
  Parameters: {&quot;format&quot;=&gt;&quot;xml&quot;, &quot;action&quot;=&gt;&quot;destroy&quot;, &quot;id&quot;=&gt;&quot;2&quot;, &quot;controller&quot;=&gt;&quot;foos&quot;}


ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
    /Library/Ruby/Gems/1.8/gems/actionpack-2.1.1/lib/action_controller/request_forgery_protection.rb:86:in `verify_authenticity_token'
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Short: Any rails app using request forgery protection will find
that their controllers' destroy actions are inaccessible via XML
because they'll get a
ActionController::InvalidAuthenticityToken.&lt;/p&gt;
&lt;p&gt;To recreate the problem, create an empty rails app with one
scaffold, and try to access the destroy action via XML.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;
$ rails apiapp
$ cd apiapp/
$ script/generate scaffold Foo bar:string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[make a record in the database, and then try to destroy it via
XML]&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;log&quot;&gt;
Processing FoosController#destroy (for 127.0.0.1 at 2008-09-30 12:03:01) [DELETE]
  Session ID: c0a4f3ff9f9abc5f5e2654ded7f8de27
  Parameters: {&amp;quot;format&amp;quot;=&amp;gt;&amp;quot;xml&amp;quot;, &amp;quot;action&amp;quot;=&amp;gt;&amp;quot;destroy&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;2&amp;quot;, &amp;quot;controller&amp;quot;=&amp;gt;&amp;quot;foos&amp;quot;}


ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
    /Library/Ruby/Gems/1.8/gems/actionpack-2.1.1/lib/action_controller/request_forgery_protection.rb:86:in `verify_authenticity_token'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Short:  Any rails app using request forgery protection will find that their controllers' destroy actions are inaccessible via XML because they'll get a ActionController::InvalidAuthenticityToken.  

To recreate the problem, create an empty rails app with one scaffold, and try to access the destroy action via XML.

@@@ sh
$ rails apiapp
$ cd apiapp/
$ script/generate scaffold Foo bar:string
@@@

[make a record in the database, and then try to destroy it via XML]

@@@ log
Processing FoosController#destroy (for 127.0.0.1 at 2008-09-30 12:03:01) [DELETE]
  Session ID: c0a4f3ff9f9abc5f5e2654ded7f8de27
  Parameters: {&quot;format&quot;=&gt;&quot;xml&quot;, &quot;action&quot;=&gt;&quot;destroy&quot;, &quot;id&quot;=&gt;&quot;2&quot;, &quot;controller&quot;=&gt;&quot;foos&quot;}


ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
    /Library/Ruby/Gems/1.8/gems/actionpack-2.1.1/lib/action_controller/request_forgery_protection.rb:86:in `verify_authenticity_token'
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Short: Any rails app using request forgery protection will find
that their controllers' destroy actions are inaccessible via XML
because they'll get a
ActionController::InvalidAuthenticityToken.&lt;/p&gt;
&lt;p&gt;To recreate the problem, create an empty rails app with one
scaffold, and try to access the destroy action via XML.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;
$ rails apiapp
$ cd apiapp/
$ script/generate scaffold Foo bar:string
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[make a record in the database, and then try to destroy it via
XML]&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;log&quot;&gt;
Processing FoosController#destroy (for 127.0.0.1 at 2008-09-30 12:03:01) [DELETE]
  Session ID: c0a4f3ff9f9abc5f5e2654ded7f8de27
  Parameters: {&amp;quot;format&amp;quot;=&amp;gt;&amp;quot;xml&amp;quot;, &amp;quot;action&amp;quot;=&amp;gt;&amp;quot;destroy&amp;quot;, &amp;quot;id&amp;quot;=&amp;gt;&amp;quot;2&amp;quot;, &amp;quot;controller&amp;quot;=&amp;gt;&amp;quot;foos&amp;quot;}


ActionController::InvalidAuthenticityToken (ActionController::InvalidAuthenticityToken):
    /Library/Ruby/Gems/1.8/gems/actionpack-2.1.1/lib/action_controller/request_forgery_protection.rb:86:in `verify_authenticity_token'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-30T20:11:38+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug &quot;request-forgery-protection&quot;</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-09-30T20:11:42+01:00</updated-at>
      <user-id type="integer">18806</user-id>
      <version type="integer">1</version>
      <user-name>Matthew Moore</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This happens because the HTTP_CONTENT_TYPE isn't specified for a delete request.  

However, HTTP_ACCEPT is set correctly to 'application/xml', which request_forgery_protection.rb plainly ignores.

I vote that request_forgery_protection.rb should check HTTP_ACCEPT as well as HTTP_CONTENT_TYPE when checking if a request should be verified for forgery protection.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This happens because the HTTP_CONTENT_TYPE isn't specified for a
delete request.&lt;/p&gt;
&lt;p&gt;However, HTTP_ACCEPT is set correctly to 'application/xml',
which request_forgery_protection.rb plainly ignores.&lt;/p&gt;
&lt;p&gt;I vote that request_forgery_protection.rb should check
HTTP_ACCEPT as well as HTTP_CONTENT_TYPE when checking if a request
should be verified for forgery protection.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-30T20:39:59+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug &quot;request-forgery-protection&quot;</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-09-30T20:40:03+01:00</updated-at>
      <user-id type="integer">18806</user-id>
      <version type="integer">2</version>
      <user-name>Matthew Moore</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Also related ticket: [SECURITY BUG - Request Forgery protection checks for 'Accept' header instead of 'Content-Type' header](http://rails.lighthouseapp.com/projects/8994/tickets/73-security-bug-request-forgery-protection-checks-for-accept-header-instead-of-content-type-header &quot;SECURITY BUG - Request Forgery protection checks for 'Accept' header instead of 'Content-Type' header&quot;)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Also related ticket: &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/73-security-bug-request-forgery-protection-checks-for-accept-header-instead-of-content-type-header&quot; title=&quot;SECURITY BUG - Request Forgery protection checks for 'Accept' header instead of 'Content-Type' header&quot;&gt;
SECURITY BUG - Request Forgery protection checks for 'Accept'
header instead of 'Content-Type' header&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-30T20:45:20+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug &quot;request-forgery-protection&quot;</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-09-30T20:45:26+01:00</updated-at>
      <user-id type="integer">18806</user-id>
      <version type="integer">3</version>
      <user-name>Matthew Moore</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-30T20:51:55+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug &quot;request-forgery-protection&quot;</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-09-30T20:51:57+01:00</updated-at>
      <user-id type="integer">18806</user-id>
      <version type="integer">4</version>
      <user-name>Matthew Moore</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Matthew,

Please read the thread you linked to entirely (especially my may-1st post).

The reason why we changed to content-type instead of accept-header is simple:
A web-form can fake the accept type by using an extension in the form url (/posts.xml) and get through. 

Like I said before, RF-protection is only meant to protect against standard web forms being forged on malicious sites. Any other type of request is already protected. Ajax requests (asking for xml/json or html data) can't be forged, because browsers have the same-origin-policy (so the malicious site can only make your browser send malicious requests to itself). Flash _can_ connect to every domain, but it can't tap into your browsers session/cookie data for other domains, so the requests can't spoof as a different user.

Checking for accept instead of content brought another strange thing.
It would mean that for ajax requests that post/put/delete something and want html in return(accept-header), the protection token is needed, but for exactly the same ajax request doing the same post/put/delete but wanting xml back as a result, no token is needed. This would be very strange behavior. 

But now on to your problem:
I think the problem is activeresource setting no content type for delete requests, which is correct, since delete requests are empty (no body). No need to identify empty post bodies.

since normal web forms won't be able to send requests without a content-type, we should see empty-content-type-requests as safe.

So changing this:
@@@ ruby
  def verifiable_request_format?
    request.content_type.nil? || request.content_type.verify_request?
  end
@@@
to this:
@@@ ruby
  def verifiable_request_format?
    !request.content_type.nil? &amp;&amp; request.content_type.verify_request?
  end
@@@
in ActionController::RequestForgeryProtection::ClassMethods

this would fix your problem without harming RF-protection, since -like I said- web forms will always set www-formencoded as content-type, and this is the only type RF-protection needs to protect anyway.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Matthew,&lt;/p&gt;
&lt;p&gt;Please read the thread you linked to entirely (especially my
may-1st post).&lt;/p&gt;
&lt;p&gt;The reason why we changed to content-type instead of
accept-header is simple: A web-form can fake the accept type by
using an extension in the form url (/posts.xml) and get
through.&lt;/p&gt;
&lt;p&gt;Like I said before, RF-protection is only meant to protect
against standard web forms being forged on malicious sites. Any
other type of request is already protected. Ajax requests (asking
for xml/json or html data) can't be forged, because browsers have
the same-origin-policy (so the malicious site can only make your
browser send malicious requests to itself). Flash &lt;em&gt;can&lt;/em&gt;
connect to every domain, but it can't tap into your browsers
session/cookie data for other domains, so the requests can't spoof
as a different user.&lt;/p&gt;
&lt;p&gt;Checking for accept instead of content brought another strange
thing. It would mean that for ajax requests that post/put/delete
something and want html in return(accept-header), the protection
token is needed, but for exactly the same ajax request doing the
same post/put/delete but wanting xml back as a result, no token is
needed. This would be very strange behavior.&lt;/p&gt;
&lt;p&gt;But now on to your problem: I think the problem is
activeresource setting no content type for delete requests, which
is correct, since delete requests are empty (no body). No need to
identify empty post bodies.&lt;/p&gt;
&lt;p&gt;since normal web forms won't be able to send requests without a
content-type, we should see empty-content-type-requests as
safe.&lt;/p&gt;
&lt;p&gt;So changing this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def verifiable_request_format?
    request.content_type.nil? || request.content_type.verify_request?
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def verifiable_request_format?
    !request.content_type.nil? &amp;amp;&amp;amp; request.content_type.verify_request?
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in ActionController::RequestForgeryProtection::ClassMethods&lt;/p&gt;
&lt;p&gt;this would fix your problem without harming RF-protection, since
-like I said- web forms will always set www-formencoded as
content-type, and this is the only type RF-protection needs to
protect anyway.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-01T07:06:12+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug &quot;request-forgery-protection&quot;</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-01T07:06:17+01:00</updated-at>
      <user-id type="integer">18887</user-id>
      <version type="integer">5</version>
      <user-name>Mathijs Kwik</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So has anyone contributed a patch for this, or not?  I don't see one attached to this ticket.  I can try to do so next week if needed, but I don't want to repeat someone else's effort since there seems to have been a fair amount of discussion already.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So has anyone contributed a patch for this, or not? I don't see
one attached to this ticket. I can try to do so next week if
needed, but I don't want to repeat someone else's effort since
there seems to have been a fair amount of discussion already.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-02T21:00:52+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug &quot;request-forgery-protection&quot;</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-02T21:00:57+01:00</updated-at>
      <user-id type="integer">17710</user-id>
      <version type="integer">6</version>
      <user-name>Jeff Cohen</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I will not be doing so any time soon, for the record.  I would very much appreciate it if you were able to!</body>
      <body-html>&lt;div&gt;&lt;p&gt;I will not be doing so any time soon, for the record. I would
very much appreciate it if you were able to!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-02T21:03:59+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug &quot;request-forgery-protection&quot;</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-02T21:04:04+01:00</updated-at>
      <user-id type="integer">18806</user-id>
      <version type="integer">7</version>
      <user-name>Matthew Moore</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've encountered the same problem.

Will this bug be fixed any time soon?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've encountered the same problem.&lt;/p&gt;
&lt;p&gt;Will this bug be fixed any time soon?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-27T13:06:18+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: actionpack activeresource bug &quot;request-forgery-protection&quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-27T13:06:23+00:00</updated-at>
      <user-id type="integer">25798</user-id>
      <version type="integer">8</version>
      <user-name>Marcelo Barbudas</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Trying Mathjis's suggestion:

!request.content_type.nil? &amp;&amp; request.content_type.verify_request?

did not work - it broke a lot of existing tests that expected exceptions that are not being raised anymore.

I'll try to look into it this week, but I'm now a bit confused: are we worrying about the Accept header being empty, or the content format of the request, or both? 

Seems to me, if the request content format is empty, AND the verb is DELETE, AND the requested format is XML (the only case by which we have a real reproducible bug), THEN we should NOT check for forgery protection.

Or, we'd have to change ActiveResource to somehow emit the content format as XML, but I don't think that makes sense, either.

Any other thoughts before I charge ahead?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Trying Mathjis's suggestion:&lt;/p&gt;
&lt;p&gt;!request.content_type.nil? &amp;amp;&amp;amp;
request.content_type.verify_request?&lt;/p&gt;
&lt;p&gt;did not work - it broke a lot of existing tests that expected
exceptions that are not being raised anymore.&lt;/p&gt;
&lt;p&gt;I'll try to look into it this week, but I'm now a bit confused:
are we worrying about the Accept header being empty, or the content
format of the request, or both?&lt;/p&gt;
&lt;p&gt;Seems to me, if the request content format is empty, AND the
verb is DELETE, AND the requested format is XML (the only case by
which we have a real reproducible bug), THEN we should NOT check
for forgery protection.&lt;/p&gt;
&lt;p&gt;Or, we'd have to change ActiveResource to somehow emit the
content format as XML, but I don't think that makes sense,
either.&lt;/p&gt;
&lt;p&gt;Any other thoughts before I charge ahead?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-29T00:23:43+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-29T00:23:49+00:00</updated-at>
      <user-id type="integer">17710</user-id>
      <version type="integer">9</version>
      <user-name>Jeff Cohen</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Well, you are right, checking for an empty content format + DELETE + request format XML is the thing that needs to get fixed now.

But looking at the problem from a bit more distance, this solution feels like a patch, not a fix.

The requested format doesn't have anything to do with it. Right now, the bug was found on activeresource, which requests xml. I'm pretty sure the same thing will happen when asking for json data. or any kind of data, since the problem is in the missing content format.

So in that case we should be looking for empty content (header) + DELETE (http verb) and allow that one.

The thing is, the way I see it, RF-protection is a bit over-protective in general (I know, better safe than sorry), since the only things that can get forged are standard (non-ajax) web forms, which always have the same content-type. 
So protecting all and then opening up all kinds of things that _are_ allowed is a bit tedious here I guess and it would be a lot easier to check just for standard webforms. Maybe I'm wrong, in that case please point me to other ways attackers could forge requests.

Anyway, my suggestion (or at least something close to that, I didn't test it) will work, I'm pretty sure of that. A lot of tests will break, like you noticed, so either those need to get fixed too (if all agree on trusting empty content(type)), or a more careful fix (like you proposed) can be crafted. I'm fine with that too, as long as we won't start _blocking_ request because of an accept header (requested format) like it was a while back.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well, you are right, checking for an empty content format +
DELETE + request format XML is the thing that needs to get fixed
now.&lt;/p&gt;
&lt;p&gt;But looking at the problem from a bit more distance, this
solution feels like a patch, not a fix.&lt;/p&gt;
&lt;p&gt;The requested format doesn't have anything to do with it. Right
now, the bug was found on activeresource, which requests xml. I'm
pretty sure the same thing will happen when asking for json data.
or any kind of data, since the problem is in the missing content
format.&lt;/p&gt;
&lt;p&gt;So in that case we should be looking for empty content (header)
+ DELETE (http verb) and allow that one.&lt;/p&gt;
&lt;p&gt;The thing is, the way I see it, RF-protection is a bit
over-protective in general (I know, better safe than sorry), since
the only things that can get forged are standard (non-ajax) web
forms, which always have the same content-type. So protecting all
and then opening up all kinds of things that &lt;em&gt;are&lt;/em&gt; allowed
is a bit tedious here I guess and it would be a lot easier to check
just for standard webforms. Maybe I'm wrong, in that case please
point me to other ways attackers could forge requests.&lt;/p&gt;
&lt;p&gt;Anyway, my suggestion (or at least something close to that, I
didn't test it) will work, I'm pretty sure of that. A lot of tests
will break, like you noticed, so either those need to get fixed too
(if all agree on trusting empty content(type)), or a more careful
fix (like you proposed) can be crafted. I'm fine with that too, as
long as we won't start &lt;em&gt;blocking&lt;/em&gt; request because of an
accept header (requested format) like it was a while back.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-29T05:52:15+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-29T05:52:18+00:00</updated-at>
      <user-id type="integer">18887</user-id>
      <version type="integer">10</version>
      <user-name>Mathijs Kwik</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I agree that we should change this to only offer protection for html.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree that we should change this to only offer protection for
html.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-30T10:41:11+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-30T10:41:17+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">11</version>
      <user-name>DHH</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, I think I'm almost there, but I have a question about what we want to do with existing tests that no longer seem valid.  Do I delete them, or change the assertion inside?  For example, this existing test is no longer valid if we're only going to worry about non-ajax html forms:

@@@ ruby
  def test_should_not_allow_api_formatted_post_without_token
    assert_raises(ActionController::InvalidAuthenticityToken) do
      post :index, :format =&gt; 'xml'
    end
  end
@@@

I was going to just delete all of these kinds of tests, but perhaps we'd prefer to change the assertion instead:

@@@ ruby
  def test_should_not_allow_api_formatted_post_without_token
    assert_nothing_raised do
      post :index, :format =&gt; 'xml'
    end
  end
@@@

What's the Rails opinion on this sort of thing?  I'd probably just toast the tests if it were me, but I thought I'd ask to be sure.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, I think I'm almost there, but I have a question about what
we want to do with existing tests that no longer seem valid. Do I
delete them, or change the assertion inside? For example, this
existing test is no longer valid if we're only going to worry about
non-ajax html forms:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_should_not_allow_api_formatted_post_without_token
    assert_raises(ActionController::InvalidAuthenticityToken) do
      post :index, :format =&amp;gt; 'xml'
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was going to just delete all of these kinds of tests, but
perhaps we'd prefer to change the assertion instead:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_should_not_allow_api_formatted_post_without_token
    assert_nothing_raised do
      post :index, :format =&amp;gt; 'xml'
    end
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What's the Rails opinion on this sort of thing? I'd probably
just toast the tests if it were me, but I thought I'd ask to be
sure.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-31T02:06:39+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-31T02:06:41+00:00</updated-at>
      <user-id type="integer">17710</user-id>
      <version type="integer">12</version>
      <user-name>Jeff Cohen</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Interesting question, I can't answer that.

&gt; For example, this existing test is no longer valid if we're only
&gt; going to worry about non-ajax html forms:

I think we should still check ajax html forms. We just don't care about xml/json/empty requests anymore. This basically boils down to protecting requests with www-formencoded content-type, no matter if they are submitted by ajax or by normal form.

Strictly speaking checking for (non)ajax might work too, but it's a lot easier to just protect by content type, like it is now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Interesting question, I can't answer that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, this existing test is no longer valid if we're only
going to worry about non-ajax html forms:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think we should still check ajax html forms. We just don't
care about xml/json/empty requests anymore. This basically boils
down to protecting requests with www-formencoded content-type, no
matter if they are submitted by ajax or by normal form.&lt;/p&gt;
&lt;p&gt;Strictly speaking checking for (non)ajax might work too, but
it's a lot easier to just protect by content type, like it is
now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-31T08:40:15+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-31T08:40:19+00:00</updated-at>
      <user-id type="integer">18887</user-id>
      <version type="integer">13</version>
      <user-name>Mathijs Kwik</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Running into one annoyance, which is that the tests don't seem to set the default content type to html.  So tests like this,

@@@ ruby
  def test_should_not_allow_post_without_token
    assert_raises(ActionController::InvalidAuthenticityToken) { post :index }
  end
@@@

Are sending an empty content-type, which we normally want to ignore from token validation.  But the intent of this test is to send a normal HTML POST request, so this test is broken.

For some reason TestRequest doesn't populate with a default content-type of text/html; I wonder if I should do that, but now I'm getting in deeper than I had hoped to with 2.2 so close to shipping already.

I'll try to continue to look at it today and see what I can do about this.

It could be that I punt on this for now, and only change the existing code to let DELETE requests with empty content-type pass through without a token, which will at least allow ActiveResource to work again.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Running into one annoyance, which is that the tests don't seem
to set the default content type to html. So tests like this,&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_should_not_allow_post_without_token
    assert_raises(ActionController::InvalidAuthenticityToken) { post :index }
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Are sending an empty content-type, which we normally want to
ignore from token validation. But the intent of this test is to
send a normal HTML POST request, so this test is broken.&lt;/p&gt;
&lt;p&gt;For some reason TestRequest doesn't populate with a default
content-type of text/html; I wonder if I should do that, but now
I'm getting in deeper than I had hoped to with 2.2 so close to
shipping already.&lt;/p&gt;
&lt;p&gt;I'll try to continue to look at it today and see what I can do
about this.&lt;/p&gt;
&lt;p&gt;It could be that I punt on this for now, and only change the
existing code to let DELETE requests with empty content-type pass
through without a token, which will at least allow ActiveResource
to work again.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-31T14:23:57+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-10-31T14:23:59+00:00</updated-at>
      <user-id type="integer">17710</user-id>
      <version type="integer">14</version>
      <user-name>Jeff Cohen</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, patch attached.  Here's the final summary:

* Changed Mime::Type#verify_request? to only worry about HTML-formatted content.
* Only HTML and Ajax requests that are sending HTML (form encoded) content will be examined.
* There was one test for when sessions are off that was actually passing for the wrong reason; I've commented it out because I'm not sure how to fix it.
* Not much actually changed in the actual code - most of it was rewriting the tests.

If someone could please look at the new tests and make sure they make sense, and give this ticket some +1's if everything's ok, that would be great.  And if I messed something up, let me know.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, patch attached. Here's the final summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changed Mime::Type#verify_request? to only worry about
HTML-formatted content.&lt;/li&gt;
&lt;li&gt;Only HTML and Ajax requests that are sending HTML (form
encoded) content will be examined.&lt;/li&gt;
&lt;li&gt;There was one test for when sessions are off that was actually
passing for the wrong reason; I've commented it out because I'm not
sure how to fix it.&lt;/li&gt;
&lt;li&gt;Not much actually changed in the actual code - most of it was
rewriting the tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If someone could please look at the new tests and make sure they
make sense, and give this ticket some +1's if everything's ok, that
would be great. And if I messed something up, let me know.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-01T04:53:29+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: actionpack activeresource bug request-forgery-protection
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-01T04:53:34+00:00</updated-at>
      <user-id type="integer">17710</user-id>
      <version type="integer">15</version>
      <user-name>Jeff Cohen</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>So are we sure that flash can't forge requests with these content types?

This change looks mostly sensible to me, but I'd really like to get the 'final word' on whether it's safe.  Anyone have some references they can cite which shows it is?</body>
      <body-html>&lt;div&gt;&lt;p&gt;So are we sure that flash can't forge requests with these
content types?&lt;/p&gt;
&lt;p&gt;This change looks mostly sensible to me, but I'd really like to
get the 'final word' on whether it's safe. Anyone have some
references they can cite which shows it is?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-01T16:51:31+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-01T16:51:36+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">16</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Flash can forge every kind of request they want, but as far as I know
(don't have any reference, and I don't know flash, so I must have
picked it up somewhere) flash can't tap into cookies/sessions for
other domains, so in that case it can't pose as a user that happens to
be logged in.

We should check this to make sure though.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Flash can forge every kind of request they want, but as far as I
know (don't have any reference, and I don't know flash, so I must
have picked it up somewhere) flash can't tap into cookies/sessions
for other domains, so in that case it can't pose as a user that
happens to be logged in.&lt;/p&gt;
&lt;p&gt;We should check this to make sure though.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-02T19:10:06+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-02T19:10:13+00:00</updated-at>
      <user-id type="integer">18887</user-id>
      <version type="integer">17</version>
      <user-name>Mathijs Kwik</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Mathijs Kwik,
That's right - unless that domain has a crossdomain.xml file permitting it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Mathijs Kwik, That's right - unless that domain has a
crossdomain.xml file permitting it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-02T22:43:49+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-02T22:43:56+00:00</updated-at>
      <user-id type="integer">2171</user-id>
      <version type="integer">18</version>
      <user-name>Alex MacCaw</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@Alex

Ok, but 'that domain' would happen to be the rails-site right? so an attacker can't set that. 
In case I want to enable it for my site, I should already make very very very sure how to authenticate requests and such. 
Also, (in rails 2.1 .. edge at least) if I happen to have a crossdomain.xml file, flash can already send xml/json requests (they aren't under RF-protection), so the changes discussed here won't be a regression.

The way I see it is that most people don't want crossdomain.xml, and people that _do_ use it (mashups and such) will already have to secure their 'service' in a lot of ways. Rails' RF-protection shouldn't intervene, because using crossdomain.xml means you _want_ cross-site stuff.

People can always use the helper methods and manually check request using rails' helper methods for generating/checking tokens in case they need it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Alex&lt;/p&gt;
&lt;p&gt;Ok, but 'that domain' would happen to be the rails-site right?
so an attacker can't set that. In case I want to enable it for my
site, I should already make very very very sure how to authenticate
requests and such. Also, (in rails 2.1 .. edge at least) if I
happen to have a crossdomain.xml file, flash can already send
xml/json requests (they aren't under RF-protection), so the changes
discussed here won't be a regression.&lt;/p&gt;
&lt;p&gt;The way I see it is that most people don't want crossdomain.xml,
and people that &lt;em&gt;do&lt;/em&gt; use it (mashups and such) will already
have to secure their 'service' in a lot of ways. Rails'
RF-protection shouldn't intervene, because using crossdomain.xml
means you &lt;em&gt;want&lt;/em&gt; cross-site stuff.&lt;/p&gt;
&lt;p&gt;People can always use the helper methods and manually check
request using rails' helper methods for generating/checking tokens
in case they need it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-03T00:22:11+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-03T00:22:14+00:00</updated-at>
      <user-id type="integer">18887</user-id>
      <version type="integer">19</version>
      <user-name>Mathijs Kwik</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Do we need to update any documentation as part of this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Do we need to update any documentation as part of this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-04T16:59:27+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-04T16:59:33+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">20</version>
      <user-name>DHH</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>What does content type even have to do with CSRF?  I've run into two cases where this assumption doesn't work.

Exhibit A: I added an API call that uses form params.  I didn't feel like dealing with xml or json, since the request as simple as `/foo?bar=blah`.  

Exhibit B: When adding a JSON widget to an application, I created a csrf vulnerability where anyone viewing the widget would 'log in' as the token the JSON widget was using.  This just meant I had to ensure the session was disabled for API requests.

    session :off, :if =&gt; Proc.new { |req| req.format.json? }

I bring this up because of this failure:

@@@
test_verifiable_mime_types(MimeTypeTest)
    [controller/mime_type_test.rb:85:in `test_verifiable_mime_types'
     controller/mime_type_test.rb:85:in `each'
     controller/mime_type_test.rb:85:in `test_verifiable_mime_types'
     ./../../activesupport/lib/active_support/testing/setup_and_teardown.rb:94:in `__send__'
     ./../../activesupport/lib/active_support/testing/setup_and_teardown.rb:94:in `run']:
Mime Type is not verified: :js.
&lt;nil&gt; is not true.
@@@

The `Mime::JS` is not verified because `Mime::JS.html? == false`.  But, I consider ajax requests just as dangerous because they still use the cookie.  Maybe that's a moot point though because of the ajax cross domain submissions though?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What does content type even have to do with CSRF? I've run into
two cases where this assumption doesn't work.&lt;/p&gt;
&lt;p&gt;Exhibit A: I added an API call that uses form params. I didn't
feel like dealing with xml or json, since the request as simple as
&lt;code&gt;/foo?bar=blah&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Exhibit B: When adding a JSON widget to an application, I
created a csrf vulnerability where anyone viewing the widget would
'log in' as the token the JSON widget was using. This just meant I
had to ensure the session was disabled for API requests.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;session :off, :if =&amp;gt; Proc.new { |req| req.format.json? }
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I bring this up because of this failure:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
test_verifiable_mime_types(MimeTypeTest)
    [controller/mime_type_test.rb:85:in `test_verifiable_mime_types'
     controller/mime_type_test.rb:85:in `each'
     controller/mime_type_test.rb:85:in `test_verifiable_mime_types'
     ./../../activesupport/lib/active_support/testing/setup_and_teardown.rb:94:in `__send__'
     ./../../activesupport/lib/active_support/testing/setup_and_teardown.rb:94:in `run']:
Mime Type is not verified: :js.
&amp;lt;nil&amp;gt; is not true.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Mime::JS&lt;/code&gt; is not verified because
&lt;code&gt;Mime::JS.html? == false&lt;/code&gt;. But, I consider ajax requests
just as dangerous because they still use the cookie. Maybe that's a
moot point though because of the ajax cross domain submissions
though?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-12T21:26:57+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-12T21:29:00+00:00</updated-at>
      <user-id type="integer">1</user-id>
      <version type="integer">21</version>
      <user-name>Rick</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Going with the assumption that I'm wrong here, I've fixed up two failing ActionPack tests.  I'm attaching a patch.  However, `Mime::Type.unverifiable_types` is now unused.  Should it be deprecated?  Since `Mime::Type.html_types` are all that is used to check for verified types, it's not really required anymore.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Going with the assumption that I'm wrong here, I've fixed up two
failing ActionPack tests. I'm attaching a patch. However,
&lt;code&gt;Mime::Type.unverifiable_types&lt;/code&gt; is now unused. Should it
be deprecated? Since &lt;code&gt;Mime::Type.html_types&lt;/code&gt; are all
that is used to check for verified types, it's not really required
anymore.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-12T21:35:59+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-12T21:36:04+00:00</updated-at>
      <user-id type="integer">1</user-id>
      <version type="integer">22</version>
      <user-name>Rick</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>We can use the Content-Type of the *request* because browsers can't change it.  They will only ever send html, url encoded or multipart.

Flash can change that header, but only when the crossdomain.xml thing allows it

Ajax requests can change it, but same origin policy protects us there.

Java and the like can probably do all sorts, but they can't get at the cookie store

Perhaps the real problem with understanding is that we're calling these 'html types' when in reality they're 'things the browser will send'?  Mime::Type.browser_generated_types?

+1 on deprecating the unverifiable_types</body>
      <body-html>&lt;div&gt;&lt;p&gt;We can use the Content-Type of the &lt;em&gt;request&lt;/em&gt; because
browsers can't change it. They will only ever send html, url
encoded or multipart.&lt;/p&gt;
&lt;p&gt;Flash can change that header, but only when the crossdomain.xml
thing allows it&lt;/p&gt;
&lt;p&gt;Ajax requests can change it, but same origin policy protects us
there.&lt;/p&gt;
&lt;p&gt;Java and the like can probably do all sorts, but they can't get
at the cookie store&lt;/p&gt;
&lt;p&gt;Perhaps the real problem with understanding is that we're
calling these 'html types' when in reality they're 'things the
browser will send'? Mime::Type.browser_generated_types?&lt;/p&gt;
&lt;p&gt;+1 on deprecating the unverifiable_types&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-13T09:27:04+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-13T09:27:09+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">23</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [f1ad8b48aae3ee26613b3e77bc0056e120096846]) Instead of overriding html_types, base the verification on browser_generated_types.

Also Deprecate the old unverifiable types.

[#1145 state:committed]
http://github.com/rails/rails/commit/f1ad8b48aae3ee26613b3e77bc0056e120096846</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [f1ad8b48aae3ee26613b3e77bc0056e120096846]) Instead of
overriding html_types, base the verification on
browser_generated_types.&lt;/p&gt;
&lt;p&gt;Also Deprecate the old unverifiable types.&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/1145&quot; title=&quot;Ticket #1145&quot;&gt;#1145&lt;/a&gt; state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/f1ad8b48aae3ee26613b3e77bc0056e120096846&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-13T10:24:24+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-13T10:24:25+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">24</version>
      <user-name>Repository</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>OK, so this is applied now.  I rejigged the logic slightly in another commit, but it's mostly as jeff originally applied it with Rick's test fixes.

So I think we're good to go, but let me know if we missed anything.</body>
      <body-html>&lt;div&gt;&lt;p&gt;OK, so this is applied now. I rejigged the logic slightly in
another commit, but it's mostly as jeff originally applied it with
Rick's test fixes.&lt;/p&gt;
&lt;p&gt;So I think we're good to go, but let me know if we missed
anything.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-13T10:27:08+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-13T10:27:13+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">25</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Thanks everyone! 

I'm glad this not only got fixed, but it was certainly a community effort to get it done, which I personally think is pretty cool :-)

Jeff</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks everyone!&lt;/p&gt;
&lt;p&gt;I'm glad this not only got fixed, but it was certainly a
community effort to get it done, which I personally think is pretty
cool :-)&lt;/p&gt;
&lt;p&gt;Jeff&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-13T13:48:31+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-13T13:48:35+00:00</updated-at>
      <user-id type="integer">17710</user-id>
      <version type="integer">26</version>
      <user-name>Jeff Cohen</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Indeed, great work everyone :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Indeed, great work everyone :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-13T16:51:00+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-13T16:51:06+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">27</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Rick</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>guys, i was browsing through the firefox source after reading this thread, and i believe you'll want to add 'text/plain' to the browser_generated_types:

&lt;form method=&quot;post&quot; enctype=&quot;text/plain&quot; action=&quot;/delete?user_id=5&quot;&gt;

will get past the auth token check and allow a CSRF:

http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsFormSubmission.cpp#1166</body>
      <body-html>&lt;div&gt;&lt;p&gt;guys, i was browsing through the firefox source after reading
this thread, and i believe you'll want to add 'text/plain' to the
browser_generated_types:&lt;/p&gt;

&lt;p&gt;will get past the auth token check and allow a CSRF:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsFormSubmission.cpp#1166&quot;&gt;
http://mxr.mozilla.org/mozilla-c...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-16T16:54:42+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 1
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-16T16:54:48+00:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">28</version>
      <user-name>coderrr</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>my bad, html got stripped...

guys, i was browsing through the firefox source after reading this thread, and i believe you'll want to add 'text/plain' to the browser_generated_types:

@@@
&lt;form method=&quot;post&quot; enctype=&quot;text/plain&quot; action=&quot;/delete?user_id=5&quot;&gt;
@@@

will get past the auth token check and allow a CSRF:

http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsFormSubmission.cpp#1166</body>
      <body-html>&lt;div&gt;&lt;p&gt;my bad, html got stripped...&lt;/p&gt;
&lt;p&gt;guys, i was browsing through the firefox source after reading
this thread, and i believe you'll want to add 'text/plain' to the
browser_generated_types:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
&amp;lt;form method=&amp;quot;post&amp;quot; enctype=&amp;quot;text/plain&amp;quot; action=&amp;quot;/delete?user_id=5&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will get past the auth token check and allow a CSRF:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://mxr.mozilla.org/mozilla-central/source/content/html/content/src/nsFormSubmission.cpp#1166&quot;&gt;
http://mxr.mozilla.org/mozilla-c...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-16T16:57:42+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-16T16:57:47+00:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">29</version>
      <user-name>coderrr</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>same deal with webkit:

http://trac.webkit.org/browser/releases/Apple/Safari%203.2/WebCore/html/HTMLFormElement.cpp#L354

I also verified this is an issue in rails 2.1, but not in 2.0.</body>
      <body-html>&lt;div&gt;&lt;p&gt;same deal with webkit:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://trac.webkit.org/browser/releases/Apple/Safari%203.2/WebCore/html/HTMLFormElement.cpp#L354&quot;&gt;
http://trac.webkit.org/browser/r...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also verified this is an issue in rails 2.1, but not in
2.0.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-16T17:55:39+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-16T17:55:41+00:00</updated-at>
      <user-id type="integer">37814</user-id>
      <version type="integer">30</version>
      <user-name>coderrr</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Nice find,  I've updated 2-2-stable and master.

2-1-stable still uses @@unverifiable_types and will need a separate
fix which I'll add shortly.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nice find, I've updated 2-2-stable and master.&lt;/p&gt;
&lt;p&gt;2-1-stable still uses @@unverifiable_types and will need a
separate fix which I'll add shortly.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-11-16T19:45:06+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2008-11-16T19:45:11+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">31</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry, I'm not sure I understand this comment: &quot;Ajax requests can change it, but same origin policy protects us there.&quot;

How does the same-origin policy protect us?  We're not worried about valid requests, we're worried about *forged* requests.  What's to stop me from *forging* a request to an ajax endpoint?  

Or, to put it differently, can't I get around the forgery protection simply by making a POST request where the content-type is not specified?

(In point of fact, I *can* do that, am shocked that it just skips the whole &quot;forgery protection&quot;.... and  that's why I'm here reading this thread...)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, I'm not sure I understand this comment: &quot;Ajax requests
can change it, but same origin policy protects us there.&quot;&lt;/p&gt;
&lt;p&gt;How does the same-origin policy protect us? We're not worried
about valid requests, we're worried about &lt;em&gt;forged&lt;/em&gt; requests.
What's to stop me from &lt;em&gt;forging&lt;/em&gt; a request to an ajax
endpoint?&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Or, to put it differently, can't I get around the forgery
protection simply by making a POST request where the content-type
is not specified?&lt;/p&gt;
&lt;p&gt;(In point of fact, I &lt;em&gt;can&lt;/em&gt; do that, am shocked that it
just skips the whole &quot;forgery protection&quot;.... and that's why I'm
here reading this thread...)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-19T20:24:14+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2009-04-19T20:24:19+01:00</updated-at>
      <user-id type="integer">49036</user-id>
      <version type="integer">32</version>
      <user-name>Steve</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>My mistake - my test was on a file:// url and same origin policy doesn't apply there.</body>
      <body-html>&lt;div&gt;&lt;p&gt;My mistake - my test was on a file:// url and same origin policy
doesn't apply there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-19T20:41:48+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activeresource bug patch request-forgery-protection</tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2009-04-19T20:41:49+01:00</updated-at>
      <user-id type="integer">49036</user-id>
      <version type="integer">33</version>
      <user-name>Steve</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>You would hear about this post therefore, I propose to find the essays writers and &lt;a href=&quot; http://www.essayslab.com&quot;&gt;buy essays&lt;/a&gt; moreover, that is real to see pre written essays.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You would hear about this post therefore, I propose to find the
essays writers and &lt;a&gt;buy essays&lt;/a&gt; moreover, that is real to see
pre written essays.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-16T13:51:16+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: actionpack activeresource bug patch request-forgery-protection
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2010-01-16T13:51:21+00:00</updated-at>
      <user-id type="integer">82884</user-id>
      <version type="integer">34</version>
      <user-name>Lisa32</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T21:52:35+01:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2010-10-09T21:52:39+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">36</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name>Low</priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were inspired by   baseball glove design and they created discount handbags with similar qualities.&lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come along until years later. The original handbag collection   had twelve designs, and they were made from supple, tan, top-quality leathers,   and showed the same excellent craftsmanship and stitching that we still expect   today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought new looks to   Coach bags. She used many new fabrics and organic materials like jersey and   wool. She created the brass hardware that is symbolic of &lt;strong&gt;&lt;a href=&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;. When   Lew Frankfort came aboard in 1979, he brought Coach to the next level, and they   became a name known the world over. Affordable luxury was not a concept that   many people knew, but now they would. Soon after Frankfort joined Coach, they   came out with a catalog, and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought its brand   relevance and strength. They designed watches starting in 1988, and also   expanded their company to Tokyo. Japan still counts among the leading purchasers   of &lt;strong&gt;&lt;a href=&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach heels. The manufacture of Coach shoes began in the mid   90's, and Reed Krakoff, the lead designer, loaned his talents to help put Coach   heels and &lt;a href=&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as their   handbags, but they are well worth the money invested in their purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that don't have   this height. &lt;strong&gt;&lt;a href=&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to style and   pizzazz. Coach platforms come in many styles, from gold loafers to slingbacks   with open toes. You may be able to find Coach shoes at discount prices online,   but be sure that you are buying genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous, Coach   shoes and &lt;a href=&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will make you   feel sporty, too. When selecting pumps or sandals to wear, you'll be happy to   count on the long-standing quality and service of the Coach company. They have   many styles to choose from, including chic and glamorous Coach boots and Coach   heels. Whether you are looking for sports shoes like Coach sneakers or sexy   shoes like Coach boots, the Coach name will never let you down.&lt;/p&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were
inspired by baseball glove design and they created discount
handbags with similar qualities.&lt;strong&gt;&lt;a href=
&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come
along until years later. The original handbag collection had twelve
designs, and they were made from supple, tan, top-quality leathers,
and showed the same excellent craftsmanship and stitching that we
still expect today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought
new looks to Coach bags. She used many new fabrics and organic
materials like jersey and wool. She created the brass hardware that
is symbolic of &lt;strong&gt;&lt;a href=
&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;.
When Lew Frankfort came aboard in 1979, he brought Coach to the
next level, and they became a name known the world over. Affordable
luxury was not a concept that many people knew, but now they would.
Soon after Frankfort joined Coach, they came out with a catalog,
and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought
its brand relevance and strength. They designed watches starting in
1988, and also expanded their company to Tokyo. Japan still counts
among the leading purchasers of &lt;strong&gt;&lt;a href=
&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach
heels. The manufacture of Coach shoes began in the mid 90's, and
Reed Krakoff, the lead designer, loaned his talents to help put
Coach heels and &lt;a href=
&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags
outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as
their handbags, but they are well worth the money invested in their
purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that
don't have this height. &lt;strong&gt;&lt;a href=
&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans
outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to
style and pizzazz. Coach platforms come in many styles, from gold
loafers to slingbacks with open toes. You may be able to find Coach
shoes at discount prices online, but be sure that you are buying
genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=
&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler
jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous,
Coach shoes and &lt;a href=
&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel
purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will
make you feel sporty, too. When selecting pumps or sandals to wear,
you'll be happy to count on the long-standing quality and service
of the Coach company. They have many styles to choose from,
including chic and glamorous Coach boots and Coach heels. Whether
you are looking for sports shoes like Coach sneakers or sexy shoes
like Coach boots, the Coach name will never let you down.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T01:09:48+00:00</created-at>
      <creator-id type="integer">18806</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1145</number>
      <permalink>bug-invalidauthenticitytoken-incorrectly-raised-for-xml-controllerdestroy-request</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>Bug: InvalidAuthenticityToken incorrectly raised for XML controller#destroy request</title>
      <updated-at type="datetime">2010-11-08T23:12:03+00:00</updated-at>
      <user-id type="integer">123546</user-id>
      <version type="integer">37</version>
      <user-name>jim123456</user-name>
      <creator-name>Matthew Moore</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1145</url>
      <priority-name>Low</priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>1fae9204bbff8a8139f11a9c322f2bdf84d63e06</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-01T04:53:29+00:00</created-at>
      <filename>csrf_html_ajax_only.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">58736</id>
      <size type="integer">12810</size>
      <uploader-id type="integer">17710</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/58736/csrf_html_ajax_only.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>664ca3c8ea5d9b6898b085df1a5e95e100cc3ce5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-12T21:35:59+00:00</created-at>
      <filename>csrf_html_ajax_only_2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">61659</id>
      <size type="integer">14263</size>
      <uploader-id type="integer">1</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/61659/csrf_html_ajax_only_2.diff</url>
    </attachment>
  </attachments>
</ticket>
