<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-04T04:11:13+01:00</created-at>
  <creator-id type="integer">42916</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6668</number>
  <permalink>activerecord-scopes-accumulate-joins-in-reverse-order</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>&quot;active record&quot; joins merge_joins</tag>
  <title>ActiveRecord scopes accumulate joins in reverse order</title>
  <updated-at type="datetime">2011-04-04T04:11:15+01:00</updated-at>
  <user-id type="integer">42916</user-id>
  <version type="integer">1</version>
  <user-name>Greg Hazel</user-name>
  <creator-name>Greg Hazel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6668</url>
  <priority-name nil="true"></priority-name>
  <original-body>ActiveRecord (2.3.11) accumulates joins in reverse order, leading to incorrect queries:

@@@ ruby 
&gt;&gt; User.scoped(:joins =&gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).scoped(:joins =&gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).all

User Load (0.0ms)  Mysql2::Error: Unknown column 'profiles.image_id' in 'on clause': SELECT `users`.* FROM `users` INNER JOIN images ON profiles.image_id = images.id INNER JOIN profiles ON users.id = profiles.user_id
@@@

However if I reverse the scopes, the query is correctly formed:

@@@ ruby 
&gt;&gt; User.scoped(:joins =&gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).scoped(:joins =&gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).all

User Load (1.0ms)  SELECT `users`.* FROM `users` INNER JOIN profiles ON users.id = profiles.user_id INNER JOIN images ON profiles.image_id = images.id
@@@


This appears to be due to ActiveRecord::Base#with_scope, where the parameters to merge_joins seem to be reversed compared to :include

@@@ ruby
                      elsif key == :include &amp;&amp; merge
                        hash[method][key] = merge_includes(hash[method][key], params[key]).uniq
                      elsif key == :joins &amp;&amp; merge
                        hash[method][key] = merge_joins(params[key], hash[method][key])
@@@


This bug does not seem to apply to Rails 3.0.5.</original-body>
  <latest-body>ActiveRecord (2.3.11) accumulates joins in reverse order, leading to incorrect queries:

@@@ ruby 
&gt;&gt; User.scoped(:joins =&gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).scoped(:joins =&gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).all

User Load (0.0ms)  Mysql2::Error: Unknown column 'profiles.image_id' in 'on clause': SELECT `users`.* FROM `users` INNER JOIN images ON profiles.image_id = images.id INNER JOIN profiles ON users.id = profiles.user_id
@@@

However if I reverse the scopes, the query is correctly formed:

@@@ ruby 
&gt;&gt; User.scoped(:joins =&gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).scoped(:joins =&gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).all

User Load (1.0ms)  SELECT `users`.* FROM `users` INNER JOIN profiles ON users.id = profiles.user_id INNER JOIN images ON profiles.image_id = images.id
@@@


This appears to be due to ActiveRecord::Base#with_scope, where the parameters to merge_joins seem to be reversed compared to :include

@@@ ruby
                      elsif key == :include &amp;&amp; merge
                        hash[method][key] = merge_includes(hash[method][key], params[key]).uniq
                      elsif key == :joins &amp;&amp; merge
                        hash[method][key] = merge_joins(params[key], hash[method][key])
@@@


This bug does not seem to apply to Rails 3.0.5.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;ActiveRecord (2.3.11) accumulates joins in reverse order,
leading to incorrect queries:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; User.scoped(:joins =&amp;gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).scoped(:joins =&amp;gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).all

User Load (0.0ms)  Mysql2::Error: Unknown column 'profiles.image_id' in 'on clause': SELECT `users`.* FROM `users` INNER JOIN images ON profiles.image_id = images.id INNER JOIN profiles ON users.id = profiles.user_id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However if I reverse the scopes, the query is correctly
formed:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; User.scoped(:joins =&amp;gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).scoped(:joins =&amp;gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).all

User Load (1.0ms)  SELECT `users`.* FROM `users` INNER JOIN profiles ON users.id = profiles.user_id INNER JOIN images ON profiles.image_id = images.id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This appears to be due to ActiveRecord::Base#with_scope, where
the parameters to merge_joins seem to be reversed compared to
:include&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;                      elsif key == :include &amp;amp;&amp;amp; merge
                        hash[method][key] = merge_includes(hash[method][key], params[key]).uniq
                      elsif key == :joins &amp;amp;&amp;amp; merge
                        hash[method][key] = merge_joins(params[key], hash[method][key])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This bug does not seem to apply to Rails 3.0.5.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ActiveRecord (2.3.11) accumulates joins in reverse order, leading to incorrect queries:

@@@ ruby 
&gt;&gt; User.scoped(:joins =&gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).scoped(:joins =&gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).all

User Load (0.0ms)  Mysql2::Error: Unknown column 'profiles.image_id' in 'on clause': SELECT `users`.* FROM `users` INNER JOIN images ON profiles.image_id = images.id INNER JOIN profiles ON users.id = profiles.user_id
@@@

However if I reverse the scopes, the query is correctly formed:

@@@ ruby 
&gt;&gt; User.scoped(:joins =&gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).scoped(:joins =&gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).all

User Load (1.0ms)  SELECT `users`.* FROM `users` INNER JOIN profiles ON users.id = profiles.user_id INNER JOIN images ON profiles.image_id = images.id
@@@


This appears to be due to ActiveRecord::Base#with_scope, where the parameters to merge_joins seem to be reversed compared to :include

@@@ ruby
                      elsif key == :include &amp;&amp; merge
                        hash[method][key] = merge_includes(hash[method][key], params[key]).uniq
                      elsif key == :joins &amp;&amp; merge
                        hash[method][key] = merge_joins(params[key], hash[method][key])
@@@


This bug does not seem to apply to Rails 3.0.5.</body>
      <body-html>&lt;div&gt;&lt;p&gt;ActiveRecord (2.3.11) accumulates joins in reverse order,
leading to incorrect queries:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; User.scoped(:joins =&amp;gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).scoped(:joins =&amp;gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).all

User Load (0.0ms)  Mysql2::Error: Unknown column 'profiles.image_id' in 'on clause': SELECT `users`.* FROM `users` INNER JOIN images ON profiles.image_id = images.id INNER JOIN profiles ON users.id = profiles.user_id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However if I reverse the scopes, the query is correctly
formed:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; User.scoped(:joins =&amp;gt; &quot;INNER JOIN images ON profiles.image_id = images.id&quot;).scoped(:joins =&amp;gt; &quot;INNER JOIN profiles ON users.id = profiles.user_id&quot;).all

User Load (1.0ms)  SELECT `users`.* FROM `users` INNER JOIN profiles ON users.id = profiles.user_id INNER JOIN images ON profiles.image_id = images.id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This appears to be due to ActiveRecord::Base#with_scope, where
the parameters to merge_joins seem to be reversed compared to
:include&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;                      elsif key == :include &amp;amp;&amp;amp; merge
                        hash[method][key] = merge_includes(hash[method][key], params[key]).uniq
                      elsif key == :joins &amp;amp;&amp;amp; merge
                        hash[method][key] = merge_joins(params[key], hash[method][key])&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This bug does not seem to apply to Rails 3.0.5.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-04T04:11:13+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6668</number>
      <permalink>activerecord-scopes-accumulate-joins-in-reverse-order</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;active record&quot; joins merge_joins</tag>
      <title>ActiveRecord scopes accumulate joins in reverse order</title>
      <updated-at type="datetime">2011-04-04T04:11:15+01:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">1</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6668</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
