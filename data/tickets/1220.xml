<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">17477</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-15T20:45:50+01:00</created-at>
  <creator-id type="integer">22033</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1220</number>
  <permalink>solving-conflicted-joins-and-include-find-options</permalink>
  <priority type="integer">627</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord find joins</tag>
  <title>Solving conflicted joins and include find options</title>
  <updated-at type="datetime">2009-01-18T06:42:56+00:00</updated-at>
  <user-id type="integer">22033</user-id>
  <version type="integer">3</version>
  <user-name>Ben Johnson</user-name>
  <creator-name>Ben Johnson</creator-name>
  <assigned-user-name>Frederick Cheung</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1220</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Take this example:

&lt;pre&gt;
User.all(:conditions =&gt; &quot;orders.total &gt; 100 and line_items.state = 'open'&quot;, :joins =&gt; {:orders =&gt; :line_items}, :include =&gt; :orders)
&lt;/pre&gt;

You get the same join being added twice. Plus, I may not want to eager load line items also. Why not skip any joins that have already been added? Now you can cherry pick which associations to eager load without getting an SQL error. I accomplished this by modifying the add_joins! function to the following:

&lt;pre&gt;
def add_joins
scope = scope(:find) if :auto == scope
            merged_joins = scope &amp;&amp; scope[:joins] &amp;&amp; joins ? merge_joins(scope[:joins], joins) : (joins || scope &amp;&amp; scope[:joins])
            case merged_joins
            when Symbol, Hash, Array
              if array_of_strings?(merged_joins)
                merged_joins.each { |merged_join| sql &lt;&lt; &quot; #{merged_join} &quot; unless sql.include?(merged_join) }
              else
                join_dependency = ActiveRecord::Associations::ClassMethods::InnerJoinDependency.new(self, merged_joins, nil)
                join_dependency.join_associations.each do |assoc|
                  join_sql = assoc.association_join
                  sql &lt;&lt; &quot; #{join_sql} &quot; unless sql.include?(join_sql)
                end
              end
            when String
              sql &lt;&lt; &quot; #{merged_joins} &quot; if merged_joins &amp;&amp; !sql.include?(merged_joins)
            end
end
&lt;/pre&gt;

This just makes more sense and allows the include option to be used as a way to eager load associations instead of a way to create joins, if that makes sense.</original-body>
  <latest-body>Take this example:

&lt;pre&gt;
User.all(:conditions =&gt; &quot;orders.total &gt; 100 and line_items.state = 'open'&quot;, :joins =&gt; {:orders =&gt; :line_items}, :include =&gt; :orders)
&lt;/pre&gt;

You get the same join being added twice. Plus, I may not want to eager load line items also. Why not skip any joins that have already been added? Now you can cherry pick which associations to eager load without getting an SQL error. I accomplished this by modifying the add_joins! function to the following:

&lt;pre&gt;
def add_joins
scope = scope(:find) if :auto == scope
            merged_joins = scope &amp;&amp; scope[:joins] &amp;&amp; joins ? merge_joins(scope[:joins], joins) : (joins || scope &amp;&amp; scope[:joins])
            case merged_joins
            when Symbol, Hash, Array
              if array_of_strings?(merged_joins)
                merged_joins.each { |merged_join| sql &lt;&lt; &quot; #{merged_join} &quot; unless sql.include?(merged_join) }
              else
                join_dependency = ActiveRecord::Associations::ClassMethods::InnerJoinDependency.new(self, merged_joins, nil)
                join_dependency.join_associations.each do |assoc|
                  join_sql = assoc.association_join
                  sql &lt;&lt; &quot; #{join_sql} &quot; unless sql.include?(join_sql)
                end
              end
            when String
              sql &lt;&lt; &quot; #{merged_joins} &quot; if merged_joins &amp;&amp; !sql.include?(merged_joins)
            end
end
&lt;/pre&gt;

This just makes more sense and allows the include option to be used as a way to eager load associations instead of a way to create joins, if that makes sense.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Take this example:&lt;/p&gt;
&lt;p&gt;User.all(:conditions =&amp;gt; &quot;orders.total &amp;gt; 100 and
line_items.state = 'open'&quot;, :joins =&amp;gt; {:orders =&amp;gt;
:line_items}, :include =&amp;gt; :orders)&lt;/p&gt;
&lt;p&gt;You get the same join being added twice. Plus, I may not want to
eager load line items also. Why not skip any joins that have
already been added? Now you can cherry pick which associations to
eager load without getting an SQL error. I accomplished this by
modifying the add_joins! function to the following:&lt;/p&gt;
&lt;p&gt;def add_joins scope = scope(:find) if :auto == scope&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;        merged_joins = scope &amp;amp;&amp;amp; scope[:joins] &amp;amp;&amp;amp; joins ? merge_joins(scope[:joins], joins) : (joins || scope &amp;amp;&amp;amp; scope[:joins])
        case merged_joins
        when Symbol, Hash, Array
          if array_of_strings?(merged_joins)
            merged_joins.each { |merged_join| sql &amp;lt;&amp;lt; &quot; #{merged_join} &quot; unless sql.include?(merged_join) }
          else
            join_dependency = ActiveRecord::Associations::ClassMethods::InnerJoinDependency.new(self, merged_joins, nil)
            join_dependency.join_associations.each do |assoc|
              join_sql = assoc.association_join
              sql &amp;lt;&amp;lt; &quot; #{join_sql} &quot; unless sql.include?(join_sql)
            end
          end
        when String
          sql &amp;lt;&amp;lt; &quot; #{merged_joins} &quot; if merged_joins &amp;amp;&amp;amp; !sql.include?(merged_joins)
        end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;This just makes more sense and allows the include option to be
used as a way to eager load associations instead of a way to create
joins, if that makes sense.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Take this example:

&lt;pre&gt;
User.all(:conditions =&gt; &quot;orders.total &gt; 100 and line_items.state = 'open'&quot;, :joins =&gt; {:orders =&gt; :line_items}, :include =&gt; :orders)
&lt;/pre&gt;

You get the same join being added twice. Plus, I may not want to eager load line items also. Why not skip any joins that have already been added? Now you can cherry pick which associations to eager load without getting an SQL error. I accomplished this by modifying the add_joins! function to the following:

&lt;pre&gt;
def add_joins
scope = scope(:find) if :auto == scope
            merged_joins = scope &amp;&amp; scope[:joins] &amp;&amp; joins ? merge_joins(scope[:joins], joins) : (joins || scope &amp;&amp; scope[:joins])
            case merged_joins
            when Symbol, Hash, Array
              if array_of_strings?(merged_joins)
                merged_joins.each { |merged_join| sql &lt;&lt; &quot; #{merged_join} &quot; unless sql.include?(merged_join) }
              else
                join_dependency = ActiveRecord::Associations::ClassMethods::InnerJoinDependency.new(self, merged_joins, nil)
                join_dependency.join_associations.each do |assoc|
                  join_sql = assoc.association_join
                  sql &lt;&lt; &quot; #{join_sql} &quot; unless sql.include?(join_sql)
                end
              end
            when String
              sql &lt;&lt; &quot; #{merged_joins} &quot; if merged_joins &amp;&amp; !sql.include?(merged_joins)
            end
end
&lt;/pre&gt;

This just makes more sense and allows the include option to be used as a way to eager load associations instead of a way to create joins, if that makes sense.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Take this example:&lt;/p&gt;
&lt;pre&gt;
User.all(:conditions =&amp;gt; &quot;orders.total &amp;gt; 100 and line_items.state = 'open'&quot;, :joins =&amp;gt; {:orders =&amp;gt; :line_items}, :include =&amp;gt; :orders)
&lt;/pre&gt;
&lt;p&gt;You get the same join being added twice. Plus, I may not want to
eager load line items also. Why not skip any joins that have
already been added? Now you can cherry pick which associations to
eager load without getting an SQL error. I accomplished this by
modifying the add_joins! function to the following:&lt;/p&gt;
&lt;pre&gt;
def add_joins
scope = scope(:find) if :auto == scope
            merged_joins = scope &amp;amp;&amp;amp; scope[:joins] &amp;amp;&amp;amp; joins ? merge_joins(scope[:joins], joins) : (joins || scope &amp;amp;&amp;amp; scope[:joins])
            case merged_joins
            when Symbol, Hash, Array
              if array_of_strings?(merged_joins)
                merged_joins.each { |merged_join| sql &amp;lt;&amp;lt; &quot; #{merged_join} &quot; unless sql.include?(merged_join) }
              else
                join_dependency = ActiveRecord::Associations::ClassMethods::InnerJoinDependency.new(self, merged_joins, nil)
                join_dependency.join_associations.each do |assoc|
                  join_sql = assoc.association_join
                  sql &amp;lt;&amp;lt; &quot; #{join_sql} &quot; unless sql.include?(join_sql)
                end
              end
            when String
              sql &amp;lt;&amp;lt; &quot; #{merged_joins} &quot; if merged_joins &amp;amp;&amp;amp; !sql.include?(merged_joins)
            end
end
&lt;/pre&gt;
&lt;p&gt;This just makes more sense and allows the include option to be
used as a way to eager load associations instead of a way to create
joins, if that makes sense.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-15T20:45:50+01:00</created-at>
      <creator-id type="integer">22033</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1220</number>
      <permalink>solving-conflicted-joins-and-include-find-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord find joins</tag>
      <title>Solving conflicted joins and include find options</title>
      <updated-at type="datetime">2008-10-15T20:45:54+01:00</updated-at>
      <user-id type="integer">22033</user-id>
      <version type="integer">1</version>
      <user-name>Ben Johnson</user-name>
      <creator-name>Ben Johnson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1220</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You shouldn't really be using joins/include in the same query. One of the following should do the job :

* Use only :include
* Call preload_associations on the result array,</body>
      <body-html>&lt;div&gt;&lt;p&gt;You shouldn't really be using joins/include in the same query.
One of the following should do the job :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use only :include&lt;/li&gt;
&lt;li&gt;Call preload_associations on the result array,&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-18T06:37:15+00:00</created-at>
      <creator-id type="integer">22033</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1220</number>
      <permalink>solving-conflicted-joins-and-include-find-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find joins</tag>
      <title>Solving conflicted joins and include find options</title>
      <updated-at type="datetime">2009-01-18T06:37:20+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Ben Johnson</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1220</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I understand that, but I failed to specify the main reason this should be included. This can easily happen when chaining named scopes, since each scope can specify to eager load or join an association. Because of this they can easily clash. You already solve conflicts between the 2 when chaining named scope, why not solve them as a couple?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I understand that, but I failed to specify the main reason this
should be included. This can easily happen when chaining named
scopes, since each scope can specify to eager load or join an
association. Because of this they can easily clash. You already
solve conflicts between the 2 when chaining named scope, why not
solve them as a couple?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-18T06:42:52+00:00</created-at>
      <creator-id type="integer">22033</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1220</number>
      <permalink>solving-conflicted-joins-and-include-find-options</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord find joins</tag>
      <title>Solving conflicted joins and include find options</title>
      <updated-at type="datetime">2009-01-18T06:42:56+00:00</updated-at>
      <user-id type="integer">22033</user-id>
      <version type="integer">3</version>
      <user-name>Ben Johnson</user-name>
      <creator-name>Ben Johnson</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1220</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
