<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-18T05:14:19+01:00</created-at>
  <creator-id type="integer">101821</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6710</number>
  <permalink>activerecorder-json-serialization-should-not-use-keys-defined-in-methods-for-included-associations</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>ActiveRecord json serialization should not use keys defined in :methods for  included associations</title>
  <updated-at type="datetime">2011-04-18T05:18:30+01:00</updated-at>
  <user-id type="integer">101821</user-id>
  <version type="integer">2</version>
  <user-name>Jake Dempsey</user-name>
  <creator-name>Jake Dempsey</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6710</url>
  <priority-name nil="true"></priority-name>
  <original-body>I am currently using as_json with something similar to:

  def as_json(opts={})
    super(:only =&gt; [:foo],
      :methods =&gt; [:some_method?], 
      :include =&gt; { 
        :assoc =&gt; { :only =&gt; [:bar] }
      }
    )
  end

When I render my object to json, I notice that some_method? is being rendered in my json hash for the assoc object.  The only workaround I have been able to come up with is to pass an empty [] to the :assoc like:

  def as_json(opts={})
    super(:only =&gt; [:foo],
      :methods =&gt; [:some_method?], 
      :include =&gt; { 
        :assoc =&gt; { :only =&gt; [:bar], :methods =&gt; [] }
      }
    )
  end

Is that the intended behavior?  It does not seem intuitive that the methods declared at the root for the as_json would get inherited by an included association if no methods are defined for the included association.  Bug?</original-body>
  <latest-body>I am currently using as_json with something similar to:

  def as_json(opts={})
    super(:only =&gt; [:foo],
      :methods =&gt; [:some_method?], 
      :include =&gt; { 
        :assoc =&gt; { :only =&gt; [:bar] }
      }
    )
  end

When I render my object to json, I notice that some_method? is being rendered in my json hash for the assoc object.  The only workaround I have been able to come up with is to pass an empty [] to the :assoc like:

  def as_json(opts={})
    super(:only =&gt; [:foo],
      :methods =&gt; [:some_method?], 
      :include =&gt; { 
        :assoc =&gt; { :only =&gt; [:bar], :methods =&gt; [] }
      }
    )
  end

Is that the intended behavior?  It does not seem intuitive that the methods declared at the root for the as_json would get inherited by an included association if no methods are defined for the included association.  Bug?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I am currently using as_json with something similar to:&lt;/p&gt;
&lt;p&gt;def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(:only =&amp;gt; [:foo],
  :methods =&amp;gt; [:some_method?], 
  :include =&amp;gt; { 
    :assoc =&amp;gt; { :only =&amp;gt; [:bar] }
  }
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;When I render my object to json, I notice that some_method? is
being rendered in my json hash for the assoc object. The only
workaround I have been able to come up with is to pass an empty []
to the :assoc like:&lt;/p&gt;
&lt;p&gt;def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(:only =&amp;gt; [:foo],
  :methods =&amp;gt; [:some_method?], 
  :include =&amp;gt; { 
    :assoc =&amp;gt; { :only =&amp;gt; [:bar], :methods =&amp;gt; [] }
  }
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Is that the intended behavior? It does not seem intuitive that
the methods declared at the root for the as_json would get
inherited by an included association if no methods are defined for
the included association. Bug?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am currently using as_json with something similar to:

  def as_json(opts={})
    super(:only =&gt; [:foo],
      :methods =&gt; [:some_method?], 
      :include =&gt; { 
        :assoc =&gt; { :only =&gt; [:bar] }
      }
    )
  end

When I render my object to json, I notice that some_method? is being rendered in my json hash for the assoc object.  The only workaround I have been able to come up with is to pass an empty [] to the :assoc like:

  def as_json(opts={})
    super(:only =&gt; [:foo],
      :methods =&gt; [:some_method?], 
      :include =&gt; { 
        :assoc =&gt; { :only =&gt; [:bar], :methods =&gt; [] }
      }
    )
  end

Is that the intended behavior?  It does not seem intuitive that the methods declared at the root for the as_json would get inherited by an included association if no methods are defined for the included association.  Bug?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am currently using as_json with something similar to:&lt;/p&gt;
&lt;p&gt;def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(:only =&amp;gt; [:foo],
  :methods =&amp;gt; [:some_method?], 
  :include =&amp;gt; { 
    :assoc =&amp;gt; { :only =&amp;gt; [:bar] }
  }
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;When I render my object to json, I notice that some_method? is
being rendered in my json hash for the assoc object. The only
workaround I have been able to come up with is to pass an empty []
to the :assoc like:&lt;/p&gt;
&lt;p&gt;def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(:only =&amp;gt; [:foo],
  :methods =&amp;gt; [:some_method?], 
  :include =&amp;gt; { 
    :assoc =&amp;gt; { :only =&amp;gt; [:bar], :methods =&amp;gt; [] }
  }
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;Is that the intended behavior? It does not seem intuitive that
the methods declared at the root for the as_json would get
inherited by an included association if no methods are defined for
the included association. Bug?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T05:14:19+01:00</created-at>
      <creator-id type="integer">101821</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6710</number>
      <permalink>activerecorder-json-serialization-should-not-use-keys-defined-in-methods-for-included-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecorder json serialization should not use keys defined in :methods for  included associations</title>
      <updated-at type="datetime">2011-04-18T05:14:21+01:00</updated-at>
      <user-id type="integer">101821</user-id>
      <version type="integer">1</version>
      <user-name>Jake Dempsey</user-name>
      <creator-name>Jake Dempsey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6710</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T05:18:28+01:00</created-at>
      <creator-id type="integer">101821</creator-id>
      <diffable-attributes type="yaml">--- 
:title: ActiveRecorder json serialization should not use keys defined in :methods for  included associations
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6710</number>
      <permalink>activerecorder-json-serialization-should-not-use-keys-defined-in-methods-for-included-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord json serialization should not use keys defined in :methods for  included associations</title>
      <updated-at type="datetime">2011-04-18T05:18:30+01:00</updated-at>
      <user-id type="integer">101821</user-id>
      <version type="integer">2</version>
      <user-name>Jake Dempsey</user-name>
      <creator-name>Jake Dempsey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6710</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
