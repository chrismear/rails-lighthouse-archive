<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-05T11:16:31+01:00</created-at>
  <creator-id type="integer">160</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">338</number>
  <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
  <priority type="integer">17606</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord bug doc</tag>
  <title>Invalid has_one association causes parent object save to fail</title>
  <updated-at type="datetime">2008-10-23T16:23:15+01:00</updated-at>
  <user-id type="integer">20429</user-id>
  <version type="integer">8</version>
  <user-name>Jeremy McNevin</user-name>
  <creator-name>Luke Redpath</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
  <priority-name nil="true"></priority-name>
  <original-body>&quot;This ticket&quot;:http://dev.rubyonrails.org/ticket/10518 on the old Rails trac supplied a patch that changes the behaviour of has_one; now, if the associated record is invalid, the parent object will not save. This was supposedly to make it consistent with has_many and was introduced in &quot;this changeset&quot;:http://github.com/rails/rails/commit/7ddc8f2e1bc9c818b622373a8c85bd679533cefd

I'm am opening this ticket because I consider this a bug and an undocumented feature change and I'm struggling to understand why this was introduced; it has broken part of an application that I'm attempting to upgrade to Rails 2.1 and I have spent the best part of a few hours trying to track this down.

The reason I consider this a bug is because there is already a way of producing this behaviour *explicitly* using validates_associated. Why, if this can be done manually (when required) is this being done automatically?

The last post in the old Trac ticket demonstrates a catch-22 situation which is what lead to my own test failures. Here is an example that fails as a result of this new behaviour:

@@@ ruby
class Snippet
  has_one :wiki_entry
end

class WikiEntry
  belongs_to :snippet
  validates_presence_of :snippet_id &lt;= this is the important bit!
end

s = Snippet.new
s.wiki_entry.build
s.save # =&gt; FAIL!
@@@

WikiEntry fails validation because it requires a snippet_id. It cannot get a snippet_id until it's parent Snippet has been saved. But we cannot save the parent Snippet because it's child WikIEntry is valid; catch-22.</original-body>
  <latest-body>&quot;This ticket&quot;:http://dev.rubyonrails.org/ticket/10518 on the old Rails trac supplied a patch that changes the behaviour of has_one; now, if the associated record is invalid, the parent object will not save. This was supposedly to make it consistent with has_many and was introduced in &quot;this changeset&quot;:http://github.com/rails/rails/commit/7ddc8f2e1bc9c818b622373a8c85bd679533cefd

I'm am opening this ticket because I consider this a bug and an undocumented feature change and I'm struggling to understand why this was introduced; it has broken part of an application that I'm attempting to upgrade to Rails 2.1 and I have spent the best part of a few hours trying to track this down.

The reason I consider this a bug is because there is already a way of producing this behaviour *explicitly* using validates_associated. Why, if this can be done manually (when required) is this being done automatically?

The last post in the old Trac ticket demonstrates a catch-22 situation which is what lead to my own test failures. Here is an example that fails as a result of this new behaviour:

@@@ ruby
class Snippet
  has_one :wiki_entry
end

class WikiEntry
  belongs_to :snippet
  validates_presence_of :snippet_id &lt;= this is the important bit!
end

s = Snippet.new
s.wiki_entry.build
s.save # =&gt; FAIL!
@@@

WikiEntry fails validation because it requires a snippet_id. It cannot get a snippet_id until it's parent Snippet has been saved. But we cannot save the parent Snippet because it's child WikIEntry is valid; catch-22.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/10518&quot;&gt;This ticket&lt;/a&gt; on the old Rails trac supplied a patch that changes the behaviour of has_one; now, if the associated record is invalid, the parent object will not save. This was supposedly to make it consistent with has_many and was introduced in &lt;a href=&quot;http://github.com/rails/rails/commit/7ddc8f2e1bc9c818b622373a8c85bd679533cefd&quot;&gt;this changeset&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
I'm am opening this ticket because I consider this a bug and an undocumented feature change and I'm struggling to understand why this was introduced; it has broken part of an application that I'm attempting to upgrade to Rails 2.1 and I have spent the best part of a few hours trying to track this down.
&lt;/p&gt;&lt;p&gt;
The reason I consider this a bug is because there is already a way of producing this behaviour &lt;strong&gt;explicitly&lt;/strong&gt; using validates_associated. Why, if this can be done manually (when required) is this being done automatically?
&lt;/p&gt;&lt;p&gt;
The last post in the old Trac ticket demonstrates a catch-22 situation which is what lead to my own test failures. Here is an example that fails as a result of this new behaviour:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Snippet
  has_one :wiki_entry
end

class WikiEntry
  belongs_to :snippet
  validates_presence_of :snippet_id &amp;lt;= this is the important bit!
end

s = Snippet.new
s.wiki_entry.build
s.save # =&amp;gt; FAIL!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
WikiEntry fails validation because it requires a snippet_id. It cannot get a snippet_id until it's parent Snippet has been saved. But we cannot save the parent Snippet because it's child WikIEntry is valid; catch-22.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&quot;This ticket&quot;:http://dev.rubyonrails.org/ticket/10518 on the old Rails trac supplied a patch that changes the behaviour of has_one; now, if the associated record is invalid, the parent object will not save. This was supposedly to make it consistent with has_many and was introduced in &quot;this changeset&quot;:http://github.com/rails/rails/commit/7ddc8f2e1bc9c818b622373a8c85bd679533cefd

I'm am opening this ticket because I consider this a bug and an undocumented feature change and I'm struggling to understand why this was introduced; it has broken part of an application that I'm attempting to upgrade to Rails 2.1 and I have spent the best part of a few hours trying to track this down.

The reason I consider this a bug is because there is already a way of producing this behaviour *explicitly* using validates_associated. Why, if this can be done manually (when required) is this being done automatically?

The last post in the old Trac ticket demonstrates a catch-22 situation which is what lead to my own test failures. Here is an example that fails as a result of this new behaviour:

@@@ ruby
class Snippet
  has_one :wiki_entry
end

class WikiEntry
  belongs_to :snippet
  validates_presence_of :snippet_id &lt;= this is the important bit!
end

s = Snippet.new
s.build_wiki_entry
s.save # =&gt; FAIL!
@@@

WikiEntry fails validation because it requires a snippet_id. It cannot get a snippet_id until it's parent Snippet has been saved. But we cannot save the parent Snippet because it's child WikIEntry is valid; catch-22.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/10518&quot;&gt;This ticket&lt;/a&gt; on the old Rails trac supplied a patch that changes the behaviour of has_one; now, if the associated record is invalid, the parent object will not save. This was supposedly to make it consistent with has_many and was introduced in &lt;a href=&quot;http://github.com/rails/rails/commit/7ddc8f2e1bc9c818b622373a8c85bd679533cefd&quot;&gt;this changeset&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
I'm am opening this ticket because I consider this a bug and an undocumented feature change and I'm struggling to understand why this was introduced; it has broken part of an application that I'm attempting to upgrade to Rails 2.1 and I have spent the best part of a few hours trying to track this down.
&lt;/p&gt;&lt;p&gt;
The reason I consider this a bug is because there is already a way of producing this behaviour &lt;strong&gt;explicitly&lt;/strong&gt; using validates_associated. Why, if this can be done manually (when required) is this being done automatically?
&lt;/p&gt;&lt;p&gt;
The last post in the old Trac ticket demonstrates a catch-22 situation which is what lead to my own test failures. Here is an example that fails as a result of this new behaviour:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Snippet
  has_one :wiki_entry
end

class WikiEntry
  belongs_to :snippet
  validates_presence_of :snippet_id &amp;lt;= this is the important bit!
end

s = Snippet.new
s.build_wiki_entry
s.save # =&amp;gt; FAIL!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
WikiEntry fails validation because it requires a snippet_id. It cannot get a snippet_id until it's parent Snippet has been saved. But we cannot save the parent Snippet because it's child WikIEntry is valid; catch-22.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-05T11:18:39+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-06-05T11:18:39+01:00</updated-at>
      <user-id type="integer">160</user-id>
      <version type="integer">1</version>
      <user-name>Luke Redpath</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>One further note, this appears to be related to &quot;this ticket&quot;:http://rails.lighthouseapp.com/projects/8994/tickets/301-systemstackerror-with-has_one

It appears some kind of fix has been checked in (a :validate option to disable this behaviour) but I still consider this to be a bug unless this behaviour is either *disabled* by default or properly documented.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
One further note, this appears to be related to &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/301-systemstackerror-with-has_one&quot;&gt;this ticket&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
It appears some kind of fix has been checked in (a :validate option to disable this behaviour) but I still consider this to be a bug unless this behaviour is either &lt;strong&gt;disabled&lt;/strong&gt; by default or properly documented.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-05T11:21:06+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-06-05T11:21:06+01:00</updated-at>
      <user-id type="integer">160</user-id>
      <version type="integer">2</version>
      <user-name>Luke Redpath</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 
I'd like to see this removed entirely.  We already had a perfectly good method for the validation.  This undocumented and entirely unexpected behavior is much more bug than feature.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1
&lt;/p&gt;&lt;p&gt;
I'd like to see this removed entirely.  We already had a perfectly good method for the validation.  This undocumented and entirely unexpected behavior is much more bug than feature.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-09T22:35:46+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-06-09T22:35:46+01:00</updated-at>
      <user-id type="integer">22807</user-id>
      <version type="integer">3</version>
      <user-name>Drew Blas</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;
+1
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-09T23:25:24+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-06-09T23:25:24+01:00</updated-at>
      <user-id type="integer">9067</user-id>
      <version type="integer">4</version>
      <user-name>James Cox</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://github.com/rails/rails/commit/7f140bbddaf70abc61570f6cfdcbfba5771ffc78 disabled it by default.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/7f140bbddaf70abc61570f6cfdcbfba5771ffc78&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt; disabled it by default.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-11T12:34:05+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-06-11T12:34:05+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">5</version>
      <user-name>Pratik</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>There seems to be some inconsistency in the documentation in that commit; sometimes it says false by default, sometimes it is true by default. Is this just a documentation error?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
There seems to be some inconsistency in the documentation in that commit; sometimes it says false by default, sometimes it is true by default. Is this just a documentation error?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-11T13:23:14+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-06-11T13:23:14+01:00</updated-at>
      <user-id type="integer">160</user-id>
      <version type="integer">6</version>
      <user-name>Luke Redpath</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It's false by default for has_one and belongs_to. Made another commits to fix docs/bheavior.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It's false by default for has_one and belongs_to. Made another commits to fix docs/bheavior.
&lt;/p&gt;&lt;p&gt;
Thanks
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-11T13:33:32+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-06-11T13:33:32+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">7</version>
      <user-name>Pratik</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Link to that commit: http://github.com/rails/rails/commit/71bf756ea21f338771b53d02951d6654bd295649</body>
      <body-html>&lt;div&gt;&lt;p&gt;Link to that commit: &lt;a href=&quot;http://github.com/rails/rails/commit/71bf756ea21f338771b53d02951d6654bd295649&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-17T21:29:55+01:00</created-at>
      <creator-id type="integer">160</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">338</number>
      <permalink>invalid-has_one-association-causes-parent-object-save-to-fail</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Invalid has_one association causes parent object save to fail</title>
      <updated-at type="datetime">2008-10-23T16:23:10+01:00</updated-at>
      <user-id type="integer">20429</user-id>
      <version type="integer">8</version>
      <user-name>Jeremy McNevin</user-name>
      <creator-name>Luke Redpath</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/338</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
