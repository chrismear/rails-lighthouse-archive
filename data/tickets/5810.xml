<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-14T17:47:55+01:00</created-at>
  <creator-id type="integer">120053</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5810</number>
  <permalink>make-obvious-and-integrate-html5-required-attribute</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Make obvious and integrate HTML5 &quot;required&quot; attribute</title>
  <updated-at type="datetime">2010-10-14T18:19:35+01:00</updated-at>
  <user-id type="integer">120053</user-id>
  <version type="integer">3</version>
  <user-name>Adrian Perez</user-name>
  <creator-name>Adrian Perez</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5810</url>
  <priority-name>Low</priority-name>
  <original-body>The HTML5 &quot;required&quot; attribute, as it's name implies, tells the aware-browsers, that they shouldn't submit the form is a field marked with this attribute isn't filled in. Currently, I can achieve the behaviour using rails, by passing a 

@@@ ruby
  :required =&gt; true
@@@

to any helper which actually generates:

@@@ html
 ... required=&quot;required&quot;
@@@

markup.

The HTML5 specs tell you that the value of the attribute doesn't matter, but I still believe is more concise to make it generate markup like this:

@@@ html
  &lt;input type=&quot;text&quot; name=&quot;sample&quot; required /&gt;
@@@

The same for the other attributes such as *autofocus*, *disabled*, and the like.

I mean to be able to do something like this:

@@@ ruby
def test_required_text_field_tag
    expected = %{&lt;input name=&quot;name&quot; id=&quot;name&quot; type=&quot;text&quot; required /&gt;}
    assert_dom_equal(expected, text_field_tag(:name, :required =&gt; true)
end
@@@</original-body>
  <latest-body>The HTML5 &quot;required&quot; attribute, as it's name implies, tells the aware-browsers, that they shouldn't submit the form is a field marked with this attribute isn't filled in. Currently, I can achieve the behaviour using rails, by passing a 

@@@ ruby
  :required =&gt; true
@@@

to any helper which actually generates:

@@@ html
 ... required=&quot;required&quot;
@@@

markup.

The HTML5 specs tell you that the value of the attribute doesn't matter, but I still believe is more concise to make it generate markup like this:

@@@ html
  &lt;input type=&quot;text&quot; name=&quot;sample&quot; required /&gt;
@@@

The same for the other attributes such as *autofocus*, *disabled*, and the like.

I mean to be able to do something like this:

@@@ ruby
def test_required_text_field_tag
    expected = %{&lt;input name=&quot;name&quot; id=&quot;name&quot; type=&quot;text&quot; required /&gt;}
    assert_dom_equal(expected, text_field_tag(:name, :required =&gt; true)
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The HTML5 &quot;required&quot; attribute, as it's name implies, tells the
aware-browsers, that they shouldn't submit the form is a field
marked with this attribute isn't filled in. Currently, I can
achieve the behaviour using rails, by passing a&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  :required =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to any helper which actually generates:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;html&quot;&gt; ... required=&quot;required&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;markup.&lt;/p&gt;
&lt;p&gt;The HTML5 specs tell you that the value of the attribute doesn't
matter, but I still believe is more concise to make it generate
markup like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;html&quot;&gt;  &amp;lt;input type=&quot;text&quot; name=&quot;sample&quot; required /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The same for the other attributes such as &lt;em&gt;autofocus&lt;/em&gt;,
&lt;em&gt;disabled&lt;/em&gt;, and the like.&lt;/p&gt;
&lt;p&gt;I mean to be able to do something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def test_required_text_field_tag
    expected = %{&amp;lt;input name=&quot;name&quot; id=&quot;name&quot; type=&quot;text&quot; required /&amp;gt;}
    assert_dom_equal(expected, text_field_tag(:name, :required =&amp;gt; true)
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The HTML5 &quot;required&quot; attribute, as it's name implies, tells the aware-browsers, that they shouldn't submit the form is a field marked with this attribute isn't filled in. Currently, I can achieve the behaviour using rails, by passing a 

@@@ ruby
  :required =&gt; true
@@@

to any helper which actually generates:

@@@ html
 ... required=&quot;required&quot;
@@@

markup.

The HTML5 specs tell you that the value of the attribute doesn't matter, but I still believe is more concise to make it generate markup like this:

@@@ html
  &lt;input type=&quot;text&quot; name=&quot;sample&quot; required /&gt;
@@@

The same for the other attributes such as *autofocus*, *disabled*, and the like.

I mean to be able to do something like this:

@@@ ruby
def test_required_text_field_tag
    expected = %{&lt;input name=&quot;name&quot; id=&quot;name&quot; type=&quot;text&quot; required /&gt;}
    assert_dom_equal(expected, text_field_tag(:name, :required =&gt; true)
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;The HTML5 &quot;required&quot; attribute, as it's name implies, tells the
aware-browsers, that they shouldn't submit the form is a field
marked with this attribute isn't filled in. Currently, I can
achieve the behaviour using rails, by passing a&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  :required =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;to any helper which actually generates:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;html&quot;&gt; ... required=&quot;required&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;markup.&lt;/p&gt;
&lt;p&gt;The HTML5 specs tell you that the value of the attribute doesn't
matter, but I still believe is more concise to make it generate
markup like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;html&quot;&gt;  &amp;lt;input type=&quot;text&quot; name=&quot;sample&quot; required /&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The same for the other attributes such as &lt;em&gt;autofocus&lt;/em&gt;,
&lt;em&gt;disabled&lt;/em&gt;, and the like.&lt;/p&gt;
&lt;p&gt;I mean to be able to do something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def test_required_text_field_tag
    expected = %{&amp;lt;input name=&quot;name&quot; id=&quot;name&quot; type=&quot;text&quot; required /&amp;gt;}
    assert_dom_equal(expected, text_field_tag(:name, :required =&amp;gt; true)
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-10-14T17:47:55+01:00</created-at>
      <creator-id type="integer">120053</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5810</number>
      <permalink>make-obvious-and-integrate-html5-required-attribute</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Make obvious and integrate HTML5 &quot;required&quot; attribute</title>
      <updated-at type="datetime">2010-10-14T18:02:15+01:00</updated-at>
      <user-id type="integer">120053</user-id>
      <version type="integer">1</version>
      <user-name>Adrian Perez</user-name>
      <creator-name>Adrian Perez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5810</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Unfortunately, changing this will break support to previous rails versions, as the part which generates required=&quot;required&quot; is a common path to all html options. And IMHO it makes no sense to whitelist a few HTML5 attributes for cosmetic reasons.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Unfortunately, changing this will break support to previous
rails versions, as the part which generates required=&quot;required&quot; is
a common path to all html options. And IMHO it makes no sense to
whitelist a few HTML5 attributes for cosmetic reasons.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-14T18:15:42+01:00</created-at>
      <creator-id type="integer">120053</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5810</number>
      <permalink>make-obvious-and-integrate-html5-required-attribute</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Make obvious and integrate HTML5 &quot;required&quot; attribute</title>
      <updated-at type="datetime">2010-10-14T18:15:47+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">2</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Adrian Perez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5810</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good enough for me, but still it does seem odd, and we don't know whereelse this could be happing so we're going to have: required=&quot;required&quot;, disabled=&quot;disabled&quot;, autofocus=&quot;autofocus&quot;. Quite odd. But still HTML5 is fairly new.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good enough for me, but still it does seem odd, and we don't
know whereelse this could be happing so we're going to have:
required=&quot;required&quot;, disabled=&quot;disabled&quot;, autofocus=&quot;autofocus&quot;.
Quite odd. But still HTML5 is fairly new.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-14T18:19:34+01:00</created-at>
      <creator-id type="integer">120053</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5810</number>
      <permalink>make-obvious-and-integrate-html5-required-attribute</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Make obvious and integrate HTML5 &quot;required&quot; attribute</title>
      <updated-at type="datetime">2010-10-14T18:19:35+01:00</updated-at>
      <user-id type="integer">120053</user-id>
      <version type="integer">3</version>
      <user-name>Adrian Perez</user-name>
      <creator-name>Adrian Perez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5810</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
