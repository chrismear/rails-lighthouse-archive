<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-11-03T02:40:07+00:00</created-at>
  <creator-id type="integer">22589</creator-id>
  <milestone-due-on type="datetime">2010-01-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">50064</milestone-id>
  <number type="integer">3452</number>
  <permalink>patch-improve-db-index-handling</permalink>
  <priority type="integer">170979</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>2.3-stable bugmash enhancement index patch</tag>
  <title>[PATCH] Improve DB index handling</title>
  <updated-at type="datetime">2011-02-04T20:07:04+00:00</updated-at>
  <user-id type="integer">135725</user-id>
  <version type="integer">13</version>
  <user-name>Paul Eipper</user-name>
  <creator-name>Matt Jones</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
  <milestone-title>2.3.6</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch is a rollup of several related ideas first brought up on rails-core. Here's the details:

- defines a set of accessors for the various limits of the database engine (identifier length, etc).

- verifies that index names are within the limits; otherwise, a migration on a DB without transactional DDL can leave the system &quot;stuck&quot;, unable to migrate forward or back.

- hardens add_index and remove_index against duplicate/missing indexes

- adds a new operation, rename_index. This is primarily a housekeeping operation, but necessary as the default name of an index includes the table name. Thus, renaming a table leaves it with incorrectly named indexes.

Only tested against MySQL and SQLite3; I'm still trying to get a working PG install up and running.


A few notes/questions on the implementation:

- The indexes() method is commented out of AbstractAdapter; are there DBs that don't support this? There's a fair bit of effort in the code/tests devoted to working around this.

- the changes made to add_index and remove_index only work if the specific adapter doesn't override them; is there a better way to handle this?

- I'm not certain the calls to @logger.warn are appropriate; ideally, it would be possible to output the warnings back to the terminal running the migration.

- Should there be an option to go back to the old behavior (maybe a :safe flag, or (reversed) :force)?

- The default values in DatabaseLimits are best guesses; should they be different? Not all of them are currently used, but it seemed logical to avoid nagging adapter maintainers to add options one at a time.

Attached patch is against 2-3-stable; once it's in a final format, I'll prepare one against master.</original-body>
  <latest-body>This patch is a rollup of several related ideas first brought up on rails-core. Here's the details:

- defines a set of accessors for the various limits of the database engine (identifier length, etc).

- verifies that index names are within the limits; otherwise, a migration on a DB without transactional DDL can leave the system &quot;stuck&quot;, unable to migrate forward or back.

- hardens add_index and remove_index against duplicate/missing indexes

- adds a new operation, rename_index. This is primarily a housekeeping operation, but necessary as the default name of an index includes the table name. Thus, renaming a table leaves it with incorrectly named indexes.

Only tested against MySQL and SQLite3; I'm still trying to get a working PG install up and running.


A few notes/questions on the implementation:

- The indexes() method is commented out of AbstractAdapter; are there DBs that don't support this? There's a fair bit of effort in the code/tests devoted to working around this.

- the changes made to add_index and remove_index only work if the specific adapter doesn't override them; is there a better way to handle this?

- I'm not certain the calls to @logger.warn are appropriate; ideally, it would be possible to output the warnings back to the terminal running the migration.

- Should there be an option to go back to the old behavior (maybe a :safe flag, or (reversed) :force)?

- The default values in DatabaseLimits are best guesses; should they be different? Not all of them are currently used, but it seemed logical to avoid nagging adapter maintainers to add options one at a time.

Attached patch is against 2-3-stable; once it's in a final format, I'll prepare one against master.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch is a rollup of several related ideas first brought up
on rails-core. Here's the details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;defines a set of accessors for the various limits of the
database engine (identifier length, etc).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;verifies that index names are within the limits; otherwise, a
migration on a DB without transactional DDL can leave the system
&quot;stuck&quot;, unable to migrate forward or back.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hardens add_index and remove_index against duplicate/missing
indexes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;adds a new operation, rename_index. This is primarily a
housekeeping operation, but necessary as the default name of an
index includes the table name. Thus, renaming a table leaves it
with incorrectly named indexes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only tested against MySQL and SQLite3; I'm still trying to get a
working PG install up and running.&lt;/p&gt;
&lt;p&gt;A few notes/questions on the implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The indexes() method is commented out of AbstractAdapter; are
there DBs that don't support this? There's a fair bit of effort in
the code/tests devoted to working around this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the changes made to add_index and remove_index only work if the
specific adapter doesn't override them; is there a better way to
handle this?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm not certain the calls to @logger.warn are appropriate;
ideally, it would be possible to output the warnings back to the
terminal running the migration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Should there be an option to go back to the old behavior (maybe
a :safe flag, or (reversed) :force)?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default values in DatabaseLimits are best guesses; should
they be different? Not all of them are currently used, but it
seemed logical to avoid nagging adapter maintainers to add options
one at a time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attached patch is against 2-3-stable; once it's in a final
format, I'll prepare one against master.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch is a rollup of several related ideas first brought up on rails-core. Here's the details:

- defines a set of accessors for the various limits of the database engine (identifier length, etc).

- verifies that index names are within the limits; otherwise, a migration on a DB without transactional DDL can leave the system &quot;stuck&quot;, unable to migrate forward or back.

- hardens add_index and remove_index against duplicate/missing indexes

- adds a new operation, rename_index. This is primarily a housekeeping operation, but necessary as the default name of an index includes the table name. Thus, renaming a table leaves it with incorrectly named indexes.

Only tested against MySQL and SQLite3; I'm still trying to get a working PG install up and running.


A few notes/questions on the implementation:

- The indexes() method is commented out of AbstractAdapter; are there DBs that don't support this? There's a fair bit of effort in the code/tests devoted to working around this.

- the changes made to add_index and remove_index only work if the specific adapter doesn't override them; is there a better way to handle this?

- I'm not certain the calls to @logger.warn are appropriate; ideally, it would be possible to output the warnings back to the terminal running the migration.

- Should there be an option to go back to the old behavior (maybe a :safe flag, or (reversed) :force)?

- The default values in DatabaseLimits are best guesses; should they be different? Not all of them are currently used, but it seemed logical to avoid nagging adapter maintainers to add options one at a time.

Attached patch is against 2-3-stable; once it's in a final format, I'll prepare one against master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch is a rollup of several related ideas first brought up
on rails-core. Here's the details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;defines a set of accessors for the various limits of the
database engine (identifier length, etc).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;verifies that index names are within the limits; otherwise, a
migration on a DB without transactional DDL can leave the system
&quot;stuck&quot;, unable to migrate forward or back.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hardens add_index and remove_index against duplicate/missing
indexes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;adds a new operation, rename_index. This is primarily a
housekeeping operation, but necessary as the default name of an
index includes the table name. Thus, renaming a table leaves it
with incorrectly named indexes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only tested against MySQL and SQLite3; I'm still trying to get a
working PG install up and running.&lt;/p&gt;
&lt;p&gt;A few notes/questions on the implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The indexes() method is commented out of AbstractAdapter; are
there DBs that don't support this? There's a fair bit of effort in
the code/tests devoted to working around this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the changes made to add_index and remove_index only work if the
specific adapter doesn't override them; is there a better way to
handle this?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I'm not certain the calls to @logger.warn are appropriate;
ideally, it would be possible to output the warnings back to the
terminal running the migration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Should there be an option to go back to the old behavior (maybe
a :safe flag, or (reversed) :force)?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The default values in DatabaseLimits are best guesses; should
they be different? Not all of them are currently used, but it
seemed logical to avoid nagging adapter maintainers to add options
one at a time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attached patch is against 2-3-stable; once it's in a final
format, I'll prepare one against master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-02T05:27:25+00:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-stable enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2009-11-02T05:27:34+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">1</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Very nice!

- Not sure about #indexes

- Yes, the adapters should call super or they should have an implementation-specific method to override

- logger.warn seems appropriate and in line with everything else, which logs

- no need to add extra config since the old behavior's never needed

- default database limits are good but should probably be modeled as Hash rather than as a mixin of instance methods</body>
      <body-html>&lt;div&gt;&lt;p&gt;Very nice!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Not sure about #indexes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yes, the adapters should call super or they should have an
implementation-specific method to override&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;logger.warn seems appropriate and in line with everything else,
which logs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no need to add extra config since the old behavior's never
needed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;default database limits are good but should probably be modeled
as Hash rather than as a mixin of instance methods&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-03T02:40:07+00:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2009-11-03T02:40:55+00:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>At least in the existing code, calling super wouldn't make sense for the adapters; the AbstractAdapter method would generate invalid SQL for Postgres and SQLite (they namespace indexes to the DB, not the table, and therefore don't support 'ON table_foo' in the DROP INDEX statement). Maybe it would make sense to abstract out the last line of add_index/remove_index (the actual SQL) so that adapters could override that while leaving the checks in place?

A Hash would make sense most of the time, but I based the current method-driven implementation on the one existing method (table_alias_length), which does actually execute code for some adapters (see the override in postgresql_adapter.rb, line 294-296, for instance).</body>
      <body-html>&lt;div&gt;&lt;p&gt;At least in the existing code, calling super wouldn't make sense
for the adapters; the AbstractAdapter method would generate invalid
SQL for Postgres and SQLite (they namespace indexes to the DB, not
the table, and therefore don't support 'ON table_foo' in the DROP
INDEX statement). Maybe it would make sense to abstract out the
last line of add_index/remove_index (the actual SQL) so that
adapters could override that while leaving the checks in place?&lt;/p&gt;
&lt;p&gt;A Hash would make sense most of the time, but I based the
current method-driven implementation on the one existing method
(table_alias_length), which does actually execute code for some
adapters (see the override in postgresql_adapter.rb, line 294-296,
for instance).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-03T16:06:55+00:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2009-11-03T16:06:59+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">3</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey Matt, interested in getting this on master and up-to-date for 2.3.6 release?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Matt, interested in getting this on master and up-to-date
for 2.3.6 release?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-23T18:03:51+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-04-23T18:03:54+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Absolutely - we could really use this over in Hobo-land (generating too-long indexes automatically really confuses users). I've got some ideas for cleaning this up as well; add_index could logically be split into two parts:

- add_index itself; this does all the length / existence checking

- add_index!, which skips all the chrome and just does the SQL. This should simplify the changes to, for instance, the SQLite3 adapter; that adapter could keep the standard add_index from AbstractAdapter and merely override add_index!.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Absolutely - we could really use this over in Hobo-land
(generating too-long indexes automatically really confuses users).
I've got some ideas for cleaning this up as well; add_index could
logically be split into two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add_index itself; this does all the length / existence
checking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add_index!, which skips all the chrome and just does the SQL.
This should simplify the changes to, for instance, the SQLite3
adapter; that adapter could keep the standard add_index from
AbstractAdapter and merely override add_index!.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-26T00:45:26+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-04-26T00:45:31+01:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">5</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/20088)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/20088&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T02:41:11+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3-stable enhancement index patch
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-05-16T02:41:11+01:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">6</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Brought the patch up to date to 2.3.6.
Added a test for the index length check.
Factored out SQL generation from remove_index into remove_index! that I actually needed in a schema related test.
Haven't had the need for an add_index!, I didn't see any Adapter overriding add_index. However, I had to do some ugly stuff to get the add_index tests to work since they override `execute` to test for SQL queries and we now need it to actually execute queries to get the existing indexes. I worked around this by always returning false for `index_exists?` during these tests.

Only tested against mysql, sqlite3 and pg and for 2.3.6.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Brought the patch up to date to 2.3.6.&lt;br&gt;
Added a test for the index length check.&lt;br&gt;
Factored out SQL generation from remove_index into remove_index!
that I actually needed in a schema related test.&lt;br&gt;
Haven't had the need for an add_index!, I didn't see any Adapter
overriding add_index. However, I had to do some ugly stuff to get
the add_index tests to work since they override
&lt;code&gt;execute&lt;/code&gt; to test for SQL queries and we now need it to
actually execute queries to get the existing indexes. I worked
around this by always returning false for
&lt;code&gt;index_exists?&lt;/code&gt; during these tests.&lt;/p&gt;
&lt;p&gt;Only tested against mysql, sqlite3 and pg and for 2.3.6.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T18:00:28+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-05-16T18:00:33+01:00</updated-at>
      <user-id type="integer">99481</user-id>
      <version type="integer">7</version>
      <user-name>&#201;tienne Barri&#233;</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Looks good - I was confused about the add_index! thing, as I was remembering the remove_index case as well as the Oracle adapter (which overrides add_index to shorten them, as Oracle's maximum identifier is only 30 chars).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks good - I was confused about the add_index! thing, as I was
remembering the remove_index case as well as the Oracle adapter
(which overrides add_index to shorten them, as Oracle's maximum
identifier is only 30 chars).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-16T22:27:52+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-05-16T22:27:54+01:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">8</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Ok so I read #3252 and #3508 which made me realize PostgreSQL's index names length limit is actually 63, not 64, so I went back and made my test better by using `index_name_length` (to make it work through all adapters) and by checking for both working and failing creations of index. MySQL's limit is 64 while PostgreSQL's is 63 so I added that to PostgreSQL's adapter. I tried to find a limit for sqlite3 and it started to fail around 2**22 (that's a long index name&#8230;). However, sqlite will use 64 as per the defaults.

In #3508 the idea of truncating indexes is entertained and I'm still unsure if this isn't a better idea. With this patch, at least your migration won't error out but you could end up with a production deployment missing indexes.

Also, the patch doesn't apply to master but the resulting commit can be successfully cherry-picked from 2-3-stable.

Tested against sqlite3, mysql and postgresql on 2-3-stable and master.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok so I read &lt;a href=&quot;/projects/8994/tickets/3252&quot; title=
&quot;Ticket #3252&quot;&gt;#3252&lt;/a&gt; and &lt;a href=&quot;/projects/8994/tickets/3508&quot;
title=&quot;Ticket #3508&quot;&gt;#3508&lt;/a&gt; which made me realize PostgreSQL's
index names length limit is actually 63, not 64, so I went back and
made my test better by using &lt;code&gt;index_name_length&lt;/code&gt; (to
make it work through all adapters) and by checking for both working
and failing creations of index. MySQL's limit is 64 while
PostgreSQL's is 63 so I added that to PostgreSQL's adapter. I tried
to find a limit for sqlite3 and it started to fail around 2**22
(that's a long index name&amp;#8230;). However, sqlite will use 64 as
per the defaults.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;/projects/8994/tickets/3508&quot; title=
&quot;Ticket #3508&quot;&gt;#3508&lt;/a&gt; the idea of truncating indexes is
entertained and I'm still unsure if this isn't a better idea. With
this patch, at least your migration won't error out but you could
end up with a production deployment missing indexes.&lt;/p&gt;
&lt;p&gt;Also, the patch doesn't apply to master but the resulting commit
can be successfully cherry-picked from 2-3-stable.&lt;/p&gt;
&lt;p&gt;Tested against sqlite3, mysql and postgresql on 2-3-stable and
master.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-18T18:10:49+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-05-18T18:10:54+01:00</updated-at>
      <user-id type="integer">99481</user-id>
      <version type="integer">9</version>
      <user-name>&#201;tienne Barri&#233;</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [99bcce7ec1e7f59db3e6f1e1d3cd02e15eb59602]) make add_index and remove_index more resilient; new rename_index method; track database limits

[#3452 state:committed]

Signed-off-by: Jeremy Kemper &lt;jeremy@bitsweat.net&gt;
http://github.com/rails/rails/commit/99bcce7ec1e7f59db3e6f1e1d3cd02e15eb59602</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/99bcce7ec1e7f59db3e6f1e1d3cd02e15eb59602&quot;
title=
&quot;Changeset [99bcce7ec1e7f59db3e6f1e1d3cd02e15eb59602]&quot;&gt;[99bcce7ec1e7f59db3e6f1e1d3cd02e15eb59602]&lt;/a&gt;)
make add_index and remove_index more resilient; new rename_index
method; track database limits&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/3452&quot; title=
&quot;Ticket #3452&quot;&gt;#3452&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jeremy Kemper &lt;a href=
&quot;mailto:jeremy@bitsweat.net&quot;&gt;jeremy@bitsweat.net&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/99bcce7ec1e7f59db3e6f1e1d3cd02e15eb59602&quot;&gt;
http://github.com/rails/rails/commit/99bcce7ec1e7f59db3e6f1e1d3cd02...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-18T19:04:37+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-05-18T19:04:39+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">10</version>
      <user-name>Repository</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [3809c80cd55ac2838f050346800889b6f8e041ef]) make add_index and remove_index more resilient; new rename_index method; track database limits

[#3452 state:committed]

Signed-off-by: Jeremy Kemper &lt;jeremy@bitsweat.net&gt;
http://github.com/rails/rails/commit/3809c80cd55ac2838f050346800889b6f8e041ef</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/3809c80cd55ac2838f050346800889b6f8e041ef&quot;
title=
&quot;Changeset [3809c80cd55ac2838f050346800889b6f8e041ef]&quot;&gt;[3809c80cd55ac2838f050346800889b6f8e041ef]&lt;/a&gt;)
make add_index and remove_index more resilient; new rename_index
method; track database limits&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/3452&quot; title=
&quot;Ticket #3452&quot;&gt;#3452&lt;/a&gt; state:committed]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jeremy Kemper &lt;a href=
&quot;mailto:jeremy@bitsweat.net&quot;&gt;jeremy@bitsweat.net&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/3809c80cd55ac2838f050346800889b6f8e041ef&quot;&gt;
http://github.com/rails/rails/commit/3809c80cd55ac2838f050346800889...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-18T19:04:40+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-05-18T19:04:44+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">11</version>
      <user-name>Repository</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Why index with too long name is just skipped without exception? I think it is bad as in this case it may be unnoticed during running migrations and missing indexes could cause big performance issues.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Why index with too long name is just skipped without exception?
I think it is bad as in this case it may be unnoticed during
running migrations and missing indexes could cause big performance
issues.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-27T22:38:11+01:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2010-05-27T22:38:21+01:00</updated-at>
      <user-id type="integer">3839</user-id>
      <version type="integer">12</version>
      <user-name>Raimonds Simanovskis</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Is this fixed? In which versions of Rails? I had this affect me when installing Redmine on Dreamhost, which uses Rails 3.0.3</body>
      <body-html>&lt;div&gt;&lt;p&gt;Is this fixed? In which versions of Rails? I had this affect me
when installing Redmine on Dreamhost, which uses Rails 3.0.3&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-04T20:06:41+00:00</created-at>
      <creator-id type="integer">22589</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">50064</milestone-id>
      <number type="integer">3452</number>
      <permalink>patch-improve-db-index-handling</permalink>
      <priority type="integer">170979</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2.3-stable bugmash enhancement index patch</tag>
      <title>[PATCH] Improve DB index handling</title>
      <updated-at type="datetime">2011-02-04T20:07:04+00:00</updated-at>
      <user-id type="integer">135725</user-id>
      <version type="integer">13</version>
      <user-name>Paul Eipper</user-name>
      <creator-name>Matt Jones</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3452</url>
      <milestone-title>2.3.6</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>457b9d26b8f1d3b7116a9adfba1adf293094be59</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-02T05:27:28+00:00</created-at>
      <filename>better-index-support.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">310645</id>
      <size type="integer">10482</size>
      <uploader-id type="integer">22589</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/310645/better-index-support.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>3aeeee25d549c49b4e08541020db58b569ef51e8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-05-16T18:00:29+01:00</created-at>
      <filename>better-indexes.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">522918</id>
      <size type="integer">13155</size>
      <uploader-id type="integer">99481</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/522918/better-indexes.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>d6ba6592174c93731572402884b681d2dde55cba</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-05-18T18:10:49+01:00</created-at>
      <filename>better-indexes.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">525287</id>
      <size type="integer">13481</size>
      <uploader-id type="integer">99481</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/525287/better-indexes.patch</url>
    </attachment>
  </attachments>
</ticket>
