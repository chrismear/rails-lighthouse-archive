<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-13T09:56:21+00:00</created-at>
  <creator-id type="integer">50150</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2227</number>
  <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
  <priority type="integer">1418</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
  <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
  <updated-at type="datetime">2011-03-29T00:53:58+01:00</updated-at>
  <user-id type="integer">42916</user-id>
  <version type="integer">18</version>
  <user-name>Greg Hazel</user-name>
  <creator-name>claudiob (at gmail)</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Consider the following code:

@@@ ruby
# app/models/song.rb
class Song &lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.first(:conditions =&gt; ['name &lt;&gt; ?', name])
        puts another_song[:name]
      end
    end
end
@@@

I would call it by passing a song name, and it would print out the name of the same song, and the name of another song (with a different name).
After applying patch #2201, the .each function has become .find_each

The problem that I have found is that the :conditions applied to Song.each (line 4) is also automatically applied to the Song.first (line 6), and as a consequence Song.first returns an error, since it cannot find a song that matches both conditions ['name = ?', name] and ['name &lt;&gt; ?', name].

I understand that the solution to this problem is to call the inside find as following (line 6):

@@@ ruby
another_song = Song.with_exclusive_scope { first(:conditions =&gt; ['name &lt;&gt; ?', name]) }
@@@

However it is not clear whether this is a desired behavior or rather a bug. 
In this case I have not defined any default_scope for the model Song that has to be overridden by calling with_exclusive_scope, I am just calling Song.find within a Song.each(:conditions) loop.

---

To replicate this behavior:
@@@ sh
rails music
cd music
script/generate scaffold song name:string
rake db:create
rake db:migrate
script/console
@@@

@@@ ruby
Song.create(:name =&gt; &quot;Keep The Faith&quot;)
Song.create(:name =&gt; &quot;Bed Of Roses&quot;)
class Song &lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.with_exclusive_scope { first(:conditions =&gt; ['name &lt;&gt; ?', name]) }
        puts another_song[:name]
      end
    end
end
Song.print_pairs('Bed Of Roses')
@@@

Once again, the same occurs also after patch #2201, calling .find_each rather than .each, and also using a named_scope to declare the conditions.</original-body>
  <latest-body>Consider the following code:

@@@ ruby
# app/models/song.rb
class Song &lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.first(:conditions =&gt; ['name &lt;&gt; ?', name])
        puts another_song[:name]
      end
    end
end
@@@

I would call it by passing a song name, and it would print out the name of the same song, and the name of another song (with a different name).
After applying patch #2201, the .each function has become .find_each

The problem that I have found is that the :conditions applied to Song.each (line 4) is also automatically applied to the Song.first (line 6), and as a consequence Song.first returns an error, since it cannot find a song that matches both conditions ['name = ?', name] and ['name &lt;&gt; ?', name].

I understand that the solution to this problem is to call the inside find as following (line 6):

@@@ ruby
another_song = Song.with_exclusive_scope { first(:conditions =&gt; ['name &lt;&gt; ?', name]) }
@@@

However it is not clear whether this is a desired behavior or rather a bug. 
In this case I have not defined any default_scope for the model Song that has to be overridden by calling with_exclusive_scope, I am just calling Song.find within a Song.each(:conditions) loop.

---

To replicate this behavior:
@@@ sh
rails music
cd music
script/generate scaffold song name:string
rake db:create
rake db:migrate
script/console
@@@

@@@ ruby
Song.create(:name =&gt; &quot;Keep The Faith&quot;)
Song.create(:name =&gt; &quot;Bed Of Roses&quot;)
class Song &lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.with_exclusive_scope { first(:conditions =&gt; ['name &lt;&gt; ?', name]) }
        puts another_song[:name]
      end
    end
end
Song.print_pairs('Bed Of Roses')
@@@

Once again, the same occurs also after patch #2201, calling .find_each rather than .each, and also using a named_scope to declare the conditions.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Consider the following code:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# app/models/song.rb
class Song &amp;lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&amp;gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.first(:conditions =&amp;gt; ['name &amp;lt;&amp;gt; ?', name])
        puts another_song[:name]
      end
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would call it by passing a song name, and it would print out
the name of the same song, and the name of another song (with a
different name). After applying patch &lt;a href=&quot;/projects/8994/tickets/2201&quot; title=&quot;Ticket #2201&quot;&gt;#2201&lt;/a&gt;, the
.each function has become .find_each&lt;/p&gt;
&lt;p&gt;The problem that I have found is that the :conditions applied to
Song.each (line 4) is also automatically applied to the Song.first
(line 6), and as a consequence Song.first returns an error, since
it cannot find a song that matches both conditions ['name = ?',
name] and ['name &amp;lt;&amp;gt; ?', name].&lt;/p&gt;
&lt;p&gt;I understand that the solution to this problem is to call the
inside find as following (line 6):&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
another_song = Song.with_exclusive_scope { first(:conditions =&amp;gt; ['name &amp;lt;&amp;gt; ?', name]) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However it is not clear whether this is a desired behavior or
rather a bug. In this case I have not defined any default_scope for
the model Song that has to be overridden by calling
with_exclusive_scope, I am just calling Song.find within a
Song.each(:conditions) loop.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To replicate this behavior:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;
rails music
cd music
script/generate scaffold song name:string
rake db:create
rake db:migrate
script/console
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Song.create(:name =&amp;gt; &amp;quot;Keep The Faith&amp;quot;)
Song.create(:name =&amp;gt; &amp;quot;Bed Of Roses&amp;quot;)
class Song &amp;lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&amp;gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.with_exclusive_scope { first(:conditions =&amp;gt; ['name &amp;lt;&amp;gt; ?', name]) }
        puts another_song[:name]
      end
    end
end
Song.print_pairs('Bed Of Roses')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, the same occurs also after patch &lt;a href=&quot;/projects/8994/tickets/2201&quot; title=&quot;Ticket #2201&quot;&gt;#2201&lt;/a&gt;,
calling .find_each rather than .each, and also using a named_scope
to declare the conditions.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Consider the following code:

@@@ ruby
# app/models/song.rb
class Song &lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.first(:conditions =&gt; ['name &lt;&gt; ?', name])
        puts another_song[:name]
      end
    end
end
@@@

I would call it by passing a song name, and it would print out the name of the same song, and the name of another song (with a different name).
After applying patch #2201, the .each function has become .find_each

The problem that I have found is that the :conditions applied to Song.each (line 4) is also automatically applied to the Song.first (line 6), and as a consequence Song.first returns an error, since it cannot find a song that matches both conditions ['name = ?', name] and ['name &lt;&gt; ?', name].

I understand that the solution to this problem is to call the inside find as following (line 6):

@@@ ruby
another_song = Song.with_exclusive_scope { first(:conditions =&gt; ['name &lt;&gt; ?', name]) }
@@@

However it is not clear whether this is a desired behavior or rather a bug. 
In this case I have not defined any default_scope for the model Song that has to be overridden by calling with_exclusive_scope, I am just calling Song.find within a Song.each(:conditions) loop.

---

To replicate this behavior:
@@@ sh
rails music
cd music
script/generate scaffold song name:string
rake db:create
rake db:migrate
script/console
@@@

@@@ ruby
Song.create(:name =&gt; &quot;Keep The Faith&quot;)
Song.create(:name =&gt; &quot;Bed Of Roses&quot;)
class Song &lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.with_exclusive_scope { first(:conditions =&gt; ['name &lt;&gt; ?', name]) }
        puts another_song[:name]
      end
    end
end
Song.print_pairs('Bed Of Roses')
@@@

Once again, the same occurs also after patch #2201, calling .find_each rather than .each, and also using a named_scope to declare the conditions.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Consider the following code:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# app/models/song.rb
class Song &amp;lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&amp;gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.first(:conditions =&amp;gt; ['name &amp;lt;&amp;gt; ?', name])
        puts another_song[:name]
      end
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would call it by passing a song name, and it would print out
the name of the same song, and the name of another song (with a
different name). After applying patch &lt;a href=&quot;/projects/8994/tickets/2201&quot; title=&quot;Ticket #2201&quot;&gt;#2201&lt;/a&gt;, the
.each function has become .find_each&lt;/p&gt;
&lt;p&gt;The problem that I have found is that the :conditions applied to
Song.each (line 4) is also automatically applied to the Song.first
(line 6), and as a consequence Song.first returns an error, since
it cannot find a song that matches both conditions ['name = ?',
name] and ['name &amp;lt;&amp;gt; ?', name].&lt;/p&gt;
&lt;p&gt;I understand that the solution to this problem is to call the
inside find as following (line 6):&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
another_song = Song.with_exclusive_scope { first(:conditions =&amp;gt; ['name &amp;lt;&amp;gt; ?', name]) }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However it is not clear whether this is a desired behavior or
rather a bug. In this case I have not defined any default_scope for
the model Song that has to be overridden by calling
with_exclusive_scope, I am just calling Song.find within a
Song.each(:conditions) loop.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To replicate this behavior:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;
rails music
cd music
script/generate scaffold song name:string
rake db:create
rake db:migrate
script/console
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Song.create(:name =&amp;gt; &amp;quot;Keep The Faith&amp;quot;)
Song.create(:name =&amp;gt; &amp;quot;Bed Of Roses&amp;quot;)
class Song &amp;lt; ActiveRecord::Base
  def self.print_pairs(name)
    Song.each(:conditions =&amp;gt; ['name = ?', name]) do |song|
        puts song[:name]
        another_song = Song.with_exclusive_scope { first(:conditions =&amp;gt; ['name &amp;lt;&amp;gt; ?', name]) }
        puts another_song[:name]
      end
    end
end
Song.print_pairs('Bed Of Roses')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once again, the same occurs also after patch &lt;a href=&quot;/projects/8994/tickets/2201&quot; title=&quot;Ticket #2201&quot;&gt;#2201&lt;/a&gt;,
calling .find_each rather than .each, and also using a named_scope
to declare the conditions.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-13T09:56:21+00:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 2.3-rc2 :conditions active_record find named_scope</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-03-13T09:56:24+00:00</updated-at>
      <user-id type="integer">50150</user-id>
      <version type="integer">1</version>
      <user-name>claudiob (at gmail)</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-13T10:12:44+00:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 2.3-rc2 :conditions active_record find named_scope</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-03-13T10:12:50+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is really nasty.  I've attached a patch (with tests) that doesn't use with_scope in find_in_batches.

Check this blog post:

http://davedupre.com/2009/05/20/gotcha-with-find_each-and-find_in_batches/comment-page-1/

A really simple example of why scopes here are very dangerous:

@@@ ruby
Balloons.count #=&gt; 10
@clown = Clown.find(2)
@clown.balloons.count #=&gt; 3
@clown.balloons.collect {|b| b.color } #=&gt; [ 'red', blue', 'green' ]
Balloons.find_each(:conditions =&gt; { :color =&gt; 'red' }) do
  @clown = Clown.find(2)
  @clown.balloons.count #=&gt; 1
  @clown.balloons.collect {|b| b.color } #=&gt; [ 'red' ]
  # Where did all my friggin balloons go?
  Balloons.all.collect { |b| b.color }.uniq #=&gt; [ 'red' ]
end
@@@

This means inside a find_each it's *impossible* to ask Balloons for a non-red object.  Also hard to debug :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is really nasty. I've attached a patch (with tests) that
doesn't use with_scope in find_in_batches.&lt;/p&gt;
&lt;p&gt;Check this blog post:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://davedupre.com/2009/05/20/gotcha-with-find_each-and-find_in_batches/comment-page-1/&quot;&gt;
http://davedupre.com/2009/05/20/gotcha-with-find_each-and-find_in_b...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A really simple example of why scopes here are very
dangerous:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;Balloons.count #=&amp;gt; 10
@clown = Clown.find(2)
@clown.balloons.count #=&amp;gt; 3
@clown.balloons.collect {|b| b.color } #=&amp;gt; [ 'red', blue', 'green' ]
Balloons.find_each(:conditions =&amp;gt; { :color =&amp;gt; 'red' }) do
  @clown = Clown.find(2)
  @clown.balloons.count #=&amp;gt; 1
  @clown.balloons.collect {|b| b.color } #=&amp;gt; [ 'red' ]
  # Where did all my friggin balloons go?
  Balloons.all.collect { |b| b.color }.uniq #=&amp;gt; [ 'red' ]
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This means inside a find_each it's &lt;em&gt;impossible&lt;/em&gt; to ask
Balloons for a non-red object. Also hard to debug :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-05T19:23:16+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 2.3-rc2 :conditions active_record find named_scope</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-06-05T19:23:19+01:00</updated-at>
      <user-id type="integer">25976</user-id>
      <version type="integer">3</version>
      <user-name>Matthew Beale</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>If this is closed, these can probably be marked dupes:

https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2128-activerecordfind_in_batches-bug-or-feature

This guy covers a bug with using &quot;id&quot; explicitly:

https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2260-find_in_batches-updates-2-bugs</body>
      <body-html>&lt;div&gt;&lt;p&gt;If this is closed, these can probably be marked dupes:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2128-activerecordfind_in_batches-bug-or-feature&quot;&gt;
https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This guy covers a bug with using &quot;id&quot; explicitly:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2260-find_in_batches-updates-2-bugs&quot;&gt;
https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-05T19:55:29+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 2.3-rc2 :conditions active_record find named_scope</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-06-05T19:55:34+01:00</updated-at>
      <user-id type="integer">25976</user-id>
      <version type="integer">4</version>
      <user-name>Matthew Beale</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>More elegant fix</body>
      <body-html>&lt;div&gt;&lt;p&gt;More elegant fix&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-02T03:10:18+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3-rc1 2.3-rc2 :conditions active_record find named_scope
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-07-07T08:46:27+01:00</updated-at>
      <user-id type="integer">8163</user-id>
      <version type="integer">5</version>
      <user-name>Eugene Pimenov</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I have verified that the 0001-find_in_batches-shouldn-t-clog-conditions-for-find-c.patch applies cleany to 2.3-stable and the tests are running.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have verified that the
0001-find_in_batches-shouldn-t-clog-conditions-for-find-c.patch
applies cleany to 2.3-stable and the tests are running.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-03T14:18:16+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-09-03T14:18:21+01:00</updated-at>
      <user-id type="integer">35764</user-id>
      <version type="integer">6</version>
      <user-name>Jacob Kjeldahl</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 I have tried this patch(0001-find_in_batches-shouldn-t-clog-conditions-for-find-c.patch) against 2-3-stable, and the tests work well. Nice test - shows how innocuous find(:id) fails in a find_each block.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 I have tried this
patch(0001-find_in_batches-shouldn-t-clog-conditions-for-find-c.patch)
against 2-3-stable, and the tests work well. Nice test - shows how
innocuous find(:id) fails in a find_each block.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-08T13:07:21+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-09-08T13:07:23+01:00</updated-at>
      <user-id type="integer">69039</user-id>
      <version type="integer">7</version>
      <user-name>Thong Kuah</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>https://rails.lighthouseapp.com/projects/8994/tickets/2791-activerecordbasefind_in_batches-puts-a-with_scope-into-the-block-that-is-executed

is the same is this one. I tested the patch on 2-3 stable and it applies and works cleanly. I like the fix. It is better than the two I offered.

I am attaching an additional unit test from #2791. It should be applied over the patch of this issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2791-activerecordbasefind_in_batches-puts-a-with_scope-into-the-block-that-is-executed&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/2791-activere...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;is the same is this one. I tested the patch on 2-3 stable and it
applies and works cleanly. I like the fix. It is better than the
two I offered.&lt;/p&gt;
&lt;p&gt;I am attaching an additional unit test from &lt;a href=
&quot;/projects/8994/tickets/2791&quot; title=&quot;Ticket #2791&quot;&gt;#2791&lt;/a&gt;. It
should be applied over the patch of this issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-11T09:33:33+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-09-11T09:33:36+01:00</updated-at>
      <user-id type="integer">44567</user-id>
      <version type="integer">8</version>
      <user-name>Valentin Mihov</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">83</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>state:verified</body>
      <body-html>&lt;div&gt;&lt;p&gt;state:verified&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-11T10:21:23+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:title: &quot;batches: :conditions for each are applied to each Model.find within the each loop&quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-09-11T10:21:26+01:00</updated-at>
      <user-id type="integer">69039</user-id>
      <version type="integer">9</version>
      <user-name>Thong Kuah</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>DHH</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-28T19:37:36+00:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 83
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2009-12-28T19:37:39+00:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">10</version>
      <user-name>DHH</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-01T20:12:36+00:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2010-02-01T20:12:39+00:00</updated-at>
      <user-id type="integer">57403</user-id>
      <version type="integer">11</version>
      <user-name>Brian Armstrong</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>So... this is a bug that's been &quot;verified&quot;.  Does that mean this fix will get integrated anytime soon?

This is kind of a horrible bug.  I just ran into a case where a model was getting incremented with callbacks and that update was getting scoped. (because update_counters uses update_all).  Any chance this will get integrated into 2.3 stable?</body>
      <body-html>&lt;div&gt;&lt;p&gt;So... this is a bug that's been &quot;verified&quot;. Does that mean this
fix will get integrated anytime soon?&lt;/p&gt;
&lt;p&gt;This is kind of a horrible bug. I just ran into a case where a
model was getting incremented with callbacks and that update was
getting scoped. (because update_counters uses update_all). Any
chance this will get integrated into 2.3 stable?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-03-25T22:52:41+00:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2010-03-25T22:52:43+00:00</updated-at>
      <user-id type="integer">11354</user-id>
      <version type="integer">12</version>
      <user-name>Scott Windsor</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-11T13:15:32+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2010-04-11T13:15:36+01:00</updated-at>
      <user-id type="integer">24394</user-id>
      <version type="integer">13</version>
      <user-name>chris finne</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-11T14:12:21+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>verified</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2010-04-11T14:12:23+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">14</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [18ba648e0de032c6cb68cb48c2aaf3a347294e3d]) Implement find_in_batches without with_scope [#2227 state:resolved]

Signed-off-by: Pratik Naik &lt;pratiknaik@gmail.com&gt;
http://github.com/rails/rails/commit/18ba648e0de032c6cb68cb48c2aaf3a347294e3d</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/18ba648e0de032c6cb68cb48c2aaf3a347294e3d&quot;
title=
&quot;Changeset [18ba648e0de032c6cb68cb48c2aaf3a347294e3d]&quot;&gt;[18ba648e0de032c6cb68cb48c2aaf3a347294e3d]&lt;/a&gt;)
Implement find_in_batches without with_scope [&lt;a href=
&quot;/projects/8994/tickets/2227&quot; title=&quot;Ticket #2227&quot;&gt;#2227&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Pratik Naik &lt;a href=
&quot;mailto:pratiknaik@gmail.com&quot;&gt;pratiknaik@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/18ba648e0de032c6cb68cb48c2aaf3a347294e3d&quot;&gt;
http://github.com/rails/rails/commit/18ba648e0de032c6cb68cb48c2aaf3...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-15T01:13:26+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:state: verified
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2010-04-15T01:13:30+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">15</version>
      <user-name>Repository</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Is this patch supposed to fix find_in_batches with named_scopes? I'm seeing issues where conditions provided by named_scopes on a model are being passed through to subsequent finders on any instances obtained through find_in_batches. For example:

@@@

Subscription.active.commercial.expired_within(1.year.ago,1.year.from_now).find_in_batches(:batch_size =&gt; 500) { |subs| Subscription.first }

@@@

My expected behavior was to not get the first subscription within active and commercial subscription scopes.

I tested the patched in 2.3.3 and 2.3.5 and had the same issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Is this patch supposed to fix find_in_batches with named_scopes?
I'm seeing issues where conditions provided by named_scopes on a
model are being passed through to subsequent finders on any
instances obtained through find_in_batches. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
Subscription.active.commercial.expired_within(1.year.ago,1.year.from_now).find_in_batches(:batch_size =&amp;gt; 500) { |subs| Subscription.first }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My expected behavior was to not get the first subscription
within active and commercial subscription scopes.&lt;/p&gt;
&lt;p&gt;I tested the patched in 2.3.3 and 2.3.5 and had the same
issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-20T15:51:03+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2010-04-20T15:51:06+01:00</updated-at>
      <user-id type="integer">71896</user-id>
      <version type="integer">16</version>
      <user-name>Christopher Sun</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Please open a new ticket w/ a patch and/or failing test and assign to me.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please open a new ticket w/ a patch and/or failing test and
assign to me.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-20T15:55:29+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2010-04-20T15:55:43+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">17</version>
      <user-name>Pratik</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Was there ever a new ticket created for this? The bug still exists in ActiveRecord 2.3.11</body>
      <body-html>&lt;div&gt;&lt;p&gt;Was there ever a new ticket created for this? The bug still
exists in ActiveRecord 2.3.11&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-29T00:53:28+01:00</created-at>
      <creator-id type="integer">50150</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2227</number>
      <permalink>batches-conditions-for-each-are-applied-to-each-modelfind-within-the-each-loop</permalink>
      <priority type="integer">1418</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2-3-stable 2.3-rc1 2.3-rc2 :conditions active_record find named_scope patch</tag>
      <title>[VERIFIED] batches: :conditions for each are applied to each Model.find within the each loop</title>
      <updated-at type="datetime">2011-03-29T00:53:58+01:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">18</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>claudiob (at gmail)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>8b2ae9be81f826f43ddefb83d2d80e710c74c4fc</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-06-05T19:23:16+01:00</created-at>
      <filename>do_not_set_a_scope_for_find_in_batches_blocks.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">130096</id>
      <size type="integer">2131</size>
      <uploader-id type="integer">25976</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/130096/do_not_set_a_scope_for_find_in_batches_blocks.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>be4adda561bf32bb8e6225b73cf0c9e1aadd747c</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-07-02T03:10:18+01:00</created-at>
      <filename>0001-find_in_batches-shouldn-t-clog-conditions-for-find-c.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">173249</id>
      <size type="integer">2379</size>
      <uploader-id type="integer">8163</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/173249/0001-find_in_batches-shouldn-t-clog-conditions-for-find-c.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>feb63d2c9bd95da9be0b50f79cf3c9bf433d1d47</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-11T09:33:33+01:00</created-at>
      <filename>0001-Added-an-additional-unit-test-for-checking-for-scope.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">266552</id>
      <size type="integer">1309</size>
      <uploader-id type="integer">44567</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/266552/0001-Added-an-additional-unit-test-for-checking-for-scope.patch</url>
    </attachment>
  </attachments>
</ticket>
