<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-02-09T14:06:20+00:00</created-at>
  <creator-id type="integer">17424</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6398</number>
  <permalink>build-model-on-association-creates-unexpected-results</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>association build scope_for_create where_values_hash</tag>
  <title>build model on association creates unexpected results</title>
  <updated-at type="datetime">2011-02-09T14:06:23+00:00</updated-at>
  <user-id type="integer">17424</user-id>
  <version type="integer">1</version>
  <user-name>Bertg</user-name>
  <creator-name>Bertg</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6398</url>
  <priority-name nil="true"></priority-name>
  <original-body>Say we have this model

@@@ ruby
class Car &lt; ActiveRecord::Base
  # string  name
  # integer wheels
end
@@@

Executing following code

@@@ ruby
Car.where(:name  =&gt; &quot;Jeff&quot;).new #=&gt; &lt;Car name: &quot;Jeff&quot;, wheels: nil&gt;
Car.where(:wheels =&gt; [4,8]).new #=&gt; &lt;Car name: nil, wheels: 1&gt;
@@@

The first case yield expected result, however the second one does not! 1 wheel?

@@@ ruby
Car.where(:wheels =&gt; 4..8).new #=&gt; &lt;Car name: nil, wheels: nil&gt;
@@@

When using a range we don't get the issue.

Test in patch

My suggestion would be to be more careful what values get passed to the scope_for_create (relation.rb:359) method. How this should be achieved, that I do not know.</original-body>
  <latest-body>Say we have this model

@@@ ruby
class Car &lt; ActiveRecord::Base
  # string  name
  # integer wheels
end
@@@

Executing following code

@@@ ruby
Car.where(:name  =&gt; &quot;Jeff&quot;).new #=&gt; &lt;Car name: &quot;Jeff&quot;, wheels: nil&gt;
Car.where(:wheels =&gt; [4,8]).new #=&gt; &lt;Car name: nil, wheels: 1&gt;
@@@

The first case yield expected result, however the second one does not! 1 wheel?

@@@ ruby
Car.where(:wheels =&gt; 4..8).new #=&gt; &lt;Car name: nil, wheels: nil&gt;
@@@

When using a range we don't get the issue.

Test in patch

My suggestion would be to be more careful what values get passed to the scope_for_create (relation.rb:359) method. How this should be achieved, that I do not know.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Say we have this model&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Car &amp;lt; ActiveRecord::Base
  # string  name
  # integer wheels
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Executing following code&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Car.where(:name  =&amp;gt; &quot;Jeff&quot;).new #=&amp;gt; &amp;lt;Car name: &quot;Jeff&quot;, wheels: nil&amp;gt;
Car.where(:wheels =&amp;gt; [4,8]).new #=&amp;gt; &amp;lt;Car name: nil, wheels: 1&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first case yield expected result, however the second one
does not! 1 wheel?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Car.where(:wheels =&amp;gt; 4..8).new #=&amp;gt; &amp;lt;Car name: nil, wheels: nil&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When using a range we don't get the issue.&lt;/p&gt;
&lt;p&gt;Test in patch&lt;/p&gt;
&lt;p&gt;My suggestion would be to be more careful what values get passed
to the scope_for_create (relation.rb:359) method. How this should
be achieved, that I do not know.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Say we have this model

@@@ ruby
class Car &lt; ActiveRecord::Base
  # string  name
  # integer wheels
end
@@@

Executing following code

@@@ ruby
Car.where(:name  =&gt; &quot;Jeff&quot;).new #=&gt; &lt;Car name: &quot;Jeff&quot;, wheels: nil&gt;
Car.where(:wheels =&gt; [4,8]).new #=&gt; &lt;Car name: nil, wheels: 1&gt;
@@@

The first case yield expected result, however the second one does not! 1 wheel?

@@@ ruby
Car.where(:wheels =&gt; 4..8).new #=&gt; &lt;Car name: nil, wheels: nil&gt;
@@@

When using a range we don't get the issue.

Test in patch

My suggestion would be to be more careful what values get passed to the scope_for_create (relation.rb:359) method. How this should be achieved, that I do not know.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Say we have this model&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Car &amp;lt; ActiveRecord::Base
  # string  name
  # integer wheels
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Executing following code&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Car.where(:name  =&amp;gt; &quot;Jeff&quot;).new #=&amp;gt; &amp;lt;Car name: &quot;Jeff&quot;, wheels: nil&amp;gt;
Car.where(:wheels =&amp;gt; [4,8]).new #=&amp;gt; &amp;lt;Car name: nil, wheels: 1&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The first case yield expected result, however the second one
does not! 1 wheel?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Car.where(:wheels =&amp;gt; 4..8).new #=&amp;gt; &amp;lt;Car name: nil, wheels: nil&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;When using a range we don't get the issue.&lt;/p&gt;
&lt;p&gt;Test in patch&lt;/p&gt;
&lt;p&gt;My suggestion would be to be more careful what values get passed
to the scope_for_create (relation.rb:359) method. How this should
be achieved, that I do not know.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T14:06:20+00:00</created-at>
      <creator-id type="integer">17424</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6398</number>
      <permalink>build-model-on-association-creates-unexpected-results</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>association build scope_for_create where_values_hash</tag>
      <title>build model on association creates unexpected results</title>
      <updated-at type="datetime">2011-02-09T14:06:23+00:00</updated-at>
      <user-id type="integer">17424</user-id>
      <version type="integer">1</version>
      <user-name>Bertg</user-name>
      <creator-name>Bertg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6398</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>78c7cd8d1718c94440d2bd07c7bd75890154b663</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-09T14:06:20+00:00</created-at>
      <filename>where_atrtibute_cast.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">903842</id>
      <size type="integer">977</size>
      <uploader-id type="integer">17424</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/903842/where_atrtibute_cast.diff</url>
    </attachment>
  </attachments>
</ticket>
