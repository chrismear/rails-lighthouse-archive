<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-04T11:57:53+01:00</created-at>
  <creator-id type="integer">36472</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2756</number>
  <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
  <priority type="integer">1865</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>232 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association bugmash has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
  <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
  <updated-at type="datetime">2011-02-02T17:30:43+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>tsechingho</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>For a long time it was a problem for people wanting to use polymorphic association with single table inheritance.
The solution was pointed out (ticket #547, http://dev.rubyonrails.org/ticket/6485, http://dev.rubyonrails.org/ticket/8841).

For example, we should use **@owner.class.name.to_s** rather than **@owner.class.base_class.name.to_s** for the **record[&quot;#{@reflection.options[:as]}_type&quot;]** attribute in **set_belongs_to_association_for** method in active_record/associations/association_proxy.rb.
Beside that, we should consider the namespace problem (full class name or demodulized name) mentioned in ticket #465. So **@owner.class.sti_name.to_s** is more proper than **@owner.class.name.to_s**.

When we look at the whole active record library, this wrong taken causes many place should be fixed (association_preload.rb, associations.rb, association_proxy.rb, belongs_to_polymorphic_association.rb, has_many_association.rb, has_many_through_association.rb, has_one_association.rb and autosave_association.rb).

I prepared a patch to resolve these situations. This patch should also fix problems mentioned in ticket #2435, #2594, #2601.
The related test cases were fixed too (join_model_test.rb, eager_test.rb, eager_load_includes_full_sti_class_test.rb).
So there were no problems even if we have complicated models like 'Post', 'Tag' and 'Tagging' in test/models.

@@@ ruby
class Post &lt; ActiveRecord::Base
  has_many :taggings, :as =&gt; :taggable

  has_many :tags, :through =&gt; :taggings
  has_many :funky_tags, :through =&gt; :taggings, :source =&gt; :tag
  has_many :super_tags, :through =&gt; :taggings

  has_one :tagging, :as =&gt; :taggable

  has_many :invalid_taggings, :as =&gt; :taggable, :class_name =&gt; &quot;Tagging&quot;, :conditions =&gt; 'taggings.id &lt; 0'
  has_many :invalid_tags, :through =&gt; :invalid_taggings, :source =&gt; :tag
end

class Tagging &lt; ActiveRecord::Base
  belongs_to :tag, :include =&gt; :tagging
  belongs_to :super_tag,   :class_name =&gt; 'Tag', :foreign_key =&gt; 'super_tag_id'
  belongs_to :invalid_tag, :class_name =&gt; 'Tag', :foreign_key =&gt; 'tag_id'
  belongs_to :taggable, :polymorphic =&gt; true, :counter_cache =&gt; true
end

class Tag &lt; ActiveRecord::Base
  has_many :taggings
  has_many :taggables, :through =&gt; :taggings
  has_one  :tagging

  has_many :tagged_posts, :through =&gt; :taggings, :source =&gt; :taggable, :source_type =&gt; 'Post'
end
@@@

The remain question is this patch will cause problems to plugins which also use 'base_class.name', like 'has_many_polymorphics' as I know.
Maybe more test cases should be added for this path, but I feel that this problem should be solved before rails 3.0.</original-body>
  <latest-body>For a long time it was a problem for people wanting to use polymorphic association with single table inheritance.
The solution was pointed out (ticket #547, http://dev.rubyonrails.org/ticket/6485, http://dev.rubyonrails.org/ticket/8841).

For example, we should use **@owner.class.name.to_s** rather than **@owner.class.base_class.name.to_s** for the **record[&quot;#{@reflection.options[:as]}_type&quot;]** attribute in **set_belongs_to_association_for** method in active_record/associations/association_proxy.rb.
Beside that, we should consider the namespace problem (full class name or demodulized name) mentioned in ticket #465. So **@owner.class.sti_name.to_s** is more proper than **@owner.class.name.to_s**.

When we look at the whole active record library, this wrong taken causes many place should be fixed (association_preload.rb, associations.rb, association_proxy.rb, belongs_to_polymorphic_association.rb, has_many_association.rb, has_many_through_association.rb, has_one_association.rb and autosave_association.rb).

I prepared a patch to resolve these situations. This patch should also fix problems mentioned in ticket #2435, #2594, #2601.
The related test cases were fixed too (join_model_test.rb, eager_test.rb, eager_load_includes_full_sti_class_test.rb).
So there were no problems even if we have complicated models like 'Post', 'Tag' and 'Tagging' in test/models.

@@@ ruby
class Post &lt; ActiveRecord::Base
  has_many :taggings, :as =&gt; :taggable

  has_many :tags, :through =&gt; :taggings
  has_many :funky_tags, :through =&gt; :taggings, :source =&gt; :tag
  has_many :super_tags, :through =&gt; :taggings

  has_one :tagging, :as =&gt; :taggable

  has_many :invalid_taggings, :as =&gt; :taggable, :class_name =&gt; &quot;Tagging&quot;, :conditions =&gt; 'taggings.id &lt; 0'
  has_many :invalid_tags, :through =&gt; :invalid_taggings, :source =&gt; :tag
end

class Tagging &lt; ActiveRecord::Base
  belongs_to :tag, :include =&gt; :tagging
  belongs_to :super_tag,   :class_name =&gt; 'Tag', :foreign_key =&gt; 'super_tag_id'
  belongs_to :invalid_tag, :class_name =&gt; 'Tag', :foreign_key =&gt; 'tag_id'
  belongs_to :taggable, :polymorphic =&gt; true, :counter_cache =&gt; true
end

class Tag &lt; ActiveRecord::Base
  has_many :taggings
  has_many :taggables, :through =&gt; :taggings
  has_one  :tagging

  has_many :tagged_posts, :through =&gt; :taggings, :source =&gt; :taggable, :source_type =&gt; 'Post'
end
@@@

The remain question is this patch will cause problems to plugins which also use 'base_class.name', like 'has_many_polymorphics' as I know.
Maybe more test cases should be added for this path, but I feel that this problem should be solved before rails 3.0.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;For a long time it was a problem for people wanting to use
polymorphic association with single table inheritance. The solution
was pointed out (ticket &lt;a href=&quot;/projects/8994/tickets/547&quot; title=&quot;Ticket #547&quot;&gt;#547&lt;/a&gt;, &lt;a href=&quot;http://dev.rubyonrails.org/ticket/6485&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;,
&lt;a href=&quot;http://dev.rubyonrails.org/ticket/8841).%3C/p&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;For example, we should use
&lt;strong&gt;@owner.class.name.to_s&lt;/strong&gt; rather than
&lt;strong&gt;@owner.class.base_class.name.to_s&lt;/strong&gt; for the
&lt;strong&gt;record[&quot;#{@reflection.options[:as]}_type&quot;]&lt;/strong&gt;
attribute in &lt;strong&gt;set_belongs_to_association_for&lt;/strong&gt; method
in active_record/associations/association_proxy.rb. Beside that, we
should consider the namespace problem (full class name or
demodulized name) mentioned in ticket &lt;a href=&quot;/projects/8994/tickets/465&quot; title=&quot;Ticket #465&quot;&gt;#465&lt;/a&gt;. So
&lt;strong&gt;@owner.class.sti_name.to_s&lt;/strong&gt; is more proper than
&lt;strong&gt;@owner.class.name.to_s&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When we look at the whole active record library, this wrong
taken causes many place should be fixed (association_preload.rb,
associations.rb, association_proxy.rb,
belongs_to_polymorphic_association.rb, has_many_association.rb,
has_many_through_association.rb, has_one_association.rb and
autosave_association.rb).&lt;/p&gt;
&lt;p&gt;I prepared a patch to resolve these situations. This patch
should also fix problems mentioned in ticket &lt;a href=&quot;/projects/8994/tickets/2435&quot; title=&quot;Ticket #2435&quot;&gt;#2435&lt;/a&gt;,
&lt;a href=&quot;/projects/8994/tickets/2594&quot; title=&quot;Ticket #2594&quot;&gt;#2594&lt;/a&gt;, &lt;a href=&quot;/projects/8994/tickets/2601&quot; title=&quot;Ticket #2601&quot;&gt;#2601&lt;/a&gt;. The related test cases were fixed
too (join_model_test.rb, eager_test.rb,
eager_load_includes_full_sti_class_test.rb). So there were no
problems even if we have complicated models like 'Post', 'Tag' and
'Tagging' in test/models.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Post &amp;lt; ActiveRecord::Base
  has_many :taggings, :as =&amp;gt; :taggable

  has_many :tags, :through =&amp;gt; :taggings
  has_many :funky_tags, :through =&amp;gt; :taggings, :source =&amp;gt; :tag
  has_many :super_tags, :through =&amp;gt; :taggings

  has_one :tagging, :as =&amp;gt; :taggable

  has_many :invalid_taggings, :as =&amp;gt; :taggable, :class_name =&amp;gt; &amp;quot;Tagging&amp;quot;, :conditions =&amp;gt; 'taggings.id &amp;lt; 0'
  has_many :invalid_tags, :through =&amp;gt; :invalid_taggings, :source =&amp;gt; :tag
end

class Tagging &amp;lt; ActiveRecord::Base
  belongs_to :tag, :include =&amp;gt; :tagging
  belongs_to :super_tag,   :class_name =&amp;gt; 'Tag', :foreign_key =&amp;gt; 'super_tag_id'
  belongs_to :invalid_tag, :class_name =&amp;gt; 'Tag', :foreign_key =&amp;gt; 'tag_id'
  belongs_to :taggable, :polymorphic =&amp;gt; true, :counter_cache =&amp;gt; true
end

class Tag &amp;lt; ActiveRecord::Base
  has_many :taggings
  has_many :taggables, :through =&amp;gt; :taggings
  has_one  :tagging

  has_many :tagged_posts, :through =&amp;gt; :taggings, :source =&amp;gt; :taggable, :source_type =&amp;gt; 'Post'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The remain question is this patch will cause problems to plugins
which also use 'base_class.name', like 'has_many_polymorphics' as I
know. Maybe more test cases should be added for this path, but I
feel that this problem should be solved before rails 3.0.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For a long time it was a problem for people wanting to use polymorphic association with single table inheritance.
The solution was pointed out (ticket #547, http://dev.rubyonrails.org/ticket/6485, http://dev.rubyonrails.org/ticket/8841).

For example, we should use **@owner.class.name.to_s** rather than **@owner.class.base_class.name.to_s** for the **record[&quot;#{@reflection.options[:as]}_type&quot;]** attribute in **set_belongs_to_association_for** method in active_record/associations/association_proxy.rb.
Beside that, we should consider the namespace problem (full class name or demodulized name) mentioned in ticket #465. So **@owner.class.sti_name.to_s** is more proper than **@owner.class.name.to_s**.

When we look at the whole active record library, this wrong taken causes many place should be fixed (association_preload.rb, associations.rb, association_proxy.rb, belongs_to_polymorphic_association.rb, has_many_association.rb, has_many_through_association.rb, has_one_association.rb and autosave_association.rb).

I prepared a patch to resolve these situations. This patch should also fix problems mentioned in ticket #2435, #2594, #2601.
The related test cases were fixed too (join_model_test.rb, eager_test.rb, eager_load_includes_full_sti_class_test.rb).
So there were no problems even if we have complicated models like 'Post', 'Tag' and 'Tagging' in test/models.

@@@ ruby
class Post &lt; ActiveRecord::Base
  has_many :taggings, :as =&gt; :taggable

  has_many :tags, :through =&gt; :taggings
  has_many :funky_tags, :through =&gt; :taggings, :source =&gt; :tag
  has_many :super_tags, :through =&gt; :taggings

  has_one :tagging, :as =&gt; :taggable

  has_many :invalid_taggings, :as =&gt; :taggable, :class_name =&gt; &quot;Tagging&quot;, :conditions =&gt; 'taggings.id &lt; 0'
  has_many :invalid_tags, :through =&gt; :invalid_taggings, :source =&gt; :tag
end

class Tagging &lt; ActiveRecord::Base
  belongs_to :tag, :include =&gt; :tagging
  belongs_to :super_tag,   :class_name =&gt; 'Tag', :foreign_key =&gt; 'super_tag_id'
  belongs_to :invalid_tag, :class_name =&gt; 'Tag', :foreign_key =&gt; 'tag_id'
  belongs_to :taggable, :polymorphic =&gt; true, :counter_cache =&gt; true
end

class Tag &lt; ActiveRecord::Base
  has_many :taggings
  has_many :taggables, :through =&gt; :taggings
  has_one  :tagging

  has_many :tagged_posts, :through =&gt; :taggings, :source =&gt; :taggable, :source_type =&gt; 'Post'
end
@@@

The remain question is this patch will cause problems to plugins which also use 'base_class.name', like 'has_many_polymorphs' as I know.
Maybe more test cases should be added for this path, but I feel that this problem should be solved before rails 3.0.</body>
      <body-html>&lt;div&gt;&lt;p&gt;For a long time it was a problem for people wanting to use
polymorphic association with single table inheritance.&lt;br&gt;
The solution was pointed out (ticket &lt;a href=
&quot;/projects/8994/tickets/547&quot; title=&quot;Ticket #547&quot;&gt;#547&lt;/a&gt;, &lt;a href=
&quot;http://dev.rubyonrails.org/ticket/6485&quot;&gt;http://dev.rubyonrails.org/ticket/6485&lt;/a&gt;,
&lt;a href=
&quot;http://dev.rubyonrails.org/ticket/8841)&quot;&gt;http://dev.rubyonrails.org/ticket/8841)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, we should use
&lt;strong&gt;@owner.class.name.to_s&lt;/strong&gt; rather than
&lt;strong&gt;@owner.class.base_class.name.to_s&lt;/strong&gt; for the
&lt;strong&gt;record[&quot;#{@reflection.options[:as]}_type&quot;]&lt;/strong&gt;
attribute in &lt;strong&gt;set_belongs_to_association_for&lt;/strong&gt; method
in active_record/associations/association_proxy.rb.&lt;br&gt;
Beside that, we should consider the namespace problem (full class
name or demodulized name) mentioned in ticket &lt;a href=
&quot;/projects/8994/tickets/465&quot; title=&quot;Ticket #465&quot;&gt;#465&lt;/a&gt;. So
&lt;strong&gt;@owner.class.sti_name.to_s&lt;/strong&gt; is more proper than
&lt;strong&gt;@owner.class.name.to_s&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When we look at the whole active record library, this wrong
taken causes many place should be fixed (association_preload.rb,
associations.rb, association_proxy.rb,
belongs_to_polymorphic_association.rb, has_many_association.rb,
has_many_through_association.rb, has_one_association.rb and
autosave_association.rb).&lt;/p&gt;
&lt;p&gt;I prepared a patch to resolve these situations. This patch
should also fix problems mentioned in ticket &lt;a href=
&quot;/projects/8994/tickets/2435&quot; title=&quot;Ticket #2435&quot;&gt;#2435&lt;/a&gt;,
&lt;a href=&quot;/projects/8994/tickets/2594&quot; title=
&quot;Ticket #2594&quot;&gt;#2594&lt;/a&gt;, &lt;a href=&quot;/projects/8994/tickets/2601&quot;
title=&quot;Ticket #2601&quot;&gt;#2601&lt;/a&gt;.&lt;br&gt;
The related test cases were fixed too (join_model_test.rb,
eager_test.rb, eager_load_includes_full_sti_class_test.rb).&lt;br&gt;
So there were no problems even if we have complicated models like
'Post', 'Tag' and 'Tagging' in test/models.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Post &amp;lt; ActiveRecord::Base
  has_many :taggings, :as =&amp;gt; :taggable

  has_many :tags, :through =&amp;gt; :taggings
  has_many :funky_tags, :through =&amp;gt; :taggings, :source =&amp;gt; :tag
  has_many :super_tags, :through =&amp;gt; :taggings

  has_one :tagging, :as =&amp;gt; :taggable

  has_many :invalid_taggings, :as =&amp;gt; :taggable, :class_name =&amp;gt; &quot;Tagging&quot;, :conditions =&amp;gt; 'taggings.id &amp;lt; 0'
  has_many :invalid_tags, :through =&amp;gt; :invalid_taggings, :source =&amp;gt; :tag
end

class Tagging &amp;lt; ActiveRecord::Base
  belongs_to :tag, :include =&amp;gt; :tagging
  belongs_to :super_tag,   :class_name =&amp;gt; 'Tag', :foreign_key =&amp;gt; 'super_tag_id'
  belongs_to :invalid_tag, :class_name =&amp;gt; 'Tag', :foreign_key =&amp;gt; 'tag_id'
  belongs_to :taggable, :polymorphic =&amp;gt; true, :counter_cache =&amp;gt; true
end

class Tag &amp;lt; ActiveRecord::Base
  has_many :taggings
  has_many :taggables, :through =&amp;gt; :taggings
  has_one  :tagging

  has_many :tagged_posts, :through =&amp;gt; :taggings, :source =&amp;gt; :taggable, :source_type =&amp;gt; 'Post'
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The remain question is this patch will cause problems to plugins
which also use 'base_class.name', like 'has_many_polymorphs' as I
know.&lt;br&gt;
Maybe more test cases should be added for this path, but I feel
that this problem should be solved before rails 3.0.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-04T11:57:53+01:00</created-at>
      <creator-id type="integer">36472</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2756</number>
      <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
      <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
      <updated-at type="datetime">2009-06-09T09:55:44+01:00</updated-at>
      <user-id type="integer">36472</user-id>
      <version type="integer">1</version>
      <user-name>tsechingho</user-name>
      <creator-name>tsechingho</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T22:01:10+01:00</created-at>
      <creator-id type="integer">36472</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2756</number>
      <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
      <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
      <updated-at type="datetime">2009-08-09T22:01:16+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>tsechingho</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T22:08:53+01:00</created-at>
      <creator-id type="integer">36472</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 19965
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2756</number>
      <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
      <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
      <updated-at type="datetime">2009-08-09T22:08:59+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">3</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>tsechingho</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:51+01:00</created-at>
      <creator-id type="integer">36472</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2756</number>
      <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
      <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
      <updated-at type="datetime">2010-05-04T18:48:51+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>tsechingho</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T19:27:54+01:00</created-at>
      <creator-id type="integer">36472</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association has_many_association has_many_through_association has_one_association patch polymorphic sti
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2756</number>
      <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association bugmash has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
      <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
      <updated-at type="datetime">2010-05-09T19:27:55+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">5</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>tsechingho</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:39:27+00:00</created-at>
      <creator-id type="integer">36472</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:tag: 2.3.2 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association bugmash has_many_association has_many_through_association has_one_association patch polymorphic sti
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2756</number>
      <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
      <priority type="integer">1865</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>232 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association bugmash has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
      <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
      <updated-at type="datetime">2011-02-02T17:30:21+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>tsechingho</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:39:29+00:00</created-at>
      <creator-id type="integer">36472</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2756</number>
      <permalink>the-polymorphic-type-field-should-be-subclass-name-instead-of-base-class-name-when-using-polymorphic-association-with-single-table-inheritance</permalink>
      <priority type="integer">1865</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>232 activerecord associations association_preload association_proxy autosave_association belongs_to_polymorphic_association bugmash has_many_association has_many_through_association has_one_association patch polymorphic sti</tag>
      <title>[patch] The polymorphic type field should be subclass name instead of base class name when using polymorphic association with single table inheritance</title>
      <updated-at type="datetime">2011-02-02T17:30:43+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>tsechingho</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2756</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>3940579df6452b0ceb95c518461126909f1c7409</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-06-04T11:57:54+01:00</created-at>
      <filename>polymorphic_and_sti_fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">129598</id>
      <size type="integer">24201</size>
      <uploader-id type="integer">36472</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/129598/polymorphic_and_sti_fix.diff</url>
    </attachment>
  </attachments>
</ticket>
