<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">5</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-04T08:54:43+01:00</created-at>
  <creator-id type="integer">32652</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2200</number>
  <permalink>session-support-broken</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>reset_session broken</title>
  <updated-at type="datetime">2010-11-08T23:12:07+00:00</updated-at>
  <user-id type="integer">94458</user-id>
  <version type="integer">60</version>
  <user-name>Jeff Kreeftmeijer</user-name>
  <creator-name>Kyle Maxwell</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
  <milestone-title>2.x</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>Between Rails 2.3.0 and Rails 2.3.1, session support became severely broken in production mode, using the cookie store.  Development mode works fine.

Notably, ActionController::Base#reset_session doesn't reset session.  Flash messages are not stored.  Setting of session variables, followed by a redirect, is ignored.

Basically, my app uses restful_authentication in standard ways.  It's unusable in production mode.</original-body>
  <latest-body>Between Rails 2.3.0 and Rails 2.3.1, session support became severely broken in production mode, using the cookie store.  Development mode works fine.

Notably, ActionController::Base#reset_session doesn't reset session.  Flash messages are not stored.  Setting of session variables, followed by a redirect, is ignored.

Basically, my app uses restful_authentication in standard ways.  It's unusable in production mode.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Between Rails 2.3.0 and Rails 2.3.1, session support became
severely broken in production mode, using the cookie store.
Development mode works fine.&lt;/p&gt;
&lt;p&gt;Notably, ActionController::Base#reset_session doesn't reset
session. Flash messages are not stored. Setting of session
variables, followed by a redirect, is ignored.&lt;/p&gt;
&lt;p&gt;Basically, my app uses restful_authentication in standard ways.
It's unusable in production mode.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Between Rails 2.3.0 and Rails 2.3.1, session support became severely broken in production mode, using the cookie store.  Development mode works fine.

Notably, ActionController::Base#reset_session doesn't reset session.  Flash messages are not stored.  Setting of session variables, followed by a redirect, is ignored.

Basically, my app uses restful_authentication in standard ways.  It's unusable in production mode.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Between Rails 2.3.0 and Rails 2.3.1, session support became
severely broken in production mode, using the cookie store.
Development mode works fine.&lt;/p&gt;
&lt;p&gt;Notably, ActionController::Base#reset_session doesn't reset
session. Flash messages are not stored. Setting of session
variables, followed by a redirect, is ignored.&lt;/p&gt;
&lt;p&gt;Basically, my app uses restful_authentication in standard ways.
It's unusable in production mode.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-10T18:47:56+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>session support broken </title>
      <updated-at type="datetime">2009-03-10T18:49:32+00:00</updated-at>
      <user-id type="integer">32652</user-id>
      <version type="integer">1</version>
      <user-name>Kyle Maxwell</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Some discussion at:

http://groups.google.com/group/rubyonrails-core/browse_thread/thread/17b94aaefecdbf7c</body>
      <body-html>&lt;div&gt;&lt;p&gt;Some discussion at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/17b94aaefecdbf7c&quot;&gt;
http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-10T18:51:18+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>session support broken </title>
      <updated-at type="datetime">2009-03-10T18:52:44+00:00</updated-at>
      <user-id type="integer">32652</user-id>
      <version type="integer">2</version>
      <user-name>Kyle Maxwell</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I had problems with reset_session on 2.3.0  after uprade on 2.3.1 it got OK but on 2.3.2 it is broken again.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I had problems with reset_session on 2.3.0 after uprade on 2.3.1
it got OK but on 2.3.2 it is broken again.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T17:28:49+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>session support broken </title>
      <updated-at type="datetime">2009-03-17T17:28:53+00:00</updated-at>
      <user-id type="integer">25565</user-id>
      <version type="integer">3</version>
      <user-name>daeltar</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It seems like in that thread the answer is given, Rails 2.3.2 doesn't work on older versions of Passenger. What version of Passenger are you running?</body>
      <body-html>&lt;div&gt;&lt;p&gt;It seems like in that thread the answer is given, Rails 2.3.2
doesn't work on older versions of Passenger. What version of
Passenger are you running?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T19:28:06+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>session support broken </title>
      <updated-at type="datetime">2009-03-17T19:28:10+00:00</updated-at>
      <user-id type="integer">8721</user-id>
      <version type="integer">4</version>
      <user-name>David Dollar</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>passenger-2.1.2</body>
      <body-html>&lt;div&gt;&lt;p&gt;passenger-2.1.2&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T21:58:06+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>session support broken </title>
      <updated-at type="datetime">2009-03-17T21:58:09+00:00</updated-at>
      <user-id type="integer">25565</user-id>
      <version type="integer">5</version>
      <user-name>daeltar</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Described problem affects also ActiveRecord session store, but also in development mode.

def login
  reset_session
  session[:user_id] = 5
  redirect_to :action =&gt; 'logged_in'
end

def logged_in
  raise &quot;user_if not set&quot; unless session[:user_id]
end</body>
      <body-html>&lt;div&gt;&lt;p&gt;Described problem affects also ActiveRecord session store, but
also in development mode.&lt;/p&gt;
&lt;p&gt;def login reset_session session[:user_id] = 5 redirect_to
:action =&amp;gt; 'logged_in' end&lt;/p&gt;
&lt;p&gt;def logged_in raise &quot;user_if not set&quot; unless session[:user_id]
end&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T15:47:07+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:title: &quot;session support broken &quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-18T15:47:11+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">6</version>
      <user-name>Pawel</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A workaround to allow your users to log in. Read the comment or don't use it.

@@@ ruby
class ApplicationController
  # This will destroy session fixation protection of your authentication system.
  # Use it only if you understand the risk.
  def reset_session
    session[:lazy_load_session]
    session.reject! { true } # clear session variables but don't assign new session id
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;A workaround to allow your users to log in. Read the comment or
don't use it.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class ApplicationController
  # This will destroy session fixation protection of your authentication system.
  # Use it only if you understand the risk.
  def reset_session
    session[:lazy_load_session]
    session.reject! { true } # clear session variables but don't assign new session id
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T16:12:40+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-18T16:12:46+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">7</version>
      <user-name>Pawel</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Another workaround is to simply replace reset_session with

session.clear

(you may need to lazy load the session with session[:load] if you haven't used it yet)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Another workaround is to simply replace reset_session with&lt;/p&gt;
&lt;p&gt;session.clear&lt;/p&gt;
&lt;p&gt;(you may need to lazy load the session with session[:load] if
you haven't used it yet)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-18T16:23:39+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-18T16:23:43+00:00</updated-at>
      <user-id type="integer">8551</user-id>
      <version type="integer">8</version>
      <user-name>Fjan</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you are using ActiveRecord::SessionStore::Session (only thing I have tested it with), removing the key 'rack.session.record' from @env appears to fix the issue.

@@@ ruby
ActionController::Request

  def reset_session
      @env['rack.session.options'].delete(:id)
      @env.delete('rack.session.record')
      @env['rack.session'] = {}
  end

end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you are using ActiveRecord::SessionStore::Session (only thing
I have tested it with), removing the key 'rack.session.record' from
@env appears to fix the issue.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
ActionController::Request

  def reset_session
      @env['rack.session.options'].delete(:id)
      @env.delete('rack.session.record')
      @env['rack.session'] = {}
  end

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-19T23:46:45+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-19T23:46:50+00:00</updated-at>
      <user-id type="integer">51301</user-id>
      <version type="integer">9</version>
      <user-name>Dominique Brezinski</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I realized further info would be helpful. The reason removing 'rack.session.record' fixes the issue is because set_session in ActiveRecord::SessionStore::Session has the following lines of code:

@@@ ruby
record = env[SESSION_RECORD_KEY] ||= find_session(sid)
record.data = session_data
return false unless record.save
@@@

where

@@@ ruby
SESSION_RECORD_KEY = 'rack.session.record'.freeze
@@@

 sid is regenerated in get_session if it is nil, and the current sid is from 

@@@ ruby
@env['rack.session.options'][:id]
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I realized further info would be helpful. The reason removing
'rack.session.record' fixes the issue is because set_session in
ActiveRecord::SessionStore::Session has the following lines of
code:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
record = env[SESSION_RECORD_KEY] ||= find_session(sid)
record.data = session_data
return false unless record.save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
SESSION_RECORD_KEY = 'rack.session.record'.freeze
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sid is regenerated in get_session if it is nil, and the current
sid is from&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
@env['rack.session.options'][:id]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-20T00:14:39+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-20T00:14:42+00:00</updated-at>
      <user-id type="integer">51301</user-id>
      <version type="integer">10</version>
      <user-name>Dominique Brezinski</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-22T21:43:09+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-22T21:43:14+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">11</version>
      <user-name>Pratik</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The current behaviour is not entirely unuseful: I just ran into a case where I would like to really get rid of a session, and not create a new one, as the current reset_session() does. We may want to simply use session.clear() to clear a session (and simply enhance it with lazy loading) and leave reset_session() as it is.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The current behaviour is not entirely unuseful: I just ran into
a case where I would like to really get rid of a session, and not
create a new one, as the current reset_session() does. We may want
to simply use session.clear() to clear a session (and simply
enhance it with lazy loading) and leave reset_session() as it
is.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-22T22:10:38+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-22T22:10:42+00:00</updated-at>
      <user-id type="integer">8551</user-id>
      <version type="integer">12</version>
      <user-name>Fjan</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Clearing the session doesn't protect against session fixation attacks since the session id stays the same, so just calling session.clear() is definitely not a solution for the case of a login action.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Clearing the session doesn't protect against session fixation
attacks since the session id stays the same, so just calling
session.clear() is definitely not a solution for the case of a
login action.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-23T10:35:19+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-23T10:35:24+00:00</updated-at>
      <user-id type="integer">51573</user-id>
      <version type="integer">13</version>
      <user-name>Jens</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good point. Perhaps an optional parameter to reset_session then? Something like: reset_session(create_new=true)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good point. Perhaps an optional parameter to reset_session then?
Something like: reset_session(create_new=true)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-23T10:45:46+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-23T10:45:50+00:00</updated-at>
      <user-id type="integer">8551</user-id>
      <version type="integer">14</version>
      <user-name>Fjan</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>All session fixation preventions rely on the semantics of reset_session creating a new session id. Changing the default semantics would cause most rails apps to become vulnerable to session fixation.

Fjan, I don't understand your desire to change reset_session. If you just want to clear the values of an existing session in your app, you can just call session.clear yourself. Changing reset_session to do what one method call already does makes no sense.

reset_session just needs to be fixed to function as it use to, which apparently there is no current regression test for (one that tests a reset_session, add something to session, and make another request with the new session), at least not when using :active_record_store. The fix is to either have reset_session delete the one key from env or change set_session in ActiveRecord::SessionStore::Session to always find_session(sid) and not default to env[SESSION_RECORD_KEY].</body>
      <body-html>&lt;div&gt;&lt;p&gt;All session fixation preventions rely on the semantics of
reset_session creating a new session id. Changing the default
semantics would cause most rails apps to become vulnerable to
session fixation.&lt;/p&gt;
&lt;p&gt;Fjan, I don't understand your desire to change reset_session. If
you just want to clear the values of an existing session in your
app, you can just call session.clear yourself. Changing
reset_session to do what one method call already does makes no
sense.&lt;/p&gt;
&lt;p&gt;reset_session just needs to be fixed to function as it use to,
which apparently there is no current regression test for (one that
tests a reset_session, add something to session, and make another
request with the new session), at least not when using
:active_record_store. The fix is to either have reset_session
delete the one key from env or change set_session in
ActiveRecord::SessionStore::Session to always find_session(sid) and
not default to env[SESSION_RECORD_KEY].&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-23T14:12:43+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-23T14:12:47+00:00</updated-at>
      <user-id type="integer">51301</user-id>
      <version type="integer">15</version>
      <user-name>Dominique Brezinski</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Dominique, I do not suggest that reset_session should not remove its old session_id, nor do I want to change its current definition.

My point is that there is currently no way to avoid a new session being created and stored in the session table when you use reset_session(). (Well, the current behaviour is exactly that, but this is considered a bug). This is wasteful, for example, when a user logs out and doesn't return (It could also be considered bad behaviour to leave him with a worthless cookie if you are using the cookie store). My suggestion was to add a new option to reset_session that tells it to not create a new session after it discards the old one.

This is the use case I ran into: I want to do a reset_session() and return an error when a spider/bot visits certain pages and I cannot do that because the new empty sessions that reset_session() generates quickly pollute the session table.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Dominique, I do not suggest that reset_session should not remove
its old session_id, nor do I want to change its current
definition.&lt;/p&gt;
&lt;p&gt;My point is that there is currently no way to avoid a new
session being created and stored in the session table when you use
reset_session(). (Well, the current behaviour is exactly that, but
this is considered a bug). This is wasteful, for example, when a
user logs out and doesn't return (It could also be considered bad
behaviour to leave him with a worthless cookie if you are using the
cookie store). My suggestion was to add a new option to
reset_session that tells it to not create a new session after it
discards the old one.&lt;/p&gt;
&lt;p&gt;This is the use case I ran into: I want to do a reset_session()
and return an error when a spider/bot visits certain pages and I
cannot do that because the new empty sessions that reset_session()
generates quickly pollute the session table.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-23T14:39:15+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-23T14:39:17+00:00</updated-at>
      <user-id type="integer">8551</user-id>
      <version type="integer">16</version>
      <user-name>Fjan</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Fjan, I guess I don't understand why just doing session.clear does not solve your problem? I believe your case is a feature request versus a solution to or an attribute of the bug this ticket relates to.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Fjan, I guess I don't understand why just doing session.clear
does not solve your problem? I believe your case is a feature
request versus a solution to or an attribute of the bug this ticket
relates to.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-23T17:59:28+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-23T17:59:32+00:00</updated-at>
      <user-id type="integer">51301</user-id>
      <version type="integer">17</version>
      <user-name>Dominique Brezinski</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Dominique: session.clear() clears the session but it does not delete it. reset_session() deletes the session but creates a new empty at the same time. So neither is a solution. Users who log out (or bots visiting my site) will all leave lots of empty sessions in the database.

My suggestion is indeed a new feature, the reason it is appropriate to mention here is that this new &quot;feature&quot; is actually the current behaviour of this bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Dominique: session.clear() clears the session but it does not
delete it. reset_session() deletes the session but creates a new
empty at the same time. So neither is a solution. Users who log out
(or bots visiting my site) will all leave lots of empty sessions in
the database.&lt;/p&gt;
&lt;p&gt;My suggestion is indeed a new feature, the reason it is
appropriate to mention here is that this new &quot;feature&quot; is actually
the current behaviour of this bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-23T18:33:43+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-23T18:33:47+00:00</updated-at>
      <user-id type="integer">8551</user-id>
      <version type="integer">18</version>
      <user-name>Fjan</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>IMHO reset_session should be simplified to three steps:
1. Clear the session variables.
2. Remove the cookie with session_id.
3. There is no step three ;-)

When using cookie store steps 1 and 2 can be combined into one step: delete session cookie.

So, my point is that reset_session shouldn't create new session. New session should be created on first access to session &quot;hash&quot; after reset_session, just as it is lazy loaded if no session exist.

Fjan: If you like to destroy session and don't create it just call (modified as described above) reset_session method. I'm not sure however if the session should be removed from db on reset_session call. You probably have some periodic job to delete old sessions, so why duplicate it in other place? On the other hand removing session from db would eliminate race condition I described in #2174. Still I think the solution proposed in mentioned ticket is more generic, but maybe reset_session(:store_now =&gt; true) or reset_session! could be helpful additions.

Dominique: new reset_session behaviour would be compatible with current rails apps and will continue to provide protection against session fixation attack.</body>
      <body-html>&lt;div&gt;&lt;p&gt;IMHO reset_session should be simplified to three steps: 1. Clear
the session variables. 2. Remove the cookie with session_id. 3.
There is no step three ;-)&lt;/p&gt;
&lt;p&gt;When using cookie store steps 1 and 2 can be combined into one
step: delete session cookie.&lt;/p&gt;
&lt;p&gt;So, my point is that reset_session shouldn't create new session.
New session should be created on first access to session &quot;hash&quot;
after reset_session, just as it is lazy loaded if no session
exist.&lt;/p&gt;
&lt;p&gt;Fjan: If you like to destroy session and don't create it just
call (modified as described above) reset_session method. I'm not
sure however if the session should be removed from db on
reset_session call. You probably have some periodic job to delete
old sessions, so why duplicate it in other place? On the other hand
removing session from db would eliminate race condition I described
in &lt;a href=&quot;/projects/8994/tickets/2174&quot; title=&quot;Ticket #2174&quot;&gt;#2174&lt;/a&gt;. Still I think the solution proposed in
mentioned ticket is more generic, but maybe
reset_session(:store_now =&amp;gt; true) or reset_session! could be
helpful additions.&lt;/p&gt;
&lt;p&gt;Dominique: new reset_session behaviour would be compatible with
current rails apps and will continue to provide protection against
session fixation attack.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-24T11:04:26+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-24T11:04:30+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">19</version>
      <user-name>Pawel</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Pawel: I agree, your suggestion is better than mine. I figured that changing reset_session() to not create a new session would break applications that do flash[:notice]=&quot;You are logged out&quot;, as most do, but it is a good idea to simply create the new session at the moment the session is accessed again, that's better than creating a new option.

BTW: I do have a cron job to delete old sessions, I just happened to have a problem with some rogue spiders lately filling up the session table at several entries a minute. (but I found anther way to solve that). Also, when you use the cookie store, it could be considered bad form to leave a worthless empty cookie on the user's computer</body>
      <body-html>&lt;div&gt;&lt;p&gt;Pawel: I agree, your suggestion is better than mine. I figured
that changing reset_session() to not create a new session would
break applications that do flash[:notice]=&quot;You are logged out&quot;, as
most do, but it is a good idea to simply create the new session at
the moment the session is accessed again, that's better than
creating a new option.&lt;/p&gt;
&lt;p&gt;BTW: I do have a cron job to delete old sessions, I just
happened to have a problem with some rogue spiders lately filling
up the session table at several entries a minute. (but I found
anther way to solve that). Also, when you use the cookie store, it
could be considered bad form to leave a worthless empty cookie on
the user's computer&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-24T11:40:32+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-24T11:40:34+00:00</updated-at>
      <user-id type="integer">8551</user-id>
      <version type="integer">20</version>
      <user-name>Fjan</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The session id also, and intermittently, mysteriously vanishes from request.session_options. I was using the session.model in rails 2.1 to put the user_id (and other information) directly in the database session table (on a separated column), for session management purposes. 
That is gone now, and I don't exactly understand the reason why backwards compatibility was not added from that stand point. To do the same job session.model did manually is not syntactically nice and, for the reason mentioned above, it doesn't even work.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The session id also, and intermittently, mysteriously vanishes
from request.session_options. I was using the session.model in
rails 2.1 to put the user_id (and other information) directly in
the database session table (on a separated column), for session
management purposes. That is gone now, and I don't exactly
understand the reason why backwards compatibility was not added
from that stand point. To do the same job session.model did
manually is not syntactically nice and, for the reason mentioned
above, it doesn't even work.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-27T02:23:27+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-27T02:23:28+00:00</updated-at>
      <user-id type="integer">52078</user-id>
      <version type="integer">21</version>
      <user-name>dncastilho (at gmail)</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>dncastilho: Confirm. The session_options[:id] not creating again after reset_session() (old behavior), and don't created even after session[:something] access.</body>
      <body-html>&lt;div&gt;&lt;p&gt;dncastilho: Confirm. The session_options[:id] not creating again
after reset_session() (old behavior), and don't created even after
session[:something] access.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-27T15:40:06+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-03-27T15:40:10+00:00</updated-at>
      <user-id type="integer">20020</user-id>
      <version type="integer">22</version>
      <user-name>eagleas</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Test case was not checking the appropriate key and value that was set in #call_reset_session action.

Made a #get_session_model method that will check to see if the 'rack.session.options' id is set since reset_session will nil out the the id. If the id isn't there it will go ahead and reset the model stored in 'rack.session.record'.

The fix lives in AR session store and not in action pack.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Test case was not checking the appropriate key and value that
was set in #call_reset_session action.&lt;/p&gt;
&lt;p&gt;Made a #get_session_model method that will check to see if the
'rack.session.options' id is set since reset_session will nil out
the the id. If the id isn't there it will go ahead and reset the
model stored in 'rack.session.record'.&lt;/p&gt;
&lt;p&gt;The fix lives in AR session store and not in action pack.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-10T22:28:34+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-04-10T22:28:38+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">23</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-13T22:09:11+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 activerecord-store cookie-store reset_session session
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-04-13T22:09:19+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">24</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Would that patch address the other issues of the ticket?  reset_session problems aside, I'm seeing the behavior described in the original ticket:

&gt; Setting of session variables, followed by a redirect, is ignored.

I have essentially a fresh rails project with just the restful_authentication plugin installed.  I am using Rails 2.3.2 and Passenger 2.1.3.

I added some debugging output to ApplicationController for illustration.  It just increments a counter in a before_filter and prints the session data.

@@@ ruby
before_filter :do_stuff

def do_stuff
  RAILS_DEFAULT_LOGGER.debug session.inspect
  session[:counter] = if session[:counter].is_a?(Fixnum) then session[:counter] + 1 else 0 end
  RAILS_DEFAULT_LOGGER.debug session.inspect
end
@@@

When a new user is created, a flash message is set and a redirect is performed.  Upon the redirect, the changes made to the session variables are lost.  The before_filter output shows that the flash message is missing and the counter returns to its previous value.

The session is evidently identified correctly, because the counter returns to its previous value instead of being reinitialized to 0.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Would that patch address the other issues of the ticket?
reset_session problems aside, I'm seeing the behavior described in
the original ticket:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Setting of session variables, followed by a redirect, is
ignored.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have essentially a fresh rails project with just the
restful_authentication plugin installed. I am using Rails 2.3.2 and
Passenger 2.1.3.&lt;/p&gt;
&lt;p&gt;I added some debugging output to ApplicationController for
illustration. It just increments a counter in a before_filter and
prints the session data.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
before_filter :do_stuff

def do_stuff
  RAILS_DEFAULT_LOGGER.debug session.inspect
  session[:counter] = if session[:counter].is_a?(Fixnum) then session[:counter] + 1 else 0 end
  RAILS_DEFAULT_LOGGER.debug session.inspect
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When a new user is created, a flash message is set and a
redirect is performed. Upon the redirect, the changes made to the
session variables are lost. The before_filter output shows that the
flash message is missing and the counter returns to its previous
value.&lt;/p&gt;
&lt;p&gt;The session is evidently identified correctly, because the
counter returns to its previous value instead of being
reinitialized to 0.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-14T06:57:40+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-04-14T06:57:43+01:00</updated-at>
      <user-id type="integer">53975</user-id>
      <version type="integer">25</version>
      <user-name>mjf</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>If reset_session was called before the redirect then yes this patch would fix that issue. Otherwise, I think it's a separate issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If reset_session was called before the redirect then yes this
patch would fix that issue. Otherwise, I think it's a separate
issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-14T07:17:31+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-04-14T07:17:37+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">26</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Folks,

Can someone give me a step by step instruction on what to do to fix it....

Apologies for asking for spoon feeding but I can't seem to figure out a solution here ...

I will really appreciate your help.

Also, I am facing the same issue as mjf stated.

Rajat</body>
      <body-html>&lt;div&gt;&lt;p&gt;Folks,&lt;/p&gt;
&lt;p&gt;Can someone give me a step by step instruction on what to do to
fix it....&lt;/p&gt;
&lt;p&gt;Apologies for asking for spoon feeding but I can't seem to
figure out a solution here ...&lt;/p&gt;
&lt;p&gt;I will really appreciate your help.&lt;/p&gt;
&lt;p&gt;Also, I am facing the same issue as mjf stated.&lt;/p&gt;
&lt;p&gt;Rajat&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-21T22:30:21+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-04-21T22:30:25+01:00</updated-at>
      <user-id type="integer">54695</user-id>
      <version type="integer">27</version>
      <user-name>rubynewbie</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>ps: it's driving me nuts</body>
      <body-html>&lt;div&gt;&lt;p&gt;ps: it's driving me nuts&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-21T22:30:46+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-04-21T22:30:53+01:00</updated-at>
      <user-id type="integer">54695</user-id>
      <version type="integer">28</version>
      <user-name>rubynewbie</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>In the session_store.rb initializer, I monkey-patched the code with this until the patch gets pushed. 

@@@ ruby
module ActiveRecord
  class SessionStore
    def set_session(env, sid, session_data)
      Base.silence do
        record = get_session_model(env, sid)
        record.data = session_data

        return false unless record.save
        
        session_data = record.data
        if session_data &amp;&amp; session_data.respond_to?(:each_value)
          session_data.each_value do |obj|
            obj.clear_association_cache if obj.respond_to?(:clear_association_cache)
          end
        end
      end
      
      return true
    end
  
    def get_session_model(env, sid)
      if env[ENV_SESSION_OPTIONS_KEY][:id].nil?
        env[ENV_SESSION_OPTIONS_KEY][:id] = sid
        env[SESSION_RECORD_KEY] = find_session(sid)
      else
        env[SESSION_RECORD_KEY] ||= find_session(sid)
      end
    end
  end
end

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;In the session_store.rb initializer, I monkey-patched the code
with this until the patch gets pushed.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
module ActiveRecord
  class SessionStore
    def set_session(env, sid, session_data)
      Base.silence do
        record = get_session_model(env, sid)
        record.data = session_data

        return false unless record.save
        
        session_data = record.data
        if session_data &amp;amp;&amp;amp; session_data.respond_to?(:each_value)
          session_data.each_value do |obj|
            obj.clear_association_cache if obj.respond_to?(:clear_association_cache)
          end
        end
      end
      
      return true
    end
  
    def get_session_model(env, sid)
      if env[ENV_SESSION_OPTIONS_KEY][:id].nil?
        env[ENV_SESSION_OPTIONS_KEY][:id] = sid
        env[SESSION_RECORD_KEY] = find_session(sid)
      else
        env[SESSION_RECORD_KEY] ||= find_session(sid)
      end
    end
  end
end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-21T23:13:49+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-04-21T23:13:53+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">29</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just incase anyone else has issues with flash values being lost after a redirect.

For me it was a problem with the render_component plugin; removing it fixed the issue.

Ta
Luke</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just incase anyone else has issues with flash values being lost
after a redirect.&lt;/p&gt;
&lt;p&gt;For me it was a problem with the render_component plugin;
removing it fixed the issue.&lt;/p&gt;
&lt;p&gt;Ta Luke&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-08T12:45:16+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-08T12:45:21+01:00</updated-at>
      <user-id type="integer">56430</user-id>
      <version type="integer">30</version>
      <user-name>Luke Pearce</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T17:03:00+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-17T17:03:06+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">31</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm not sure why this is stale. It's still broken so I've separated out the fail test case so you can see. 

This affects anyone try to use active record store that call reset_session.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure why this is stale. It's still broken so I've
separated out the fail test case so you can see.&lt;/p&gt;
&lt;p&gt;This affects anyone try to use active record store that call
reset_session.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T20:01:27+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-17T20:01:33+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">32</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Hey Josh,

Here is the fix plus the test case.

I think Dominique Brezinski kinda summed it up but to recap the only thing that gets reset in action controller is this:

@@@ ruby
  @env['rack.session.options'].delete(:id)
@@@

And the active record session store is not checking to see if that has been cleared out or not. 

So when session_store is trying to set the new data it sets the data on the existing session record instead of the creating a new session record for the new sid(session id).

Let me know if that make sense.
Matt</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Josh,&lt;/p&gt;
&lt;p&gt;Here is the fix plus the test case.&lt;/p&gt;
&lt;p&gt;I think Dominique Brezinski kinda summed it up but to recap the
only thing that gets reset in action controller is this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  @env['rack.session.options'].delete(:id)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And the active record session store is not checking to see if
that has been cleared out or not.&lt;/p&gt;
&lt;p&gt;So when session_store is trying to set the new data it sets the
data on the existing session record instead of the creating a new
session record for the new sid(session id).&lt;/p&gt;
&lt;p&gt;Let me know if that make sense.&lt;br&gt;
Matt&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T20:32:11+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-17T20:32:18+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">33</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [e30016c29e4ec58352a15511afa12f0fbbd03a8c]) Fix reset_session with ActiveRecord store [#2200 state:resolved]
http://github.com/rails/rails/commit/e30016c29e4ec58352a15511afa12f0fbbd03a8c</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/e30016c29e4ec58352a15511afa12f0fbbd03a8c&quot;
title=
&quot;Changeset [e30016c29e4ec58352a15511afa12f0fbbd03a8c]&quot;&gt;[e30016c29e4ec58352a15511afa12f0fbbd03a8c]&lt;/a&gt;)
Fix reset_session with ActiveRecord store [&lt;a href=
&quot;/projects/8994/tickets/2200&quot; title=&quot;Ticket #2200&quot;&gt;#2200&lt;/a&gt;
state:resolved] &lt;a href=
&quot;http://github.com/rails/rails/commit/e30016c29e4ec58352a15511afa12f0fbbd03a8c&quot;&gt;
http://github.com/rails/rails/commit/e30016c29e4ec58352a15511afa12f...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T20:44:36+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-17T20:44:38+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">34</version>
      <user-name>Repository</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>(from [01d7acd11d631d980497870aad1af42a0c66115c]) Fix reset_session with ActiveRecord store [#2200 state:resolved]
http://github.com/rails/rails/commit/01d7acd11d631d980497870aad1af42a0c66115c</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/01d7acd11d631d980497870aad1af42a0c66115c&quot;
title=
&quot;Changeset [01d7acd11d631d980497870aad1af42a0c66115c]&quot;&gt;[01d7acd11d631d980497870aad1af42a0c66115c]&lt;/a&gt;)
Fix reset_session with ActiveRecord store [&lt;a href=
&quot;/projects/8994/tickets/2200&quot; title=&quot;Ticket #2200&quot;&gt;#2200&lt;/a&gt;
state:resolved] &lt;a href=
&quot;http://github.com/rails/rails/commit/01d7acd11d631d980497870aad1af42a0c66115c&quot;&gt;
http://github.com/rails/rails/commit/01d7acd11d631d980497870aad1af4...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T20:44:38+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-17T20:44:40+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">35</version>
      <user-name>Repository</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Thanks dude!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks dude!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-17T20:51:18+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-17T20:51:22+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">36</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Is it me or is the behavior still really broken?

reset_session should create a new session object with a new session_id and pass that to the user.
The reason you want to do this, is because it protects people who are logging in from session attacks.

If people log in you give them a shiny new session id with their login credentials.
At the moment 2.3. reset_session just cleans out the data in the session object.
This is really useless, because you need the ID to change in order to prevent session hacking.

If you want to remove session data, session.clear will do that for you. reset_session should wipe, create a new id and then send that to the user.

The submitted patch does not address or fix any of the above issues. Reset_session is still really broken and this could lead to unsafe rails applications.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Is it me or is the behavior still really broken?&lt;/p&gt;
&lt;p&gt;reset_session should create a new session object with a new
session_id and pass that to the user.&lt;br&gt;
The reason you want to do this, is because it protects people who
are logging in from session attacks.&lt;/p&gt;
&lt;p&gt;If people log in you give them a shiny new session id with their
login credentials.&lt;br&gt;
At the moment 2.3. reset_session just cleans out the data in the
session object.&lt;br&gt;
This is really useless, because you need the ID to change in order
to prevent session hacking.&lt;/p&gt;
&lt;p&gt;If you want to remove session data, session.clear will do that
for you. reset_session should wipe, create a new id and then send
that to the user.&lt;/p&gt;
&lt;p&gt;The submitted patch does not address or fix any of the above
issues. Reset_session is still really broken and this could lead to
unsafe rails applications.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-19T15:05:51+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-19T15:05:56+01:00</updated-at>
      <user-id type="integer">5639</user-id>
      <version type="integer">37</version>
      <user-name>Bart ten Brinke</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Yeah I was thinking in abstract_store.rb in the call method on line 152 that it would generate a new sid since resest_session set the option[:id] to nil. But I don't think it is.

@@@ ruby
sid = options[:id] || generate_sid

unless set_session(env, sid, session_data.to_hash)
  return response
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah I was thinking in abstract_store.rb in the call method on
line 152 that it would generate a new sid since resest_session set
the option[:id] to nil. But I don't think it is.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;sid = options[:id] || generate_sid

unless set_session(env, sid, session_data.to_hash)
  return response
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-19T18:25:44+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-05-19T18:25:48+01:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">38</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I agree with Bart and Heidmo. If the desired behavior of reset_session is this:

1. Clear the current session
2. Assign a new empty session to the request
3. Provide a new session ID immediately

Then it is still broken in 2.3.4.

I'm using ActiveRecord::SessionStore. I need the old behavior because I use the session ID for things other than storing a session. In 2.3.4, after a reset_session, the session ID is an empty string.

Here's what I did to get around it:

First, a quick monkey patch into ActionController::Session::AbstractStore::SessionHash

    module ActionController
      module Session
        class AbstractStore
          class SessionHash
            def invalidate!
              @loaded = false
              replace({})
            end
          end
        end
      end
    end

Then in places where I need a session ID to be available after a reset_session, I use this instead:

    def destroy_session
      request.env[&quot;HTTP_COOKIE&quot;] = nil
      request.env[&quot;QUERY_STRING&quot;] = nil
      request.env[&quot;rack.input&quot;] = nil
      request.env[&quot;rack.session.record&quot;] = nil
      request.env['rack.session'].invalidate!
    end

Why this works...

If you were to do this from an action:

    puts session.class
    reset_session
    puts session.class

You'd see that before the reset_session the class is SessionHash. Afterwards, it's a regular unadorned Hash. It has none of the session loading behaviors. I'm not even sure that values placed in it will ever make it to the session store. I didn't experiment with the plain hash after I realized that it wasn't going to do what I wanted.

It's easy to see why, in ActionController:Request:

    def reset_session
      @env['rack.session.options'].delete(:id)
      @env['rack.session'] = {}
    end

So how to get a session to load? The SessionHash object is created in ActionController::Session::AbstractStore.call, but doesn't do anything until it's used. Then the overloaded [] and []= functions on SessionHash do &quot;load! unless @loaded&quot;. After some twists and turns, load! will arrive at your session store class's get_session method, which is responsible for creating a new session store object and session ID if it doesn't exist.

The trick is to be able to trigger that behavior again, so we add an invalidate! function SessionHash which &quot;unloads&quot; it. We also have to make sure that the next time the session is accessed it will still be a SessionHash object, so we avoid the broken reset_session and do it ourselves.

The destroy_session function is probably overkill, but I wanted to make sure that any path by which a session ID could creep in was nullified. That means dropping the GET, POST, and any cookies that might have come in. Also, ActiveRecord::SessionStore leaves a database object in the env so we need to remove that as well. Finally, we call the new invalidate! method on the old SessionHash.

After that, the next time the session is accessed, a load! will occur, which will result in a fresh session being created in the chosen session store.

(First post to lighthouse, I hope I formatted everything properly.)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree with Bart and Heidmo. If the desired behavior of
reset_session is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clear the current session&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Assign a new empty session to the request&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Provide a new session ID immediately&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then it is still broken in 2.3.4.&lt;/p&gt;
&lt;p&gt;I'm using ActiveRecord::SessionStore. I need the old behavior
because I use the session ID for things other than storing a
session. In 2.3.4, after a reset_session, the session ID is an
empty string.&lt;/p&gt;
&lt;p&gt;Here's what I did to get around it:&lt;/p&gt;
&lt;p&gt;First, a quick monkey patch into
ActionController::Session::AbstractStore::SessionHash&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;module ActionController
  module Session
    class AbstractStore
      class SessionHash
        def invalidate!
          @loaded = false
          replace({})
        end
      end
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then in places where I need a session ID to be available after a
reset_session, I use this instead:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def destroy_session
  request.env[&quot;HTTP_COOKIE&quot;] = nil
  request.env[&quot;QUERY_STRING&quot;] = nil
  request.env[&quot;rack.input&quot;] = nil
  request.env[&quot;rack.session.record&quot;] = nil
  request.env['rack.session'].invalidate!
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why this works...&lt;/p&gt;
&lt;p&gt;If you were to do this from an action:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;puts session.class
reset_session
puts session.class&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You'd see that before the reset_session the class is
SessionHash. Afterwards, it's a regular unadorned Hash. It has none
of the session loading behaviors. I'm not even sure that values
placed in it will ever make it to the session store. I didn't
experiment with the plain hash after I realized that it wasn't
going to do what I wanted.&lt;/p&gt;
&lt;p&gt;It's easy to see why, in ActionController:Request:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def reset_session
  @env['rack.session.options'].delete(:id)
  @env['rack.session'] = {}
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So how to get a session to load? The SessionHash object is
created in ActionController::Session::AbstractStore.call, but
doesn't do anything until it's used. Then the overloaded [] and []=
functions on SessionHash do &quot;load! unless @loaded&quot;. After some
twists and turns, load! will arrive at your session store class's
get_session method, which is responsible for creating a new session
store object and session ID if it doesn't exist.&lt;/p&gt;
&lt;p&gt;The trick is to be able to trigger that behavior again, so we
add an invalidate! function SessionHash which &quot;unloads&quot; it. We also
have to make sure that the next time the session is accessed it
will still be a SessionHash object, so we avoid the broken
reset_session and do it ourselves.&lt;/p&gt;
&lt;p&gt;The destroy_session function is probably overkill, but I wanted
to make sure that any path by which a session ID could creep in was
nullified. That means dropping the GET, POST, and any cookies that
might have come in. Also, ActiveRecord::SessionStore leaves a
database object in the env so we need to remove that as well.
Finally, we call the new invalidate! method on the old
SessionHash.&lt;/p&gt;
&lt;p&gt;After that, the next time the session is accessed, a load! will
occur, which will result in a fresh session being created in the
chosen session store.&lt;/p&gt;
&lt;p&gt;(First post to lighthouse, I hope I formatted everything
properly.)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-29T15:15:52+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-10-29T15:15:59+00:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">39</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>What about if in the get_session_model we did this instead:

@@@ ruby
  def get_session_model(env, sid)
    # check to see if reset session was called
    if env[ENV_SESSION_OPTIONS_KEY][:id].nil?
      # clear out the data from previous session to prevent hijacking
      if (record = env[SESSION_RECORD_KEY])
        record.destroy
      end
      # pass in the new sid generated from the session store
      env[ENV_SESSION_OPTIONS_KEY][:id] = sid
      env[SESSION_RECORD_KEY] = find_session(sid)
    else
      env[SESSION_RECORD_KEY] ||= find_session(sid)
    end
  end
@@@

This code no longer keeps the session and it's data in the database once it has been reset.</body>
      <body-html>&lt;div&gt;&lt;p&gt;What about if in the get_session_model we did this instead:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def get_session_model(env, sid)
    # check to see if reset session was called
    if env[ENV_SESSION_OPTIONS_KEY][:id].nil?
      # clear out the data from previous session to prevent hijacking
      if (record = env[SESSION_RECORD_KEY])
        record.destroy
      end
      # pass in the new sid generated from the session store
      env[ENV_SESSION_OPTIONS_KEY][:id] = sid
      env[SESSION_RECORD_KEY] = find_session(sid)
    else
      env[SESSION_RECORD_KEY] ||= find_session(sid)
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This code no longer keeps the session and it's data in the
database once it has been reset.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-29T17:26:38+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-10-29T17:26:44+00:00</updated-at>
      <user-id type="integer">41138</user-id>
      <version type="integer">40</version>
      <user-name>heidmo</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@heidmo - I haven't tested your proposed method, but I don't think it will meet requirement #3. The real problem is that reset_session disconnects the session (as accessed from ActionController descendants) from any mechanism that could potentially generate a new session ID and session store object.

Another idea I had that won't work: making ActionController::Request.reset_session put an empty SessionHash object in the rack env won't help, because the next access will cause a load!, which will feed the rack env to the session store's get_session, which will result in the old session being recycled.

We need something that can invalidate the SessionHash without removing it from the rack env, while also informing any session store classes that they should not load the session ID or session objects based on anything found in the rack env.

I do like the idea of doing a destroy in ActiveRecord::SessionStore - cuts down on stale database objects lying around waiting to be cleaned up. But anyone with a cleanup script in place won't notice anyway. My version of destroy_session includes some additional logic aimed at removing some objects from the database based on the session ID, but that isn't required.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@heidmo - I haven't tested your proposed method, but I don't
think it will meet requirement &lt;a href=&quot;/projects/8994/tickets/3&quot;
title=&quot;Ticket #3&quot;&gt;#3&lt;/a&gt;. The real problem is that reset_session
disconnects the session (as accessed from ActionController
descendants) from any mechanism that could potentially generate a
new session ID and session store object.&lt;/p&gt;
&lt;p&gt;Another idea I had that won't work: making
ActionController::Request.reset_session put an empty SessionHash
object in the rack env won't help, because the next access will
cause a load!, which will feed the rack env to the session store's
get_session, which will result in the old session being
recycled.&lt;/p&gt;
&lt;p&gt;We need something that can invalidate the SessionHash without
removing it from the rack env, while also informing any session
store classes that they should not load the session ID or session
objects based on anything found in the rack env.&lt;/p&gt;
&lt;p&gt;I do like the idea of doing a destroy in
ActiveRecord::SessionStore - cuts down on stale database objects
lying around waiting to be cleaned up. But anyone with a cleanup
script in place won't notice anyway. My version of destroy_session
includes some additional logic aimed at removing some objects from
the database based on the session ID, but that isn't required.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-29T18:13:44+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-10-29T18:13:52+00:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">41</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I've added a patch that tests the reset_session behaviour to make sure this won't happen in the future.

It also shows that whatever is in the current 2-3-stable actually works, so that this ticket can be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've added a patch that tests the reset_session behaviour to
make sure this won't happen in the future.&lt;/p&gt;
&lt;p&gt;It also shows that whatever is in the current 2-3-stable
actually works, so that this ticket can be closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-02T19:41:49+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-02T19:41:54+00:00</updated-at>
      <user-id type="integer">5639</user-id>
      <version type="integer">42</version>
      <user-name>Bart ten Brinke</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>@bart - That will test that reset_session supplies a new session ID when a new request comes through. The old (desired) behavior is that a new session ID should be available immediately after reset_session is called, within the same request.

If you do this:

    puts request.session_options[:id]
    reset_session
    puts request.session_options[:id]

What is expected: The first puts gives the old session ID. The second gives a fresh session ID representing an empty SessionHash object that is ready to accept new values.

What you actually get: The first puts gives the old session ID. The second gives an empty string. The session is no longer a SessionHash object. It has been replaced by a Hash object.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@bart - That will test that reset_session supplies a new session
ID when a new request comes through. The old (desired) behavior is
that a new session ID should be available immediately after
reset_session is called, within the same request.&lt;/p&gt;
&lt;p&gt;If you do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;puts request.session_options[:id]
reset_session
puts request.session_options[:id]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;What is expected: The first puts gives the old session ID. The
second gives a fresh session ID representing an empty SessionHash
object that is ready to accept new values.&lt;/p&gt;
&lt;p&gt;What you actually get: The first puts gives the old session ID.
The second gives an empty string. The session is no longer a
SessionHash object. It has been replaced by a Hash object.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-02T20:11:15+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-02T20:11:27+00:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">43</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Okay, no closing yet, but that patch should be applied anyway.
Can't we just generate a new ID for the session at Request.reset_session?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Okay, no closing yet, but that patch should be applied
anyway.&lt;br&gt;
Can't we just generate a new ID for the session at
Request.reset_session?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-02T20:52:09+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-02T20:52:14+00:00</updated-at>
      <user-id type="integer">5639</user-id>
      <version type="integer">44</version>
      <user-name>Bart ten Brinke</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>class AbstractStore
  def regenerate_sid 
    set_session(@env, generate_sid, session_data.to_hash)
  end
end

?</body>
      <body-html>&lt;div&gt;&lt;p&gt;class AbstractStore&lt;br&gt;
def regenerate_sid&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;set_session(@env, generate_sid, session_data.to_hash)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-02T21:14:11+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-02T21:14:15+00:00</updated-at>
      <user-id type="integer">5639</user-id>
      <version type="integer">45</version>
      <user-name>Bart ten Brinke</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>There's no simple way to fix this. My method only works for me because I don't care about the GET, POST, or cookies in the methods where I need reset_session. That might not be the case for someone else's app. We should preserve that information.

Given the presence of my invalidate! method on SessionHash, here's a reset_session that uses it:

    def reset_session
      @env['rack.session.options'].delete(:id)
      @env['rack.session'].invalidate!
      @env['rack.session.options'][:requested_session_invalidated] = true
    end

With this, each session store class needs to be modified to check for that invalid flag on the env in their get_session methods. If the flag is set, don't try to load the session from the env, just make a new one. AR's session store will need to make sure to delete the model object it stashes in the env. Heidmo's method might take care of that.</body>
      <body-html>&lt;div&gt;&lt;p&gt;There's no simple way to fix this. My method only works for me
because I don't care about the GET, POST, or cookies in the methods
where I need reset_session. That might not be the case for someone
else's app. We should preserve that information.&lt;/p&gt;
&lt;p&gt;Given the presence of my invalidate! method on SessionHash,
here's a reset_session that uses it:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def reset_session
  @env['rack.session.options'].delete(:id)
  @env['rack.session'].invalidate!
  @env['rack.session.options'][:requested_session_invalidated] = true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;With this, each session store class needs to be modified to
check for that invalid flag on the env in their get_session
methods. If the flag is set, don't try to load the session from the
env, just make a new one. AR's session store will need to make sure
to delete the model object it stashes in the env. Heidmo's method
might take care of that.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-02T22:11:02+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-02T22:11:08+00:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">46</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Re: set_session(@env, generate_sid, session_data.to_hash)

Won't work. Example, for AR store: that will call get_session_model with a sid that doesn't exist, meaning you'll get back a new AR object with an empty data hash and a new sid. None of that stuff will make it into the env though, so you'll actually still have the old session.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Re: set_session(@env, generate_sid, session_data.to_hash)&lt;/p&gt;
&lt;p&gt;Won't work. Example, for AR store: that will call
get_session_model with a sid that doesn't exist, meaning you'll get
back a new AR object with an empty data hash and a new sid. None of
that stuff will make it into the env though, so you'll actually
still have the old session.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-02T22:20:49+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-02T22:20:53+00:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">47</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>So why don't we implement that? Because it will throw a method missing on current active record stores that not implement that? You could catch that in the base class, throw a warning and just do a clear_session as a fallback.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So why don't we implement that? Because it will throw a method
missing on current active record stores that not implement that?
You could catch that in the base class, throw a warning and just do
a clear_session as a fallback.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-03T16:57:52+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-03T16:57:56+00:00</updated-at>
      <user-id type="integer">5639</user-id>
      <version type="integer">48</version>
      <user-name>Bart ten Brinke</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>I haven't tried this yet, but is this basically what you're suggesting?

    def reset_session
      @env['rack.session.options'].delete(:id)
      empty_session = {}
      session_store.set_session(@env, generate_sid, empty_session)
      @env['rack.session'].replace(empty_session)
    end

generate_sid is private to AbstractStore, but otherwise that might work.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I haven't tried this yet, but is this basically what you're
suggesting?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def reset_session
  @env['rack.session.options'].delete(:id)
  empty_session = {}
  session_store.set_session(@env, generate_sid, empty_session)
  @env['rack.session'].replace(empty_session)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;generate_sid is private to AbstractStore, but otherwise that
might work.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-03T18:29:41+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-03T18:29:49+00:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">49</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Yeah, that was what the regenerate_sid was for. Is there a test somewhere in this thread that actually fails because of this behaviour?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah, that was what the regenerate_sid was for. Is there a test
somewhere in this thread that actually fails because of this
behaviour?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-03T19:16:41+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-03T19:16:44+00:00</updated-at>
      <user-id type="integer">5639</user-id>
      <version type="integer">50</version>
      <user-name>Bart ten Brinke</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Here are some new tests. Cookie store and memcache store both pass. I can't find any tests for active record store.

Should this be a new ticket, since this one is about cookie store and the problem is isolated to active record store?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here are some new tests. Cookie store and memcache store both
pass. I can't find any tests for active record store.&lt;/p&gt;
&lt;p&gt;Should this be a new ticket, since this one is about cookie
store and the problem is isolated to active record store?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-03T22:09:24+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-11-03T22:09:31+00:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">51</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17393</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Warning: there's still a problem.  I'm using Rails 2.3.5 with Ruby 1.8.6, Phusion Passenger 2.2.7, and the default (cookie) session store; the problem also exists with Rails 2.3.2 and Phusion Passenger 2.2.2.  One of my controllers contains the actions

        def sign_in
          begin
            user = User.authenticate params[:email_address], params[:password]
            session[:user_id] = user.id
            ...
          rescue
            ...
          end
        end

and

        def sign_out
          reset_session
          ...
        end

Suppose a user first signs in, then signs out, and then tries to sign in again but mistypes his email address or password.  In the second run of sign_in, user is nil, so user.id throws an exception, and the rescue clause arranges to show the user an error message.  So far, so good.  But it turns out the user is effectively signed in again; he can load private pages, which are guarded by a before-filter requiring a non-nil session[:user_id].  Somehow, the old session has risen from the dead.  Not good at all, because of course there might be two users, a legitimate one who signs out and walks away and an illegitimate one who walks up and fools around.

The problem disappears if &quot;raise unless user&quot; is inserted before &quot;session[:user_id] = user.id&quot; in sign_in.

I became aware of this problem and this Lighthouse thread just this evening, and I don't have time to become familiar with the session handling machinery to the extent I suspect would be necessary to solve the problem.  I generally don't comment on problems I'm not prepared to solve.  But this one poses such a security risk that it seems appropriate to call attention to it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Warning: there's still a problem. I'm using Rails 2.3.5 with
Ruby 1.8.6, Phusion Passenger 2.2.7, and the default (cookie)
session store; the problem also exists with Rails 2.3.2 and Phusion
Passenger 2.2.2. One of my controllers contains the actions&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    def sign_in
      begin
        user = User.authenticate params[:email_address], params[:password]
        session[:user_id] = user.id
        ...
      rescue
        ...
      end
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    def sign_out
      reset_session
      ...
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Suppose a user first signs in, then signs out, and then tries to
sign in again but mistypes his email address or password. In the
second run of sign_in, user is nil, so user.id throws an exception,
and the rescue clause arranges to show the user an error message.
So far, so good. But it turns out the user is effectively signed in
again; he can load private pages, which are guarded by a
before-filter requiring a non-nil session[:user_id]. Somehow, the
old session has risen from the dead. Not good at all, because of
course there might be two users, a legitimate one who signs out and
walks away and an illegitimate one who walks up and fools
around.&lt;/p&gt;
&lt;p&gt;The problem disappears if &quot;raise unless user&quot; is inserted before
&quot;session[:user_id] = user.id&quot; in sign_in.&lt;/p&gt;
&lt;p&gt;I became aware of this problem and this Lighthouse thread just
this evening, and I don't have time to become familiar with the
session handling machinery to the extent I suspect would be
necessary to solve the problem. I generally don't comment on
problems I'm not prepared to solve. But this one poses such a
security risk that it seems appropriate to call attention to
it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-01T05:28:08+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 activerecord-store cookie-store patch reset_session session
:assigned_user: 424
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-12-01T05:28:13+00:00</updated-at>
      <user-id type="integer">78170</user-id>
      <version type="integer">52</version>
      <user-name>Ralph Haygood</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Repository</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>The preceding post apparently changed the &quot;assigned user&quot; and &quot;tag&quot; attributes of this thread, neither of which I had any intention of doing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The preceding post apparently changed the &quot;assigned user&quot; and
&quot;tag&quot; attributes of this thread, neither of which I had any
intention of doing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-01T05:34:52+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:assigned_user: 17393
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2009-12-01T05:34:56+00:00</updated-at>
      <user-id type="integer">78170</user-id>
      <version type="integer">53</version>
      <user-name>Ralph Haygood</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>We are also seeing this in 2.3.5

In action A we add a variable to the session then redirect_to action B, the session no longer has the variable.

Works for us in 2.3.4

is this deliberate or are our expectations incorrect?

This issue seems to be marked as resolved, can someone open this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;We are also seeing this in 2.3.5&lt;/p&gt;
&lt;p&gt;In action A we add a variable to the session then redirect_to
action B, the session no longer has the variable.&lt;/p&gt;
&lt;p&gt;Works for us in 2.3.4&lt;/p&gt;
&lt;p&gt;is this deliberate or are our expectations incorrect?&lt;/p&gt;
&lt;p&gt;This issue seems to be marked as resolved, can someone open
this?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-13T23:43:46+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2010-01-13T23:43:53+00:00</updated-at>
      <user-id type="integer">82573</user-id>
      <version type="integer">54</version>
      <user-name>jimflip</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>I also have this problem with reset_session:

in a before_filter i'm going into debugger mode:

@@@ ruby
(rdb:4) session
{:expire=&gt;Sun, 28 Feb 2010 23:13:10 UTC +00:00, :ip_address=&gt;&quot;127.0.0.1&quot;}
(rdb:4) session.class
ActionController::Session::AbstractStore::SessionHash
(rdb:4) session.session_id
&quot;d20b656744ad700d369e7fd661980d7f&quot;
(rdb:4) reset_session
nil
(rdb:4) session.class
Hash
(rdb:4) session
{}
(rdb:4) session.class
Hash
(rdb:4) session.session_id
NoMethodError Exception: undefined method `session_id' for {}:Hash
@@@

so why is it a normal hash afterwards? Maybe you told the anwer before but i'm not sure if i should apply any type of patch or if there is another/better solution.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I also have this problem with reset_session:&lt;/p&gt;
&lt;p&gt;in a before_filter i'm going into debugger mode:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;(rdb:4) session
{:expire=&amp;gt;Sun, 28 Feb 2010 23:13:10 UTC +00:00, :ip_address=&amp;gt;&quot;127.0.0.1&quot;}
(rdb:4) session.class
ActionController::Session::AbstractStore::SessionHash
(rdb:4) session.session_id
&quot;d20b656744ad700d369e7fd661980d7f&quot;
(rdb:4) reset_session
nil
(rdb:4) session.class
Hash
(rdb:4) session
{}
(rdb:4) session.class
Hash
(rdb:4) session.session_id
NoMethodError Exception: undefined method `session_id' for {}:Hash&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;so why is it a normal hash afterwards? Maybe you told the anwer
before but i'm not sure if i should apply any type of patch or if
there is another/better solution.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-02-28T23:22:55+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2010-02-28T23:22:59+00:00</updated-at>
      <user-id type="integer">88338</user-id>
      <version type="integer">55</version>
      <user-name>Simon</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>I noticed this is an old bug, but we just upgraded our Rails version to 2.3.5 using Ruby 1.8.7 and I just came across this error. We are using the ActiveRecord store for the session.

Is this going to be solved in a future version, or?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I noticed this is an old bug, but we just upgraded our Rails
version to 2.3.5 using Ruby 1.8.7 and I just came across this
error. We are using the ActiveRecord store for the session.&lt;/p&gt;
&lt;p&gt;Is this going to be solved in a future version, or?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-09T13:15:38+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2010-09-09T13:15:47+01:00</updated-at>
      <user-id type="integer">110977</user-id>
      <version type="integer">56</version>
      <user-name>Laura B&#226;rl&#259;deanu</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>This ticket was originally about a problem with cookie store which is fixed now. Since the ticket is marked &quot;resolved&quot; I'm not sure if anyone else will see your message.

There is still a problem with AR store. If you check my other responses in this ticket you can see how I worked around it in my own app.

Good luck.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This ticket was originally about a problem with cookie store
which is fixed now. Since the ticket is marked &quot;resolved&quot; I'm not
sure if anyone else will see your message.&lt;/p&gt;
&lt;p&gt;There is still a problem with AR store. If you check my other
responses in this ticket you can see how I worked around it in my
own app.&lt;/p&gt;
&lt;p&gt;Good luck.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-09T16:06:09+01:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2010-09-09T16:06:14+01:00</updated-at>
      <user-id type="integer">74810</user-id>
      <version type="integer">57</version>
      <user-name>Michael Kinney</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were inspired by   baseball glove design and they created discount handbags with similar qualities.&lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come along until years later. The original handbag collection   had twelve designs, and they were made from supple, tan, top-quality leathers,   and showed the same excellent craftsmanship and stitching that we still expect   today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought new looks to   Coach bags. She used many new fabrics and organic materials like jersey and   wool. She created the brass hardware that is symbolic of &lt;strong&gt;&lt;a href=&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;. When   Lew Frankfort came aboard in 1979, he brought Coach to the next level, and they   became a name known the world over. Affordable luxury was not a concept that   many people knew, but now they would. Soon after Frankfort joined Coach, they   came out with a catalog, and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought its brand   relevance and strength. They designed watches starting in 1988, and also   expanded their company to Tokyo. Japan still counts among the leading purchasers   of &lt;strong&gt;&lt;a href=&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach heels. The manufacture of Coach shoes began in the mid   90's, and Reed Krakoff, the lead designer, loaned his talents to help put Coach   heels and &lt;a href=&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as their   handbags, but they are well worth the money invested in their purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that don't have   this height. &lt;strong&gt;&lt;a href=&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to style and   pizzazz. Coach platforms come in many styles, from gold loafers to slingbacks   with open toes. You may be able to find Coach shoes at discount prices online,   but be sure that you are buying genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous, Coach   shoes and &lt;a href=&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will make you   feel sporty, too. When selecting pumps or sandals to wear, you'll be happy to   count on the long-standing quality and service of the Coach company. They have   many styles to choose from, including chic and glamorous Coach boots and Coach   heels. Whether you are looking for sports shoes like Coach sneakers or sexy   shoes like Coach boots, the Coach name will never let you down.&lt;/p&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were
inspired by baseball glove design and they created discount
handbags with similar qualities.&lt;strong&gt;&lt;a href=
&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come
along until years later. The original handbag collection had twelve
designs, and they were made from supple, tan, top-quality leathers,
and showed the same excellent craftsmanship and stitching that we
still expect today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought
new looks to Coach bags. She used many new fabrics and organic
materials like jersey and wool. She created the brass hardware that
is symbolic of &lt;strong&gt;&lt;a href=
&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;.
When Lew Frankfort came aboard in 1979, he brought Coach to the
next level, and they became a name known the world over. Affordable
luxury was not a concept that many people knew, but now they would.
Soon after Frankfort joined Coach, they came out with a catalog,
and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought
its brand relevance and strength. They designed watches starting in
1988, and also expanded their company to Tokyo. Japan still counts
among the leading purchasers of &lt;strong&gt;&lt;a href=
&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach
heels. The manufacture of Coach shoes began in the mid 90's, and
Reed Krakoff, the lead designer, loaned his talents to help put
Coach heels and &lt;a href=
&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags
outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as
their handbags, but they are well worth the money invested in their
purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that
don't have this height. &lt;strong&gt;&lt;a href=
&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans
outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to
style and pizzazz. Coach platforms come in many styles, from gold
loafers to slingbacks with open toes. You may be able to find Coach
shoes at discount prices online, but be sure that you are buying
genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=
&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler
jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous,
Coach shoes and &lt;a href=
&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel
purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will
make you feel sporty, too. When selecting pumps or sandals to wear,
you'll be happy to count on the long-standing quality and service
of the Coach company. They have many styles to choose from,
including chic and glamorous Coach boots and Coach heels. Whether
you are looking for sports shoes like Coach sneakers or sexy shoes
like Coach boots, the Coach name will never let you down.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T01:18:04+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3.2 activerecord-store cookie-store patch reset_session session</tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2010-11-08T23:12:07+00:00</updated-at>
      <user-id type="integer">123546</user-id>
      <version type="integer">58</version>
      <user-name>jim123456</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">5</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T08:23:30+00:00</created-at>
      <creator-id type="integer">32652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 activerecord-store cookie-store patch reset_session session
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2200</number>
      <permalink>session-support-broken</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>reset_session broken</title>
      <updated-at type="datetime">2010-11-08T08:23:37+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">60</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>Kyle Maxwell</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2200</url>
      <milestone-title>2.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>18321c01865266c203e64df0a8e5234faecaf0b9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-10T22:28:34+01:00</created-at>
      <filename>active_record_store_reset_session_fix.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">110396</id>
      <size type="integer">1823</size>
      <uploader-id type="integer">41138</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/110396/active_record_store_reset_session_fix.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>7bbfe028f754d49c13a79f8e745b25cbc87e42a9</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-17T20:01:27+01:00</created-at>
      <filename>failing_test_case.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">123396</id>
      <size type="integer">859</size>
      <uploader-id type="integer">41138</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/123396/failing_test_case.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>57a5b0c68b04f41d6f257302219bab09bdbaac6b</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-17T20:32:11+01:00</created-at>
      <filename>fix.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">123398</id>
      <size type="integer">1823</size>
      <uploader-id type="integer">41138</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/123398/fix.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>5c15d691993848e45fdd96f968f25c04217f0362</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-02T19:41:49+00:00</created-at>
      <filename>reset_session_tests.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">311107</id>
      <size type="integer">2190</size>
      <uploader-id type="integer">5639</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/311107/reset_session_tests.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>8f077748c56093f6a0a87ae17adae2b6dc24eb48</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-03T22:09:24+00:00</created-at>
      <filename>session_store_tests.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">311987</id>
      <size type="integer">3804</size>
      <uploader-id type="integer">74810</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/311987/session_store_tests.patch</url>
    </attachment>
  </attachments>
</ticket>
