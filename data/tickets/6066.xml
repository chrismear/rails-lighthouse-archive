<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-25T17:08:30+00:00</created-at>
  <creator-id type="integer">95282</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6066</number>
  <permalink>finder-conditions-and-includes-are-still-ignored-on-has_many-through</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>:include has_many_through ignored rails</tag>
  <title>Finder conditions and includes are (still) ignored on has_many through </title>
  <updated-at type="datetime">2010-12-12T02:12:35+00:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">4</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>GreenPlastik</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6066</url>
  <priority-name>Low</priority-name>
  <original-body>Ruby 1.8.7-p302
Rails 3.0.3

Given two models Book and Person, a book can have many people as authors or editors. And a person can be an author and/or editor for many books. So you should be able to do @book.people, @book.authors, @book.editors, as well as @person.books, @author.books, and @editor.books (obviously only after setting up those instance variables first).

Similarly, the code below should allow you to do @book.authors.build and @book.editors.build.

Here are the models:

## book.rb ##
@@@ 
class Book &lt; ActiveRecord::Base
  has_many :book_people, :dependent =&gt; :destroy
  has_many :people, :through =&gt; :book_people, :uniq =&gt; true

  has_many :authors, :through =&gt; :book_people, :source =&gt; :person, :include =&gt; :book_people, :conditions =&gt; {'book_people.person_type' =&gt;  'Author' } do
    def &lt;&lt;(author) 
      BookPeople.send(:with_scope, :create =&gt; { :person_type =&gt; &quot;Author&quot; } ) { self.concat author } 
    end 
  end

  has_many :editors, :through =&gt; :book_people, :source =&gt; :person, :include =&gt; :book_people, :conditions =&gt; {'book_people.person_type' =&gt;  'Editor' } do
    def &lt;&lt;(editor) 
      BookPeople.send(:with_scope, :create =&gt; { :person_type =&gt; &quot;Editor&quot; } ) { self.concat editor } 
    end 
  end
end
@@@

## person.rb ##
@@@ 
class Person &lt; ActiveRecord::Base
  has_many :book_people, :dependent =&gt; :destroy
  has_many :books, :through =&gt; :book_people
end
@@@

## book_person.rb ##
@@@ 
class BookPerson &lt; ActiveRecord::Base
  belongs_to :person
  belongs_to :book

  belongs_to :author, :class_name =&gt; &quot;Person&quot;, :foreign_key =&gt; :person_id
  belongs_to :editor, :class_name =&gt; &quot;Person&quot;, :foreign_key =&gt; :person_id
end
@@@

Going to edit a book to add or change the authors and editors for the book, leads to the following error:
@@@ 
SQLite3::SQLException: no such column: book_people.person_type: SELECT &quot;people&quot;.* FROM &quot;people&quot; WHERE (&quot;book_people&quot;.&quot;person_type&quot; = 'Author')
@@@

Obviously, running that query directly against the DB fails with the same error. It doesn't seem to know about the 'book_people' table and its column 'person_type'. 

It appears the ':include =&gt; :book_people' is being ignored. Furthermore, as the association is going through 'book_people' anyway, the include should be unnecessary. Removing it does not resolve the problem.

This issue is similar to the one marked as resolved in:
https://rails.lighthouseapp.com/projects/8994/tickets/1845-finder-methods-ignore-include-in-has_many-through</original-body>
  <latest-body>Ruby 1.8.7-p302
Rails 3.0.3

Given two models Book and Person, a book can have many people as authors or editors. And a person can be an author and/or editor for many books. So you should be able to do @book.people, @book.authors, @book.editors, as well as @person.books, @author.books, and @editor.books (obviously only after setting up those instance variables first).

Similarly, the code below should allow you to do @book.authors.build and @book.editors.build.

Here are the models:

## book.rb ##
@@@ 
class Book &lt; ActiveRecord::Base
  has_many :book_people, :dependent =&gt; :destroy
  has_many :people, :through =&gt; :book_people, :uniq =&gt; true

  has_many :authors, :through =&gt; :book_people, :source =&gt; :person, :include =&gt; :book_people, :conditions =&gt; {'book_people.person_type' =&gt;  'Author' } do
    def &lt;&lt;(author) 
      BookPeople.send(:with_scope, :create =&gt; { :person_type =&gt; &quot;Author&quot; } ) { self.concat author } 
    end 
  end

  has_many :editors, :through =&gt; :book_people, :source =&gt; :person, :include =&gt; :book_people, :conditions =&gt; {'book_people.person_type' =&gt;  'Editor' } do
    def &lt;&lt;(editor) 
      BookPeople.send(:with_scope, :create =&gt; { :person_type =&gt; &quot;Editor&quot; } ) { self.concat editor } 
    end 
  end
end
@@@

## person.rb ##
@@@ 
class Person &lt; ActiveRecord::Base
  has_many :book_people, :dependent =&gt; :destroy
  has_many :books, :through =&gt; :book_people
end
@@@

## book_person.rb ##
@@@ 
class BookPerson &lt; ActiveRecord::Base
  belongs_to :person
  belongs_to :book

  belongs_to :author, :class_name =&gt; &quot;Person&quot;, :foreign_key =&gt; :person_id
  belongs_to :editor, :class_name =&gt; &quot;Person&quot;, :foreign_key =&gt; :person_id
end
@@@

Going to edit a book to add or change the authors and editors for the book, leads to the following error:
@@@ 
SQLite3::SQLException: no such column: book_people.person_type: SELECT &quot;people&quot;.* FROM &quot;people&quot; WHERE (&quot;book_people&quot;.&quot;person_type&quot; = 'Author')
@@@

Obviously, running that query directly against the DB fails with the same error. It doesn't seem to know about the 'book_people' table and its column 'person_type'. 

It appears the ':include =&gt; :book_people' is being ignored. Furthermore, as the association is going through 'book_people' anyway, the include should be unnecessary. Removing it does not resolve the problem.

This issue is similar to the one marked as resolved in:
https://rails.lighthouseapp.com/projects/8994/tickets/1845-finder-methods-ignore-include-in-has_many-through</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Ruby 1.8.7-p302&lt;br&gt;
Rails 3.0.3&lt;/p&gt;
&lt;p&gt;Given two models Book and Person, a book can have many people as
authors or editors. And a person can be an author and/or editor for
many books. So you should be able to do @book.people,
@book.authors, @book.editors, as well as @person.books,
@author.books, and @editor.books (obviously only after setting up
those instance variables first).&lt;/p&gt;
&lt;p&gt;Similarly, the code below should allow you to do
@book.authors.build and @book.editors.build.&lt;/p&gt;
&lt;p&gt;Here are the models:&lt;/p&gt;
&lt;h2&gt;book.rb&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;class Book &amp;lt; ActiveRecord::Base
  has_many :book_people, :dependent =&amp;gt; :destroy
  has_many :people, :through =&amp;gt; :book_people, :uniq =&amp;gt; true

  has_many :authors, :through =&amp;gt; :book_people, :source =&amp;gt; :person, :include =&amp;gt; :book_people, :conditions =&amp;gt; {'book_people.person_type' =&amp;gt;  'Author' } do
    def &amp;lt;&amp;lt;(author) 
      BookPeople.send(:with_scope, :create =&amp;gt; { :person_type =&amp;gt; &quot;Author&quot; } ) { self.concat author } 
    end 
  end

  has_many :editors, :through =&amp;gt; :book_people, :source =&amp;gt; :person, :include =&amp;gt; :book_people, :conditions =&amp;gt; {'book_people.person_type' =&amp;gt;  'Editor' } do
    def &amp;lt;&amp;lt;(editor) 
      BookPeople.send(:with_scope, :create =&amp;gt; { :person_type =&amp;gt; &quot;Editor&quot; } ) { self.concat editor } 
    end 
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;person.rb&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;class Person &amp;lt; ActiveRecord::Base
  has_many :book_people, :dependent =&amp;gt; :destroy
  has_many :books, :through =&amp;gt; :book_people
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;book_person.rb&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;class BookPerson &amp;lt; ActiveRecord::Base
  belongs_to :person
  belongs_to :book

  belongs_to :author, :class_name =&amp;gt; &quot;Person&quot;, :foreign_key =&amp;gt; :person_id
  belongs_to :editor, :class_name =&amp;gt; &quot;Person&quot;, :foreign_key =&amp;gt; :person_id
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Going to edit a book to add or change the authors and editors
for the book, leads to the following error:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQLite3::SQLException: no such column: book_people.person_type: SELECT &quot;people&quot;.* FROM &quot;people&quot; WHERE (&quot;book_people&quot;.&quot;person_type&quot; = 'Author')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Obviously, running that query directly against the DB fails with
the same error. It doesn't seem to know about the 'book_people'
table and its column 'person_type'.&lt;/p&gt;
&lt;p&gt;It appears the ':include =&amp;gt; :book_people' is being ignored.
Furthermore, as the association is going through 'book_people'
anyway, the include should be unnecessary. Removing it does not
resolve the problem.&lt;/p&gt;
&lt;p&gt;This issue is similar to the one marked as resolved in:&lt;br&gt;
&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/1845-finder-methods-ignore-include-in-has_many-through&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/1845-finder-m...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ruby 1.8.7-p302
Rails 3.0.3

Given two models Book and Person, a book can have many people as authors or editors. And a person can be an author and/or editor for many books. So you should be able to do @book.people, @book.authors, @book.editors, as well as @person.books, @author.books, and @editor.books (obviously only after setting up those instance variables first).

Similarly, the code below should allow you to do @book.authors.build and @book.editors.build.

Here are the models:

## book.rb ##
@@@ 
class Book &lt; ActiveRecord::Base
  has_many :book_people, :dependent =&gt; :destroy
  has_many :people, :through =&gt; :book_people, :uniq =&gt; true

  has_many :authors, :through =&gt; :book_people, :source =&gt; :person, :include =&gt; :book_people, :conditions =&gt; {'book_people.person_type' =&gt;  'Author' } do
    def &lt;&lt;(author) 
      BookPeople.send(:with_scope, :create =&gt; { :person_type =&gt; &quot;Author&quot; } ) { self.concat author } 
    end 
  end

  has_many :editors, :through =&gt; :book_people, :source =&gt; :person, :include =&gt; :book_people, :conditions =&gt; {'book_people.person_type' =&gt;  'Editor' } do
    def &lt;&lt;(editor) 
      BookPeople.send(:with_scope, :create =&gt; { :person_type =&gt; &quot;Editor&quot; } ) { self.concat editor } 
    end 
  end
end
@@@

## person.rb ##
@@@ 
class Person &lt; ActiveRecord::Base
  has_many :book_people, :dependent =&gt; :destroy
  has_many :books, :through =&gt; :book_people
end
@@@

## book_person.rb ##
@@@ 
class BookPerson &lt; ActiveRecord::Base
  belongs_to :person
  belongs_to :book

  belongs_to :author, :class_name =&gt; &quot;Person&quot;, :foreign_key =&gt; :person_id
  belongs_to :editor, :class_name =&gt; &quot;Person&quot;, :foreign_key =&gt; :person_id
end
@@@

Going to edit a book to add or change the authors and editors for the book, leads to the following error:
@@@ 
SQLite3::SQLException: no such column: book_people.person_type: SELECT &quot;people&quot;.* FROM &quot;people&quot; WHERE (&quot;book_people&quot;.&quot;person_type&quot; = 'Author')
@@@

Obviously, running that query directly against the DB fails with the same error. It doesn't seem to know about the 'book_people' table and its column 'person_type'. 

It appears the ':include =&gt; :book_people' is being ignored. Furthermore, as the association is going through 'book_people' anyway, the include should be unnecessary. Removing it does not resolve the problem.

This issue is similar to the one marked as resolved in:
https://rails.lighthouseapp.com/projects/8994/tickets/1845-finder-methods-ignore-include-in-has_many-through</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ruby 1.8.7-p302&lt;br&gt;
Rails 3.0.3&lt;/p&gt;
&lt;p&gt;Given two models Book and Person, a book can have many people as
authors or editors. And a person can be an author and/or editor for
many books. So you should be able to do @book.people,
@book.authors, @book.editors, as well as @person.books,
@author.books, and @editor.books (obviously only after setting up
those instance variables first).&lt;/p&gt;
&lt;p&gt;Similarly, the code below should allow you to do
@book.authors.build and @book.editors.build.&lt;/p&gt;
&lt;p&gt;Here are the models:&lt;/p&gt;
&lt;h2&gt;book.rb&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;class Book &amp;lt; ActiveRecord::Base
  has_many :book_people, :dependent =&amp;gt; :destroy
  has_many :people, :through =&amp;gt; :book_people, :uniq =&amp;gt; true

  has_many :authors, :through =&amp;gt; :book_people, :source =&amp;gt; :person, :include =&amp;gt; :book_people, :conditions =&amp;gt; {'book_people.person_type' =&amp;gt;  'Author' } do
    def &amp;lt;&amp;lt;(author) 
      BookPeople.send(:with_scope, :create =&amp;gt; { :person_type =&amp;gt; &quot;Author&quot; } ) { self.concat author } 
    end 
  end

  has_many :editors, :through =&amp;gt; :book_people, :source =&amp;gt; :person, :include =&amp;gt; :book_people, :conditions =&amp;gt; {'book_people.person_type' =&amp;gt;  'Editor' } do
    def &amp;lt;&amp;lt;(editor) 
      BookPeople.send(:with_scope, :create =&amp;gt; { :person_type =&amp;gt; &quot;Editor&quot; } ) { self.concat editor } 
    end 
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;person.rb&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;class Person &amp;lt; ActiveRecord::Base
  has_many :book_people, :dependent =&amp;gt; :destroy
  has_many :books, :through =&amp;gt; :book_people
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h2&gt;book_person.rb&lt;/h2&gt;
&lt;pre&gt;
&lt;code&gt;class BookPerson &amp;lt; ActiveRecord::Base
  belongs_to :person
  belongs_to :book

  belongs_to :author, :class_name =&amp;gt; &quot;Person&quot;, :foreign_key =&amp;gt; :person_id
  belongs_to :editor, :class_name =&amp;gt; &quot;Person&quot;, :foreign_key =&amp;gt; :person_id
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Going to edit a book to add or change the authors and editors
for the book, leads to the following error:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SQLite3::SQLException: no such column: book_people.person_type: SELECT &quot;people&quot;.* FROM &quot;people&quot; WHERE (&quot;book_people&quot;.&quot;person_type&quot; = 'Author')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Obviously, running that query directly against the DB fails with
the same error. It doesn't seem to know about the 'book_people'
table and its column 'person_type'.&lt;/p&gt;
&lt;p&gt;It appears the ':include =&amp;gt; :book_people' is being ignored.
Furthermore, as the association is going through 'book_people'
anyway, the include should be unnecessary. Removing it does not
resolve the problem.&lt;/p&gt;
&lt;p&gt;This issue is similar to the one marked as resolved in:&lt;br&gt;
&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/1845-finder-methods-ignore-include-in-has_many-through&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/1845-finder-m...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-25T17:08:30+00:00</created-at>
      <creator-id type="integer">95282</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6066</number>
      <permalink>finder-conditions-and-includes-are-still-ignored-on-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:include has_many_through ignored rails</tag>
      <title>Finder conditions and includes are (still) ignored on has_many through </title>
      <updated-at type="datetime">2010-11-25T17:08:34+00:00</updated-at>
      <user-id type="integer">95282</user-id>
      <version type="integer">1</version>
      <user-name>GreenPlastik</user-name>
      <creator-name>GreenPlastik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6066</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-06T23:41:58+00:00</created-at>
      <creator-id type="integer">95282</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6066</number>
      <permalink>finder-conditions-and-includes-are-still-ignored-on-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:include has_many_through ignored rails</tag>
      <title>Finder conditions and includes are (still) ignored on has_many through </title>
      <updated-at type="datetime">2010-12-06T23:41:59+00:00</updated-at>
      <user-id type="integer">95282</user-id>
      <version type="integer">2</version>
      <user-name>GreenPlastik</user-name>
      <creator-name>GreenPlastik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6066</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This was my error. Fixed on my own. Close at your own leisure</body>
      <body-html>&lt;div&gt;&lt;p&gt;This was my error. Fixed on my own. Close at your own
leisure&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-06T23:43:20+00:00</created-at>
      <creator-id type="integer">95282</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6066</number>
      <permalink>finder-conditions-and-includes-are-still-ignored-on-has_many-through</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:include has_many_through ignored rails</tag>
      <title>Finder conditions and includes are (still) ignored on has_many through </title>
      <updated-at type="datetime">2010-12-06T23:43:21+00:00</updated-at>
      <user-id type="integer">95282</user-id>
      <version type="integer">3</version>
      <user-name>GreenPlastik</user-name>
      <creator-name>GreenPlastik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6066</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-12-12T02:12:27+00:00</created-at>
      <creator-id type="integer">95282</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6066</number>
      <permalink>finder-conditions-and-includes-are-still-ignored-on-has_many-through</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>:include has_many_through ignored rails</tag>
      <title>Finder conditions and includes are (still) ignored on has_many through </title>
      <updated-at type="datetime">2010-12-12T02:12:35+00:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>GreenPlastik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6066</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
