<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-24T07:18:31+00:00</created-at>
  <creator-id type="integer">53975</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3612</number>
  <permalink>encoded-slash-is-not-unencoded-in-a-functional-test</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Encoded slash is not unencoded in a functional test.</title>
  <updated-at type="datetime">2010-10-17T17:34:14+01:00</updated-at>
  <user-id type="integer">25293</user-id>
  <version type="integer">3</version>
  <user-name>Prem Sichanugrist (sikachu)</user-name>
  <creator-name>mjf</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3612</url>
  <priority-name>Low</priority-name>
  <original-body>I am using Rails 2.3.2, Ruby 1.8.7, and Passenger 2.2.5.
  
I have a route like this where a parameter cannot contain an unencoded slash:

@@@
map.connect 'foo/:id', :controller =&gt; 'foo', :id =&gt; /[^\/]*/
@@@

If I access that path with an encoded slash:

@@@
$ curl http://example.com/foo/hi%2Fbye
@@@

then FooController handles it with `params[&quot;id&quot;] = &quot;hi/bye&quot;` (literal slash)

But I cannot test this in a functional test:

@@@
class FooControllerTest &lt; ActionController::TestCase
  def test_foo_escaped
    get :index, :id =&gt; &quot;hi%2Fbye&quot;
  end

  def test_foo_unescaped
    get :index, :id =&gt; &quot;hi/bye&quot;
  end
end
@@@

`test_foo_escaped` results in FooController invoked with `params[&quot;id&quot;] = &quot;hi%2Fbye&quot;` (encoded slash)

`test_foo_unescaped` results in a RoutingError: 
@@@
ActionController::RoutingError: No route matches {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;foo&quot;, :id=&gt;&quot;hi/bye&quot;}
@@@</original-body>
  <latest-body>I am using Rails 2.3.2, Ruby 1.8.7, and Passenger 2.2.5.
  
I have a route like this where a parameter cannot contain an unencoded slash:

@@@
map.connect 'foo/:id', :controller =&gt; 'foo', :id =&gt; /[^\/]*/
@@@

If I access that path with an encoded slash:

@@@
$ curl http://example.com/foo/hi%2Fbye
@@@

then FooController handles it with `params[&quot;id&quot;] = &quot;hi/bye&quot;` (literal slash)

But I cannot test this in a functional test:

@@@
class FooControllerTest &lt; ActionController::TestCase
  def test_foo_escaped
    get :index, :id =&gt; &quot;hi%2Fbye&quot;
  end

  def test_foo_unescaped
    get :index, :id =&gt; &quot;hi/bye&quot;
  end
end
@@@

`test_foo_escaped` results in FooController invoked with `params[&quot;id&quot;] = &quot;hi%2Fbye&quot;` (encoded slash)

`test_foo_unescaped` results in a RoutingError: 
@@@
ActionController::RoutingError: No route matches {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;foo&quot;, :id=&gt;&quot;hi/bye&quot;}
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I am using Rails 2.3.2, Ruby 1.8.7, and Passenger 2.2.5.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I have a route like this where a parameter cannot contain an
unencoded slash:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;map.connect 'foo/:id', :controller =&amp;gt; 'foo', :id =&amp;gt; /[^\/]*/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I access that path with an encoded slash:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl http://example.com/foo/hi%2Fbye&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;then FooController handles it with &lt;code&gt;params[&quot;id&quot;] =
&quot;hi/bye&quot;&lt;/code&gt; (literal slash)&lt;/p&gt;
&lt;p&gt;But I cannot test this in a functional test:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class FooControllerTest &amp;lt; ActionController::TestCase
  def test_foo_escaped
    get :index, :id =&amp;gt; &quot;hi%2Fbye&quot;
  end

  def test_foo_unescaped
    get :index, :id =&amp;gt; &quot;hi/bye&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;test_foo_escaped&lt;/code&gt; results in FooController invoked
with &lt;code&gt;params[&quot;id&quot;] = &quot;hi%2Fbye&quot;&lt;/code&gt; (encoded slash)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_foo_unescaped&lt;/code&gt; results in a RoutingError:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActionController::RoutingError: No route matches {:action=&amp;gt;&quot;index&quot;, :controller=&amp;gt;&quot;foo&quot;, :id=&amp;gt;&quot;hi/bye&quot;}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am using Rails 2.3.2, Ruby 1.8.7, and Passenger 2.2.5.
  
I have a route like this where a parameter cannot contain an unencoded slash:

@@@
map.connect 'foo/:id', :controller =&gt; 'foo', :id =&gt; /[^\/]*/
@@@

If I access that path with an encoded slash:

@@@
$ curl http://example.com/foo/hi%2Fbye
@@@

then FooController handles it with `params[&quot;id&quot;] = &quot;hi/bye&quot;` (literal slash)

But I cannot test this in a functional test:

@@@
class FooControllerTest &lt; ActionController::TestCase
  def test_foo_escaped
    get :index, :id =&gt; &quot;hi%2Fbye&quot;
  end

  def test_foo_unescaped
    get :index, :id =&gt; &quot;hi/bye&quot;
  end
end
@@@

`test_foo_escaped` results in FooController invoked with `params[&quot;id&quot;] = &quot;hi%2Fbye&quot;` (encoded slash)

`test_foo_unescaped` results in a RoutingError: 
@@@
ActionController::RoutingError: No route matches {:action=&gt;&quot;index&quot;, :controller=&gt;&quot;foo&quot;, :id=&gt;&quot;hi/bye&quot;}
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am using Rails 2.3.2, Ruby 1.8.7, and Passenger 2.2.5.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I have a route like this where a parameter cannot contain an
unencoded slash:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;map.connect 'foo/:id', :controller =&amp;gt; 'foo', :id =&amp;gt; /[^\/]*/&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I access that path with an encoded slash:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;$ curl http://example.com/foo/hi%2Fbye&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;then FooController handles it with &lt;code&gt;params[&quot;id&quot;] =
&quot;hi/bye&quot;&lt;/code&gt; (literal slash)&lt;/p&gt;
&lt;p&gt;But I cannot test this in a functional test:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class FooControllerTest &amp;lt; ActionController::TestCase
  def test_foo_escaped
    get :index, :id =&amp;gt; &quot;hi%2Fbye&quot;
  end

  def test_foo_unescaped
    get :index, :id =&amp;gt; &quot;hi/bye&quot;
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;test_foo_escaped&lt;/code&gt; results in FooController invoked
with &lt;code&gt;params[&quot;id&quot;] = &quot;hi%2Fbye&quot;&lt;/code&gt; (encoded slash)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_foo_unescaped&lt;/code&gt; results in a RoutingError:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ActionController::RoutingError: No route matches {:action=&amp;gt;&quot;index&quot;, :controller=&amp;gt;&quot;foo&quot;, :id=&amp;gt;&quot;hi/bye&quot;}&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-24T07:18:31+00:00</created-at>
      <creator-id type="integer">53975</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3612</number>
      <permalink>encoded-slash-is-not-unencoded-in-a-functional-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Encoded slash is not unencoded in a functional test.</title>
      <updated-at type="datetime">2009-12-24T07:22:45+00:00</updated-at>
      <user-id type="integer">53975</user-id>
      <version type="integer">1</version>
      <user-name>mjf</user-name>
      <creator-name>mjf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3612</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>My current workaround is to use an integration test rather than a functional test so the URL can be specified directly.  But some special handing for the escaping is still required.

  def test_foo
    id = &quot;hi/bye&quot;
    url = url_for({ :controller =&gt; 'foo', :id =&gt; CGI.escape(id)})
    url = CGI.unescape(url)
    get url
  end

This results in FooController being invoked with `params[&quot;id&quot;] = &quot;hi/bye&quot;` (literal slash).</body>
      <body-html>&lt;div&gt;&lt;p&gt;My current workaround is to use an integration test rather than
a functional test so the URL can be specified directly. But some
special handing for the escaping is still required.&lt;/p&gt;
&lt;p&gt;def test_foo&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;id = &quot;hi/bye&quot;
url = url_for({ :controller =&amp;gt; 'foo', :id =&amp;gt; CGI.escape(id)})
url = CGI.unescape(url)
get url&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;This results in FooController being invoked with
&lt;code&gt;params[&quot;id&quot;] = &quot;hi/bye&quot;&lt;/code&gt; (literal slash).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-24T09:20:44+00:00</created-at>
      <creator-id type="integer">53975</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3612</number>
      <permalink>encoded-slash-is-not-unencoded-in-a-functional-test</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Encoded slash is not unencoded in a functional test.</title>
      <updated-at type="datetime">2009-12-24T09:20:45+00:00</updated-at>
      <user-id type="integer">53975</user-id>
      <version type="integer">2</version>
      <user-name>mjf</user-name>
      <creator-name>mjf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3612</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,

I can confirm that the example you provided still returning a fail test case on Rails 3.0.1. However, I think if you navigate to `http://some.domain/foo/hi/bye` Rails would route it to `foo/hi#bye`. There's no way the `hi/bye` will be parsed as an `:id`.

So, I think I would mark this ticket as `wontfix`, and I agree that you should always escape your parameters in the test suit, make it like a real URL request.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I can confirm that the example you provided still returning a
fail test case on Rails 3.0.1. However, I think if you navigate to
&lt;code&gt;http://some.domain/foo/hi/bye&lt;/code&gt; Rails would route it to
&lt;code&gt;foo/hi#bye&lt;/code&gt;. There's no way the &lt;code&gt;hi/bye&lt;/code&gt;
will be parsed as an &lt;code&gt;:id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, I think I would mark this ticket as &lt;code&gt;wontfix&lt;/code&gt;,
and I agree that you should always escape your parameters in the
test suit, make it like a real URL request.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-17T17:34:10+01:00</created-at>
      <creator-id type="integer">53975</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3612</number>
      <permalink>encoded-slash-is-not-unencoded-in-a-functional-test</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Encoded slash is not unencoded in a functional test.</title>
      <updated-at type="datetime">2010-10-17T17:34:14+01:00</updated-at>
      <user-id type="integer">25293</user-id>
      <version type="integer">3</version>
      <user-name>Prem Sichanugrist (sikachu)</user-name>
      <creator-name>mjf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3612</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
