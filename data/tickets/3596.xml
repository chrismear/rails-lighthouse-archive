<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-18T15:17:38+00:00</created-at>
  <creator-id type="integer">51760</creator-id>
  <milestone-due-on type="datetime">2010-11-15T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">88038</milestone-id>
  <number type="integer">3596</number>
  <permalink>patch-define_schema-for-active-resource</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>activeresource patch schema</tag>
  <title>[PATCH] define_schema for Active Resource</title>
  <updated-at type="datetime">2010-10-15T23:01:39+01:00</updated-at>
  <user-id type="integer">85</user-id>
  <version type="integer">5</version>
  <user-name>Jeremy Kemper</user-name>
  <creator-name>Taryn East</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3596</url>
  <milestone-title>3.0.2</milestone-title>
  <priority-name>Medium</priority-name>
  <original-body>Ok, so Josh suggested I make a ticket for this for better tracking.

I've built some baseline functionality for defining a schema for an Active Resource.

Code available as a patch here: http://pastie.org/743842
and a more-readable combined diff here: http://pastie.org/743843



What you can now do is this:

  class FlickrPhoto &lt;&lt; ActiveResource::Base

    define_schema do |s|
      s.string :photo, :title
      s.integer :width, :height
      s.float :some_other_attribute
      s.attribute 'and_another', 'string'
    end

    validates_presence_of :photo
    validates_numericality_of :width, :height
  end

  # this works
  my_photo = FlickrPhoto.new(:photo =&gt; 'photo_stream_here', :title =&gt; 'eben', :tags =&gt; ['cat'])
  my_photo.valid?            # =&gt; true
  my_photo.save              # =&gt; true
  my_photo.photo             # 'photo_stream_here'

  # and now, so does this:
  new_photo = FlickrPhoto.new()
  new_photo.respond_to? :photo  # =&gt; true
  new_photo.photo               # =&gt; nil
  new_photo.valid?              # =&gt; false

  new_photo.known_attributes    # =&gt; ['photo', 'title', 'height', 'width', 'some_other_attribute', 'and_another']

  # and if you fetch and existing one:
  a_photo = FlickrPhoto.find(1) # &lt;FlickrPhoto&gt;&lt;photo&gt;abcdef&lt;/photo&gt;&lt;width&gt;123&lt;/width&gt;&lt;instance_attribute&gt;456&lt;/instance_attribute&gt;&lt;/FlickrPhoto&gt;
  a_photo.photo                 # =&gt; 'abcdef'
  a_photo.width                 # =&gt; '123' # note: still a string
  a_photo.instance_attribute    # =&gt; '456' # note: also a string

  a_photo.known_attributes      # =&gt; ['photo', 'title', 'height', 'width', 'some_other_attribute', 'and_another', 'instance_attribute']

  new_photo.respond_to? 'instance_attribute' # =&gt; false (because it's not a known_attribute)

More details on what/how in the rdoc for define_schema :)

To summarise:

1) You can define a schema using 'define_schema' and passing a block, or passing a hash to 'schema='

2) this populates a set of 'known_attributes' that are added to the list of attributes currently on an instance (if there's no schema, this means that the known_attributes equals the existing attributes on the instance - as it always has done).

3) known attributes will return 'true' to a 'respond_to?' and will not cause a 'NoMethodError' if invoked

4) it will also store the 'attribute type' against each attribute - currently this does nothing... but my next step is to add a typecast based on this, along with &quot;attributes_before_typecast&quot; ala Active Record. This will be extremely useful for integer values as I've found my own code peppered with &quot;to_i&quot; checks for attributes that I already know are meant to be integers  :P

5) an extension will also allow us to pass in options. The only sensible one that I can see so far is &quot;:default =&gt; 'blah') which will, of course, set up known attributes with their given defaults - unless otherwise specified.



This functionality follows from the original discussion-thread here:
http://groups.google.com/group/rubyonrails-core/browse_thread/thread/8600da28a92d83ba
and then here:
http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6b9631841a4daea2


Future extensions:

1) using 'instance_eval' to get rid of the 'do |s|' syntax
2) Making the attribute-type actually do something useful (in this case: automatically typecast returned values as described above)
3) adding the 'default' option that will auto-populate the so-specified attributes on initialize</original-body>
  <latest-body>Ok, so Josh suggested I make a ticket for this for better tracking.

I've built some baseline functionality for defining a schema for an Active Resource.

Code available as a patch here: http://pastie.org/743842
and a more-readable combined diff here: http://pastie.org/743843



What you can now do is this:

  class FlickrPhoto &lt;&lt; ActiveResource::Base

    define_schema do |s|
      s.string :photo, :title
      s.integer :width, :height
      s.float :some_other_attribute
      s.attribute 'and_another', 'string'
    end

    validates_presence_of :photo
    validates_numericality_of :width, :height
  end

  # this works
  my_photo = FlickrPhoto.new(:photo =&gt; 'photo_stream_here', :title =&gt; 'eben', :tags =&gt; ['cat'])
  my_photo.valid?            # =&gt; true
  my_photo.save              # =&gt; true
  my_photo.photo             # 'photo_stream_here'

  # and now, so does this:
  new_photo = FlickrPhoto.new()
  new_photo.respond_to? :photo  # =&gt; true
  new_photo.photo               # =&gt; nil
  new_photo.valid?              # =&gt; false

  new_photo.known_attributes    # =&gt; ['photo', 'title', 'height', 'width', 'some_other_attribute', 'and_another']

  # and if you fetch and existing one:
  a_photo = FlickrPhoto.find(1) # &lt;FlickrPhoto&gt;&lt;photo&gt;abcdef&lt;/photo&gt;&lt;width&gt;123&lt;/width&gt;&lt;instance_attribute&gt;456&lt;/instance_attribute&gt;&lt;/FlickrPhoto&gt;
  a_photo.photo                 # =&gt; 'abcdef'
  a_photo.width                 # =&gt; '123' # note: still a string
  a_photo.instance_attribute    # =&gt; '456' # note: also a string

  a_photo.known_attributes      # =&gt; ['photo', 'title', 'height', 'width', 'some_other_attribute', 'and_another', 'instance_attribute']

  new_photo.respond_to? 'instance_attribute' # =&gt; false (because it's not a known_attribute)

More details on what/how in the rdoc for define_schema :)

To summarise:

1) You can define a schema using 'define_schema' and passing a block, or passing a hash to 'schema='

2) this populates a set of 'known_attributes' that are added to the list of attributes currently on an instance (if there's no schema, this means that the known_attributes equals the existing attributes on the instance - as it always has done).

3) known attributes will return 'true' to a 'respond_to?' and will not cause a 'NoMethodError' if invoked

4) it will also store the 'attribute type' against each attribute - currently this does nothing... but my next step is to add a typecast based on this, along with &quot;attributes_before_typecast&quot; ala Active Record. This will be extremely useful for integer values as I've found my own code peppered with &quot;to_i&quot; checks for attributes that I already know are meant to be integers  :P

5) an extension will also allow us to pass in options. The only sensible one that I can see so far is &quot;:default =&gt; 'blah') which will, of course, set up known attributes with their given defaults - unless otherwise specified.



This functionality follows from the original discussion-thread here:
http://groups.google.com/group/rubyonrails-core/browse_thread/thread/8600da28a92d83ba
and then here:
http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6b9631841a4daea2


Future extensions:

1) using 'instance_eval' to get rid of the 'do |s|' syntax
2) Making the attribute-type actually do something useful (in this case: automatically typecast returned values as described above)
3) adding the 'default' option that will auto-populate the so-specified attributes on initialize</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Ok, so Josh suggested I make a ticket for this for better
tracking.&lt;/p&gt;
&lt;p&gt;I've built some baseline functionality for defining a schema for
an Active Resource.&lt;/p&gt;
&lt;p&gt;Code available as a patch here: &lt;a href=
&quot;http://pastie.org/743842&quot;&gt;http://pastie.org/743842&lt;/a&gt;&lt;br&gt;
and a more-readable combined diff here: &lt;a href=
&quot;http://pastie.org/743843&quot;&gt;http://pastie.org/743843&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What you can now do is this:&lt;/p&gt;
&lt;p&gt;class FlickrPhoto &amp;lt;&amp;lt; ActiveResource::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;define_schema do |s|
  s.string :photo, :title
  s.integer :width, :height
  s.float :some_other_attribute
  s.attribute 'and_another', 'string'
end

validates_presence_of :photo
validates_numericality_of :width, :height&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;# this works my_photo = FlickrPhoto.new(:photo =&amp;gt;
'photo_stream_here', :title =&amp;gt; 'eben', :tags =&amp;gt; ['cat'])
my_photo.valid? # =&amp;gt; true my_photo.save # =&amp;gt; true
my_photo.photo # 'photo_stream_here'&lt;/p&gt;
&lt;p&gt;# and now, so does this: new_photo = FlickrPhoto.new()
new_photo.respond_to? :photo # =&amp;gt; true new_photo.photo # =&amp;gt;
nil new_photo.valid? # =&amp;gt; false&lt;/p&gt;
&lt;p&gt;new_photo.known_attributes # =&amp;gt; ['photo', 'title', 'height',
'width', 'some_other_attribute', 'and_another']&lt;/p&gt;
&lt;p&gt;# and if you fetch and existing one: a_photo =
FlickrPhoto.find(1) #
abcdef123&amp;lt;instance_attribute&amp;gt;456&amp;lt;/instance_attribute&amp;gt;
a_photo.photo # =&amp;gt; 'abcdef' a_photo.width # =&amp;gt; '123' # note:
still a string a_photo.instance_attribute # =&amp;gt; '456' # note:
also a string&lt;/p&gt;
&lt;p&gt;a_photo.known_attributes # =&amp;gt; ['photo', 'title', 'height',
'width', 'some_other_attribute', 'and_another',
'instance_attribute']&lt;/p&gt;
&lt;p&gt;new_photo.respond_to? 'instance_attribute' # =&amp;gt; false
(because it's not a known_attribute)&lt;/p&gt;
&lt;p&gt;More details on what/how in the rdoc for define_schema :)&lt;/p&gt;
&lt;p&gt;To summarise:&lt;/p&gt;
&lt;p&gt;1) You can define a schema using 'define_schema' and passing a
block, or passing a hash to 'schema='&lt;/p&gt;
&lt;p&gt;2) this populates a set of 'known_attributes' that are added to
the list of attributes currently on an instance (if there's no
schema, this means that the known_attributes equals the existing
attributes on the instance - as it always has done).&lt;/p&gt;
&lt;p&gt;3) known attributes will return 'true' to a 'respond_to?' and
will not cause a 'NoMethodError' if invoked&lt;/p&gt;
&lt;p&gt;4) it will also store the 'attribute type' against each
attribute - currently this does nothing... but my next step is to
add a typecast based on this, along with
&quot;attributes_before_typecast&quot; ala Active Record. This will be
extremely useful for integer values as I've found my own code
peppered with &quot;to_i&quot; checks for attributes that I already know are
meant to be integers :P&lt;/p&gt;
&lt;p&gt;5) an extension will also allow us to pass in options. The only
sensible one that I can see so far is &quot;:default =&amp;gt; 'blah') which
will, of course, set up known attributes with their given defaults
- unless otherwise specified.&lt;/p&gt;
&lt;p&gt;This functionality follows from the original discussion-thread
here:&lt;br&gt;
&lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/8600da28a92d83ba&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;br&gt;
and then here:&lt;br&gt;
&lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6b9631841a4daea2&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Future extensions:&lt;/p&gt;
&lt;p&gt;1) using 'instance_eval' to get rid of the 'do |s|' syntax&lt;br&gt;
2) Making the attribute-type actually do something useful (in this
case: automatically typecast returned values as described
above)&lt;br&gt;
3) adding the 'default' option that will auto-populate the
so-specified attributes on initialize&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, so Josh suggested I make a ticket for this for better tracking.

I've built some baseline functionality for defining a schema for an Active Resource.

Code available as a patch here: http://pastie.org/743842
and a more-readable combined diff here: http://pastie.org/743843



What you can now do is this:

  class FlickrPhoto &lt;&lt; ActiveResource::Base

    define_schema do |s|
      s.string :photo, :title
      s.integer :width, :height
      s.float :some_other_attribute
      s.attribute 'and_another', 'string'
    end

    validates_presence_of :photo
    validates_numericality_of :width, :height
  end

  # this works
  my_photo = FlickrPhoto.new(:photo =&gt; 'photo_stream_here', :title =&gt; 'eben', :tags =&gt; ['cat'])
  my_photo.valid?            # =&gt; true
  my_photo.save              # =&gt; true
  my_photo.photo             # 'photo_stream_here'

  # and now, so does this:
  new_photo = FlickrPhoto.new()
  new_photo.respond_to? :photo  # =&gt; true
  new_photo.photo               # =&gt; nil
  new_photo.valid?              # =&gt; false

  new_photo.known_attributes    # =&gt; ['photo', 'title', 'height', 'width', 'some_other_attribute', 'and_another']

  # and if you fetch and existing one:
  a_photo = FlickrPhoto.find(1) # &lt;FlickrPhoto&gt;&lt;photo&gt;abcdef&lt;/photo&gt;&lt;width&gt;123&lt;/width&gt;&lt;instance_attribute&gt;456&lt;/instance_attribute&gt;&lt;/FlickrPhoto&gt;
  a_photo.photo                 # =&gt; 'abcdef'
  a_photo.width                 # =&gt; '123' # note: still a string
  a_photo.instance_attribute    # =&gt; '456' # note: also a string

  a_photo.known_attributes      # =&gt; ['photo', 'title', 'height', 'width', 'some_other_attribute', 'and_another', 'instance_attribute']

  new_photo.respond_to? 'instance_attribute' # =&gt; false (because it's not a known_attribute)

More details on what/how in the rdoc for define_schema :)

To summarise:

1) You can define a schema using 'define_schema' and passing a block, or passing a hash to 'schema='

2) this populates a set of 'known_attributes' that are added to the list of attributes currently on an instance (if there's no schema, this means that the known_attributes equals the existing attributes on the instance - as it always has done).

3) known attributes will return 'true' to a 'respond_to?' and will not cause a 'NoMethodError' if invoked

4) it will also store the 'attribute type' against each attribute - currently this does nothing... but my next step is to add a typecast based on this, along with &quot;attributes_before_typecast&quot; ala Active Record. This will be extremely useful for integer values as I've found my own code peppered with &quot;to_i&quot; checks for attributes that I already know are meant to be integers  :P

5) an extension will also allow us to pass in options. The only sensible one that I can see so far is &quot;:default =&gt; 'blah') which will, of course, set up known attributes with their given defaults - unless otherwise specified.



This functionality follows from the original discussion-thread here:
http://groups.google.com/group/rubyonrails-core/browse_thread/thread/8600da28a92d83ba
and then here:
http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6b9631841a4daea2


Future extensions:

1) using 'instance_eval' to get rid of the 'do |s|' syntax
2) Making the attribute-type actually do something useful (in this case: automatically typecast returned values as described above)
3) adding the 'default' option that will auto-populate the so-specified attributes on initialize</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, so Josh suggested I make a ticket for this for better
tracking.&lt;/p&gt;
&lt;p&gt;I've built some baseline functionality for defining a schema for
an Active Resource.&lt;/p&gt;
&lt;p&gt;Code available as a patch here: &lt;a href=
&quot;http://pastie.org/743842&quot;&gt;http://pastie.org/743842&lt;/a&gt;&lt;br&gt;
and a more-readable combined diff here: &lt;a href=
&quot;http://pastie.org/743843&quot;&gt;http://pastie.org/743843&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What you can now do is this:&lt;/p&gt;
&lt;p&gt;class FlickrPhoto &amp;lt;&amp;lt; ActiveResource::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;define_schema do |s|
  s.string :photo, :title
  s.integer :width, :height
  s.float :some_other_attribute
  s.attribute 'and_another', 'string'
end

validates_presence_of :photo
validates_numericality_of :width, :height&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;# this works my_photo = FlickrPhoto.new(:photo =&amp;gt;
'photo_stream_here', :title =&amp;gt; 'eben', :tags =&amp;gt; ['cat'])
my_photo.valid? # =&amp;gt; true my_photo.save # =&amp;gt; true
my_photo.photo # 'photo_stream_here'&lt;/p&gt;
&lt;p&gt;# and now, so does this: new_photo = FlickrPhoto.new()
new_photo.respond_to? :photo # =&amp;gt; true new_photo.photo # =&amp;gt;
nil new_photo.valid? # =&amp;gt; false&lt;/p&gt;
&lt;p&gt;new_photo.known_attributes # =&amp;gt; ['photo', 'title', 'height',
'width', 'some_other_attribute', 'and_another']&lt;/p&gt;
&lt;p&gt;# and if you fetch and existing one: a_photo =
FlickrPhoto.find(1) #
abcdef123&amp;lt;instance_attribute&amp;gt;456&amp;lt;/instance_attribute&amp;gt;
a_photo.photo # =&amp;gt; 'abcdef' a_photo.width # =&amp;gt; '123' # note:
still a string a_photo.instance_attribute # =&amp;gt; '456' # note:
also a string&lt;/p&gt;
&lt;p&gt;a_photo.known_attributes # =&amp;gt; ['photo', 'title', 'height',
'width', 'some_other_attribute', 'and_another',
'instance_attribute']&lt;/p&gt;
&lt;p&gt;new_photo.respond_to? 'instance_attribute' # =&amp;gt; false
(because it's not a known_attribute)&lt;/p&gt;
&lt;p&gt;More details on what/how in the rdoc for define_schema :)&lt;/p&gt;
&lt;p&gt;To summarise:&lt;/p&gt;
&lt;p&gt;1) You can define a schema using 'define_schema' and passing a
block, or passing a hash to 'schema='&lt;/p&gt;
&lt;p&gt;2) this populates a set of 'known_attributes' that are added to
the list of attributes currently on an instance (if there's no
schema, this means that the known_attributes equals the existing
attributes on the instance - as it always has done).&lt;/p&gt;
&lt;p&gt;3) known attributes will return 'true' to a 'respond_to?' and
will not cause a 'NoMethodError' if invoked&lt;/p&gt;
&lt;p&gt;4) it will also store the 'attribute type' against each
attribute - currently this does nothing... but my next step is to
add a typecast based on this, along with
&quot;attributes_before_typecast&quot; ala Active Record. This will be
extremely useful for integer values as I've found my own code
peppered with &quot;to_i&quot; checks for attributes that I already know are
meant to be integers :P&lt;/p&gt;
&lt;p&gt;5) an extension will also allow us to pass in options. The only
sensible one that I can see so far is &quot;:default =&amp;gt; 'blah') which
will, of course, set up known attributes with their given defaults
- unless otherwise specified.&lt;/p&gt;
&lt;p&gt;This functionality follows from the original discussion-thread
here:&lt;br&gt;
&lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/8600da28a92d83ba&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;br&gt;
and then here:&lt;br&gt;
&lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/6b9631841a4daea2&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Future extensions:&lt;/p&gt;
&lt;p&gt;1) using 'instance_eval' to get rid of the 'do |s|' syntax&lt;br&gt;
2) Making the attribute-type actually do something useful (in this
case: automatically typecast returned values as described
above)&lt;br&gt;
3) adding the 'default' option that will auto-populate the
so-specified attributes on initialize&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-18T15:17:38+00:00</created-at>
      <creator-id type="integer">51760</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3596</number>
      <permalink>patch-define_schema-for-active-resource</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activeresource patched schema</tag>
      <title>[PATCH] define_schema for Active Resource</title>
      <updated-at type="datetime">2009-12-18T15:17:41+00:00</updated-at>
      <user-id type="integer">51760</user-id>
      <version type="integer">1</version>
      <user-name>Taryn East</user-name>
      <creator-name>Taryn East</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3596</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-18T15:20:56+00:00</created-at>
      <creator-id type="integer">51760</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3596</number>
      <permalink>patch-define_schema-for-active-resource</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activeresource patched schema</tag>
      <title>[PATCH] define_schema for Active Resource</title>
      <updated-at type="datetime">2009-12-18T15:20:57+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Taryn East</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3596</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Committed.

Open a new ticket for any follow up patches. Also don't use pastie, it truncates your patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Committed.&lt;/p&gt;
&lt;p&gt;Open a new ticket for any follow up patches. Also don't use
pastie, it truncates your patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-21T01:06:34+00:00</created-at>
      <creator-id type="integer">51760</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3596</number>
      <permalink>patch-define_schema-for-active-resource</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activeresource patched schema</tag>
      <title>[PATCH] define_schema for Active Resource</title>
      <updated-at type="datetime">2009-12-21T01:06:37+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Taryn East</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3596</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>bulk tags cleanup</body>
      <body-html>&lt;div&gt;&lt;p&gt;bulk tags cleanup&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T07:25:53+01:00</created-at>
      <creator-id type="integer">51760</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activeresource patched schema
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3596</number>
      <permalink>patch-define_schema-for-active-resource</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activeresource patch schema</tag>
      <title>[PATCH] define_schema for Active Resource</title>
      <updated-at type="datetime">2010-10-11T07:25:57+01:00</updated-at>
      <user-id type="integer">81551</user-id>
      <version type="integer">4</version>
      <user-name>Andrea Campi</user-name>
      <creator-name>Taryn East</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3596</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/31647)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/31647&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-15T23:01:39+01:00</created-at>
      <creator-id type="integer">51760</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">88038</milestone-id>
      <number type="integer">3596</number>
      <permalink>patch-define_schema-for-active-resource</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>activeresource patch schema</tag>
      <title>[PATCH] define_schema for Active Resource</title>
      <updated-at type="datetime">2010-10-15T23:01:39+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Taryn East</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3596</url>
      <milestone-title>3.0.2</milestone-title>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
</ticket>
