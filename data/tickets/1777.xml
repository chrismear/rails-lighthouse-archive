<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">22589</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-17T19:44:39+00:00</created-at>
  <creator-id type="integer">42447</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1777</number>
  <permalink>configgem-does-not-scope-search-to-gems-path</permalink>
  <priority type="integer">1081</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2.2.2 gem gem.config</tag>
  <title>config.gem does not scope search to gems path</title>
  <updated-at type="datetime">2010-04-29T22:24:30+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">4</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Peregrinator</creator-name>
  <assigned-user-name>Matt Jones</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1777</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Currently if a gem is required via config.gem the entire gem load paths are searched for the library.

This means that if you require a gem as follows:

config.gem 'backupgem', :lib =&gt; 'backup'

All gem paths will be searched until the first file named backup.rb is found in a gem lib folder (ie ruby/1.8/gems/backupgem-1.1.1/lib).

Unfortunately this means that if gem A has a file in it's lib folder with the same name as the expected lib file for gem B and gem A's directory is searched first then that file will be loaded resulting in the gem config passing but not actually requiring the appropriate gem.

Expected behavior would be that only the specified gem's path required in config.gem would be searched. While this is not a problem for many gems, the more gems required increases the likelihood that conflicts will arise.

This behavior has been observed in rails 2.2</original-body>
  <latest-body>Currently if a gem is required via config.gem the entire gem load paths are searched for the library.

This means that if you require a gem as follows:

config.gem 'backupgem', :lib =&gt; 'backup'

All gem paths will be searched until the first file named backup.rb is found in a gem lib folder (ie ruby/1.8/gems/backupgem-1.1.1/lib).

Unfortunately this means that if gem A has a file in it's lib folder with the same name as the expected lib file for gem B and gem A's directory is searched first then that file will be loaded resulting in the gem config passing but not actually requiring the appropriate gem.

Expected behavior would be that only the specified gem's path required in config.gem would be searched. While this is not a problem for many gems, the more gems required increases the likelihood that conflicts will arise.

This behavior has been observed in rails 2.2</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Currently if a gem is required via config.gem the entire gem
load paths are searched for the library.&lt;/p&gt;
&lt;p&gt;This means that if you require a gem as follows:&lt;/p&gt;
&lt;p&gt;config.gem 'backupgem', :lib =&amp;gt; 'backup'&lt;/p&gt;
&lt;p&gt;All gem paths will be searched until the first file named
backup.rb is found in a gem lib folder (ie
ruby/1.8/gems/backupgem-1.1.1/lib).&lt;/p&gt;
&lt;p&gt;Unfortunately this means that if gem A has a file in it's lib
folder with the same name as the expected lib file for gem B and
gem A's directory is searched first then that file will be loaded
resulting in the gem config passing but not actually requiring the
appropriate gem.&lt;/p&gt;
&lt;p&gt;Expected behavior would be that only the specified gem's path
required in config.gem would be searched. While this is not a
problem for many gems, the more gems required increases the
likelihood that conflicts will arise.&lt;/p&gt;
&lt;p&gt;This behavior has been observed in rails 2.2&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently if a gem is required via config.gem the entire gem load paths are searched for the library.

This means that if you require a gem as follows:

config.gem 'backupgem', :lib =&gt; 'backup'

All gem paths will be searched until the first file named backup.rb is found in a gem lib folder (ie ruby/1.8/gems/backupgem-1.1.1/lib).

Unfortunately this means that if gem A has a file in it's lib folder with the same name as the expected lib file for gem B and gem A's directory is searched first then that file will be loaded resulting in the gem config passing but not actually requiring the appropriate gem.

Expected behavior would be that only the specified gem's path required in config.gem would be searched. While this is not a problem for many gems, the more gems required increases the likelihood that conflicts will arise.

This behavior has been observed in rails 2.2</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently if a gem is required via config.gem the entire gem
load paths are searched for the library.&lt;/p&gt;
&lt;p&gt;This means that if you require a gem as follows:&lt;/p&gt;
&lt;p&gt;config.gem 'backupgem', :lib =&amp;gt; 'backup'&lt;/p&gt;
&lt;p&gt;All gem paths will be searched until the first file named
backup.rb is found in a gem lib folder (ie
ruby/1.8/gems/backupgem-1.1.1/lib).&lt;/p&gt;
&lt;p&gt;Unfortunately this means that if gem A has a file in it's lib
folder with the same name as the expected lib file for gem B and
gem A's directory is searched first then that file will be loaded
resulting in the gem config passing but not actually requiring the
appropriate gem.&lt;/p&gt;
&lt;p&gt;Expected behavior would be that only the specified gem's path
required in config.gem would be searched. While this is not a
problem for many gems, the more gems required increases the
likelihood that conflicts will arise.&lt;/p&gt;
&lt;p&gt;This behavior has been observed in rails 2.2&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-17T19:44:39+00:00</created-at>
      <creator-id type="integer">42447</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1777</number>
      <permalink>configgem-does-not-scope-search-to-gems-path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 gem gem.config</tag>
      <title>config.gem does not scope search to gems path</title>
      <updated-at type="datetime">2009-01-17T19:44:40+00:00</updated-at>
      <user-id type="integer">42447</user-id>
      <version type="integer">1</version>
      <user-name>Peregrinator</user-name>
      <creator-name>Peregrinator</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1777</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22589</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The search path is not really something that we have that level of control over; note that a gem that triggers this is going to have problems anyways; the typical way of including many gems is

@@@ ruby
require 'filename'
@@@

Which will automatically find the most recent gem that has that file.
The idea (followed by most gems) is to have the filename be specific to the gem (in your case, it should be backupgem.rb or similar).

Can you provide a specific example of a gem that has this problem?</body>
      <body-html>&lt;div&gt;&lt;p&gt;The search path is not really something that we have that level
of control over; note that a gem that triggers this is going to
have problems anyways; the typical way of including many gems
is&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
require 'filename'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will automatically find the most recent gem that has that
file. The idea (followed by most gems) is to have the filename be
specific to the gem (in your case, it should be backupgem.rb or
similar).&lt;/p&gt;
&lt;p&gt;Can you provide a specific example of a gem that has this
problem?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-18T01:37:10+00:00</created-at>
      <creator-id type="integer">42447</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1777</number>
      <permalink>configgem-does-not-scope-search-to-gems-path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 gem gem.config</tag>
      <title>config.gem does not scope search to gems path</title>
      <updated-at type="datetime">2009-02-18T01:37:14+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Peregrinator</creator-name>
      <assigned-user-name>Matt Jones</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1777</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22589</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This definitely appears to be more of general gems issue rather than a Rails issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This definitely appears to be more of general gems issue rather
than a Rails issue.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-27T19:11:42+00:00</created-at>
      <creator-id type="integer">42447</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1777</number>
      <permalink>configgem-does-not-scope-search-to-gems-path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 gem gem.config</tag>
      <title>config.gem does not scope search to gems path</title>
      <updated-at type="datetime">2009-03-27T19:11:46+00:00</updated-at>
      <user-id type="integer">8721</user-id>
      <version type="integer">3</version>
      <user-name>David Dollar</user-name>
      <creator-name>Peregrinator</creator-name>
      <assigned-user-name>Matt Jones</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1777</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22589</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Please re-open with an example if this is still causing problems.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Please re-open with an example if this is still causing
problems.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-29T22:24:26+01:00</created-at>
      <creator-id type="integer">42447</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1777</number>
      <permalink>configgem-does-not-scope-search-to-gems-path</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2.2.2 gem gem.config</tag>
      <title>config.gem does not scope search to gems path</title>
      <updated-at type="datetime">2010-04-29T22:24:30+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Peregrinator</creator-name>
      <assigned-user-name>Matt Jones</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1777</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
