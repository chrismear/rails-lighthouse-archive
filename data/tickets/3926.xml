<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-10T23:44:07+00:00</created-at>
  <creator-id type="integer">86142</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3926</number>
  <permalink>scalability-lock-contention-on-activerecordconnectionadaptersconnectionpoolconnection_mutex</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Scalability: Lock contention on ActiveRecord::ConnectionAdapters::ConnectionPool.@connection_mutex</title>
  <updated-at type="datetime">2011-02-02T17:54:07+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>xbaldauf</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3926</url>
  <priority-name nil="true"></priority-name>
  <original-body>In a heavily used multi-threaded rails application (on JRuby), it appears that when CPU usage goes to about 350% (on an 8 core machine), almost all threads (e.g. more than 100 threads) wait on the lock &quot;@connection_mutex&quot;. This means that incoming requests cannot be served fast enough anymore.

Nick Sieger provided an ad-hoc work-around in http://gist.github.com/300782 by switching off all connection pooling, but this work-around means a considerable increase of latency, as for each new request a new connection would be needed to be established.

A partial solution would be to reduce the work during the time the lock is held.

A complete solution would be to have multiple connection pools, e.g. as many pools as the system has CPU cores. When a connection is needed, any random pool is chosen and only this pool's lock is acquired. This way, it becomes unlikely that there is lock contention. If the chosen pool happens to be empty, the other pools are checked first before attempting to create a new connection.

An even better solution would be to not use a random pool, but to use the pool whose number is the number of the CPU core the current thread is running on. This way, each pool tends to stay stable in only one CPUs cache, presumably making things very fast.</original-body>
  <latest-body>In a heavily used multi-threaded rails application (on JRuby), it appears that when CPU usage goes to about 350% (on an 8 core machine), almost all threads (e.g. more than 100 threads) wait on the lock &quot;@connection_mutex&quot;. This means that incoming requests cannot be served fast enough anymore.

Nick Sieger provided an ad-hoc work-around in http://gist.github.com/300782 by switching off all connection pooling, but this work-around means a considerable increase of latency, as for each new request a new connection would be needed to be established.

A partial solution would be to reduce the work during the time the lock is held.

A complete solution would be to have multiple connection pools, e.g. as many pools as the system has CPU cores. When a connection is needed, any random pool is chosen and only this pool's lock is acquired. This way, it becomes unlikely that there is lock contention. If the chosen pool happens to be empty, the other pools are checked first before attempting to create a new connection.

An even better solution would be to not use a random pool, but to use the pool whose number is the number of the CPU core the current thread is running on. This way, each pool tends to stay stable in only one CPUs cache, presumably making things very fast.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In a heavily used multi-threaded rails application (on JRuby),
it appears that when CPU usage goes to about 350% (on an 8 core
machine), almost all threads (e.g. more than 100 threads) wait on
the lock &quot;@connection_mutex&quot;. This means that incoming requests
cannot be served fast enough anymore.&lt;/p&gt;
&lt;p&gt;Nick Sieger provided an ad-hoc work-around in &lt;a href=
&quot;http://gist.github.com/300782&quot;&gt;http://gist.github.com/300782&lt;/a&gt;
by switching off all connection pooling, but this work-around means
a considerable increase of latency, as for each new request a new
connection would be needed to be established.&lt;/p&gt;
&lt;p&gt;A partial solution would be to reduce the work during the time
the lock is held.&lt;/p&gt;
&lt;p&gt;A complete solution would be to have multiple connection pools,
e.g. as many pools as the system has CPU cores. When a connection
is needed, any random pool is chosen and only this pool's lock is
acquired. This way, it becomes unlikely that there is lock
contention. If the chosen pool happens to be empty, the other pools
are checked first before attempting to create a new connection.&lt;/p&gt;
&lt;p&gt;An even better solution would be to not use a random pool, but
to use the pool whose number is the number of the CPU core the
current thread is running on. This way, each pool tends to stay
stable in only one CPUs cache, presumably making things very
fast.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In a heavily used multi-threaded rails application (on JRuby), it appears that when CPU usage goes to about 350% (on an 8 core machine), almost all threads (e.g. more than 100 threads) wait on the lock &quot;@connection_mutex&quot;. This means that incoming requests cannot be served fast enough anymore.

Nick Sieger provided an ad-hoc work-around in http://gist.github.com/300782 by switching off all connection pooling, but this work-around means a considerable increase of latency, as for each new request a new connection would be needed to be established.

A partial solution would be to reduce the work during the time the lock is held.

A complete solution would be to have multiple connection pools, e.g. as many pools as the system has CPU cores. When a connection is needed, any random pool is chosen and only this pool's lock is acquired. This way, it becomes unlikely that there is lock contention. If the chosen pool happens to be empty, the other pools are checked first before attempting to create a new connection.

An even better solution would be to not use a random pool, but to use the pool whose number is the number of the CPU core the current thread is running on. This way, each pool tends to stay stable in only one CPUs cache, presumably making things very fast.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In a heavily used multi-threaded rails application (on JRuby),
it appears that when CPU usage goes to about 350% (on an 8 core
machine), almost all threads (e.g. more than 100 threads) wait on
the lock &quot;@connection_mutex&quot;. This means that incoming requests
cannot be served fast enough anymore.&lt;/p&gt;
&lt;p&gt;Nick Sieger provided an ad-hoc work-around in &lt;a href=
&quot;http://gist.github.com/300782&quot;&gt;http://gist.github.com/300782&lt;/a&gt;
by switching off all connection pooling, but this work-around means
a considerable increase of latency, as for each new request a new
connection would be needed to be established.&lt;/p&gt;
&lt;p&gt;A partial solution would be to reduce the work during the time
the lock is held.&lt;/p&gt;
&lt;p&gt;A complete solution would be to have multiple connection pools,
e.g. as many pools as the system has CPU cores. When a connection
is needed, any random pool is chosen and only this pool's lock is
acquired. This way, it becomes unlikely that there is lock
contention. If the chosen pool happens to be empty, the other pools
are checked first before attempting to create a new connection.&lt;/p&gt;
&lt;p&gt;An even better solution would be to not use a random pool, but
to use the pool whose number is the number of the CPU core the
current thread is running on. This way, each pool tends to stay
stable in only one CPUs cache, presumably making things very
fast.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-10T23:44:07+00:00</created-at>
      <creator-id type="integer">86142</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3926</number>
      <permalink>scalability-lock-contention-on-activerecordconnectionadaptersconnectionpoolconnection_mutex</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Scalability: Lock contention on ActiveRecord::ConnectionAdapters::ConnectionPool.@connection_mutex</title>
      <updated-at type="datetime">2010-02-10T23:44:09+00:00</updated-at>
      <user-id type="integer">86142</user-id>
      <version type="integer">1</version>
      <user-name>xbaldauf</user-name>
      <creator-name>xbaldauf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3926</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:44:41+00:00</created-at>
      <creator-id type="integer">86142</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3926</number>
      <permalink>scalability-lock-contention-on-activerecordconnectionadaptersconnectionpoolconnection_mutex</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Scalability: Lock contention on ActiveRecord::ConnectionAdapters::ConnectionPool.@connection_mutex</title>
      <updated-at type="datetime">2011-02-02T17:54:07+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>xbaldauf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3926</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:44:42+00:00</created-at>
      <creator-id type="integer">86142</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3926</number>
      <permalink>scalability-lock-contention-on-activerecordconnectionadaptersconnectionpoolconnection_mutex</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Scalability: Lock contention on ActiveRecord::ConnectionAdapters::ConnectionPool.@connection_mutex</title>
      <updated-at type="datetime">2011-02-02T17:53:55+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>xbaldauf</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3926</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
