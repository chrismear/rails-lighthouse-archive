<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-23T06:56:38+00:00</created-at>
  <creator-id type="integer">80593</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3607</number>
  <permalink>after_validate-does-not-stop-when-false-is-returned</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>after_validate does not stop when false is returned</title>
  <updated-at type="datetime">2010-01-20T12:48:30+00:00</updated-at>
  <user-id type="integer">25293</user-id>
  <version type="integer">3</version>
  <user-name>Prem Sichanugrist (sikachu)</user-name>
  <creator-name>gucki</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3607</url>
  <priority-name nil="true"></priority-name>
  <original-body>class Address &lt; ActiveRecord::Base
  acts_as_mappable

  belongs_to :user
  belongs_to :country

  validates_presence_of :address
  validates_length_of :address, :within =&gt; 3..100

  validates_presence_of :country
  validates_associated :country

  after_validation :geocode_address

private

  def geocode_address
    errors.add(:address, &quot;Could not Geocode address&quot;)
    return false
  end
end

Using &quot;before_validation&quot; instead of &quot;after_validation&quot; works.</original-body>
  <latest-body>class Address &lt; ActiveRecord::Base
  acts_as_mappable

  belongs_to :user
  belongs_to :country

  validates_presence_of :address
  validates_length_of :address, :within =&gt; 3..100

  validates_presence_of :country
  validates_associated :country

  after_validation :geocode_address

private

  def geocode_address
    errors.add(:address, &quot;Could not Geocode address&quot;)
    return false
  end
end

Using &quot;before_validation&quot; instead of &quot;after_validation&quot; works.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;class Address &amp;lt; ActiveRecord::Base&lt;br&gt;
acts_as_mappable&lt;/p&gt;
&lt;p&gt;belongs_to :user belongs_to :country&lt;/p&gt;
&lt;p&gt;validates_presence_of :address validates_length_of :address,
:within =&amp;gt; 3..100&lt;/p&gt;
&lt;p&gt;validates_presence_of :country validates_associated :country&lt;/p&gt;
&lt;p&gt;after_validation :geocode_address&lt;/p&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;p&gt;def geocode_address&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;errors.add(:address, &quot;Could not Geocode address&quot;)
return false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Using &quot;before_validation&quot; instead of &quot;after_validation&quot;
works.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>class Address &lt; ActiveRecord::Base
  acts_as_mappable

  belongs_to :user
  belongs_to :country

  validates_presence_of :address
  validates_length_of :address, :within =&gt; 3..100

  validates_presence_of :country
  validates_associated :country

  after_validation :geocode_address

private

  def geocode_address
    errors.add(:address, &quot;Could not Geocode address&quot;)
    return false
  end
end

Using &quot;before_validation&quot; instead of &quot;after_validation&quot; works.</body>
      <body-html>&lt;div&gt;&lt;p&gt;class Address &amp;lt; ActiveRecord::Base&lt;br&gt;
acts_as_mappable&lt;/p&gt;
&lt;p&gt;belongs_to :user belongs_to :country&lt;/p&gt;
&lt;p&gt;validates_presence_of :address validates_length_of :address,
:within =&amp;gt; 3..100&lt;/p&gt;
&lt;p&gt;validates_presence_of :country validates_associated :country&lt;/p&gt;
&lt;p&gt;after_validation :geocode_address&lt;/p&gt;
&lt;p&gt;private&lt;/p&gt;
&lt;p&gt;def geocode_address&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;errors.add(:address, &quot;Could not Geocode address&quot;)
return false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Using &quot;before_validation&quot; instead of &quot;after_validation&quot;
works.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-23T06:56:38+00:00</created-at>
      <creator-id type="integer">80593</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3607</number>
      <permalink>after_validate-does-not-stop-when-false-is-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.5 after_validate</tag>
      <title>after_validate does not stop when false is returned</title>
      <updated-at type="datetime">2009-12-23T06:56:39+00:00</updated-at>
      <user-id type="integer">80593</user-id>
      <version type="integer">1</version>
      <user-name>gucki</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3607</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think this is an expected output.

You should have used `before_save`, `before_create` or `before_update` if you want to break the saving process of the record when something goes wrong.

I think `after_validation` callback should only be used if `before_save`, `before_create` or `before_update` is not a suitable place to change the data that will fail the validation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think this is an expected output.&lt;/p&gt;
&lt;p&gt;You should have used &lt;code&gt;before_save&lt;/code&gt;,
&lt;code&gt;before_create&lt;/code&gt; or &lt;code&gt;before_update&lt;/code&gt; if you
want to break the saving process of the record when something goes
wrong.&lt;/p&gt;
&lt;p&gt;I think &lt;code&gt;after_validation&lt;/code&gt; callback should only be
used if &lt;code&gt;before_save&lt;/code&gt;, &lt;code&gt;before_create&lt;/code&gt; or
&lt;code&gt;before_update&lt;/code&gt; is not a suitable place to change the
data that will fail the validation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-25T16:01:19+00:00</created-at>
      <creator-id type="integer">80593</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.5 after_validate
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3607</number>
      <permalink>after_validate-does-not-stop-when-false-is-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>after_validate does not stop when false is returned</title>
      <updated-at type="datetime">2009-12-25T16:01:25+00:00</updated-at>
      <user-id type="integer">25293</user-id>
      <version type="integer">2</version>
      <user-name>Prem Sichanugrist (sikachu)</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3607</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-20T12:48:26+00:00</created-at>
      <creator-id type="integer">80593</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3607</number>
      <permalink>after_validate-does-not-stop-when-false-is-returned</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>after_validate does not stop when false is returned</title>
      <updated-at type="datetime">2010-01-20T12:48:30+00:00</updated-at>
      <user-id type="integer">25293</user-id>
      <version type="integer">3</version>
      <user-name>Prem Sichanugrist (sikachu)</user-name>
      <creator-name>gucki</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3607</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
