<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-12-18T20:28:45+00:00</created-at>
  <creator-id type="integer">80241</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3597</number>
  <permalink>strategylocalcache-doesnt-work-with-multiple-caching-methods</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Strategy::LocalCache doesn't work with multiple caching methods</title>
  <updated-at type="datetime">2009-12-20T22:58:54+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">3</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>jeffsc</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3597</url>
  <priority-name>Low</priority-name>
  <original-body>I'm using Strategy::LocalCache to provide solely a per-request local cache (by implementing a caching strategy that extends LocalCache but does nothing itself).  When I upgraded from 2.3.4 -&gt; 2.3.5, LocalCache stopped working.

The problem is that when the klass is created in middleware, the thread_local_key is evaluated once at load, and is fixed as that no matter where it is used.  In this case, it is fixed at active_support_mem_cache_store_local_cache.

At runtime, it uses a key for whatever class is currently being used; in my case, active_support_request_store_local_cache.  Therefore it doesn't match the key that was used to set up a new MemoryStore; and it always results in a nil local_cache.

The end result is that LocalCache only works if you use it for a single cache store, but fails if you try it use it for another one.

Test cache implementation is attached; put this file in lib/active_support_cache and try to use RequestStore as your caching strategy -- it will always fail to find the key you just put in the cache.  It should find the key if the read is within the same request as the write; and fail only if it is across requests.</original-body>
  <latest-body>I'm using Strategy::LocalCache to provide solely a per-request local cache (by implementing a caching strategy that extends LocalCache but does nothing itself).  When I upgraded from 2.3.4 -&gt; 2.3.5, LocalCache stopped working.

The problem is that when the klass is created in middleware, the thread_local_key is evaluated once at load, and is fixed as that no matter where it is used.  In this case, it is fixed at active_support_mem_cache_store_local_cache.

At runtime, it uses a key for whatever class is currently being used; in my case, active_support_request_store_local_cache.  Therefore it doesn't match the key that was used to set up a new MemoryStore; and it always results in a nil local_cache.

The end result is that LocalCache only works if you use it for a single cache store, but fails if you try it use it for another one.

Test cache implementation is attached; put this file in lib/active_support_cache and try to use RequestStore as your caching strategy -- it will always fail to find the key you just put in the cache.  It should find the key if the read is within the same request as the write; and fail only if it is across requests.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm using Strategy::LocalCache to provide solely a per-request
local cache (by implementing a caching strategy that extends
LocalCache but does nothing itself). When I upgraded from 2.3.4
-&amp;gt; 2.3.5, LocalCache stopped working.&lt;/p&gt;
&lt;p&gt;The problem is that when the klass is created in middleware, the
thread_local_key is evaluated once at load, and is fixed as that no
matter where it is used. In this case, it is fixed at
active_support_mem_cache_store_local_cache.&lt;/p&gt;
&lt;p&gt;At runtime, it uses a key for whatever class is currently being
used; in my case, active_support_request_store_local_cache.
Therefore it doesn't match the key that was used to set up a new
MemoryStore; and it always results in a nil local_cache.&lt;/p&gt;
&lt;p&gt;The end result is that LocalCache only works if you use it for a
single cache store, but fails if you try it use it for another
one.&lt;/p&gt;
&lt;p&gt;Test cache implementation is attached; put this file in
lib/active_support_cache and try to use RequestStore as your
caching strategy -- it will always fail to find the key you just
put in the cache. It should find the key if the read is within the
same request as the write; and fail only if it is across
requests.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm using Strategy::LocalCache to provide solely a per-request local cache (by implementing a caching strategy that extends LocalCache but does nothing itself).  When I upgraded from 2.3.4 -&gt; 2.3.5, LocalCache stopped working.

The problem is that when the klass is created in middleware, the thread_local_key is evaluated once at load, and is fixed as that no matter where it is used.  In this case, it is fixed at active_support_mem_cache_store_local_cache.

At runtime, it uses a key for whatever class is currently being used; in my case, active_support_request_store_local_cache.  Therefore it doesn't match the key that was used to set up a new MemoryStore; and it always results in a nil local_cache.

The end result is that LocalCache only works if you use it for a single cache store, but fails if you try it use it for another one.

Test cache implementation is attached; put this file in lib/active_support_cache and try to use RequestStore as your caching strategy -- it will always fail to find the key you just put in the cache.  It should find the key if the read is within the same request as the write; and fail only if it is across requests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm using Strategy::LocalCache to provide solely a per-request
local cache (by implementing a caching strategy that extends
LocalCache but does nothing itself). When I upgraded from 2.3.4
-&amp;gt; 2.3.5, LocalCache stopped working.&lt;/p&gt;
&lt;p&gt;The problem is that when the klass is created in middleware, the
thread_local_key is evaluated once at load, and is fixed as that no
matter where it is used. In this case, it is fixed at
active_support_mem_cache_store_local_cache.&lt;/p&gt;
&lt;p&gt;At runtime, it uses a key for whatever class is currently being
used; in my case, active_support_request_store_local_cache.
Therefore it doesn't match the key that was used to set up a new
MemoryStore; and it always results in a nil local_cache.&lt;/p&gt;
&lt;p&gt;The end result is that LocalCache only works if you use it for a
single cache store, but fails if you try it use it for another
one.&lt;/p&gt;
&lt;p&gt;Test cache implementation is attached; put this file in
lib/active_support_cache and try to use RequestStore as your
caching strategy -- it will always fail to find the key you just
put in the cache. It should find the key if the read is within the
same request as the write; and fail only if it is across
requests.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-18T20:28:45+00:00</created-at>
      <creator-id type="integer">80241</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3597</number>
      <permalink>strategylocalcache-doesnt-work-with-multiple-caching-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Strategy::LocalCache doesn't work with multiple caching methods</title>
      <updated-at type="datetime">2009-12-18T20:28:47+00:00</updated-at>
      <user-id type="integer">80241</user-id>
      <version type="integer">1</version>
      <user-name>jeffsc</user-name>
      <creator-name>jeffsc</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3597</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>LocalCache was only designed to work with Memcache. Its interesting that it sort of works in other cases. If you come up with a fix, I'd gladly commit.</body>
      <body-html>&lt;div&gt;&lt;p&gt;LocalCache was only designed to work with Memcache. Its
interesting that it sort of works in other cases. If you come up
with a fix, I'd gladly commit.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-12-20T22:58:29+00:00</created-at>
      <creator-id type="integer">80241</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3597</number>
      <permalink>strategylocalcache-doesnt-work-with-multiple-caching-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>Strategy::LocalCache doesn't work with multiple caching methods</title>
      <updated-at type="datetime">2009-12-20T22:58:33+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>jeffsc</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3597</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-12-20T22:58:52+00:00</created-at>
      <creator-id type="integer">80241</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3597</number>
      <permalink>strategylocalcache-doesnt-work-with-multiple-caching-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Strategy::LocalCache doesn't work with multiple caching methods</title>
      <updated-at type="datetime">2009-12-20T22:58:54+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>jeffsc</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3597</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2ae3b78ede3ec448f9841603930a767ced969d78</code>
      <content-type>application/octet-stream</content-type>
      <created-at type="datetime">2009-12-18T20:28:45+00:00</created-at>
      <filename>request_store.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">357686</id>
      <size type="integer">490</size>
      <uploader-id type="integer">80241</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/357686/request_store.rb</url>
    </attachment>
  </attachments>
</ticket>
