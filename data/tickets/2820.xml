<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-19T22:53:00+01:00</created-at>
  <creator-id type="integer">48412</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2820</number>
  <permalink>feature-request-add-association-option-for-find_with_associations</permalink>
  <priority type="integer">1916</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>hold</state>
  <tag>arel preload</tag>
  <title>AR::Base.find_every should support :preload =&gt; false option</title>
  <updated-at type="datetime">2009-08-08T01:43:37+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">4</version>
  <user-name>Pratik</user-name>
  <creator-name>ransom-briggs (at uiowa)</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2820</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When doing an :include, the preload_associations method of pulling the included object takes significantly longer as data sizes go up - it went from 35 percent slower to 45 percent slower to 55 percent slower as I doubled the dataset size.

Could you please add an option to force the include to use find_with_associations instead of preload_associations?  Right now we include a condition that uses the joined table that we know is always true that forces it - but this is not our preferred solution.

So find_every would end up being something like this

@@@ ruby
 if include_associations.any? &amp;&amp; (references_eager_loaded_tables?(options) || options[:include_join])
@@@</original-body>
  <latest-body>When doing an :include, the preload_associations method of pulling the included object takes significantly longer as data sizes go up - it went from 35 percent slower to 45 percent slower to 55 percent slower as I doubled the dataset size.

Could you please add an option to force the include to use find_with_associations instead of preload_associations?  Right now we include a condition that uses the joined table that we know is always true that forces it - but this is not our preferred solution.

So find_every would end up being something like this

@@@ ruby
 if include_associations.any? &amp;&amp; (references_eager_loaded_tables?(options) || options[:include_join])
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When doing an :include, the preload_associations method of
pulling the included object takes significantly longer as data
sizes go up - it went from 35 percent slower to 45 percent slower
to 55 percent slower as I doubled the dataset size.&lt;/p&gt;
&lt;p&gt;Could you please add an option to force the include to use
find_with_associations instead of preload_associations? Right now
we include a condition that uses the joined table that we know is
always true that forces it - but this is not our preferred
solution.&lt;/p&gt;
&lt;p&gt;So find_every would end up being something like this&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
 if include_associations.any? &amp;amp;&amp;amp; (references_eager_loaded_tables?(options) || options[:include_join])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When doing an :include, the preload_associations method of pulling the included object takes significantly longer as data sizes go up - it went from 35 percent slower to 45 percent slower to 55 percent slower as I doubled the dataset size.

Could you please add an option to force the include to use find_with_associations instead of preload_associations?  Right now we include a condition that uses the joined table that we know is always true that forces it - but this is not our preferred solution.

So find_every would end up being something like this

@@@ ruby
 if include_associations.any? &amp;&amp; (references_eager_loaded_tables?(options) || options[:include_join])
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;When doing an :include, the preload_associations method of
pulling the included object takes significantly longer as data
sizes go up - it went from 35 percent slower to 45 percent slower
to 55 percent slower as I doubled the dataset size.&lt;/p&gt;
&lt;p&gt;Could you please add an option to force the include to use
find_with_associations instead of preload_associations? Right now
we include a condition that uses the joined table that we know is
always true that forces it - but this is not our preferred
solution.&lt;/p&gt;
&lt;p&gt;So find_every would end up being something like this&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; if include_associations.any? &amp;amp;&amp;amp; (references_eager_loaded_tables?(options) || options[:include_join])&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-19T22:53:00+01:00</created-at>
      <creator-id type="integer">48412</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2820</number>
      <permalink>feature-request-add-association-option-for-find_with_associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading find_with_associations include preload_associations</tag>
      <title>Feature Request - add association option for find_with_associations</title>
      <updated-at type="datetime">2009-06-19T22:53:04+01:00</updated-at>
      <user-id type="integer">48412</user-id>
      <version type="integer">1</version>
      <user-name>ransom-briggs (at uiowa)</user-name>
      <creator-name>ransom-briggs (at uiowa)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2820</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've been wanting this too, and so I made a patch for it (pass `:preload =&gt; false` to disable preloading for a specific query). A test is included, but I wasn't quite sure where it should go (looking through all those tests gives me a headache), or even if the one is enough. But it made sense to me, at least.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've been wanting this too, and so I made a patch for it (pass
&lt;code&gt;:preload =&amp;gt; false&lt;/code&gt; to disable preloading for a
specific query). A test is included, but I wasn't quite sure where
it should go (looking through all those tests gives me a headache),
or even if the one is enough. But it made sense to me, at
least.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-28T09:47:37+01:00</created-at>
      <creator-id type="integer">48412</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Feature Request - add association option for find_with_associations
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2820</number>
      <permalink>feature-request-add-association-option-for-find_with_associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading find_with_associations include preload_associations</tag>
      <title>AR::Base.find_every should support :preload =&gt; false option</title>
      <updated-at type="datetime">2009-06-28T09:47:41+01:00</updated-at>
      <user-id type="integer">34034</user-id>
      <version type="integer">2</version>
      <user-name>Elliot Winkler</user-name>
      <creator-name>ransom-briggs (at uiowa)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2820</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-07T14:15:39+01:00</created-at>
      <creator-id type="integer">48412</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: eager_loading find_with_associations include preload_associations
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2820</number>
      <permalink>feature-request-add-association-option-for-find_with_associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bugmash eager_loading find_with_associations include preload_associations</tag>
      <title>AR::Base.find_every should support :preload =&gt; false option</title>
      <updated-at type="datetime">2009-08-07T14:15:42+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">3</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>ransom-briggs (at uiowa)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2820</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Keeping this on hold till Emilio's arel branch is merged in. We had a discussion in the core ML about this a while ago - http://groups.google.com/group/rubyonrails-core/browse_thread/thread/3d9746ba947f7815

Please do chime in there if you have any more thoughts/suggestions.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Keeping this on hold till Emilio's arel branch is merged in. We
had a discussion in the core ML about this a while ago - &lt;a href=
&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/3d9746ba947f7815&quot;&gt;
http://groups.google.com/group/rubyonrails-core/browse_thread/threa...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please do chime in there if you have any more
thoughts/suggestions.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-08T01:43:35+01:00</created-at>
      <creator-id type="integer">48412</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: bugmash eager_loading find_with_associations include preload_associations
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2820</number>
      <permalink>feature-request-add-association-option-for-find_with_associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>arel preload</tag>
      <title>AR::Base.find_every should support :preload =&gt; false option</title>
      <updated-at type="datetime">2009-08-08T01:43:37+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>ransom-briggs (at uiowa)</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2820</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f022a745024eba45a8cca916b2a929370100667a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-06-28T09:47:37+01:00</created-at>
      <filename>find_every_preload_false_option.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">138456</id>
      <size type="integer">2247</size>
      <uploader-id type="integer">34034</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/138456/find_every_preload_false_option.patch</url>
    </attachment>
  </attachments>
</ticket>
