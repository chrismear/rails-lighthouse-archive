<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-08T00:28:40+01:00</created-at>
  <creator-id type="integer">18887</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">992</number>
  <permalink>sql-variable-substitution-on-joins</permalink>
  <priority type="integer">434</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord edge enhancement</tag>
  <title>sql variable substitution on :joins</title>
  <updated-at type="datetime">2008-12-20T15:28:54+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Mathijs Kwik</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/992</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I would like to have substitution+sanitizing features on :joins.

@@@ ruby
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&gt; 'inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id'.
    :conditions =&gt; ['users_for_admin_checking.admin = ?', true] }
end
@@@

Here I had to move the condition to :conditions, just to get the ? substitution. I need the substitution in this case because boolean values are handled differently on sqlite/mysql.

In this case I would have liked to keep it all in the join, since this is actually a join condition.
@@@ ruby
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&gt; ['inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id and users_for_admin_checking.admin = ?', true]
  }
end
@@@

I think it doesn't interfere with other stuff, since with the current behavior, it acts the same as when using symbols in an array.

at the moment:
:joins =&gt; :symbol will try some inner join for association named :symbol
:joins =&gt; 'string' will just put the string in the sql query.
:joins =&gt; [:symbol, :symbol] will include inner joins for all associations
:joins =&gt; ['string', *values] will try the same as with symbols above, which is inconsistent considering the difference between symbols and strings without the array.

Any chance this can get implemented?
Thanks</original-body>
  <latest-body>I would like to have substitution+sanitizing features on :joins.

@@@ ruby
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&gt; 'inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id'.
    :conditions =&gt; ['users_for_admin_checking.admin = ?', true] }
end
@@@

Here I had to move the condition to :conditions, just to get the ? substitution. I need the substitution in this case because boolean values are handled differently on sqlite/mysql.

In this case I would have liked to keep it all in the join, since this is actually a join condition.
@@@ ruby
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&gt; ['inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id and users_for_admin_checking.admin = ?', true]
  }
end
@@@

I think it doesn't interfere with other stuff, since with the current behavior, it acts the same as when using symbols in an array.

at the moment:
:joins =&gt; :symbol will try some inner join for association named :symbol
:joins =&gt; 'string' will just put the string in the sql query.
:joins =&gt; [:symbol, :symbol] will include inner joins for all associations
:joins =&gt; ['string', *values] will try the same as with symbols above, which is inconsistent considering the difference between symbols and strings without the array.

Any chance this can get implemented?
Thanks</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I would like to have substitution+sanitizing features on
:joins.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&amp;gt; 'inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id'.
    :conditions =&amp;gt; ['users_for_admin_checking.admin = ?', true] }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I had to move the condition to :conditions, just to get the
? substitution. I need the substitution in this case because
boolean values are handled differently on sqlite/mysql.&lt;/p&gt;
&lt;p&gt;In this case I would have liked to keep it all in the join,
since this is actually a join condition.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&amp;gt; ['inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id and users_for_admin_checking.admin = ?', true]
  }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think it doesn't interfere with other stuff, since with the
current behavior, it acts the same as when using symbols in an
array.&lt;/p&gt;
&lt;p&gt;at the moment: :joins =&amp;gt; :symbol will try some inner join for
association named :symbol :joins =&amp;gt; 'string' will just put the
string in the sql query. :joins =&amp;gt; [:symbol, :symbol] will
include inner joins for all associations :joins =&amp;gt; ['string',
*values] will try the same as with symbols above, which is
inconsistent considering the difference between symbols and strings
without the array.&lt;/p&gt;
&lt;p&gt;Any chance this can get implemented? Thanks&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I would like to have substitution+sanitizing features on :joins.

@@@ ruby
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&gt; 'inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id'.
    :conditions =&gt; ['users_for_admin_check.admin = ?', true] }
end
@@@

Here I had to move the condition to :conditions, just to get the ? substitution. I need the substitution in this case because boolean values are handled differently on sqlite/mysql.

In this case I would have liked to keep it all in the join, since this is actually a join condition.
@@@ ruby
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&gt; ['inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id and users_for_admin_checking.admin = ?', true]
  }
end
@@@

I think it doesn't interfere with other stuff, since with the current behavior, it acts the same as when using symbols in an array.

at the moment:
Using :joins =&gt; :symbol will try some inner join for association named :symbol
Using :joins =&gt; 'string' will just put the string in the sql query.
Using :joins =&gt; [:symbol, :symbol] will include inner joins for all associations
Using :joins =&gt; ['string', *values] will try the same as with symbols above, which is inconsistent considering the difference between symbols and strings without the array.

Any chance this can get implemented?
Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;I would like to have substitution+sanitizing features on
:joins.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&amp;gt; 'inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id'.
    :conditions =&amp;gt; ['users_for_admin_check.admin = ?', true] }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here I had to move the condition to :conditions, just to get the
? substitution. I need the substitution in this case because
boolean values are handled differently on sqlite/mysql.&lt;/p&gt;
&lt;p&gt;In this case I would have liked to keep it all in the join,
since this is actually a join condition.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Post
  belongs_to :user
  named_scope :by_admins, {
    :joins =&amp;gt; ['inner join users as users_for_admin_check on users_for_admin_check.id = posts.user_id and users_for_admin_checking.admin = ?', true]
  }
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think it doesn't interfere with other stuff, since with the
current behavior, it acts the same as when using symbols in an
array.&lt;/p&gt;
&lt;p&gt;at the moment: Using :joins =&amp;gt; :symbol will try some inner
join for association named :symbol Using :joins =&amp;gt; 'string' will
just put the string in the sql query. Using :joins =&amp;gt; [:symbol,
:symbol] will include inner joins for all associations Using :joins
=&amp;gt; ['string', *values] will try the same as with symbols above,
which is inconsistent considering the difference between symbols
and strings without the array.&lt;/p&gt;
&lt;p&gt;Any chance this can get implemented? Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-08T00:28:40+01:00</created-at>
      <creator-id type="integer">18887</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">992</number>
      <permalink>sql-variable-substitution-on-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord edge enhancement</tag>
      <title>sql variable substitution on :joins</title>
      <updated-at type="datetime">2008-09-08T00:31:26+01:00</updated-at>
      <user-id type="integer">18887</user-id>
      <version type="integer">1</version>
      <user-name>Mathijs Kwik</user-name>
      <creator-name>Mathijs Kwik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/992</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think you should just use :conditions.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think you should just use :conditions.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-20T15:28:50+00:00</created-at>
      <creator-id type="integer">18887</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">992</number>
      <permalink>sql-variable-substitution-on-joins</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>activerecord edge enhancement</tag>
      <title>sql variable substitution on :joins</title>
      <updated-at type="datetime">2008-12-20T15:28:54+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Mathijs Kwik</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/992</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
