<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-18T05:23:01+01:00</created-at>
  <creator-id type="integer">101821</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6711</number>
  <permalink>activerecord-json-serialization-should-respect-as_json-definition-of-included-association</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>ActiveRecord json serialization should respect as_json definition of included association</title>
  <updated-at type="datetime">2011-04-18T10:36:03+01:00</updated-at>
  <user-id type="integer">146020</user-id>
  <version type="integer">2</version>
  <user-name>lindaouyang1</user-name>
  <creator-name>Jake Dempsey</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6711</url>
  <priority-name nil="true"></priority-name>
  <original-body>When I define an as_json override in Question, and provide it with an include for the associated profile, it does not use the as_json defined in the profile model.  

class Question &lt; ActiveRecord::Base
  def as_json(opts={})
    super(:only =&gt; [:text],
      :include =&gt; [:profile]
    )
  end
end

class Profile &lt; ActiveRecord::Base
   def as_json(opts={})
     super({ :only =&gt; [:display_name], :methods =&gt; [:avatar] })
   end
end

This will output the question as json and for the profile association, just output its id field?  The only workaround I have found is to not provide an as_json on the profile and duplicate its as_json attrs everywhere I want to include it in a rendering.</original-body>
  <latest-body>When I define an as_json override in Question, and provide it with an include for the associated profile, it does not use the as_json defined in the profile model.  

class Question &lt; ActiveRecord::Base
  def as_json(opts={})
    super(:only =&gt; [:text],
      :include =&gt; [:profile]
    )
  end
end

class Profile &lt; ActiveRecord::Base
   def as_json(opts={})
     super({ :only =&gt; [:display_name], :methods =&gt; [:avatar] })
   end
end

This will output the question as json and for the profile association, just output its id field?  The only workaround I have found is to not provide an as_json on the profile and duplicate its as_json attrs everywhere I want to include it in a rendering.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When I define an as_json override in Question, and provide it
with an include for the associated profile, it does not use the
as_json defined in the profile model.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;class Question &amp;lt; ActiveRecord::Base&lt;br&gt;
def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(:only =&amp;gt; [:text],
  :include =&amp;gt; [:profile]
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Profile &amp;lt; ActiveRecord::Base&lt;br&gt;
def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; super({ :only =&amp;gt; [:display_name], :methods =&amp;gt; [:avatar] })&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;This will output the question as json and for the profile
association, just output its id field? The only workaround I have
found is to not provide an as_json on the profile and duplicate its
as_json attrs everywhere I want to include it in a rendering.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When I define an as_json override in Question, and provide it with an include for the associated profile, it does not use the as_json defined in the profile model.  

class Question &lt; ActiveRecord::Base
  def as_json(opts={})
    super(:only =&gt; [:text],
      :include =&gt; [:profile]
    )
  end
end

class Profile &lt; ActiveRecord::Base
   def as_json(opts={})
     super({ :only =&gt; [:display_name], :methods =&gt; [:avatar] })
   end
end

This will output the question as json and for the profile association, just output its id field?  The only workaround I have found is to not provide an as_json on the profile and duplicate its as_json attrs everywhere I want to include it in a rendering.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When I define an as_json override in Question, and provide it
with an include for the associated profile, it does not use the
as_json defined in the profile model.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;class Question &amp;lt; ActiveRecord::Base&lt;br&gt;
def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;super(:only =&amp;gt; [:text],
  :include =&amp;gt; [:profile]
)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Profile &amp;lt; ActiveRecord::Base&lt;br&gt;
def as_json(opts={})&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; super({ :only =&amp;gt; [:display_name], :methods =&amp;gt; [:avatar] })&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;This will output the question as json and for the profile
association, just output its id field? The only workaround I have
found is to not provide an as_json on the profile and duplicate its
as_json attrs everywhere I want to include it in a rendering.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T05:23:01+01:00</created-at>
      <creator-id type="integer">101821</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6711</number>
      <permalink>activerecord-json-serialization-should-respect-as_json-definition-of-included-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord json serialization should respect as_json definition of included association</title>
      <updated-at type="datetime">2011-04-18T05:23:04+01:00</updated-at>
      <user-id type="integer">101821</user-id>
      <version type="integer">1</version>
      <user-name>Jake Dempsey</user-name>
      <creator-name>Jake Dempsey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6711</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&lt;a href=&quot;http://www.royalbasewatch.com/chanel-38.html&quot; title=&quot;Chanel&quot;&gt;&lt;b&gt;Chanel watches&lt;/b&gt;&lt;/a&gt;,Elegant, noble, beautiful and unique designs exclusively for women watch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.royalbasewatch.com/chanel-38.html&quot; title=
&quot;Chanel&quot;&gt;&lt;b&gt;Chanel watches&lt;/b&gt;&lt;/a&gt;,Elegant, noble, beautiful and
unique designs exclusively for women watch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-18T10:35:59+01:00</created-at>
      <creator-id type="integer">101821</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6711</number>
      <permalink>activerecord-json-serialization-should-respect-as_json-definition-of-included-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord json serialization should respect as_json definition of included association</title>
      <updated-at type="datetime">2011-04-18T10:36:03+01:00</updated-at>
      <user-id type="integer">146020</user-id>
      <version type="integer">2</version>
      <user-name>lindaouyang1</user-name>
      <creator-name>Jake Dempsey</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6711</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
