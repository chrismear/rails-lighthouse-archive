<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">5</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-07-13T11:51:22+01:00</created-at>
  <creator-id type="integer">21652</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">611</number>
  <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
  <priority type="integer">98</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.1 activerecord bug patch tests</tag>
  <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
  <updated-at type="datetime">2008-12-21T17:24:18+00:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">10</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>azimux</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The code in postgresql_adapter for binary_to_string checks the input against /\\\d{3}/ to determine if it's blob text or not.

This doesn't make sense because blob text could not have any octal strings in it, and likewise, non blob encoded binary data can easily have coincidental octal codes in it.  For example, the attatched file gives a false positive.

If you upload it in a multipart form and try to store it into the database into a binary column, you will encounter a bug with this trace:

can't convert Fixnum into String
RAILS_ROOT: C:/Users/miles/Documents/svnlocal/RubyMaps/trunk/RubyMaps

Application Trace | Framework Trace | Full Trace 
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `&lt;&lt;'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `binary_to_string'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:126:in `binary_to_string'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/abstract/schema_definitions.rb:69:in `type_cast'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:150:in `field_changed?'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:128:in `write_attribute'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/attribute_methods.rb:211:in `file_data='
app/models/picture.rb:12:in `from_file_data'

there's a little more info here: http://www.nopugs.com/binary-to-string-bug

To create a test that fails, you can just try to write (&quot;&quot; &lt;&lt; 92 &lt;&lt; 53 &lt;&lt; 53 &lt;&lt; 53)  to any model object's binary field.  This will fail because it will interpret this binary data as \555 which is octal for 365, which is above 255 which causes binary_to_string to raise the above exception.  A better but more involved test would be to use something that codes below 255 and have it fail when the saved value doesn't match the initial, if that indeed happens.</original-body>
  <latest-body>The code in postgresql_adapter for binary_to_string checks the input against /\\\d{3}/ to determine if it's blob text or not.

This doesn't make sense because blob text could not have any octal strings in it, and likewise, non blob encoded binary data can easily have coincidental octal codes in it.  For example, the attatched file gives a false positive.

If you upload it in a multipart form and try to store it into the database into a binary column, you will encounter a bug with this trace:

can't convert Fixnum into String
RAILS_ROOT: C:/Users/miles/Documents/svnlocal/RubyMaps/trunk/RubyMaps

Application Trace | Framework Trace | Full Trace 
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `&lt;&lt;'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `binary_to_string'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:126:in `binary_to_string'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/abstract/schema_definitions.rb:69:in `type_cast'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:150:in `field_changed?'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:128:in `write_attribute'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/attribute_methods.rb:211:in `file_data='
app/models/picture.rb:12:in `from_file_data'

there's a little more info here: http://www.nopugs.com/binary-to-string-bug

To create a test that fails, you can just try to write (&quot;&quot; &lt;&lt; 92 &lt;&lt; 53 &lt;&lt; 53 &lt;&lt; 53)  to any model object's binary field.  This will fail because it will interpret this binary data as \555 which is octal for 365, which is above 255 which causes binary_to_string to raise the above exception.  A better but more involved test would be to use something that codes below 255 and have it fail when the saved value doesn't match the initial, if that indeed happens.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The code in postgresql_adapter for binary_to_string checks the input against /\\\d{3}/ to determine if it's blob text or not.
&lt;/p&gt;&lt;p&gt;
This doesn't make sense because blob text could not have any octal strings in it, and likewise, non blob encoded binary data can easily have coincidental octal codes in it.  For example, the attatched file gives a false positive.
&lt;/p&gt;&lt;p&gt;
If you upload it in a multipart form and try to store it into the database into a binary column, you will encounter a bug with this trace:
&lt;/p&gt;&lt;p&gt;
can't convert Fixnum into String
&lt;/p&gt;&lt;p&gt;
RAILS_ROOT: C:/Users/miles/Documents/svnlocal/RubyMaps/trunk/RubyMaps
&lt;/p&gt;&lt;p&gt;
Application Trace | Framework Trace | Full Trace
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `&amp;lt;&amp;lt;'
&amp;lt;/p&gt;&amp;lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `binary_to_string'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:126:in `binary_to_string'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/abstract/schema_definitions.rb:69:in `type_cast'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:150:in `field_changed?'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:128:in `write_attribute'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/attribute_methods.rb:211:in `file_data='
&lt;/p&gt;&lt;p&gt;
app/models/picture.rb:12:in `from_file_data'
&lt;/p&gt;&lt;p&gt;
there's a little more info here: &lt;a href=&quot;http://www.nopugs.com/binary-to-string-bug&quot;&gt;http://www.nopugs.com/binary-to-...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
To create a test that fails, you can just try to write (&quot;&quot; &amp;lt;&amp;lt; 92 &amp;lt;&amp;lt; 53 &amp;lt;&amp;lt; 53 &amp;lt;&amp;lt; 53)  to any model object's binary field.  This will fail because it will interpret this binary data as \555 which is octal for 365, which is above 255 which causes binary_to_string to raise the above exception.  A better but more involved test would be to use something that codes below 255 and have it fail when the saved value doesn't match the initial, if that indeed happens.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The code in postgresql_adapter for binary_to_string checks the input against /\\\d{3}/ to determine if it's blob text or not.

This doesn't make sense because blob text could not have any octal strings in it, and likewise, non blob encoded binary data can easily have coincidental octal codes in it.  For example, the attatched file gives a false positive.

If you upload it in a multipart form and try to store it into the database into a binary column, you will encounter a bug with this trace:

can't convert Fixnum into String
RAILS_ROOT: C:/Users/miles/Documents/svnlocal/RubyMaps/trunk/RubyMaps

Application Trace | Framework Trace | Full Trace 
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `&lt;&lt;'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `binary_to_string'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:126:in `binary_to_string'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/abstract/schema_definitions.rb:69:in `type_cast'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:150:in `field_changed?'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:128:in `write_attribute'
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/attribute_methods.rb:211:in `file_data='
app/models/picture.rb:12:in `from_file_data'

there's a little more info here: http://www.nopugs.com/binary-to-string-bug

To create a test that fails, you can just try to write (&quot;&quot; &lt;&lt; 92 &lt;&lt; 53 &lt;&lt; 53 &lt;&lt; 53)  to any model object's binary field.  This will fail because it will interpret this binary data as \555 which is octal for 365, which is above 255 which causes binary_to_string to raise the above exception.  A better but more involved test would be to use something that codes below 255 and have it fail when the saved value doesn't match the initial, if that indeed happens.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The code in postgresql_adapter for binary_to_string checks the input against /\\\d{3}/ to determine if it's blob text or not.
&lt;/p&gt;&lt;p&gt;
This doesn't make sense because blob text could not have any octal strings in it, and likewise, non blob encoded binary data can easily have coincidental octal codes in it.  For example, the attatched file gives a false positive.
&lt;/p&gt;&lt;p&gt;
If you upload it in a multipart form and try to store it into the database into a binary column, you will encounter a bug with this trace:
&lt;/p&gt;&lt;p&gt;
can't convert Fixnum into String
&lt;/p&gt;&lt;p&gt;
RAILS_ROOT: C:/Users/miles/Documents/svnlocal/RubyMaps/trunk/RubyMaps
&lt;/p&gt;&lt;p&gt;
Application Trace | Framework Trace | Full Trace
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `&amp;lt;&amp;lt;'
&amp;lt;/p&gt;&amp;lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:116:in `binary_to_string'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/postgresql_adapter.rb:126:in `binary_to_string'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/connection_adapters/abstract/schema_definitions.rb:69:in `type_cast'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:150:in `field_changed?'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/dirty.rb:128:in `write_attribute'
&lt;/p&gt;&lt;p&gt;
c:/ruby/lib/ruby/gems/1.8/gems/activerecord-2.1.0/lib/active_record/attribute_methods.rb:211:in `file_data='
&lt;/p&gt;&lt;p&gt;
app/models/picture.rb:12:in `from_file_data'
&lt;/p&gt;&lt;p&gt;
there's a little more info here: &lt;a href=&quot;http://www.nopugs.com/binary-to-string-bug&quot;&gt;http://www.nopugs.com/binary-to-...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
To create a test that fails, you can just try to write (&quot;&quot; &amp;lt;&amp;lt; 92 &amp;lt;&amp;lt; 53 &amp;lt;&amp;lt; 53 &amp;lt;&amp;lt; 53)  to any model object's binary field.  This will fail because it will interpret this binary data as \555 which is octal for 365, which is above 255 which causes binary_to_string to raise the above exception.  A better but more involved test would be to use something that codes below 255 and have it fail when the saved value doesn't match the initial, if that indeed happens.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-07-13T11:51:22+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-07-13T11:51:22+01:00</updated-at>
      <user-id type="integer">21652</user-id>
      <version type="integer">1</version>
      <user-name>azimux</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This patch modifies the binary test to cause the postgres adapter to fail this test.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch modifies the binary test to cause the postgres adapter to fail this test.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-18T22:04:31+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord bug
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-08-18T22:04:31+01:00</updated-at>
      <user-id type="integer">29250</user-id>
      <version type="integer">2</version>
      <user-name>Kim Toms</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>This patch fixes it, but may break compatibility with older version of the database.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch fixes it, but may break compatibility with older version of the database.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-19T00:57:59+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord bug tests
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-08-19T00:57:59+01:00</updated-at>
      <user-id type="integer">29250</user-id>
      <version type="integer">3</version>
      <user-name>Kim Toms</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Nice patch kim!

I'm going to try applying it and giving it a whirl.  One thing I notice right off the bat is your new code assumes unescape_bytea will be defined by the connection, but I know of at least one pg adapter that doesn't implement this method (postgres-pr)

It might be worth keeping part of the old code in a new method, maybe like this:

@@@
def non_native_unescape_bytea(value)
                  result = ''
                  i, max = 0, value.size
                  while i &lt; max
                    char = value[i]
                    if char == ?\\
                      if value[i+1] == ?\\
                        char = ?\\
                        i += 1
                      else
                        char = value[i+1..i+3].oct
                        i += 3
                      end
                    end
                    result &lt;&lt; char
                    i += 1
                  end
                  result
end
@@@
and then in your code you could do something like:

@@@
                elsif res.ftype(cell_index) == BYTEA_COLUMN_TYPE_OID
                  row[cell_index] = if PGconn.respond_to?(:unescape_bytea)
                    PGconn.unescape_bytea(row[cell_index])
                  else
                    non_native_unescape_bytea(row[cell_index])
                  end
                end
@@@

I spent the better part of a weekend a while back battling with this bug.  The solution I came up with was no where near as clean as your patch, so I'm pretty excited to try this out.  Thanks again!

I noticed you left string_to_binary alive, but took binary_to_string out.  I'm guessing this code is used only when building queries?  Is it safe to at least remove the regular expressions from binary_to_string?

I remember I was also going to write a test for this as well, but when I ran the tests I got 6 failures from existing tests, which discouraged me from spending anymore time on it.  Were you able to have every single test pass?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Nice patch kim!&lt;/p&gt;

&lt;p&gt;I'm going to try applying it and giving it a whirl.  One thing I notice right off the bat is your new code assumes unescape_bytea will be defined by the connection, but I know of at least one pg adapter that doesn't implement this method (postgres-pr)&lt;/p&gt;

&lt;p&gt;It might be worth keeping part of the old code in a new method, maybe like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
def non_native_unescape_bytea(value)
                  result = ''
                  i, max = 0, value.size
                  while i &amp;lt; max
                    char = value[i]
                    if char == ?\\
                      if value[i+1] == ?\\
                        char = ?\\
                        i += 1
                      else
                        char = value[i+1..i+3].oct
                        i += 3
                      end
                    end
                    result &amp;lt;&amp;lt; char
                    i += 1
                  end
                  result
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then in your code you could do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
                elsif res.ftype(cell_index) == BYTEA_COLUMN_TYPE_OID
                  row[cell_index] = if PGconn.respond_to?(:unescape_bytea)
                    PGconn.unescape_bytea(row[cell_index])
                  else
                    non_native_unescape_bytea(row[cell_index])
                  end
                end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I spent the better part of a weekend a while back battling with this bug.  The solution I came up with was no where near as clean as your patch, so I'm pretty excited to try this out.  Thanks again!&lt;/p&gt;

&lt;p&gt;I noticed you left string_to_binary alive, but took binary_to_string out.  I'm guessing this code is used only when building queries?  Is it safe to at least remove the regular expressions from binary_to_string?&lt;/p&gt;

&lt;p&gt;I remember I was also going to write a test for this as well, but when I ran the tests I got 6 failures from existing tests, which discouraged me from spending anymore time on it.  Were you able to have every single test pass?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-19T09:04:50+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-08-19T09:04:50+01:00</updated-at>
      <user-id type="integer">21652</user-id>
      <version type="integer">4</version>
      <user-name>azimux</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Everything I tested out with kim's patch seemed to work

here's a patch that, if applied after kim's patches, allows it to work with postgres-pr</body>
      <body-html>&lt;div&gt;&lt;p&gt;Everything I tested out with kim's patch seemed to work&lt;/p&gt;

&lt;p&gt;here's a patch that, if applied after kim's patches, allows it to work with postgres-pr&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-19T12:34:42+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-08-19T12:34:42+01:00</updated-at>
      <user-id type="integer">21652</user-id>
      <version type="integer">5</version>
      <user-name>azimux</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Hi, I've tried your patches but although the objects with bytea columns are correctly inserted into the DB, the listings (with will_paginate) aren't working anymore. Any idea about it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi, I've tried your patches but although the objects with bytea
columns are correctly inserted into the DB, the listings (with
will_paginate) aren't working anymore. Any idea about it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-07T17:00:57+01:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 activerecord bug patch tests
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;2.1&quot; activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-10-07T17:01:00+01:00</updated-at>
      <user-id type="integer">34015</user-id>
      <version type="integer">6</version>
      <user-name>capellamusic</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Do you have a specific failing test?  That is the first thing to work out.  I don't see any test with paginate in its text.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Do you have a specific failing test? That is the first thing to
work out. I don't see any test with paginate in its text.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-03T22:40:24+00:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;2.1\&quot; activerecord bug patch tests&quot;
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-11-03T22:40:29+00:00</updated-at>
      <user-id type="integer">29250</user-id>
      <version type="integer">7</version>
      <user-name>Kim Toms</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Note to rails committers: It looks like postgres-pr is no longer supported by rails and only ruby-pg and ruby-postgres work anymore.  So the patch I submitted to make Kim's patch work with postgres-pr is probably irrelevant at this point.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Note to rails committers: It looks like postgres-pr is no longer
supported by rails and only ruby-pg and ruby-postgres work anymore.
So the patch I submitted to make Kim's patch work with postgres-pr
is probably irrelevant at this point.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-03T22:49:11+00:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-11-03T22:49:15+00:00</updated-at>
      <user-id type="integer">21652</user-id>
      <version type="integer">8</version>
      <user-name>azimux</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>After reviewing will_paginate, I don't see any reason for it not to work, so I will require more details of the failure.  If you'll be at rubyconf 5-8 Nov, I'll be there too.</body>
      <body-html>&lt;div&gt;&lt;p&gt;After reviewing will_paginate, I don't see any reason for it not
to work, so I will require more details of the failure. If you'll
be at rubyconf 5-8 Nov, I'll be there too.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-05T20:44:30+00:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-11-05T20:44:32+00:00</updated-at>
      <user-id type="integer">29250</user-id>
      <version type="integer">9</version>
      <user-name>Kim Toms</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Should have been resolved by #1063. Do reopen if it's still a problem</body>
      <body-html>&lt;div&gt;&lt;p&gt;Should have been resolved by &lt;a href=&quot;/projects/8994/tickets/1063&quot; title=&quot;Ticket #1063&quot;&gt;#1063&lt;/a&gt;. Do
reopen if it's still a problem&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-21T17:24:14+00:00</created-at>
      <creator-id type="integer">21652</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">611</number>
      <permalink>cannot-write-certain-binary-data-to-postgresql-bytea-columns-in-2-1-0</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.1 activerecord bug patch tests</tag>
      <title>cannot write certain binary data to postgresql bytea columns in 2.1.0</title>
      <updated-at type="datetime">2008-12-21T17:24:18+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">10</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>azimux</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/611</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment-image type="Attachment">
      <code>24a3c6214ea145ff3bf9475ef5b5f3020e3fa95e</code>
      <content-type>image/pjpeg</content-type>
      <created-at type="datetime">2008-07-13T11:52:07+01:00</created-at>
      <filename>Butterfly.JPG</filename>
      <height type="integer">2000</height>
      <id type="integer">32270</id>
      <size type="integer">2153753</size>
      <uploader-id type="integer">21652</uploader-id>
      <width type="integer">3008</width>
      <url>http://rails.lighthouseapp.com/attachments/32270/Butterfly.JPG</url>
    </attachment-image>
    <attachment-image type="Attachment">
      <code>2a50499cbc429506657c93506cfc080ae3a31225</code>
      <content-type>image/gif</content-type>
      <created-at type="datetime">2008-08-18T22:04:31+01:00</created-at>
      <filename>my-patch.gif</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">39933</id>
      <size type="integer">852</size>
      <uploader-id type="integer">29250</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/39933/my-patch.gif</url>
    </attachment-image>
    <attachment type="Attachment">
      <code>3e5ac641998252802791dc0f5ad9f0fa08e35393</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-19T00:57:58+01:00</created-at>
      <filename>postgres-611.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">40015</id>
      <size type="integer">4152</size>
      <uploader-id type="integer">29250</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/40015/postgres-611.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>ca40fa2ad4b6f7cf8bb247361ffe1a1209a45367</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-08-19T12:34:42+01:00</created-at>
      <filename>0001-allows-kim-tom-s-bytea-fix-to-work-with-postgres-pr.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">40088</id>
      <size type="integer">2063</size>
      <uploader-id type="integer">21652</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/40088/0001-allows-kim-tom-s-bytea-fix-to-work-with-postgres-pr.patch</url>
    </attachment>
  </attachments>
</ticket>
