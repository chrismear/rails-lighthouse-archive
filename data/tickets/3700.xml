<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-01-15T18:53:04+00:00</created-at>
  <creator-id type="integer">82451</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3700</number>
  <permalink>timestamps-not-set-when-loading-fixtures-for-has_and_belongs_to_many-join-tables</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Timestamps not set when loading fixtures for has_and_belongs_to_many join tables</title>
  <updated-at type="datetime">2010-06-12T03:15:33+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">2</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Lyle</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3700</url>
  <priority-name>Low</priority-name>
  <original-body>I'm using Rails 2.3.5.

When I load fixtures, Rails does not set the created_at and updated_at timestamps for has_and_belongs_to_many (habtm) join tables (the column values are nil). The migration file includes `t.timestamps` and the database table contains the two timestamp columns. If I explicitly include created_at and updated_at in the fixture file, it sets those values. I don't have to do this with other fixture files; Rails automatically sets the timestamp values. I'm using `rake db:fixtures:load` to load the data into my development database.</original-body>
  <latest-body>I'm using Rails 2.3.5.

When I load fixtures, Rails does not set the created_at and updated_at timestamps for has_and_belongs_to_many (habtm) join tables (the column values are nil). The migration file includes `t.timestamps` and the database table contains the two timestamp columns. If I explicitly include created_at and updated_at in the fixture file, it sets those values. I don't have to do this with other fixture files; Rails automatically sets the timestamp values. I'm using `rake db:fixtures:load` to load the data into my development database.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm using Rails 2.3.5.&lt;/p&gt;
&lt;p&gt;When I load fixtures, Rails does not set the created_at and
updated_at timestamps for has_and_belongs_to_many (habtm) join
tables (the column values are nil). The migration file includes
&lt;code&gt;t.timestamps&lt;/code&gt; and the database table contains the two
timestamp columns. If I explicitly include created_at and
updated_at in the fixture file, it sets those values. I don't have
to do this with other fixture files; Rails automatically sets the
timestamp values. I'm using &lt;code&gt;rake db:fixtures:load&lt;/code&gt; to
load the data into my development database.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm using Rails 2.3.5.

When I load fixtures, Rails does not set the created_at and updated_at timestamps for has_and_belongs_to_many (habtm) join tables (the column values are nil). The migration file includes `t.timestamps` and the database table contains the two timestamp columns. If I explicitly include created_at and updated_at in the fixture file, it sets those values. I don't have to do this with other fixture files; Rails automatically sets the timestamp values. I'm using `rake db:fixtures:load` to load the data into my development database.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm using Rails 2.3.5.&lt;/p&gt;
&lt;p&gt;When I load fixtures, Rails does not set the created_at and
updated_at timestamps for has_and_belongs_to_many (habtm) join
tables (the column values are nil). The migration file includes
&lt;code&gt;t.timestamps&lt;/code&gt; and the database table contains the two
timestamp columns. If I explicitly include created_at and
updated_at in the fixture file, it sets those values. I don't have
to do this with other fixture files; Rails automatically sets the
timestamp values. I'm using &lt;code&gt;rake db:fixtures:load&lt;/code&gt; to
load the data into my development database.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-15T18:53:04+00:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3700</number>
      <permalink>timestamps-not-set-when-loading-fixtures-for-has_and_belongs_to_many-join-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Timestamps not set when loading fixtures for has_and_belongs_to_many join tables</title>
      <updated-at type="datetime">2010-01-15T18:53:05+00:00</updated-at>
      <user-id type="integer">82451</user-id>
      <version type="integer">1</version>
      <user-name>Lyle</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3700</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Identical: https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3699-timestamps-with-has_and_belongs_to_many#ticket-3699-2</body>
      <body-html>&lt;div&gt;&lt;p&gt;Identical: &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3699-timestamps-with-has_and_belongs_to_many#ticket-3699-2&quot;&gt;
https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-12T03:15:30+01:00</created-at>
      <creator-id type="integer">82451</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3700</number>
      <permalink>timestamps-not-set-when-loading-fixtures-for-has_and_belongs_to_many-join-tables</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Timestamps not set when loading fixtures for has_and_belongs_to_many join tables</title>
      <updated-at type="datetime">2010-06-12T03:15:33+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">2</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Lyle</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3700</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
