<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">17477</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-15T21:27:16+01:00</created-at>
  <creator-id type="integer">13624</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1221</number>
  <permalink>association-extensions-and-scopes-on-the-associated-model-behave-inconsistantly</permalink>
  <priority type="integer">628</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord associations named_scope</tag>
  <title>Association extensions and scopes on the associated model behave inconsistantly</title>
  <updated-at type="datetime">2010-09-10T12:53:03+01:00</updated-at>
  <user-id type="integer">50981</user-id>
  <version type="integer">6</version>
  <user-name>Harm Aarts</user-name>
  <creator-name>Brian Terlson</creator-name>
  <assigned-user-name>Frederick Cheung</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1221</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I'm noticing some undesirable behavior with named scopes and association extensions with Rails 2.1.1.  Observe the following contrived example:

@@@ ruby
class Blog &lt; ActiveRecord::Base
  has_many :entries do
    def print
      each { |e| puts e }
    end
  end
end

class Entry &lt; ActiveRecord::Base
  belongs_to :blog
  
  named_scope :active, :conditions =&gt; {:status =&gt; 'active'}
  named_scope :inactive, :conditions =&gt; {:status =&gt; 'inactive'}
end
@@@

Now, moving to the console...

    &gt;&gt; b = Blog.first
    =&gt; #&lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&gt;
    &gt;&gt; b.entries
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

3 entries are made, 2 active, 1 inactive.

    &gt;&gt; reload!
    Reloading...
    &gt;&gt; b.entries.print
    #&lt;Entry:0x33482b4&gt;
    #&lt;Entry:0x334729c&gt;
    #&lt;Entry:0x334724c&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x33482b4&gt;
    #&lt;Entry:0x334729c&gt;
    #&lt;Entry:0x334724c&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

After calling entries.print, subsequent scopes are ignored when calling the print method.
Expected behavior can be achieved by calling the desired scope first, although all
subsequent scopes will not be correct...

    &gt;&gt; reload!
    Reloading...
    =&gt; true
    &gt;&gt; b = Blog.first
    =&gt; #&lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&gt;
    &gt;&gt; b.entries.inactive  
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x32eed54&gt;
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.print
    #&lt;Entry:0x32eed54&gt;
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

It should be noted that scopes do behave correctly when not calling the print method.

    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x32218e0&gt;
    #&lt;Entry:0x3221570&gt;
    #&lt;Entry:0x32213f4&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive  
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    
This behavior seems pretty buggy -- at the very least, inconsistent.</original-body>
  <latest-body>I'm noticing some undesirable behavior with named scopes and association extensions with Rails 2.1.1.  Observe the following contrived example:

@@@ ruby
class Blog &lt; ActiveRecord::Base
  has_many :entries do
    def print
      each { |e| puts e }
    end
  end
end

class Entry &lt; ActiveRecord::Base
  belongs_to :blog
  
  named_scope :active, :conditions =&gt; {:status =&gt; 'active'}
  named_scope :inactive, :conditions =&gt; {:status =&gt; 'inactive'}
end
@@@

Now, moving to the console...

    &gt;&gt; b = Blog.first
    =&gt; #&lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&gt;
    &gt;&gt; b.entries
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

3 entries are made, 2 active, 1 inactive.

    &gt;&gt; reload!
    Reloading...
    &gt;&gt; b.entries.print
    #&lt;Entry:0x33482b4&gt;
    #&lt;Entry:0x334729c&gt;
    #&lt;Entry:0x334724c&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x33482b4&gt;
    #&lt;Entry:0x334729c&gt;
    #&lt;Entry:0x334724c&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

After calling entries.print, subsequent scopes are ignored when calling the print method.
Expected behavior can be achieved by calling the desired scope first, although all
subsequent scopes will not be correct...

    &gt;&gt; reload!
    Reloading...
    =&gt; true
    &gt;&gt; b = Blog.first
    =&gt; #&lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&gt;
    &gt;&gt; b.entries.inactive  
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x32eed54&gt;
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.print
    #&lt;Entry:0x32eed54&gt;
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

It should be noted that scopes do behave correctly when not calling the print method.

    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x32218e0&gt;
    #&lt;Entry:0x3221570&gt;
    #&lt;Entry:0x32213f4&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive  
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    
This behavior seems pretty buggy -- at the very least, inconsistent.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm noticing some undesirable behavior with named scopes and
association extensions with Rails 2.1.1. Observe the following
contrived example:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Blog &amp;lt; ActiveRecord::Base
  has_many :entries do
    def print
      each { |e| puts e }
    end
  end
end

class Entry &amp;lt; ActiveRecord::Base
  belongs_to :blog

  named_scope :active, :conditions =&amp;gt; {:status =&amp;gt; 'active'}
  named_scope :inactive, :conditions =&amp;gt; {:status =&amp;gt; 'inactive'}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, moving to the console...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; b = Blog.first
=&amp;gt; #
&amp;gt;&amp;gt; b.entries
=&amp;gt; [#, #, #]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3 entries are made, 2 active, 1 inactive.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; reload!
Reloading...
&amp;gt;&amp;gt; b.entries.print
#
#
#
=&amp;gt; [#, #, #]
&amp;gt;&amp;gt; b.entries.inactive.print
#
#
#
=&amp;gt; [#, #, #]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After calling entries.print, subsequent scopes are ignored when
calling the print method. Expected behavior can be achieved by
calling the desired scope first, although all subsequent scopes
will not be correct...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; reload!
Reloading...
=&amp;gt; true
&amp;gt;&amp;gt; b = Blog.first
=&amp;gt; #
&amp;gt;&amp;gt; b.entries.inactive
=&amp;gt; [#]
&amp;gt;&amp;gt; b.entries.inactive.print
#
=&amp;gt; [#]
&amp;gt;&amp;gt; b.entries.print
#
=&amp;gt; [#]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It should be noted that scopes do behave correctly when not
calling the print method.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; b.entries.inactive.print
#
#
#
=&amp;gt; [#, #, #]
&amp;gt;&amp;gt; b.entries.inactive
=&amp;gt; [#]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This behavior seems pretty buggy -- at the very least,
inconsistent.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm noticing some undesirable behavior with named scopes and association extensions with Rails 2.1.1.  Observe the following contrived example:

@@@ ruby
class Blog &lt; ActiveRecord::Base
  has_many :entries do
    def print
      each { |e| puts e }
    end
  end
end

class Entry &lt; ActiveRecord::Base
  belongs_to :blog
  
  named_scope :active, :conditions =&gt; {:status =&gt; 'active'}
  named_scope :inactive, :conditions =&gt; {:status =&gt; 'inactive'}
end
@@@

Now, moving to the console...

    &gt;&gt; b = Blog.first
    =&gt; #&lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&gt;
    &gt;&gt; b.entries
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

3 entries are made, 2 active, 1 inactive.

    &gt;&gt; reload!
    Reloading...
    &gt;&gt; b.entries.print
    #&lt;Entry:0x33482b4&gt;
    #&lt;Entry:0x334729c&gt;
    #&lt;Entry:0x334724c&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x33482b4&gt;
    #&lt;Entry:0x334729c&gt;
    #&lt;Entry:0x334724c&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

After calling entries.print, subsequent scopes are ignored when calling the print method.
Expected behavior can be achieved by calling the desired scope first, although all
subsequent scopes will not be correct...

    &gt;&gt; reload!
    Reloading...
    =&gt; true
    &gt;&gt; b = Blog.first
    =&gt; #&lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&gt;
    &gt;&gt; b.entries.inactive  
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x32eed54&gt;
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.print
    #&lt;Entry:0x32eed54&gt;
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]

It should be noted that scopes do behave correctly when not calling the print method.

    &gt;&gt; b.entries.inactive.print
    #&lt;Entry:0x32218e0&gt;
    #&lt;Entry:0x3221570&gt;
    #&lt;Entry:0x32213f4&gt;
    =&gt; [#&lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&gt;, #&lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&gt;, #&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    &gt;&gt; b.entries.inactive  
    =&gt; [#&lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&gt;]
    
This behavior seems pretty buggy -- at the very least, inconsistent.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm noticing some undesirable behavior with named scopes and
association extensions with Rails 2.1.1. Observe the following
contrived example:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Blog &amp;lt; ActiveRecord::Base
  has_many :entries do
    def print
      each { |e| puts e }
    end
  end
end

class Entry &amp;lt; ActiveRecord::Base
  belongs_to :blog

  named_scope :active, :conditions =&amp;gt; {:status =&amp;gt; 'active'}
  named_scope :inactive, :conditions =&amp;gt; {:status =&amp;gt; 'inactive'}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, moving to the console...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; b = Blog.first
=&amp;gt; #&amp;lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&amp;gt;
&amp;gt;&amp;gt; b.entries
=&amp;gt; [#&amp;lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&amp;gt;, #&amp;lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&amp;gt;, #&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;3 entries are made, 2 active, 1 inactive.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; reload!
Reloading...
&amp;gt;&amp;gt; b.entries.print
#&amp;lt;Entry:0x33482b4&amp;gt;
#&amp;lt;Entry:0x334729c&amp;gt;
#&amp;lt;Entry:0x334724c&amp;gt;
=&amp;gt; [#&amp;lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&amp;gt;, #&amp;lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&amp;gt;, #&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&amp;gt;&amp;gt; b.entries.inactive.print
#&amp;lt;Entry:0x33482b4&amp;gt;
#&amp;lt;Entry:0x334729c&amp;gt;
#&amp;lt;Entry:0x334724c&amp;gt;
=&amp;gt; [#&amp;lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&amp;gt;, #&amp;lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&amp;gt;, #&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After calling entries.print, subsequent scopes are ignored when
calling the print method. Expected behavior can be achieved by
calling the desired scope first, although all subsequent scopes
will not be correct...&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; reload!
Reloading...
=&amp;gt; true
&amp;gt;&amp;gt; b = Blog.first
=&amp;gt; #&amp;lt;Blog id: 1, created_at: &quot;2008-10-15 19:52:40&quot;, updated_at: &quot;2008-10-15 19:52:40&quot;&amp;gt;
&amp;gt;&amp;gt; b.entries.inactive
=&amp;gt; [#&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&amp;gt;&amp;gt; b.entries.inactive.print
#&amp;lt;Entry:0x32eed54&amp;gt;
=&amp;gt; [#&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&amp;gt;&amp;gt; b.entries.print
#&amp;lt;Entry:0x32eed54&amp;gt;
=&amp;gt; [#&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It should be noted that scopes do behave correctly when not
calling the print method.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; b.entries.inactive.print
#&amp;lt;Entry:0x32218e0&amp;gt;
#&amp;lt;Entry:0x3221570&amp;gt;
#&amp;lt;Entry:0x32213f4&amp;gt;
=&amp;gt; [#&amp;lt;Entry id: 1, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:54&quot;, updated_at: &quot;2008-10-15 19:52:54&quot;&amp;gt;, #&amp;lt;Entry id: 2, blog_id: 1, status: &quot;active&quot;, created_at: &quot;2008-10-15 19:52:58&quot;, updated_at: &quot;2008-10-15 19:52:58&quot;&amp;gt;, #&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&amp;gt;&amp;gt; b.entries.inactive
=&amp;gt; [#&amp;lt;Entry id: 3, blog_id: 1, status: &quot;inactive&quot;, created_at: &quot;2008-10-15 19:53:01&quot;, updated_at: &quot;2008-10-15 19:53:01&quot;&amp;gt;]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This behavior seems pretty buggy -- at the very least,
inconsistent.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-15T21:27:16+01:00</created-at>
      <creator-id type="integer">13624</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1221</number>
      <permalink>association-extensions-and-scopes-on-the-associated-model-behave-inconsistantly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations named_scope</tag>
      <title>Association extensions and scopes on the associated model behave inconsistantly</title>
      <updated-at type="datetime">2008-10-15T21:27:21+01:00</updated-at>
      <user-id type="integer">13624</user-id>
      <version type="integer">1</version>
      <user-name>Brian Terlson</user-name>
      <creator-name>Brian Terlson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1221</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I cannot recreate this behavior in 2.2.0 RC, so I'd say this ticket can be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I cannot recreate this behavior in 2.2.0 RC, so I'd say this
ticket can be closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-30T22:25:28+00:00</created-at>
      <creator-id type="integer">13624</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1221</number>
      <permalink>association-extensions-and-scopes-on-the-associated-model-behave-inconsistantly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations named_scope</tag>
      <title>Association extensions and scopes on the associated model behave inconsistantly</title>
      <updated-at type="datetime">2008-10-30T22:25:32+00:00</updated-at>
      <user-id type="integer">13624</user-id>
      <version type="integer">2</version>
      <user-name>Brian Terlson</user-name>
      <creator-name>Brian Terlson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1221</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-13T16:22:04+00:00</created-at>
      <creator-id type="integer">13624</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1221</number>
      <permalink>association-extensions-and-scopes-on-the-associated-model-behave-inconsistantly</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord associations named_scope</tag>
      <title>Association extensions and scopes on the associated model behave inconsistantly</title>
      <updated-at type="datetime">2008-12-13T16:22:09+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Brian Terlson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1221</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I am encountering this exact same bug on Rails 2.3.8!

I created a blank new rails app using the example code above, with one tiny change to the Blog class to help with debugging:

@@@ ruby

class Blog &lt; ActiveRecord::Base
  has_many :entries do
    def print
      each { |e| puts e.status } # print the status
    end
  end
end

@@@

Here is what happens in the console:

@@@ ruby
&gt;&gt; Rails.version
&quot;2.3.8&quot;
&gt;&gt; b = Blog.first
#&lt;Blog:0x2397edc&gt; {
            :id =&gt; 1,
    :created_at =&gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00,
    :updated_at =&gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00
}
&gt;&gt; b.entries
[
    [0] #&lt;Entry:0x23767b4&gt; {
                :id =&gt; 1,
            :status =&gt; &quot;active&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00
    },
    [1] #&lt;Entry:0x2376750&gt; {
                :id =&gt; 2,
            :status =&gt; &quot;active&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00
    },
    [2] #&lt;Entry:0x2376700&gt; {
                :id =&gt; 3,
            :status =&gt; &quot;inactive&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]
&gt;&gt; b.entries.active.print
active
active
inactive  # this shouldn't be here!
nil
&gt;&gt; Blog.first.entries.active.print
active
active
nil
&gt;&gt; Blog.first.entries.inactive.print
inactive
nil


@@@

Notice that the problem only occurs when an instance is stored in a variable. Going through the model using Blog.first yields the expected results. I am not familiar with how ActiveRecord handles association extensions internally, but it appears like some kind of caching is to blame for this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am encountering this exact same bug on Rails 2.3.8!&lt;/p&gt;
&lt;p&gt;I created a blank new rails app using the example code above,
with one tiny change to the Blog class to help with debugging:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
class Blog &amp;lt; ActiveRecord::Base
  has_many :entries do
    def print
      each { |e| puts e.status } # print the status
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Here is what happens in the console:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; Rails.version
&quot;2.3.8&quot;
&amp;gt;&amp;gt; b = Blog.first
#&amp;lt;Blog:0x2397edc&amp;gt; {
            :id =&amp;gt; 1,
    :created_at =&amp;gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00,
    :updated_at =&amp;gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00
}
&amp;gt;&amp;gt; b.entries
[
    [0] #&amp;lt;Entry:0x23767b4&amp;gt; {
                :id =&amp;gt; 1,
            :status =&amp;gt; &quot;active&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00
    },
    [1] #&amp;lt;Entry:0x2376750&amp;gt; {
                :id =&amp;gt; 2,
            :status =&amp;gt; &quot;active&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00
    },
    [2] #&amp;lt;Entry:0x2376700&amp;gt; {
                :id =&amp;gt; 3,
            :status =&amp;gt; &quot;inactive&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]
&amp;gt;&amp;gt; b.entries.active.print
active
active
inactive  # this shouldn't be here!
nil
&amp;gt;&amp;gt; Blog.first.entries.active.print
active
active
nil
&amp;gt;&amp;gt; Blog.first.entries.inactive.print
inactive
nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Notice that the problem only occurs when an instance is stored
in a variable. Going through the model using Blog.first yields the
expected results. I am not familiar with how ActiveRecord handles
association extensions internally, but it appears like some kind of
caching is to blame for this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-19T21:03:50+01:00</created-at>
      <creator-id type="integer">13624</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1221</number>
      <permalink>association-extensions-and-scopes-on-the-associated-model-behave-inconsistantly</permalink>
      <priority type="integer">628</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord associations named_scope</tag>
      <title>Association extensions and scopes on the associated model behave inconsistantly</title>
      <updated-at type="datetime">2010-08-19T21:03:52+01:00</updated-at>
      <user-id type="integer">43819</user-id>
      <version type="integer">4</version>
      <user-name>Mani Tadayon</user-name>
      <creator-name>Brian Terlson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1221</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I created a github repo with a test app in case anyone wants to see if they can recreate this:
  http://github.com/bowsersenior/test_association_extensions

Also, here is one more example that shows how c.entries is totally fouled up after calling c.entries.inactive.print:

@@@ ruby
&gt;&gt; c = Blog.first
#&lt;Blog:0x237af58&gt; {
            :id =&gt; 1,
    :created_at =&gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00,
    :updated_at =&gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00
}
&gt;&gt; c.entries.inactive
[
    [0] #&lt;Entry:0x2374a54&gt; {
                :id =&gt; 3,
            :status =&gt; &quot;inactive&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]
&gt;&gt; c.entries.inactive.print
inactive
nil
&gt;&gt; c.entries.print
inactive
nil
&gt;&gt; c.entries
[
    [0] #&lt;Entry:0x236ccdc&gt; {
                :id =&gt; 3,
            :status =&gt; &quot;inactive&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]
&gt;&gt; Blog.first.entries
[
    [0] #&lt;Entry:0x2363f10&gt; {
                :id =&gt; 1,
            :status =&gt; &quot;active&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00
    },
    [1] #&lt;Entry:0x2363ec0&gt; {
                :id =&gt; 2,
            :status =&gt; &quot;active&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00
    },
    [2] #&lt;Entry:0x2363e70&gt; {
                :id =&gt; 3,
            :status =&gt; &quot;inactive&quot;,
           :blog_id =&gt; 1,
        :created_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I created a github repo with a test app in case anyone wants to
see if they can recreate this:&lt;br&gt;
&lt;a href=
&quot;http://github.com/bowsersenior/test_association_extensions&quot;&gt;http://github.com/bowsersenior/test_association_extensions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, here is one more example that shows how c.entries is
totally fouled up after calling c.entries.inactive.print:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; c = Blog.first
#&amp;lt;Blog:0x237af58&amp;gt; {
            :id =&amp;gt; 1,
    :created_at =&amp;gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00,
    :updated_at =&amp;gt; Thu, 19 Aug 2010 19:36:44 UTC +00:00
}
&amp;gt;&amp;gt; c.entries.inactive
[
    [0] #&amp;lt;Entry:0x2374a54&amp;gt; {
                :id =&amp;gt; 3,
            :status =&amp;gt; &quot;inactive&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]
&amp;gt;&amp;gt; c.entries.inactive.print
inactive
nil
&amp;gt;&amp;gt; c.entries.print
inactive
nil
&amp;gt;&amp;gt; c.entries
[
    [0] #&amp;lt;Entry:0x236ccdc&amp;gt; {
                :id =&amp;gt; 3,
            :status =&amp;gt; &quot;inactive&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]
&amp;gt;&amp;gt; Blog.first.entries
[
    [0] #&amp;lt;Entry:0x2363f10&amp;gt; {
                :id =&amp;gt; 1,
            :status =&amp;gt; &quot;active&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:02 UTC +00:00
    },
    [1] #&amp;lt;Entry:0x2363ec0&amp;gt; {
                :id =&amp;gt; 2,
            :status =&amp;gt; &quot;active&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:04 UTC +00:00
    },
    [2] #&amp;lt;Entry:0x2363e70&amp;gt; {
                :id =&amp;gt; 3,
            :status =&amp;gt; &quot;inactive&quot;,
           :blog_id =&amp;gt; 1,
        :created_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00,
        :updated_at =&amp;gt; Thu, 19 Aug 2010 19:37:06 UTC +00:00
    }
]&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-08-19T21:15:30+01:00</created-at>
      <creator-id type="integer">13624</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1221</number>
      <permalink>association-extensions-and-scopes-on-the-associated-model-behave-inconsistantly</permalink>
      <priority type="integer">628</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord associations named_scope</tag>
      <title>Association extensions and scopes on the associated model behave inconsistantly</title>
      <updated-at type="datetime">2010-08-19T21:15:33+01:00</updated-at>
      <user-id type="integer">43819</user-id>
      <version type="integer">5</version>
      <user-name>Mani Tadayon</user-name>
      <creator-name>Brian Terlson</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1221</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>How is this &quot;resolved&quot;? IMHO this is still broken. Using Rails 2.3.8 and Ruby 1.9.1</body>
      <body-html>&lt;div&gt;&lt;p&gt;How is this &quot;resolved&quot;? IMHO this is still broken. Using Rails
2.3.8 and Ruby 1.9.1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-10T12:53:00+01:00</created-at>
      <creator-id type="integer">13624</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1221</number>
      <permalink>association-extensions-and-scopes-on-the-associated-model-behave-inconsistantly</permalink>
      <priority type="integer">628</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>activerecord associations named_scope</tag>
      <title>Association extensions and scopes on the associated model behave inconsistantly</title>
      <updated-at type="datetime">2010-09-10T12:53:03+01:00</updated-at>
      <user-id type="integer">50981</user-id>
      <version type="integer">6</version>
      <user-name>Harm Aarts</user-name>
      <creator-name>Brian Terlson</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1221</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
