<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-08T18:52:11+01:00</created-at>
  <creator-id type="integer">142219</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6688</number>
  <permalink>path-parameters-not-recognized-when-session-is-cookie_only-false</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>Path parameters not recognized when session is :cookie_only =&gt; false</title>
  <updated-at type="datetime">2011-04-08T18:52:14+01:00</updated-at>
  <user-id type="integer">142219</user-id>
  <version type="integer">1</version>
  <user-name>ystael</user-name>
  <creator-name>ystael</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6688</url>
  <priority-name nil="true"></priority-name>
  <original-body>When using the ActiveRecord session store with :cookie_only =&gt; false set, if the session ID is actually supplied via URL parameter and not via cookie, path parameters designated in the route do not appear in the params hash in the controller.  That is, if we have the route
@@@ ruby
  get &quot;test/aa/:x/:y&quot; =&gt; 'test#aa'
@@@
and we fetch /test/aa/1/1?_sesstest_session=d069edd7e927526c0f33a060ff529e88 with no session cookie set, params[:x] and params[:y] are nil in the controller action.

I believe the problem is as follows:  In ActionDispatch::Session::AbstractStore#extract_session_id (action_dispatch/middleware/session/abstract_store.rb:204), if sid is not fetched from a cookie and @cookie_only is false, then sid is fetched from request.params[@key].  This causes ActionDispatch::Http::Parameters#parameters (action_dispatch/http/parameters.rb:9) to be called to populate @env[&quot;action_dispatch.request.parameters&quot;] in the request environment.  However, the session store middleware runs before the router, so @env[&quot;action_dispatch.request.path_parameters&quot;] has not yet been populated, and @env[&quot;action_dispatch.request.parameters&quot;] is populated without the path parameters.  Then later when ActionController::Instrumentation#process_action (action_controller/metal/instrumentation.rb:21) preps the filtered parameters, they come by filtering a parameter hash that should have the path parameters in it, but doesn't, so the path parameters never make it to the final controller.

A crude hack that works around the problem is to change ActionDispatch::Http::FilterParameters#filter_parameters as follows:
@@@ ruby
      def filtered_parameters
        @filtered_parameters ||= parameter_filter.filter(parameters_uncached)
      end
@@@
where ActionDispatch::Http::Parameters#parameters_uncached is a copy of ActionDispatch::Http::Parameters#parameters which forces rebuilding of the hash:
@@@ ruby
      def parameters_uncached
        @env[&quot;action_dispatch.request.parameters&quot;] = begin
          params = request_parameters.merge(query_parameters)
          params.merge!(path_parameters)
          encode_params(params).with_indifferent_access
        end
      end
@@@

I don't know whether this is the right way to attack the problem, and I don't know yet whether this patch causes any other issues.

[Note: I require :cookie_only =&gt; false because my application is called on the user's behalf by a portal system which does not pass me cookies or permit me to set them.  This setup also means that session fixation attacks are not possible without compromising the portal system.]</original-body>
  <latest-body>When using the ActiveRecord session store with :cookie_only =&gt; false set, if the session ID is actually supplied via URL parameter and not via cookie, path parameters designated in the route do not appear in the params hash in the controller.  That is, if we have the route
@@@ ruby
  get &quot;test/aa/:x/:y&quot; =&gt; 'test#aa'
@@@
and we fetch /test/aa/1/1?_sesstest_session=d069edd7e927526c0f33a060ff529e88 with no session cookie set, params[:x] and params[:y] are nil in the controller action.

I believe the problem is as follows:  In ActionDispatch::Session::AbstractStore#extract_session_id (action_dispatch/middleware/session/abstract_store.rb:204), if sid is not fetched from a cookie and @cookie_only is false, then sid is fetched from request.params[@key].  This causes ActionDispatch::Http::Parameters#parameters (action_dispatch/http/parameters.rb:9) to be called to populate @env[&quot;action_dispatch.request.parameters&quot;] in the request environment.  However, the session store middleware runs before the router, so @env[&quot;action_dispatch.request.path_parameters&quot;] has not yet been populated, and @env[&quot;action_dispatch.request.parameters&quot;] is populated without the path parameters.  Then later when ActionController::Instrumentation#process_action (action_controller/metal/instrumentation.rb:21) preps the filtered parameters, they come by filtering a parameter hash that should have the path parameters in it, but doesn't, so the path parameters never make it to the final controller.

A crude hack that works around the problem is to change ActionDispatch::Http::FilterParameters#filter_parameters as follows:
@@@ ruby
      def filtered_parameters
        @filtered_parameters ||= parameter_filter.filter(parameters_uncached)
      end
@@@
where ActionDispatch::Http::Parameters#parameters_uncached is a copy of ActionDispatch::Http::Parameters#parameters which forces rebuilding of the hash:
@@@ ruby
      def parameters_uncached
        @env[&quot;action_dispatch.request.parameters&quot;] = begin
          params = request_parameters.merge(query_parameters)
          params.merge!(path_parameters)
          encode_params(params).with_indifferent_access
        end
      end
@@@

I don't know whether this is the right way to attack the problem, and I don't know yet whether this patch causes any other issues.

[Note: I require :cookie_only =&gt; false because my application is called on the user's behalf by a portal system which does not pass me cookies or permit me to set them.  This setup also means that session fixation attacks are not possible without compromising the portal system.]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When using the ActiveRecord session store with :cookie_only
=&amp;gt; false set, if the session ID is actually supplied via URL
parameter and not via cookie, path parameters designated in the
route do not appear in the params hash in the controller. That is,
if we have the route&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  get &quot;test/aa/:x/:y&quot; =&amp;gt; 'test#aa'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and we fetch
/test/aa/1/1?_sesstest_session=d069edd7e927526c0f33a060ff529e88
with no session cookie set, params[:x] and params[:y] are nil in
the controller action.&lt;/p&gt;
&lt;p&gt;I believe the problem is as follows: In
ActionDispatch::Session::AbstractStore#extract_session_id
(action_dispatch/middleware/session/abstract_store.rb:204), if sid
is not fetched from a cookie and @cookie_only is false, then sid is
fetched from request.params[@key]. This causes
ActionDispatch::Http::Parameters#parameters
(action_dispatch/http/parameters.rb:9) to be called to populate
@env[&quot;action_dispatch.request.parameters&quot;] in the request
environment. However, the session store middleware runs before the
router, so @env[&quot;action_dispatch.request.path_parameters&quot;] has not
yet been populated, and @env[&quot;action_dispatch.request.parameters&quot;]
is populated without the path parameters. Then later when
ActionController::Instrumentation#process_action
(action_controller/metal/instrumentation.rb:21) preps the filtered
parameters, they come by filtering a parameter hash that should
have the path parameters in it, but doesn't, so the path parameters
never make it to the final controller.&lt;/p&gt;
&lt;p&gt;A crude hack that works around the problem is to change
ActionDispatch::Http::FilterParameters#filter_parameters as
follows:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;      def filtered_parameters
        @filtered_parameters ||= parameter_filter.filter(parameters_uncached)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;where ActionDispatch::Http::Parameters#parameters_uncached is a
copy of ActionDispatch::Http::Parameters#parameters which forces
rebuilding of the hash:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;      def parameters_uncached
        @env[&quot;action_dispatch.request.parameters&quot;] = begin
          params = request_parameters.merge(query_parameters)
          params.merge!(path_parameters)
          encode_params(params).with_indifferent_access
        end
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I don't know whether this is the right way to attack the
problem, and I don't know yet whether this patch causes any other
issues.&lt;/p&gt;
&lt;p&gt;[Note: I require :cookie_only =&amp;gt; false because my application
is called on the user's behalf by a portal system which does not
pass me cookies or permit me to set them. This setup also means
that session fixation attacks are not possible without compromising
the portal system.]&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When using the ActiveRecord session store with :cookie_only =&gt; false set, if the session ID is actually supplied via URL parameter and not via cookie, path parameters designated in the route do not appear in the params hash in the controller.  That is, if we have the route
@@@ ruby
  get &quot;test/aa/:x/:y&quot; =&gt; 'test#aa'
@@@
and we fetch /test/aa/1/1?_sesstest_session=d069edd7e927526c0f33a060ff529e88 with no session cookie set, params[:x] and params[:y] are nil in the controller action.

I believe the problem is as follows:  In ActionDispatch::Session::AbstractStore#extract_session_id (action_dispatch/middleware/session/abstract_store.rb:204), if sid is not fetched from a cookie and @cookie_only is false, then sid is fetched from request.params[@key].  This causes ActionDispatch::Http::Parameters#parameters (action_dispatch/http/parameters.rb:9) to be called to populate @env[&quot;action_dispatch.request.parameters&quot;] in the request environment.  However, the session store middleware runs before the router, so @env[&quot;action_dispatch.request.path_parameters&quot;] has not yet been populated, and @env[&quot;action_dispatch.request.parameters&quot;] is populated without the path parameters.  Then later when ActionController::Instrumentation#process_action (action_controller/metal/instrumentation.rb:21) preps the filtered parameters, they come by filtering a parameter hash that should have the path parameters in it, but doesn't, so the path parameters never make it to the final controller.

A crude hack that works around the problem is to change ActionDispatch::Http::FilterParameters#filter_parameters as follows:
@@@ ruby
      def filtered_parameters
        @filtered_parameters ||= parameter_filter.filter(parameters_uncached)
      end
@@@
where ActionDispatch::Http::Parameters#parameters_uncached is a copy of ActionDispatch::Http::Parameters#parameters which forces rebuilding of the hash:
@@@ ruby
      def parameters_uncached
        @env[&quot;action_dispatch.request.parameters&quot;] = begin
          params = request_parameters.merge(query_parameters)
          params.merge!(path_parameters)
          encode_params(params).with_indifferent_access
        end
      end
@@@

I don't know whether this is the right way to attack the problem, and I don't know yet whether this patch causes any other issues.

[Note: I require :cookie_only =&gt; false because my application is called on the user's behalf by a portal system which does not pass me cookies or permit me to set them.  This setup also means that session fixation attacks are not possible without compromising the portal system.]</body>
      <body-html>&lt;div&gt;&lt;p&gt;When using the ActiveRecord session store with :cookie_only
=&amp;gt; false set, if the session ID is actually supplied via URL
parameter and not via cookie, path parameters designated in the
route do not appear in the params hash in the controller. That is,
if we have the route&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  get &quot;test/aa/:x/:y&quot; =&amp;gt; 'test#aa'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and we fetch
/test/aa/1/1?_sesstest_session=d069edd7e927526c0f33a060ff529e88
with no session cookie set, params[:x] and params[:y] are nil in
the controller action.&lt;/p&gt;
&lt;p&gt;I believe the problem is as follows: In
ActionDispatch::Session::AbstractStore#extract_session_id
(action_dispatch/middleware/session/abstract_store.rb:204), if sid
is not fetched from a cookie and @cookie_only is false, then sid is
fetched from request.params[@key]. This causes
ActionDispatch::Http::Parameters#parameters
(action_dispatch/http/parameters.rb:9) to be called to populate
@env[&quot;action_dispatch.request.parameters&quot;] in the request
environment. However, the session store middleware runs before the
router, so @env[&quot;action_dispatch.request.path_parameters&quot;] has not
yet been populated, and @env[&quot;action_dispatch.request.parameters&quot;]
is populated without the path parameters. Then later when
ActionController::Instrumentation#process_action
(action_controller/metal/instrumentation.rb:21) preps the filtered
parameters, they come by filtering a parameter hash that should
have the path parameters in it, but doesn't, so the path parameters
never make it to the final controller.&lt;/p&gt;
&lt;p&gt;A crude hack that works around the problem is to change
ActionDispatch::Http::FilterParameters#filter_parameters as
follows:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;      def filtered_parameters
        @filtered_parameters ||= parameter_filter.filter(parameters_uncached)
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;where ActionDispatch::Http::Parameters#parameters_uncached is a
copy of ActionDispatch::Http::Parameters#parameters which forces
rebuilding of the hash:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;      def parameters_uncached
        @env[&quot;action_dispatch.request.parameters&quot;] = begin
          params = request_parameters.merge(query_parameters)
          params.merge!(path_parameters)
          encode_params(params).with_indifferent_access
        end
      end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I don't know whether this is the right way to attack the
problem, and I don't know yet whether this patch causes any other
issues.&lt;/p&gt;
&lt;p&gt;[Note: I require :cookie_only =&amp;gt; false because my application
is called on the user's behalf by a portal system which does not
pass me cookies or permit me to set them. This setup also means
that session fixation attacks are not possible without compromising
the portal system.]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-08T18:52:11+01:00</created-at>
      <creator-id type="integer">142219</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6688</number>
      <permalink>path-parameters-not-recognized-when-session-is-cookie_only-false</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Path parameters not recognized when session is :cookie_only =&gt; false</title>
      <updated-at type="datetime">2011-04-08T18:52:14+01:00</updated-at>
      <user-id type="integer">142219</user-id>
      <version type="integer">1</version>
      <user-name>ystael</user-name>
      <creator-name>ystael</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6688</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
