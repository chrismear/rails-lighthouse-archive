<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-19T15:41:19+01:00</created-at>
  <creator-id type="integer">42916</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3235</number>
  <permalink>default-scoping-and-associations</permalink>
  <priority type="integer">147556</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>activerecord bugmash patch tests</tag>
  <title>default scoping and associations</title>
  <updated-at type="datetime">2009-10-26T03:22:48+00:00</updated-at>
  <user-id type="integer">22589</user-id>
  <version type="integer">7</version>
  <user-name>Matt Jones</user-name>
  <creator-name>Greg Hazel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
  <priority-name nil="true"></priority-name>
  <original-body>Consider the following:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friends,
           :foreign_key =&gt; 'user_id',
           :class_name =&gt; 'Friendship'
end

User.scoped(:conditions =&gt; &quot;id != 7&quot;).find_each do |user|
  p user.friends
end

@@@

The result is:
@@@ sql
User Load (1.0ms)  SELECT * FROM `users` WHERE (users.id &gt;= 0) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
User Columns (5.0ms)  SHOW FIELDS FROM `users`
User Load (0.0ms)  Mysql::Error: Column 'id' in where clause is ambiguous: SELECT `users`.* FROM `users` INNER JOIN friendships ON users.id = friendships.user_id WHERE (`friendships`.friend_id = 1) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
ActiveRecord::StatementInvalid: Mysql::Error: Column 'id' in where clause is ambiguous: SELECT `users`.* FROM `users`  INNER JOIN friendships ON users.id = friendships.user_id    WHERE (`friendships`.friend_id = 1) AND (id != 7)  ORDER BY users.id ASC LIMIT 1000
@@@

Ignoring that I could have specified &quot;users.id&quot; - I used that example to show an error. Isn't it a bit strange for the current scope of the find_each to carry through to associations? Imagine something more exclusive like:

@@@ ruby
User.males.find_each do |user|
  p user.female_friends
end
@@@

That would find nothing and not raise an error!</original-body>
  <latest-body>Consider the following:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friends,
           :foreign_key =&gt; 'user_id',
           :class_name =&gt; 'Friendship'
end

User.scoped(:conditions =&gt; &quot;id != 7&quot;).find_each do |user|
  p user.friends
end

@@@

The result is:
@@@ sql
User Load (1.0ms)  SELECT * FROM `users` WHERE (users.id &gt;= 0) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
User Columns (5.0ms)  SHOW FIELDS FROM `users`
User Load (0.0ms)  Mysql::Error: Column 'id' in where clause is ambiguous: SELECT `users`.* FROM `users` INNER JOIN friendships ON users.id = friendships.user_id WHERE (`friendships`.friend_id = 1) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
ActiveRecord::StatementInvalid: Mysql::Error: Column 'id' in where clause is ambiguous: SELECT `users`.* FROM `users`  INNER JOIN friendships ON users.id = friendships.user_id    WHERE (`friendships`.friend_id = 1) AND (id != 7)  ORDER BY users.id ASC LIMIT 1000
@@@

Ignoring that I could have specified &quot;users.id&quot; - I used that example to show an error. Isn't it a bit strange for the current scope of the find_each to carry through to associations? Imagine something more exclusive like:

@@@ ruby
User.males.find_each do |user|
  p user.female_friends
end
@@@

That would find nothing and not raise an error!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Consider the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :friends,
           :foreign_key =&amp;gt; 'user_id',
           :class_name =&amp;gt; 'Friendship'
end

User.scoped(:conditions =&amp;gt; &quot;id != 7&quot;).find_each do |user|
  p user.friends
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The result is:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;User Load (1.0ms)  SELECT * FROM &lt;/code&gt;users WHERE (users.id &amp;gt;= 0) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
User Columns (5.0ms)  SHOW FIELDS FROM &lt;code&gt;users&lt;/code&gt;
User Load (0.0ms)  Mysql::Error: Column 'id' in where clause is ambiguous: SELECT &lt;code&gt;users&lt;/code&gt;.&lt;em&gt; FROM &lt;code&gt;users&lt;/code&gt; INNER JOIN friendships ON users.id = friendships.user_id WHERE (&lt;code&gt;friendships&lt;/code&gt;.friend_id = 1) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
ActiveRecord::StatementInvalid: Mysql::Error: Column 'id' in where clause is ambiguous: SELECT &lt;code&gt;users&lt;/code&gt;.&lt;/em&gt; FROM &lt;code&gt;users&lt;/code&gt;  INNER JOIN friendships ON users.id = friendships.user_id    WHERE (&lt;code&gt;friendships&lt;/code&gt;.friend_id = 1) AND (id != 7)  ORDER BY users.id ASC LIMIT 1000
&lt;/pre&gt;
&lt;p&gt;Ignoring that I could have specified &quot;users.id&quot; - I used that
example to show an error. Isn't it a bit strange for the current
scope of the find_each to carry through to associations? Imagine
something more exclusive like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;User.males.find_each do |user|
  p user.female_friends
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That would find nothing and not raise an error!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Consider the following:

@@@ ruby
class User &lt; ActiveRecord::Base
  has_many :friends,
           :foreign_key =&gt; 'user_id',
           :class_name =&gt; 'Friendship'
end

User.scoped(:conditions =&gt; &quot;id != 7&quot;).find_each do |user|
  p user.friends
end

@@@

The result is:
@@@ sql
User Load (1.0ms)  SELECT * FROM `users` WHERE (users.id &gt;= 0) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
User Columns (5.0ms)  SHOW FIELDS FROM `users`
User Load (0.0ms)  Mysql::Error: Column 'id' in where clause is ambiguous: SELECT `users`.* FROM `users` INNER JOIN friendships ON users.id = friendships.user_id WHERE (`friendships`.friend_id = 1) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
ActiveRecord::StatementInvalid: Mysql::Error: Column 'id' in where clause is ambiguous: SELECT `users`.* FROM `users`  INNER JOIN friendships ON users.id = friendships.user_id    WHERE (`friendships`.friend_id = 1) AND (id != 7)  ORDER BY users.id ASC LIMIT 1000
@@@

Ignoring that I could have specified &quot;users.id&quot; - I used that example to show an error. Isn't it a bit strange for the current scope of the find_each to carry through to associations? Imagine something more exclusive like:

@@@ ruby
User.males.find_each do |user|
  p user.female_friends
end
@@@

That would find nothing and not raise an error!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Consider the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  has_many :friends,
           :foreign_key =&amp;gt; 'user_id',
           :class_name =&amp;gt; 'Friendship'
end

User.scoped(:conditions =&amp;gt; &quot;id != 7&quot;).find_each do |user|
  p user.friends
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The result is:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;sql&quot;&gt;User Load (1.0ms)  SELECT * FROM &lt;/code&gt;users WHERE (users.id &amp;gt;= 0) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
User Columns (5.0ms)  SHOW FIELDS FROM &lt;code&gt;users&lt;/code&gt;
User Load (0.0ms)  Mysql::Error: Column 'id' in where clause is ambiguous: SELECT &lt;code&gt;users&lt;/code&gt;.&lt;em&gt; FROM &lt;code&gt;users&lt;/code&gt; INNER JOIN friendships ON users.id = friendships.user_id WHERE (&lt;code&gt;friendships&lt;/code&gt;.friend_id = 1) AND (id != 7) ORDER BY users.id ASC LIMIT 1000
ActiveRecord::StatementInvalid: Mysql::Error: Column 'id' in where clause is ambiguous: SELECT &lt;code&gt;users&lt;/code&gt;.&lt;/em&gt; FROM &lt;code&gt;users&lt;/code&gt;  INNER JOIN friendships ON users.id = friendships.user_id    WHERE (&lt;code&gt;friendships&lt;/code&gt;.friend_id = 1) AND (id != 7)  ORDER BY users.id ASC LIMIT 1000
&lt;/pre&gt;
&lt;p&gt;Ignoring that I could have specified &quot;users.id&quot; - I used that
example to show an error. Isn't it a bit strange for the current
scope of the find_each to carry through to associations? Imagine
something more exclusive like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;User.males.find_each do |user|
  p user.female_friends
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That would find nothing and not raise an error!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-19T15:41:19+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3235</number>
      <permalink>default-scoping-and-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>default scoping and associations</title>
      <updated-at type="datetime">2009-09-19T15:41:26+01:00</updated-at>
      <user-id type="integer">42916</user-id>
      <version type="integer">1</version>
      <user-name>Greg Hazel</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T11:59:09+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3235</number>
      <permalink>default-scoping-and-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bugmash</tag>
      <title>default scoping and associations</title>
      <updated-at type="datetime">2009-09-25T12:47:46+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 - applying the conditions of the scope is clearly a bug

verified</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 - applying the conditions of the scope is clearly a bug&lt;/p&gt;
&lt;p&gt;verified&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T11:02:26+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3235</number>
      <permalink>default-scoping-and-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bugmash</tag>
      <title>default scoping and associations</title>
      <updated-at type="datetime">2009-09-27T11:02:28+01:00</updated-at>
      <user-id type="integer">65618</user-id>
      <version type="integer">3</version>
      <user-name>dira</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've attached a patch. This test applies on master and shows the bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've attached a patch. This test applies on master and shows the
bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-27T11:07:23+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3235</number>
      <permalink>default-scoping-and-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bugmash</tag>
      <title>default scoping and associations</title>
      <updated-at type="datetime">2009-09-27T11:07:26+01:00</updated-at>
      <user-id type="integer">65618</user-id>
      <version type="integer">4</version>
      <user-name>dira</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>find_each doesn't just have this problem when used with a scope, it adds any :conditions used to called associations, like so:

@@@ ruby
User.find_each(:conditions =&gt; {:sex =&gt; 'male'}) do |user|
  p user.female.friends
end
@@@

this would also return nothing, as the condition :sex =&gt; 'male' gets added to the call to user.female.friends.</body>
      <body-html>&lt;div&gt;&lt;p&gt;find_each doesn't just have this problem when used with a scope,
it adds any :conditions used to called associations, like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;User.find_each(:conditions =&amp;gt; {:sex =&amp;gt; 'male'}) do |user|
  p user.female.friends
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;this would also return nothing, as the condition :sex =&amp;gt;
'male' gets added to the call to user.female.friends.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-14T15:46:53+01:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3235</number>
      <permalink>default-scoping-and-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bugmash</tag>
      <title>default scoping and associations</title>
      <updated-at type="datetime">2009-10-14T15:46:54+01:00</updated-at>
      <user-id type="integer">8776</user-id>
      <version type="integer">5</version>
      <user-name>William Gray</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The attached patch contains the tests Dira added plus the changes needed to make it pass. Basically it adds an empty hash to the scoped_methods before yielding records and removes it again after the yield.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The attached patch contains the tests Dira added plus the
changes needed to make it pass. Basically it adds an empty hash to
the scoped_methods before yielding records and removes it again
after the yield.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-26T02:39:22+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord bugmash
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3235</number>
      <permalink>default-scoping-and-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bugmash patch tests</tag>
      <title>default scoping and associations</title>
      <updated-at type="datetime">2009-10-26T02:39:23+00:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">6</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This is a duplicate of #2227 (also #2128, #2791) - may want to move discussion to there.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is a duplicate of &lt;a href=&quot;/projects/8994/tickets/2227&quot;
title=&quot;Ticket #2227&quot;&gt;#2227&lt;/a&gt; (also &lt;a href=
&quot;/projects/8994/tickets/2128&quot; title=&quot;Ticket #2128&quot;&gt;#2128&lt;/a&gt;,
&lt;a href=&quot;/projects/8994/tickets/2791&quot; title=
&quot;Ticket #2791&quot;&gt;#2791&lt;/a&gt;) - may want to move discussion to
there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-10-26T03:22:46+00:00</created-at>
      <creator-id type="integer">42916</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3235</number>
      <permalink>default-scoping-and-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activerecord bugmash patch tests</tag>
      <title>default scoping and associations</title>
      <updated-at type="datetime">2009-10-26T03:22:48+00:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">7</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Greg Hazel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3235</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>e0d57130e790a7786083d4f3cd49b0f0e7588ada</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-27T11:07:23+01:00</created-at>
      <filename>3235-master-tests.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">279594</id>
      <size type="integer">1555</size>
      <uploader-id type="integer">65618</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/279594/3235-master-tests.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>c74c5930fd929f0662b41f6dbfbb01e12b1df117</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-26T02:39:22+00:00</created-at>
      <filename>0001-clear-scoped_methods-when-yielding-records-from-with.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">304914</id>
      <size type="integer">2270</size>
      <uploader-id type="integer">2529</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/304914/0001-clear-scoped_methods-when-yielding-records-from-with.patch</url>
    </attachment>
  </attachments>
</ticket>
