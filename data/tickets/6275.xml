<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-01-10T22:33:58+00:00</created-at>
  <creator-id type="integer">120128</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6275</number>
  <permalink>abstractcontrolleractionnotfound-should-be-rescued</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag nil="true"></tag>
  <title>AbstractController::ActionNotFound should be rescued</title>
  <updated-at type="datetime">2011-03-19T14:43:48+00:00</updated-at>
  <user-id type="integer">104825</user-id>
  <version type="integer">6</version>
  <user-name>Kevin Watt</user-name>
  <creator-name>Kenn Ejima</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6275</url>
  <priority-name>Low</priority-name>
  <original-body>Suppose I have the following routes.rb:

@@@ ruby
match ':controller/:action', :controller =&gt; /api\/(room|user)/
match 'api/*others', :to =&gt; 'api/base#render_404_as_json'
@@@

and controllers:

@@@ ruby
class Api::BaseController
  def render_404_as_json
    ...
    render :text =&gt; '{&quot;status&quot;:&quot;error&quot;,&quot;code&quot;:&quot;invalid_api_method&quot;}'
  end
end

class Api::RoomController &lt; Api::BaseController
end

class Api::UserController &lt; Api::BaseController
end
@@@

Now, when &quot;/api/bogus&quot; gets hit, the request is routed to `render_404_as_json` as it should.

However, when &quot;/api/room/bogus&quot; gets hit, it raises `AbstractController::ActionNotFound`, even if I had the following lines in api/base_controller.rb or application_controller.rb.

@@@ ruby
rescue_from Exception, :with =&gt; :render_500_as_json
rescue_from AbstractController::ActionNotFound, :with =&gt; :render_404_as_json
@@@

My goal here is to never return an unstructured HTML response of 404 for any URL under /api.

I think we have two ways to get around this:

* AbstractController::ActionNotFound should be raised inside RoomController so that you can catch it and do your own stuff, or
* When AbstractController::ActionNotFound is raised, continue down the routing matches (in the example above, 'api/*others' in the next line matches)</original-body>
  <latest-body>Suppose I have the following routes.rb:

@@@ ruby
match ':controller/:action', :controller =&gt; /api\/(room|user)/
match 'api/*others', :to =&gt; 'api/base#render_404_as_json'
@@@

and controllers:

@@@ ruby
class Api::BaseController
  def render_404_as_json
    ...
    render :text =&gt; '{&quot;status&quot;:&quot;error&quot;,&quot;code&quot;:&quot;invalid_api_method&quot;}'
  end
end

class Api::RoomController &lt; Api::BaseController
end

class Api::UserController &lt; Api::BaseController
end
@@@

Now, when &quot;/api/bogus&quot; gets hit, the request is routed to `render_404_as_json` as it should.

However, when &quot;/api/room/bogus&quot; gets hit, it raises `AbstractController::ActionNotFound`, even if I had the following lines in api/base_controller.rb or application_controller.rb.

@@@ ruby
rescue_from Exception, :with =&gt; :render_500_as_json
rescue_from AbstractController::ActionNotFound, :with =&gt; :render_404_as_json
@@@

My goal here is to never return an unstructured HTML response of 404 for any URL under /api.

I think we have two ways to get around this:

* AbstractController::ActionNotFound should be raised inside RoomController so that you can catch it and do your own stuff, or
* When AbstractController::ActionNotFound is raised, continue down the routing matches (in the example above, 'api/*others' in the next line matches)</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Suppose I have the following routes.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;match ':controller/:action', :controller =&amp;gt; /api\/(room|user)/
match 'api/*others', :to =&amp;gt; 'api/base#render_404_as_json'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and controllers:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Api::BaseController
  def render_404_as_json
    ...
    render :text =&amp;gt; '{&quot;status&quot;:&quot;error&quot;,&quot;code&quot;:&quot;invalid_api_method&quot;}'
  end
end

class Api::RoomController &amp;lt; Api::BaseController
end

class Api::UserController &amp;lt; Api::BaseController
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, when &quot;/api/bogus&quot; gets hit, the request is routed to
&lt;code&gt;render_404_as_json&lt;/code&gt; as it should.&lt;/p&gt;
&lt;p&gt;However, when &quot;/api/room/bogus&quot; gets hit, it raises
&lt;code&gt;AbstractController::ActionNotFound&lt;/code&gt;, even if I had the
following lines in api/base_controller.rb or
application_controller.rb.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;rescue_from Exception, :with =&amp;gt; :render_500_as_json
rescue_from AbstractController::ActionNotFound, :with =&amp;gt; :render_404_as_json&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My goal here is to never return an unstructured HTML response of
404 for any URL under /api.&lt;/p&gt;
&lt;p&gt;I think we have two ways to get around this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbstractController::ActionNotFound should be raised inside
RoomController so that you can catch it and do your own stuff,
or&lt;/li&gt;
&lt;li&gt;When AbstractController::ActionNotFound is raised, continue
down the routing matches (in the example above, 'api/*others' in
the next line matches)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Suppose I have the following routes.rb:

@@@ ruby
match ':controller/:action', :controller =&gt; /api\/(room|user)/
match 'api/*others', :to =&gt; 'api/base#render_404_as_json'
@@@

and controllers:

@@@ ruby
class Api::BaseController
  def render_404_as_json
    ...
    render :text =&gt; '{&quot;status&quot;:&quot;error&quot;,&quot;code&quot;:&quot;invalid_api_method&quot;}'
  end
end

class Api::RoomController &lt; Api::BaseController
end

class Api::UserController &lt; Api::BaseController
end
@@@

Now, when &quot;/api/bogus&quot; gets hit, the request is routed to `render_404_as_json` as it should.

However, when &quot;/api/room/bogus&quot; gets hit, it raises `AbstractController::ActionNotFound`, even if I had the following lines in api/base_controller.rb or application_controller.rb.

@@@ ruby
rescue_from Exception, :with =&gt; :render_500_as_json
rescue_from AbstractController::ActionNotFound, :with =&gt; :render_404_as_json
@@@

My goal here is to never return an unstructured HTML response of 404 for any URL under /api.

I think we have two ways to get around this:

* AbstractController::ActionNotFound should be raised inside RoomController so that you can catch it and do your own stuff, or
* When AbstractController::ActionNotFound is raised, continue down the routing matches (in the example above, 'api/*others' in the next line matches)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Suppose I have the following routes.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;match ':controller/:action', :controller =&amp;gt; /api\/(room|user)/
match 'api/*others', :to =&amp;gt; 'api/base#render_404_as_json'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and controllers:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Api::BaseController
  def render_404_as_json
    ...
    render :text =&amp;gt; '{&quot;status&quot;:&quot;error&quot;,&quot;code&quot;:&quot;invalid_api_method&quot;}'
  end
end

class Api::RoomController &amp;lt; Api::BaseController
end

class Api::UserController &amp;lt; Api::BaseController
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now, when &quot;/api/bogus&quot; gets hit, the request is routed to
&lt;code&gt;render_404_as_json&lt;/code&gt; as it should.&lt;/p&gt;
&lt;p&gt;However, when &quot;/api/room/bogus&quot; gets hit, it raises
&lt;code&gt;AbstractController::ActionNotFound&lt;/code&gt;, even if I had the
following lines in api/base_controller.rb or
application_controller.rb.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;rescue_from Exception, :with =&amp;gt; :render_500_as_json
rescue_from AbstractController::ActionNotFound, :with =&amp;gt; :render_404_as_json&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;My goal here is to never return an unstructured HTML response of
404 for any URL under /api.&lt;/p&gt;
&lt;p&gt;I think we have two ways to get around this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbstractController::ActionNotFound should be raised inside
RoomController so that you can catch it and do your own stuff,
or&lt;/li&gt;
&lt;li&gt;When AbstractController::ActionNotFound is raised, continue
down the routing matches (in the example above, 'api/*others' in
the next line matches)&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-10T22:33:58+00:00</created-at>
      <creator-id type="integer">120128</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6275</number>
      <permalink>abstractcontrolleractionnotfound-should-be-rescued</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AbstractController::ActionNotFound should be rescued</title>
      <updated-at type="datetime">2011-01-10T22:34:02+00:00</updated-at>
      <user-id type="integer">120128</user-id>
      <version type="integer">1</version>
      <user-name>Kenn Ejima</user-name>
      <creator-name>Kenn Ejima</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6275</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is essentially a duplicate of #4444. You've almost got the workaround from that ticket but your problem is that the first route is partially matching on the controller. If you add an :action regexp constraint listing the valid actions it should fall through to the second route.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is essentially a duplicate of &lt;a href=
&quot;/projects/8994/tickets/4444&quot; title=&quot;Ticket #4444&quot;&gt;#4444&lt;/a&gt;.
You've almost got the workaround from that ticket but your problem
is that the first route is partially matching on the controller. If
you add an :action regexp constraint listing the valid actions it
should fall through to the second route.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-09T04:24:29+00:00</created-at>
      <creator-id type="integer">120128</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6275</number>
      <permalink>abstractcontrolleractionnotfound-should-be-rescued</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>AbstractController::ActionNotFound should be rescued</title>
      <updated-at type="datetime">2011-02-09T04:24:39+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>Kenn Ejima</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6275</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks Andrew, patching `render_exception` worked as you said. In my case:

@@@ ruby
require 'action_dispatch/middleware/show_exceptions'
module ActionDispatch
  class ShowExceptions
    private
    def render_exception_with_template(env, exception)
      if exception.kind_of? AbstractController::ActionNotFound
        request = Request.new(env)
        if request.env['action_dispatch.request.path_parameters'][:controller] =~ /^api\/.+/
          return Api::BaseController.action(:render_404_as_json).call(env)
        end
      end
      render_exception_without_template(env, exception)
    end
    alias_method_chain :render_exception, :template
  end
end
@@@

I have 20 controllers and 100+ actions under the /api context so listing them all in the :action regexp constraint seemed like a bad idea.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks Andrew, patching &lt;code&gt;render_exception&lt;/code&gt; worked as
you said. In my case:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;require 'action_dispatch/middleware/show_exceptions'
module ActionDispatch
  class ShowExceptions
    private
    def render_exception_with_template(env, exception)
      if exception.kind_of? AbstractController::ActionNotFound
        request = Request.new(env)
        if request.env['action_dispatch.request.path_parameters'][:controller] =~ /^api\/.+/
          return Api::BaseController.action(:render_404_as_json).call(env)
        end
      end
      render_exception_without_template(env, exception)
    end
    alias_method_chain :render_exception, :template
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have 20 controllers and 100+ actions under the /api context so
listing them all in the :action regexp constraint seemed like a bad
idea.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-23T22:16:38+00:00</created-at>
      <creator-id type="integer">120128</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6275</number>
      <permalink>abstractcontrolleractionnotfound-should-be-rescued</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>AbstractController::ActionNotFound should be rescued</title>
      <updated-at type="datetime">2011-02-23T22:16:49+00:00</updated-at>
      <user-id type="integer">120128</user-id>
      <version type="integer">3</version>
      <user-name>Kenn Ejima</user-name>
      <creator-name>Kenn Ejima</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6275</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm trying your solution, but don't seem to have access to MyApp::HomeController in this context.  Any tips?  Is it in any strange namespaces besides the one I define in application.rb?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm trying your solution, but don't seem to have access to
MyApp::HomeController in this context. Any tips? Is it in any
strange namespaces besides the one I define in application.rb?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-19T01:35:55+00:00</created-at>
      <creator-id type="integer">120128</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6275</number>
      <permalink>abstractcontrolleractionnotfound-should-be-rescued</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>AbstractController::ActionNotFound should be rescued</title>
      <updated-at type="datetime">2011-03-19T01:36:06+00:00</updated-at>
      <user-id type="integer">104825</user-id>
      <version type="integer">4</version>
      <user-name>Kevin Watt</user-name>
      <creator-name>Kenn Ejima</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6275</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Shouldn't it be in the global namespace? i.e. HomeController and not MyApp::HomeController.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Shouldn't it be in the global namespace? i.e. HomeController and
not MyApp::HomeController.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-19T06:36:02+00:00</created-at>
      <creator-id type="integer">120128</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6275</number>
      <permalink>abstractcontrolleractionnotfound-should-be-rescued</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>AbstractController::ActionNotFound should be rescued</title>
      <updated-at type="datetime">2011-03-19T06:36:12+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">5</version>
      <user-name>Andrew White</user-name>
      <creator-name>Kenn Ejima</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6275</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That fixed it, thanks.  When rendering your action you can't re-raise and expect *that* to get caught like normal, since it's not being wrapped in the begin block that does the rescue_from handling in the first place.

I wish there was a way to have my web server (litespeed, but shouldn't matter) to see that it got a status 404 from the backend handler, then render the standard error page.

Though routing errors still cause a 500 rather than 404 which sucks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That fixed it, thanks. When rendering your action you can't
re-raise and expect &lt;em&gt;that&lt;/em&gt; to get caught like normal, since
it's not being wrapped in the begin block that does the rescue_from
handling in the first place.&lt;/p&gt;
&lt;p&gt;I wish there was a way to have my web server (litespeed, but
shouldn't matter) to see that it got a status 404 from the backend
handler, then render the standard error page.&lt;/p&gt;
&lt;p&gt;Though routing errors still cause a 500 rather than 404 which
sucks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-19T14:43:37+00:00</created-at>
      <creator-id type="integer">120128</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6275</number>
      <permalink>abstractcontrolleractionnotfound-should-be-rescued</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag nil="true"></tag>
      <title>AbstractController::ActionNotFound should be rescued</title>
      <updated-at type="datetime">2011-03-19T14:43:49+00:00</updated-at>
      <user-id type="integer">104825</user-id>
      <version type="integer">6</version>
      <user-name>Kevin Watt</user-name>
      <creator-name>Kenn Ejima</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6275</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
