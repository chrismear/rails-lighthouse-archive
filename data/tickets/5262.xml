<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-10-02T10:57:49+01:00</created-at>
  <creator-id type="integer">99400</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5262</number>
  <permalink>calling-method-on-new-ar-objects</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>Calling #method on new AR objects</title>
  <updated-at type="datetime">2010-10-02T10:57:49+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">7</version>
  <user-name>Repository</user-name>
  <creator-name>fakingfantastic</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
  <priority-name>Low</priority-name>
  <original-body>(brought up by PointMan in #rubyonrails)

With Ruby, we can use #method to do something like this:

@@@ ruby
class Foo
  def hello
    put &quot;hello&quot;
  end
end

foo = Foo.new
foo.method(:hello).call
# =&gt; hello
@@@

Doing that with an AR object doesn't fire exactly the same way

@@@ ruby
class User &lt; ActiveRecord::Base
  # has an attr :email from a migration
end

u = User.new
u.method(:email).call

NameError: undefined method `email' for class `User'
	from (irb):2:in `method'
	from (irb):2
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:44:in `start'
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:8:in `start'
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands.rb:23:in `&lt;top (required)&gt;'
	from script/rails:10:in `require'
	from script/rails:10:in `&lt;main&gt;'
@@@

This however, will work:

@@@ ruby
u = User.new
u.email
# =&gt; nil
u.method(:email).call
# =&gt; nil
@@@

I'm doing a little digging now, but I'm assuming Rails doesn't eager load the attributes onto the class until it needs to (because it'd have to hit the DB to set up all the attr values). Not sure if it's a bug, but some may find it breaks a flow of Ruby programming they are used to.


Ruby 1.9.2-head, Rails 3.0.0.rc 

Holla atcha boy and let me know</original-body>
  <latest-body>(brought up by PointMan in #rubyonrails)

With Ruby, we can use #method to do something like this:

@@@ ruby
class Foo
  def hello
    put &quot;hello&quot;
  end
end

foo = Foo.new
foo.method(:hello).call
# =&gt; hello
@@@

Doing that with an AR object doesn't fire exactly the same way

@@@ ruby
class User &lt; ActiveRecord::Base
  # has an attr :email from a migration
end

u = User.new
u.method(:email).call

NameError: undefined method `email' for class `User'
	from (irb):2:in `method'
	from (irb):2
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:44:in `start'
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:8:in `start'
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands.rb:23:in `&lt;top (required)&gt;'
	from script/rails:10:in `require'
	from script/rails:10:in `&lt;main&gt;'
@@@

This however, will work:

@@@ ruby
u = User.new
u.email
# =&gt; nil
u.method(:email).call
# =&gt; nil
@@@

I'm doing a little digging now, but I'm assuming Rails doesn't eager load the attributes onto the class until it needs to (because it'd have to hit the DB to set up all the attr values). Not sure if it's a bug, but some may find it breaks a flow of Ruby programming they are used to.


Ruby 1.9.2-head, Rails 3.0.0.rc 

Holla atcha boy and let me know</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;(brought up by PointMan in #rubyonrails)&lt;/p&gt;
&lt;p&gt;With Ruby, we can use #method to do something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Foo
  def hello
    put &quot;hello&quot;
  end
end

foo = Foo.new
foo.method(:hello).call
# =&amp;gt; hello&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Doing that with an AR object doesn't fire exactly the same
way&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  # has an attr :email from a migration
end

u = User.new
u.method(:email).call

NameError: undefined method `email' for class `User'
    from (irb):2:in `method'
    from (irb):2
    from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:44:in `start'
    from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:8:in `start'
    from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands.rb:23:in `&amp;lt;top (required)&amp;gt;'
    from script/rails:10:in `require'
    from script/rails:10:in `&amp;lt;main&amp;gt;'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This however, will work:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;u = User.new
u.email
# =&amp;gt; nil
u.method(:email).call
# =&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm doing a little digging now, but I'm assuming Rails doesn't
eager load the attributes onto the class until it needs to (because
it'd have to hit the DB to set up all the attr values). Not sure if
it's a bug, but some may find it breaks a flow of Ruby programming
they are used to.&lt;/p&gt;
&lt;p&gt;Ruby 1.9.2-head, Rails 3.0.0.rc&lt;/p&gt;
&lt;p&gt;Holla atcha boy and let me know&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(brought up by PointMan in #rubyonrails)

With Ruby, we can use #method to do something like this:

@@@ ruby
class Foo
  def hello
    put &quot;hello&quot;
  end
end

foo = Foo.new
foo.method(:hello).call
# =&gt; hello
@@@

Doing that with an AR object doesn't fire exactly the same way

@@@ ruby
class User &lt; ActiveRecord::Base
  # has an attr :email from a migration
end

u = User.new
u.method(:email).call

NameError: undefined method `email' for class `User'
	from (irb):2:in `method'
	from (irb):2
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:44:in `start'
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:8:in `start'
	from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands.rb:23:in `&lt;top (required)&gt;'
	from script/rails:10:in `require'
	from script/rails:10:in `&lt;main&gt;'
@@@

This however, will work:

@@@ ruby
u = User.new
u.email
# =&gt; nil
u.method(:email).call
# =&gt; nil
@@@

I'm doing a little digging now, but I'm assuming Rails doesn't eager load the attributes onto the class until it needs to (because it'd have to hit the DB to set up all the attr values). Not sure if it's a bug, but some may find it breaks a flow of Ruby programming they are used to.


Ruby 1.9.2-head, Rails 3.0.0.rc 

Holla atcha boy and let me know</body>
      <body-html>&lt;div&gt;&lt;p&gt;(brought up by PointMan in #rubyonrails)&lt;/p&gt;
&lt;p&gt;With Ruby, we can use #method to do something like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Foo
  def hello
    put &quot;hello&quot;
  end
end

foo = Foo.new
foo.method(:hello).call
# =&amp;gt; hello&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Doing that with an AR object doesn't fire exactly the same
way&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
  # has an attr :email from a migration
end

u = User.new
u.method(:email).call

NameError: undefined method `email' for class `User'
    from (irb):2:in `method'
    from (irb):2
    from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:44:in `start'
    from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands/console.rb:8:in `start'
    from /Users/franklakatos/.rvm/gems/ruby-1.9.2-head/gems/railties-3.0.0.rc/lib/rails/commands.rb:23:in `&amp;lt;top (required)&amp;gt;'
    from script/rails:10:in `require'
    from script/rails:10:in `&amp;lt;main&amp;gt;'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This however, will work:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;u = User.new
u.email
# =&amp;gt; nil
u.method(:email).call
# =&amp;gt; nil&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm doing a little digging now, but I'm assuming Rails doesn't
eager load the attributes onto the class until it needs to (because
it'd have to hit the DB to set up all the attr values). Not sure if
it's a bug, but some may find it breaks a flow of Ruby programming
they are used to.&lt;/p&gt;
&lt;p&gt;Ruby 1.9.2-head, Rails 3.0.0.rc&lt;/p&gt;
&lt;p&gt;Holla atcha boy and let me know&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-31T15:22:20+01:00</created-at>
      <creator-id type="integer">99400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5262</number>
      <permalink>calling-method-on-new-ar-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Calling #method on new AR objects</title>
      <updated-at type="datetime">2010-07-31T15:23:47+01:00</updated-at>
      <user-id type="integer">99400</user-id>
      <version type="integer">1</version>
      <user-name>fakingfantastic</user-name>
      <creator-name>fakingfantastic</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-31T15:22:35+01:00</created-at>
      <creator-id type="integer">99400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5262</number>
      <permalink>calling-method-on-new-ar-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Calling #method on new AR objects</title>
      <updated-at type="datetime">2010-07-31T15:22:37+01:00</updated-at>
      <user-id type="integer">99400</user-id>
      <version type="integer">2</version>
      <user-name>fakingfantastic</user-name>
      <creator-name>fakingfantastic</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi

The same problem exists in rails 2.3.8. You can even take it a step further and write User.first.method(:email) and it will give you above error.

Best regards
Brian Jensen
@PointMan_</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi&lt;/p&gt;
&lt;p&gt;The same problem exists in rails 2.3.8. You can even take it a
step further and write User.first.method(:email) and it will give
you above error.&lt;/p&gt;
&lt;p&gt;Best regards&lt;br&gt;
Brian Jensen&lt;br&gt;
@PointMan_&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-31T16:23:48+01:00</created-at>
      <creator-id type="integer">99400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5262</number>
      <permalink>calling-method-on-new-ar-objects</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Calling #method on new AR objects</title>
      <updated-at type="datetime">2010-07-31T16:23:50+01:00</updated-at>
      <user-id type="integer">50137</user-id>
      <version type="integer">3</version>
      <user-name>Brian Jensen</user-name>
      <creator-name>fakingfantastic</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Out of curiosity, why would you want to do

@@@ ruby
  u = User.new
  u.method(:email).call
@@@

instead of 

@@@ ruby
  u = User.new
  u.email
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Out of curiosity, why would you want to do&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  u = User.new
  u.method(:email).call&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;instead of&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  u = User.new
  u.email&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-01T03:41:58+01:00</created-at>
      <creator-id type="integer">99400</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5262</number>
      <permalink>calling-method-on-new-ar-objects</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Calling #method on new AR objects</title>
      <updated-at type="datetime">2010-08-01T03:42:00+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>fakingfantastic</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I tried it with 2.3.8 and 2-3-stable and didn't get the error. 
If either u.method(:email).call or u.email is called the execution path runs through method_missing and the correct value is returned.
I got the error only in Rails 3 with Ruby 1.8.7 and 1.9.2-head where method_missing is not called by u.method(:email).

Rohit I think u.method can be used if the method is determined at runtime. It's prettier than using eval.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I tried it with 2.3.8 and 2-3-stable and didn't get the
error.&lt;br&gt;
If either u.method(:email).call or u.email is called the execution
path runs through method_missing and the correct value is
returned.&lt;br&gt;
I got the error only in Rails 3 with Ruby 1.8.7 and 1.9.2-head
where method_missing is not called by u.method(:email).&lt;/p&gt;
&lt;p&gt;Rohit I think u.method can be used if the method is determined
at runtime. It's prettier than using eval.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-05T18:52:46+01:00</created-at>
      <creator-id type="integer">99400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5262</number>
      <permalink>calling-method-on-new-ar-objects</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Calling #method on new AR objects</title>
      <updated-at type="datetime">2010-08-05T18:52:48+01:00</updated-at>
      <user-id type="integer">103692</user-id>
      <version type="integer">5</version>
      <user-name>Rainer Blessing</user-name>
      <creator-name>fakingfantastic</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>&gt; &quot;Rohit I think u.method can be used if the method is determined at runtime. It's prettier than using eval.&quot;

Yeah, I'm pretty sure that was the reason it was stumbled upon.</body>
      <body-html>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;&quot;Rohit I think u.method can be used if the method is determined
at runtime. It's prettier than using eval.&quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yeah, I'm pretty sure that was the reason it was stumbled
upon.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-05T19:06:36+01:00</created-at>
      <creator-id type="integer">99400</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5262</number>
      <permalink>calling-method-on-new-ar-objects</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Calling #method on new AR objects</title>
      <updated-at type="datetime">2010-08-05T19:06:39+01:00</updated-at>
      <user-id type="integer">99400</user-id>
      <version type="integer">6</version>
      <user-name>fakingfantastic</user-name>
      <creator-name>fakingfantastic</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [066518295032a8e3f3468737337b8c8299442867]) Preserving :include options for hmt association with an order but without conditions [#5262 state:resolved]
http://github.com/rails/rails/commit/066518295032a8e3f3468737337b8c8299442867</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/066518295032a8e3f3468737337b8c8299442867&quot;
title=
&quot;Changeset [066518295032a8e3f3468737337b8c8299442867]&quot;&gt;[066518295032a8e3f3468737337b8c8299442867]&lt;/a&gt;)
Preserving :include options for hmt association with an order but
without conditions [&lt;a href=&quot;/projects/8994/tickets/5262&quot; title=
&quot;Ticket #5262&quot;&gt;#5262&lt;/a&gt; state:resolved] &lt;a href=
&quot;http://github.com/rails/rails/commit/066518295032a8e3f3468737337b8c8299442867&quot;&gt;
http://github.com/rails/rails/commit/066518295032a8e3f3468737337b8c...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-28T18:05:16+01:00</created-at>
      <creator-id type="integer">99400</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5262</number>
      <permalink>calling-method-on-new-ar-objects</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Calling #method on new AR objects</title>
      <updated-at type="datetime">2010-09-28T18:05:17+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">7</version>
      <user-name>Repository</user-name>
      <creator-name>fakingfantastic</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5262</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
