<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">89656</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-09-02T07:07:45+01:00</created-at>
  <creator-id type="integer">86004</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5530</number>
  <permalink>select_tag-wrongly-escaped-option-tags-passed-to-it-in-rails-300</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>escape rails3 select_tag</tag>
  <title>select_tag wrongly escaped option tags passed to it  in rails 3.0.0</title>
  <updated-at type="datetime">2010-09-02T14:16:29+01:00</updated-at>
  <user-id type="integer">86004</user-id>
  <version type="integer">4</version>
  <user-name>foxban</user-name>
  <creator-name>foxban</creator-name>
  <assigned-user-name>Rohit Arondekar</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5530</url>
  <priority-name>Low</priority-name>
  <original-body>@@@ ruby
# File actionpack/lib/action_view/helpers/form_tag_helper.rb, line 95
 95:       def select_tag(name, option_tags = nil, options = {})
 96:         if Array === option_tags
 97:           ActiveSupport::Deprecation.warn 'Passing an array of option_tags to select_tag implicitly joins them without marking them as HTML-safe. Pass option_tags.join.html_safe instead.', caller
 98:         end
 99: 
100:         html_name = (options[:multiple] == true &amp;&amp; !name.to_s.ends_with?(&quot;[]&quot;)) ? &quot;#{name}[]&quot; : name
101:         if blank = options.delete(:include_blank)
102:           if blank.kind_of?(String)
103:             option_tags = &quot;&lt;option value=\&quot;\&quot;&gt;#{blank}&lt;/option&gt;&quot;.html_safe + option_tags
104:           else
105:             option_tags = &quot;&lt;option value=\&quot;\&quot;&gt;&lt;/option&gt;&quot;.html_safe + option_tags
106:           end
107:         end
108:         content_tag :select, option_tags, { &quot;name&quot; =&gt; html_name, &quot;id&quot; =&gt; sanitize_to_id(name) }.update(options.stringify_keys)
109:       end
@@@
on line 108, called content_tag directly, however content_tag will escape the strings passed to it

so when I type 
@@@ ruby
&lt;%= select_tag :idc_id, &quot;&lt;option&gt;&lt;/option&gt;&quot;  %&gt;
@@@
I got:
@@@ html
&lt;select name=&quot;idc_id&quot; id=&quot;idc_id&gt;&amp;lt;option&amp;rt;&amp;lt;/option&amp;rt;&lt;/select&gt;
@@@
and it never display in the browser correctly.

by the way, I didn't find that the select_tag function suppots the option like &quot;:escape =&gt; false&quot;

to fix this, I changed the source code of select_tag a little like follow:

@@@ ruby
108:    content_tag :select, option_tags, { &quot;name&quot; =&gt; html_name, &quot;id&quot; =&gt; sanitize_to_id(name) }.update(options.stringify_keys), false
@@@ ruby
everything work smoothly then

It's not clear that this is a feature or a bug to me</original-body>
  <latest-body>@@@ ruby
# File actionpack/lib/action_view/helpers/form_tag_helper.rb, line 95
 95:       def select_tag(name, option_tags = nil, options = {})
 96:         if Array === option_tags
 97:           ActiveSupport::Deprecation.warn 'Passing an array of option_tags to select_tag implicitly joins them without marking them as HTML-safe. Pass option_tags.join.html_safe instead.', caller
 98:         end
 99: 
100:         html_name = (options[:multiple] == true &amp;&amp; !name.to_s.ends_with?(&quot;[]&quot;)) ? &quot;#{name}[]&quot; : name
101:         if blank = options.delete(:include_blank)
102:           if blank.kind_of?(String)
103:             option_tags = &quot;&lt;option value=\&quot;\&quot;&gt;#{blank}&lt;/option&gt;&quot;.html_safe + option_tags
104:           else
105:             option_tags = &quot;&lt;option value=\&quot;\&quot;&gt;&lt;/option&gt;&quot;.html_safe + option_tags
106:           end
107:         end
108:         content_tag :select, option_tags, { &quot;name&quot; =&gt; html_name, &quot;id&quot; =&gt; sanitize_to_id(name) }.update(options.stringify_keys)
109:       end
@@@
on line 108, called content_tag directly, however content_tag will escape the strings passed to it

so when I type 
@@@ ruby
&lt;%= select_tag :idc_id, &quot;&lt;option&gt;&lt;/option&gt;&quot;  %&gt;
@@@
I got:
@@@ html
&lt;select name=&quot;idc_id&quot; id=&quot;idc_id&gt;&amp;lt;option&amp;rt;&amp;lt;/option&amp;rt;&lt;/select&gt;
@@@
and it never display in the browser correctly.

by the way, I didn't find that the select_tag function suppots the option like &quot;:escape =&gt; false&quot;

to fix this, I changed the source code of select_tag a little like follow:

@@@ ruby
108:    content_tag :select, option_tags, { &quot;name&quot; =&gt; html_name, &quot;id&quot; =&gt; sanitize_to_id(name) }.update(options.stringify_keys), false
@@@ ruby
everything work smoothly then

It's not clear that this is a feature or a bug to me</latest-body>
  <original-body-html>&lt;div&gt;&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;# File actionpack/lib/action_view/helpers/form_tag_helper.rb, line 95
 95:       def select_tag(name, option_tags = nil, options = {})
 96:         if Array === option_tags
 97:           ActiveSupport::Deprecation.warn 'Passing an array of option_tags to select_tag implicitly joins them without marking them as HTML-safe. Pass option_tags.join.html_safe instead.', caller
 98:         end
 99: 
100:         html_name = (options[:multiple] == true &amp;amp;&amp;amp; !name.to_s.ends_with?(&quot;[]&quot;)) ? &quot;#{name}[]&quot; : name
101:         if blank = options.delete(:include_blank)
102:           if blank.kind_of?(String)
103:             option_tags = &quot;&amp;lt;option value=\&quot;\&quot;&amp;gt;#{blank}&amp;lt;/option&amp;gt;&quot;.html_safe + option_tags
104:           else
105:             option_tags = &quot;&amp;lt;option value=\&quot;\&quot;&amp;gt;&amp;lt;/option&amp;gt;&quot;.html_safe + option_tags
106:           end
107:         end
108:         content_tag :select, option_tags, { &quot;name&quot; =&amp;gt; html_name, &quot;id&quot; =&amp;gt; sanitize_to_id(name) }.update(options.stringify_keys)
109:       end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;on line 108, called content_tag directly, however content_tag
will escape the strings passed to it&lt;/p&gt;
&lt;p&gt;so when I type&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;lt;%= select_tag :idc_id, &quot;&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;&quot;  %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
I got:&lt;br&gt;
&lt;pre&gt;
&lt;code class=
&quot;html&quot;&gt;&amp;lt;select name=&quot;idc_id&quot; id=&quot;idc_id&amp;gt;&amp;amp;lt;option&amp;amp;rt;&amp;amp;lt;/option&amp;amp;rt;&amp;lt;/select&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
and it never display in the browser correctly.
&lt;p&gt;by the way, I didn't find that the select_tag function suppots
the option like &quot;:escape =&amp;gt; false&quot;&lt;/p&gt;
&lt;p&gt;to fix this, I changed the source code of select_tag a little
like follow:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;108:    content_tag :select, option_tags, { &quot;name&quot; =&amp;gt; html_name, &quot;id&quot; =&amp;gt; sanitize_to_id(name) }.update(options.stringify_keys), false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;everything work smoothly then&lt;/p&gt;
&lt;p&gt;It's not clear that this is a feature or a bug to me&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>@@@ ruby
# File actionpack/lib/action_view/helpers/form_tag_helper.rb, line 95
 95:       def select_tag(name, option_tags = nil, options = {})
 96:         if Array === option_tags
 97:           ActiveSupport::Deprecation.warn 'Passing an array of option_tags to select_tag implicitly joins them without marking them as HTML-safe. Pass option_tags.join.html_safe instead.', caller
 98:         end
 99: 
100:         html_name = (options[:multiple] == true &amp;&amp; !name.to_s.ends_with?(&quot;[]&quot;)) ? &quot;#{name}[]&quot; : name
101:         if blank = options.delete(:include_blank)
102:           if blank.kind_of?(String)
103:             option_tags = &quot;&lt;option value=\&quot;\&quot;&gt;#{blank}&lt;/option&gt;&quot;.html_safe + option_tags
104:           else
105:             option_tags = &quot;&lt;option value=\&quot;\&quot;&gt;&lt;/option&gt;&quot;.html_safe + option_tags
106:           end
107:         end
108:         content_tag :select, option_tags, { &quot;name&quot; =&gt; html_name, &quot;id&quot; =&gt; sanitize_to_id(name) }.update(options.stringify_keys)
109:       end
@@@
on line 108, called content_tag directly, however content_tag will escape the strings passed to it

so when I type 
@@@ ruby
&lt;%= select_tag :idc_id, &quot;&lt;option&gt;&lt;/option&gt;&quot;  %&gt;
@@@
I got:
@@@ html
&lt;select name=&quot;idc_id&quot; id=&quot;idc_id&gt;&amp;lt;option&amp;rt;&amp;lt;/option&amp;rt;&lt;/select&gt;
@@@
and it never display in the browser correctly.

by the way, I didn't find that the select_tag function suppots the option like &quot;:escape =&gt; false&quot;

to fix this, I changed the source code of select_tag a little like follow:

@@@ ruby
108:    content_tag :select, option_tags, { &quot;name&quot; =&gt; html_name, &quot;id&quot; =&gt; sanitize_to_id(name) }.update(options.stringify_keys), false
@@@ ruby
everything work smoothly then

It's not clear that this is a feature or a bug to me</body>
      <body-html>&lt;div&gt;&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;# File actionpack/lib/action_view/helpers/form_tag_helper.rb, line 95
 95:       def select_tag(name, option_tags = nil, options = {})
 96:         if Array === option_tags
 97:           ActiveSupport::Deprecation.warn 'Passing an array of option_tags to select_tag implicitly joins them without marking them as HTML-safe. Pass option_tags.join.html_safe instead.', caller
 98:         end
 99: 
100:         html_name = (options[:multiple] == true &amp;amp;&amp;amp; !name.to_s.ends_with?(&quot;[]&quot;)) ? &quot;#{name}[]&quot; : name
101:         if blank = options.delete(:include_blank)
102:           if blank.kind_of?(String)
103:             option_tags = &quot;&amp;lt;option value=\&quot;\&quot;&amp;gt;#{blank}&amp;lt;/option&amp;gt;&quot;.html_safe + option_tags
104:           else
105:             option_tags = &quot;&amp;lt;option value=\&quot;\&quot;&amp;gt;&amp;lt;/option&amp;gt;&quot;.html_safe + option_tags
106:           end
107:         end
108:         content_tag :select, option_tags, { &quot;name&quot; =&amp;gt; html_name, &quot;id&quot; =&amp;gt; sanitize_to_id(name) }.update(options.stringify_keys)
109:       end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;on line 108, called content_tag directly, however content_tag
will escape the strings passed to it&lt;/p&gt;
&lt;p&gt;so when I type&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;lt;%= select_tag :idc_id, &quot;&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;&quot;  %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
I got:&lt;br&gt;
&lt;pre&gt;
&lt;code class=
&quot;html&quot;&gt;&amp;lt;select name=&quot;idc_id&quot; id=&quot;idc_id&amp;gt;&amp;amp;lt;option&amp;amp;rt;&amp;amp;lt;/option&amp;amp;rt;&amp;lt;/select&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
and it never display in the browser correctly.
&lt;p&gt;by the way, I didn't find that the select_tag function suppots
the option like &quot;:escape =&amp;gt; false&quot;&lt;/p&gt;
&lt;p&gt;to fix this, I changed the source code of select_tag a little
like follow:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;108:    content_tag :select, option_tags, { &quot;name&quot; =&amp;gt; html_name, &quot;id&quot; =&amp;gt; sanitize_to_id(name) }.update(options.stringify_keys), false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;everything work smoothly then&lt;/p&gt;
&lt;p&gt;It's not clear that this is a feature or a bug to me&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-02T07:07:45+01:00</created-at>
      <creator-id type="integer">86004</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5530</number>
      <permalink>select_tag-wrongly-escaped-option-tags-passed-to-it-in-rails-300</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>escape rails3 select_tag</tag>
      <title>select_tag wrongly escaped option tags passed to it  in rails 3.0.0</title>
      <updated-at type="datetime">2010-09-02T07:19:48+01:00</updated-at>
      <user-id type="integer">86004</user-id>
      <version type="integer">1</version>
      <user-name>foxban</user-name>
      <creator-name>foxban</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5530</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>You have to explicitly mark the string you're passing to `select_tag` as `html_safe` like so:

@@@ ruby
select_tag :idc_id, &quot;&lt;option&gt;&lt;/option&gt;&quot;.html_safe
@@@

This can be closed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;You have to explicitly mark the string you're passing to
&lt;code&gt;select_tag&lt;/code&gt; as &lt;code&gt;html_safe&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;select_tag :idc_id, &quot;&amp;lt;option&amp;gt;&amp;lt;/option&amp;gt;&quot;.html_safe&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This can be closed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-02T13:11:54+01:00</created-at>
      <creator-id type="integer">86004</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5530</number>
      <permalink>select_tag-wrongly-escaped-option-tags-passed-to-it-in-rails-300</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>escape rails3 select_tag</tag>
      <title>select_tag wrongly escaped option tags passed to it  in rails 3.0.0</title>
      <updated-at type="datetime">2010-09-02T13:11:56+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">2</version>
      <user-name>David Trasbo</user-name>
      <creator-name>foxban</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5530</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This might be helpful in understanding the new .html_safe and .html_safe? methods and how Rails 3 uses them. http://asciicasts.com/episodes/204-xss-protection-in-rails-3</body>
      <body-html>&lt;div&gt;&lt;p&gt;This might be helpful in understanding the new .html_safe and
.html_safe? methods and how Rails 3 uses them. &lt;a href=
&quot;http://asciicasts.com/episodes/204-xss-protection-in-rails-3&quot;&gt;http://asciicasts.com/episodes/204-xss-protection-in-rails-3&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-02T13:58:36+01:00</created-at>
      <creator-id type="integer">86004</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5530</number>
      <permalink>select_tag-wrongly-escaped-option-tags-passed-to-it-in-rails-300</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>escape rails3 select_tag</tag>
      <title>select_tag wrongly escaped option tags passed to it  in rails 3.0.0</title>
      <updated-at type="datetime">2010-09-02T13:58:38+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">3</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>foxban</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5530</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">89656</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I didn't find anything talking about &quot;html_safe&quot; in the docs, for instance: http://guides.rubyonrails.org/form_helpers.html.

Maybe I should read the docs more carefully, :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;I didn't find anything talking about &quot;html_safe&quot; in the docs,
for instance: &lt;a href=
&quot;http://guides.rubyonrails.org/form_helpers.html&quot;&gt;http://guides.rubyonrails.org/form_helpers.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Maybe I should read the docs more carefully, :-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-09-02T14:16:27+01:00</created-at>
      <creator-id type="integer">86004</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5530</number>
      <permalink>select_tag-wrongly-escaped-option-tags-passed-to-it-in-rails-300</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>escape rails3 select_tag</tag>
      <title>select_tag wrongly escaped option tags passed to it  in rails 3.0.0</title>
      <updated-at type="datetime">2010-09-02T14:16:29+01:00</updated-at>
      <user-id type="integer">86004</user-id>
      <version type="integer">4</version>
      <user-name>foxban</user-name>
      <creator-name>foxban</creator-name>
      <assigned-user-name>Rohit Arondekar</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5530</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
