<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-21T01:46:04+01:00</created-at>
  <creator-id type="integer">58368</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2742</number>
  <permalink>class-method-to_s-used-instead-of-name</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>class method to_s used instead of name</title>
  <updated-at type="datetime">2010-07-21T01:46:04+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">3</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Hery</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2742</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Hi,
Here is an issue/improvement/suggestion

When defining a to_s class method for my models it breaks rails, especially in active_record.
active_record uses both class.name and class.to_s to do the same sort of stuffs (like in the join_table_name in associations) 

I think class.name is the name of the class and to_s is a string representation. But by default class.name == class.to_s
I think self.to_s should not be used for building such things like table names, instead use name.

The problem occurs when I want to distinguish my simple class and my active_record models (I also use to_s for other cases)
It is a basic code ....

I just create user and project activerecord classes with a habtm associations.

I put at the bottom of config/environment.rb 

@@@ ruby
module ActiveRecord
class Base
def self.to_s
&quot;ActiveRecord::Base model : #{self.name}&quot;
end
end
end
@@@

Since I implement this simple code I run into troubles!

I launch script/console to see what is the problem and I see that my User.reflections[:projects].options[:join_table] is not what is expected

&gt;&gt; User.reflections[:projects].options[:join_table]
=&gt; &quot;base model : users_projects&quot;
It should return &quot;users_projects&quot; !!!!

E.g in version 2.3.2 in activerecord/lib/active_record/associations.rb:1538 If find the code which gives me headhache.

@@@ ruby
reflection.options[:join_table] ||= join_table_name(undecorated_table_name(self.to_s), undecorated_table_name(reflection.class_name))
@@@

The guilty code is ( mine ? :) ) described above. I replace undecorated_table_name(self.to_s) by undecorated_table_name(self.name) and other things like that, runs all the tests well
But I think i missed some.

I know that many libraries use to_s and name for the same things.  My question is : &quot;Is it clean?&quot;

I think there are many bugs like this .... And why not only use name, since name and to_s class methods return by default the same results ? 

Hery</original-body>
  <latest-body>Hi,
Here is an issue/improvement/suggestion

When defining a to_s class method for my models it breaks rails, especially in active_record.
active_record uses both class.name and class.to_s to do the same sort of stuffs (like in the join_table_name in associations) 

I think class.name is the name of the class and to_s is a string representation. But by default class.name == class.to_s
I think self.to_s should not be used for building such things like table names, instead use name.

The problem occurs when I want to distinguish my simple class and my active_record models (I also use to_s for other cases)
It is a basic code ....

I just create user and project activerecord classes with a habtm associations.

I put at the bottom of config/environment.rb 

@@@ ruby
module ActiveRecord
class Base
def self.to_s
&quot;ActiveRecord::Base model : #{self.name}&quot;
end
end
end
@@@

Since I implement this simple code I run into troubles!

I launch script/console to see what is the problem and I see that my User.reflections[:projects].options[:join_table] is not what is expected

&gt;&gt; User.reflections[:projects].options[:join_table]
=&gt; &quot;base model : users_projects&quot;
It should return &quot;users_projects&quot; !!!!

E.g in version 2.3.2 in activerecord/lib/active_record/associations.rb:1538 If find the code which gives me headhache.

@@@ ruby
reflection.options[:join_table] ||= join_table_name(undecorated_table_name(self.to_s), undecorated_table_name(reflection.class_name))
@@@

The guilty code is ( mine ? :) ) described above. I replace undecorated_table_name(self.to_s) by undecorated_table_name(self.name) and other things like that, runs all the tests well
But I think i missed some.

I know that many libraries use to_s and name for the same things.  My question is : &quot;Is it clean?&quot;

I think there are many bugs like this .... And why not only use name, since name and to_s class methods return by default the same results ? 

Hery</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Hi, Here is an issue/improvement/suggestion&lt;/p&gt;
&lt;p&gt;When defining a to_s class method for my models it breaks rails,
especially in active_record. active_record uses both class.name and
class.to_s to do the same sort of stuffs (like in the
join_table_name in associations)&lt;/p&gt;
&lt;p&gt;I think class.name is the name of the class and to_s is a string
representation. But by default class.name == class.to_s I think
self.to_s should not be used for building such things like table
names, instead use name.&lt;/p&gt;
&lt;p&gt;The problem occurs when I want to distinguish my simple class
and my active_record models (I also use to_s for other cases) It is
a basic code ....&lt;/p&gt;
&lt;p&gt;I just create user and project activerecord classes with a habtm
associations.&lt;/p&gt;
&lt;p&gt;I put at the bottom of config/environment.rb&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
module ActiveRecord
class Base
def self.to_s
&amp;quot;ActiveRecord::Base model : #{self.name}&amp;quot;
end
end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since I implement this simple code I run into troubles!&lt;/p&gt;
&lt;p&gt;I launch script/console to see what is the problem and I see
that my User.reflections[:projects].options[:join_table] is not
what is expected&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;User.reflections[:projects].options[:join_table] =&amp;gt; &quot;base
model : users_projects&quot; It should return &quot;users_projects&quot; !!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;E.g in version 2.3.2 in
activerecord/lib/active_record/associations.rb:1538 If find the
code which gives me headhache.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
reflection.options[:join_table] ||= join_table_name(undecorated_table_name(self.to_s), undecorated_table_name(reflection.class_name))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The guilty code is ( mine ? :) ) described above. I replace
undecorated_table_name(self.to_s) by
undecorated_table_name(self.name) and other things like that, runs
all the tests well But I think i missed some.&lt;/p&gt;
&lt;p&gt;I know that many libraries use to_s and name for the same
things. My question is : &quot;Is it clean?&quot;&lt;/p&gt;
&lt;p&gt;I think there are many bugs like this .... And why not only use
name, since name and to_s class methods return by default the same
results ?&lt;/p&gt;
&lt;p&gt;Hery&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi,
Here is an issue/improvement/suggestion

When defining a to_s class method for my models it breaks rails, especially in active_record.
active_record uses both class.name and class.to_s to do the same sort of stuffs (like in the join_table_name in associations) 

I think class.name is the name of the class and to_s is a string representation. But by default class.name == class.to_s
I think self.to_s should not be used for building such things like table names, instead use name.

The problem occurs when I want to distinguish my simple class and my active_record models (I also use to_s for other cases)
It is a basic code ....

I just create user and project activerecord classes with a habtm associations.

I put at the bottom of config/environment.rb 

@@@ ruby
module ActiveRecord
class Base
def self.to_s
&quot;ActiveRecord::Base model : #{self.name}&quot;
end
end
end
@@@

Since I implement this simple code I run into troubles!

I launch script/console to see what is the problem and I see that my User.reflections[:projects].options[:join_table] is not what is expected

&gt;&gt; User.reflections[:projects].options[:join_table]
=&gt; &quot;base model : users_projects&quot;
It should return &quot;users_projects&quot; !!!!

E.g in version 2.3.2 in activerecord/lib/active_record/associations.rb:1538 If find the code which gives me headhache.

@@@ ruby
reflection.options[:join_table] ||= join_table_name(undecorated_table_name(self.to_s), undecorated_table_name(reflection.class_name))
@@@

The guilty code is ( mine ? :) ) described above. I replace undecorated_table_name(self.to_s) by undecorated_table_name(self.name) and other things like that, runs all the tests well
But I think i missed some.

I know that many libraries use to_s and name for the same things.  My question is : &quot;Is it clean?&quot;

I think there are many bugs like this .... And why not only use name, since name and to_s class methods return by default the same results ? 

Hery</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi,&lt;br&gt;
Here is an issue/improvement/suggestion&lt;/p&gt;
&lt;p&gt;When defining a to_s class method for my models it breaks rails,
especially in active_record.&lt;br&gt;
active_record uses both class.name and class.to_s to do the same
sort of stuffs (like in the join_table_name in associations)&lt;/p&gt;
&lt;p&gt;I think class.name is the name of the class and to_s is a string
representation. But by default class.name == class.to_s&lt;br&gt;
I think self.to_s should not be used for building such things like
table names, instead use name.&lt;/p&gt;
&lt;p&gt;The problem occurs when I want to distinguish my simple class
and my active_record models (I also use to_s for other cases)&lt;br&gt;
It is a basic code ....&lt;/p&gt;
&lt;p&gt;I just create user and project activerecord classes with a habtm
associations.&lt;/p&gt;
&lt;p&gt;I put at the bottom of config/environment.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;module ActiveRecord
class Base
def self.to_s
&quot;ActiveRecord::Base model : #{self.name}&quot;
end
end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Since I implement this simple code I run into troubles!&lt;/p&gt;
&lt;p&gt;I launch script/console to see what is the problem and I see
that my User.reflections[:projects].options[:join_table] is not
what is expected&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;User.reflections[:projects].options[:join_table] =&amp;gt; &quot;base
model : users_projects&quot; It should return &quot;users_projects&quot; !!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;E.g in version 2.3.2 in
activerecord/lib/active_record/associations.rb:1538 If find the
code which gives me headhache.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;reflection.options[:join_table] ||= join_table_name(undecorated_table_name(self.to_s), undecorated_table_name(reflection.class_name))&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The guilty code is ( mine ? :) ) described above. I replace
undecorated_table_name(self.to_s) by
undecorated_table_name(self.name) and other things like that, runs
all the tests well&lt;br&gt;
But I think i missed some.&lt;/p&gt;
&lt;p&gt;I know that many libraries use to_s and name for the same
things. My question is : &quot;Is it clean?&quot;&lt;/p&gt;
&lt;p&gt;I think there are many bugs like this .... And why not only use
name, since name and to_s class methods return by default the same
results ?&lt;/p&gt;
&lt;p&gt;Hery&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-30T15:33:36+01:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2742</number>
      <permalink>class-method-to_s-used-instead-of-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>class method to_s used instead of name</title>
      <updated-at type="datetime">2009-05-30T15:33:38+01:00</updated-at>
      <user-id type="integer">58368</user-id>
      <version type="integer">1</version>
      <user-name>Hery</user-name>
      <creator-name>Hery</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2742</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Basically, overriding pretty much any method in `ActiveRecord::Base` breaks Rails. You have to be very careful with that. If you think this should be fixed, please provide a patch. Meanwhile, this can be marked as invalid.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Basically, overriding pretty much any method in
&lt;code&gt;ActiveRecord::Base&lt;/code&gt; breaks Rails. You have to be very
careful with that. If you think this should be fixed, please
provide a patch. Meanwhile, this can be marked as invalid.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-15T22:06:55+01:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2742</number>
      <permalink>class-method-to_s-used-instead-of-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>class method to_s used instead of name</title>
      <updated-at type="datetime">2010-04-15T22:06:59+01:00</updated-at>
      <user-id type="integer">65050</user-id>
      <version type="integer">2</version>
      <user-name>David Trasbo</user-name>
      <creator-name>Hery</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2742</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Solution: don't define to_s for the model. It needs this to figure out table names iirc.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Solution: don't define to_s for the model. It needs this to
figure out table names iirc.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-15T22:35:38+01:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2742</number>
      <permalink>class-method-to_s-used-instead-of-name</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>class method to_s used instead of name</title>
      <updated-at type="datetime">2010-04-15T22:35:48+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Hery</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2742</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>their affection &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/zenith-class-open-el-primero-9549-3727-3026.html&quot;&gt;Zenith Class Open Class Open El Primero 9549-3727&lt;/a&gt;&lt;/b&gt; on you, you can &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;replica watches cheap&lt;/a&gt;&lt;/b&gt; be rest assured that &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/a-lange-sohne-1815-chronograph-mens-watch-401-026-2055-1170.html&quot;&gt;A Lange &amp; Sohne 1815 1815 Chronograph Mens 401.026-2055&lt;/a&gt;&lt;/b&gt; even your boss will &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/ferrari-red-dial-chronograph-ladies-watch-8090-4036-3370.html&quot;&gt;Red Dial Chronograph Ladies 8090-4036&lt;/a&gt;&lt;/b&gt; pay special attention to &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;high replica watches&lt;/a&gt;&lt;/b&gt; yo &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;replica watches &lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega wathces&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/rolex-oyster-perpetual-lady-datejust-ladies-watch-179174-saj-307-2297.html&quot;&gt;Oyster Perpetual Lady Datejust Ladies 179174-SAJ-307&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;discount watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/patek-philippe-calatrava-18kt-yellow-gold-mens-watch-5119j-3164-2402.html&quot;&gt;Calatrava 18kt Yellow Gold Mens 5119J-3164&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;their affection &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/zenith-class-open-el-primero-9549-3727-3026.html&quot;&gt;
Zenith Class Open Class Open El Primero 9549-3727&lt;/a&gt;&lt;/b&gt; on you,
you can &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;replica
watches cheap&lt;/a&gt;&lt;/b&gt; be rest assured that &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/a-lange-sohne-1815-chronograph-mens-watch-401-026-2055-1170.html&quot;&gt;
A Lange &amp;amp; Sohne 1815 1815 Chronograph Mens 401.026-2055&lt;/a&gt;&lt;/b&gt;
even your boss will &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/ferrari-red-dial-chronograph-ladies-watch-8090-4036-3370.html&quot;&gt;
Red Dial Chronograph Ladies 8090-4036&lt;/a&gt;&lt;/b&gt; pay special attention
to &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;high replica
watches&lt;/a&gt;&lt;/b&gt; yo &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;replica watches&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega
wathces&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/rolex-oyster-perpetual-lady-datejust-ladies-watch-179174-saj-307-2297.html&quot;&gt;
Oyster Perpetual Lady Datejust Ladies 179174-SAJ-307&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;discount
watches&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/patek-philippe-calatrava-18kt-yellow-gold-mens-watch-5119j-3164-2402.html&quot;&gt;
Calatrava 18kt Yellow Gold Mens 5119J-3164&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-19T09:03:13+01:00</created-at>
      <creator-id type="integer">58368</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2742</number>
      <permalink>class-method-to_s-used-instead-of-name</permalink>
      <priority type="integer">1853</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>class method to_s used instead of name</title>
      <updated-at type="datetime">2010-07-21T01:46:04+01:00</updated-at>
      <user-id type="integer">107771</user-id>
      <version type="integer">4</version>
      <user-name>zhuzhu</user-name>
      <creator-name>Hery</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2742</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
