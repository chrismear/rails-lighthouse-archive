From aab96cf5a1b32295fd8d3eec01958f838614a4d0 Mon Sep 17 00:00:00 2001
From: Ben Sandofsky <ben@aluminum.local>
Date: Fri, 23 May 2008 00:50:03 -0700
Subject: [PATCH] Add my_methods to Object and Class, to strip out the list of methods you get on every object.

---
 .../lib/active_support/core_ext/object/misc.rb     |   22 ++++++++++++++++++++
 .../test/core_ext/object_and_class_ext_test.rb     |   15 +++++++++++++
 2 files changed, 37 insertions(+), 0 deletions(-)

diff --git a/activesupport/lib/active_support/core_ext/object/misc.rb b/activesupport/lib/active_support/core_ext/object/misc.rb
index a3637d7..0de74c1 100644
--- a/activesupport/lib/active_support/core_ext/object/misc.rb
+++ b/activesupport/lib/active_support/core_ext/object/misc.rb
@@ -56,4 +56,26 @@ class Object
   def acts_like?(duck)
     respond_to? "acts_like_#{duck}?"
   end
+  
+  # A method for listing methods unique to this object or class, stripping out
+  # methods found on every object. So for:
+  #
+  #   class SimpleClass
+  #     def single_method
+  #     end
+  #   end
+  # A call to SimpleClass#methods returns:
+  #   ["inspect", "private_class_method", "const_missing", ... ]
+  #
+  # While a class to SimpleClass#my_methods returns
+  #   ["single_method"]
+  #
+  def my_methods
+    if self.kind_of?(Class)
+      (methods - Class.methods).sort
+    else
+      (methods - Object.methods).sort
+    end
+  end
+  
 end
diff --git a/activesupport/test/core_ext/object_and_class_ext_test.rb b/activesupport/test/core_ext/object_and_class_ext_test.rb
index 16f4ab8..c1de756 100644
--- a/activesupport/test/core_ext/object_and_class_ext_test.rb
+++ b/activesupport/test/core_ext/object_and_class_ext_test.rb
@@ -173,6 +173,21 @@ class ObjectTests < Test::Unit::TestCase
     assert duck.acts_like?(:time)
     assert !duck.acts_like?(:date)
   end
+  
+  class SimpleClass
+    def self.single_class_method
+    end
+    
+    def single_instance_method
+    end
+  end
+  
+  def test_should_show_my_methods
+    instance = SimpleClass.new
+    assert_equal ["single_instance_method"], instance.my_methods
+    assert_equal ["single_class_method"], SimpleClass.my_methods
+  end
+  
 end
 
 class ObjectInstanceVariableTest < Test::Unit::TestCase
-- 
1.5.3.7

