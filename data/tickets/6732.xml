<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-20T17:44:09+01:00</created-at>
  <creator-id type="integer">146413</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6732</number>
  <permalink>activesupports-stringtruncate-fails-with-regexp-as-separator</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>ActiveSupport's String#truncate fails with Regexp as separator</title>
  <updated-at type="datetime">2011-04-20T17:44:11+01:00</updated-at>
  <user-id type="integer">146413</user-id>
  <version type="integer">1</version>
  <user-name>ast</user-name>
  <creator-name>ast</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6732</url>
  <priority-name nil="true"></priority-name>
  <original-body>Trying to integrate ActiveSupport into an existing non-Rails system, I unintentionally discovered AS 3.0.5 defines its own #truncate method.  Unfortunately, for word boundaries, this doesn't take regular expressions since it assumes that the separator will be a string, e.g:

@@@ ruby
 44     stop = options[:separator] ?
 45       (chars.rindex(options[:separator].mb_chars, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission
@@@

Since it doesn't say explicitly that strings are required and this to me is most useful on sentence breaks, e.g. regex-based sets of punctuation.

To allow #truncate to use regex objects as separators, I've made the following change which seems to do what I'd expect:

@@@ ruby
 41     if(sep = options[:separator]) &amp;&amp; sep.is_a?(String)
 42       substr = sep.mb_chars
 43     else
 44       substr = sep
 45     end
 46 
 47     length_with_room_for_omission = length - options[:omission].mb_chars.length
 48     chars = text.mb_chars
 49     stop = options[:separator] ?
 50       (chars.rindex(substr, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission
@@@

It would be cool if this might be approved and included in a future version.

Code that doesn't work in 3.0.5:

@@@ ruby
&gt;&gt; &quot;The quick brown fox jumped over the lazy dog.  Wasn't he grand?&quot;.truncate(50, :separator =&gt; /[?\.!]/)
=&gt; &quot;The quick brown fox jumped over the lazy dog...&quot;
@@@

Cheers,

ast</original-body>
  <latest-body>Trying to integrate ActiveSupport into an existing non-Rails system, I unintentionally discovered AS 3.0.5 defines its own #truncate method.  Unfortunately, for word boundaries, this doesn't take regular expressions since it assumes that the separator will be a string, e.g:

@@@ ruby
 44     stop = options[:separator] ?
 45       (chars.rindex(options[:separator].mb_chars, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission
@@@

Since it doesn't say explicitly that strings are required and this to me is most useful on sentence breaks, e.g. regex-based sets of punctuation.

To allow #truncate to use regex objects as separators, I've made the following change which seems to do what I'd expect:

@@@ ruby
 41     if(sep = options[:separator]) &amp;&amp; sep.is_a?(String)
 42       substr = sep.mb_chars
 43     else
 44       substr = sep
 45     end
 46 
 47     length_with_room_for_omission = length - options[:omission].mb_chars.length
 48     chars = text.mb_chars
 49     stop = options[:separator] ?
 50       (chars.rindex(substr, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission
@@@

It would be cool if this might be approved and included in a future version.

Code that doesn't work in 3.0.5:

@@@ ruby
&gt;&gt; &quot;The quick brown fox jumped over the lazy dog.  Wasn't he grand?&quot;.truncate(50, :separator =&gt; /[?\.!]/)
=&gt; &quot;The quick brown fox jumped over the lazy dog...&quot;
@@@

Cheers,

ast</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Trying to integrate ActiveSupport into an existing non-Rails
system, I unintentionally discovered AS 3.0.5 defines its own
#truncate method. Unfortunately, for word boundaries, this doesn't
take regular expressions since it assumes that the separator will
be a string, e.g:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt; 44     stop = options[:separator] ?
 45       (chars.rindex(options[:separator].mb_chars, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Since it doesn't say explicitly that strings are required and
this to me is most useful on sentence breaks, e.g. regex-based sets
of punctuation.&lt;/p&gt;
&lt;p&gt;To allow #truncate to use regex objects as separators, I've made
the following change which seems to do what I'd expect:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; 41     if(sep = options[:separator]) &amp;amp;&amp;amp; sep.is_a?(String)
 42       substr = sep.mb_chars
 43     else
 44       substr = sep
 45     end
 46 
 47     length_with_room_for_omission = length - options[:omission].mb_chars.length
 48     chars = text.mb_chars
 49     stop = options[:separator] ?
 50       (chars.rindex(substr, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It would be cool if this might be approved and included in a
future version.&lt;/p&gt;
&lt;p&gt;Code that doesn't work in 3.0.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; &quot;The quick brown fox jumped over the lazy dog.  Wasn't he grand?&quot;.truncate(50, :separator =&amp;gt; /[?\.!]/)
=&amp;gt; &quot;The quick brown fox jumped over the lazy dog...&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;ast&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Trying to integrate ActiveSupport into an existing non-Rails system, I unintentionally discovered AS 3.0.5 defines its own #truncate method.  Unfortunately, for word boundaries, this doesn't take regular expressions since it assumes that the separator will be a string, e.g:

@@@ ruby
 44     stop = options[:separator] ?
 45       (chars.rindex(options[:separator].mb_chars, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission
@@@

Since it doesn't say explicitly that strings are required and this to me is most useful on sentence breaks, e.g. regex-based sets of punctuation.

To allow #truncate to use regex objects as separators, I've made the following change which seems to do what I'd expect:

@@@ ruby
 41     if(sep = options[:separator]) &amp;&amp; sep.is_a?(String)
 42       substr = sep.mb_chars
 43     else
 44       substr = sep
 45     end
 46 
 47     length_with_room_for_omission = length - options[:omission].mb_chars.length
 48     chars = text.mb_chars
 49     stop = options[:separator] ?
 50       (chars.rindex(substr, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission
@@@

It would be cool if this might be approved and included in a future version.

Code that doesn't work in 3.0.5:

@@@ ruby
&gt;&gt; &quot;The quick brown fox jumped over the lazy dog.  Wasn't he grand?&quot;.truncate(50, :separator =&gt; /[?\.!]/)
=&gt; &quot;The quick brown fox jumped over the lazy dog...&quot;
@@@

Cheers,

ast</body>
      <body-html>&lt;div&gt;&lt;p&gt;Trying to integrate ActiveSupport into an existing non-Rails
system, I unintentionally discovered AS 3.0.5 defines its own
#truncate method. Unfortunately, for word boundaries, this doesn't
take regular expressions since it assumes that the separator will
be a string, e.g:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt; 44     stop = options[:separator] ?
 45       (chars.rindex(options[:separator].mb_chars, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Since it doesn't say explicitly that strings are required and
this to me is most useful on sentence breaks, e.g. regex-based sets
of punctuation.&lt;/p&gt;
&lt;p&gt;To allow #truncate to use regex objects as separators, I've made
the following change which seems to do what I'd expect:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; 41     if(sep = options[:separator]) &amp;amp;&amp;amp; sep.is_a?(String)
 42       substr = sep.mb_chars
 43     else
 44       substr = sep
 45     end
 46 
 47     length_with_room_for_omission = length - options[:omission].mb_chars.length
 48     chars = text.mb_chars
 49     stop = options[:separator] ?
 50       (chars.rindex(substr, length_with_room_for_omission) || length_with_room_for_omission) : length_with_room_for_omission&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It would be cool if this might be approved and included in a
future version.&lt;/p&gt;
&lt;p&gt;Code that doesn't work in 3.0.5:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&amp;gt;&amp;gt; &quot;The quick brown fox jumped over the lazy dog.  Wasn't he grand?&quot;.truncate(50, :separator =&amp;gt; /[?\.!]/)
=&amp;gt; &quot;The quick brown fox jumped over the lazy dog...&quot;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;ast&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-20T17:44:09+01:00</created-at>
      <creator-id type="integer">146413</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6732</number>
      <permalink>activesupports-stringtruncate-fails-with-regexp-as-separator</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveSupport's String#truncate fails with Regexp as separator</title>
      <updated-at type="datetime">2011-04-20T17:44:11+01:00</updated-at>
      <user-id type="integer">146413</user-id>
      <version type="integer">1</version>
      <user-name>ast</user-name>
      <creator-name>ast</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6732</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
