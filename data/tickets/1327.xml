<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-04T19:08:38+00:00</created-at>
  <creator-id type="integer">22682</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1327</number>
  <permalink>oracle-join-model-primary-key-issue</permalink>
  <priority type="integer">729</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Oracle + join model, primary key issue</title>
  <updated-at type="datetime">2009-03-12T16:05:02+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Greg Donald</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1327</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>I'm using

ActiveRecord::Base.primary_key_prefix_type = :table_name_with_underscore

in my current project.


My problem is that this setting seems to be causing me some issues
with my join model's primary keys.

For example I have these three models:

class User &lt; ActiveRecord::Base
 has_many :user_ugroups
 has_many :ugroups, :through =&gt; :user_ugroups
end

class Ugroup &lt; ActiveRecord::Base
 has_many :user_ugroups
 has_many :users, :through =&gt; :user_ugroups
end

class UserUgroup &lt; ActiveRecord::Base
 belongs_to :user
 belongs_to :ugroup
end


My migration for the join table looks like this:

def self.up
 create_table :user_ugroups, :primary_key =&gt; :user_ugroups_id do |t|
   t.integer :user_id,   :null =&gt; false
   t.integer :ugroup_id, :null =&gt; false
 end
end


So when I create a UserUgroup like so:

&gt;&gt; UserUgroup.create!( :user =&gt; @gdonald, :ugroup =&gt; @admin )


ActiveRecord tries to insert a NULL for the user_ugroups_id field and
then I get this:

ActiveRecord::StatementInvalid: OCIError: ORA-01400: cannot insert
NULL into (&quot;MYPROJDB&quot;.&quot;USER_UGROUPS&quot;.&quot;USER_UGROUPS_ID&quot;): INSERT INTO
user_ugroups (user_ugroups_id, user_id, ugroup_id) VALUES(NULL, 1, 1)


The migration creates my USER_UGROUPS_SEQ without issue, but then it
doesn't get used.


I found a work-around for the issue:

before_create :get_id

def get_id
  self.ugroup_permission_id = connection.next_sequence_value( self.class.sequence_name )
end</original-body>
  <latest-body>I'm using

ActiveRecord::Base.primary_key_prefix_type = :table_name_with_underscore

in my current project.


My problem is that this setting seems to be causing me some issues
with my join model's primary keys.

For example I have these three models:

class User &lt; ActiveRecord::Base
 has_many :user_ugroups
 has_many :ugroups, :through =&gt; :user_ugroups
end

class Ugroup &lt; ActiveRecord::Base
 has_many :user_ugroups
 has_many :users, :through =&gt; :user_ugroups
end

class UserUgroup &lt; ActiveRecord::Base
 belongs_to :user
 belongs_to :ugroup
end


My migration for the join table looks like this:

def self.up
 create_table :user_ugroups, :primary_key =&gt; :user_ugroups_id do |t|
   t.integer :user_id,   :null =&gt; false
   t.integer :ugroup_id, :null =&gt; false
 end
end


So when I create a UserUgroup like so:

&gt;&gt; UserUgroup.create!( :user =&gt; @gdonald, :ugroup =&gt; @admin )


ActiveRecord tries to insert a NULL for the user_ugroups_id field and
then I get this:

ActiveRecord::StatementInvalid: OCIError: ORA-01400: cannot insert
NULL into (&quot;MYPROJDB&quot;.&quot;USER_UGROUPS&quot;.&quot;USER_UGROUPS_ID&quot;): INSERT INTO
user_ugroups (user_ugroups_id, user_id, ugroup_id) VALUES(NULL, 1, 1)


The migration creates my USER_UGROUPS_SEQ without issue, but then it
doesn't get used.


I found a work-around for the issue:

before_create :get_id

def get_id
  self.ugroup_permission_id = connection.next_sequence_value( self.class.sequence_name )
end</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I'm using&lt;/p&gt;
&lt;p&gt;ActiveRecord::Base.primary_key_prefix_type =
:table_name_with_underscore&lt;/p&gt;
&lt;p&gt;in my current project.&lt;/p&gt;
&lt;p&gt;My problem is that this setting seems to be causing me some
issues with my join model's primary keys.&lt;/p&gt;
&lt;p&gt;For example I have these three models:&lt;/p&gt;
&lt;p&gt;class User &amp;lt; ActiveRecord::Base has_many :user_ugroups
has_many :ugroups, :through =&amp;gt; :user_ugroups end&lt;/p&gt;
&lt;p&gt;class Ugroup &amp;lt; ActiveRecord::Base has_many :user_ugroups
has_many :users, :through =&amp;gt; :user_ugroups end&lt;/p&gt;
&lt;p&gt;class UserUgroup &amp;lt; ActiveRecord::Base belongs_to :user
belongs_to :ugroup end&lt;/p&gt;
&lt;p&gt;My migration for the join table looks like this:&lt;/p&gt;
&lt;p&gt;def self.up create_table :user_ugroups, :primary_key =&amp;gt;
:user_ugroups_id do |t| t.integer :user_id, :null =&amp;gt; false
t.integer :ugroup_id, :null =&amp;gt; false end end&lt;/p&gt;
&lt;p&gt;So when I create a UserUgroup like so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;UserUgroup.create!( :user =&amp;gt; @gdonald, :ugroup =&amp;gt; @admin
)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;ActiveRecord tries to insert a NULL for the user_ugroups_id
field and then I get this:&lt;/p&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: OCIError: ORA-01400: cannot
insert NULL into (&quot;MYPROJDB&quot;.&quot;USER_UGROUPS&quot;.&quot;USER_UGROUPS_ID&quot;):
INSERT INTO user_ugroups (user_ugroups_id, user_id, ugroup_id)
VALUES(NULL, 1, 1)&lt;/p&gt;
&lt;p&gt;The migration creates my USER_UGROUPS_SEQ without issue, but
then it doesn't get used.&lt;/p&gt;
&lt;p&gt;I found a work-around for the issue:&lt;/p&gt;
&lt;p&gt;before_create :get_id&lt;/p&gt;
&lt;p&gt;def get_id self.ugroup_permission_id =
connection.next_sequence_value( self.class.sequence_name ) end&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm using

ActiveRecord::Base.primary_key_prefix_type = :table_name_with_underscore

in my current project.


My problem is that this setting seems to be causing me some issues
with my join model's primary keys.

For example I have these three models:

class User &lt; ActiveRecord::Base
 has_many :user_ugroups
 has_many :ugroups, :through =&gt; :user_ugroups
end

class Ugroup &lt; ActiveRecord::Base
 has_many :user_ugroups
 has_many :users, :through =&gt; :user_ugroups
end

class UserUgroup &lt; ActiveRecord::Base
 belongs_to :user
 belongs_to :ugroup
end


My migration for the join table looks like this:

def self.up
 create_table :user_ugroups, :primary_key =&gt; :user_ugroups_id do |t|
   t.integer :user_id,   :null =&gt; false
   t.integer :ugroup_id, :null =&gt; false
 end
end


So when I create a UserUgroup like so:

UserUgroup.create!( :user =&gt; @gdonald, :ugroup =&gt; @admin )


ActiveRecord tries to insert a NULL for the user_ugroups_id field and
then I get this:

ActiveRecord::StatementInvalid: OCIError: ORA-01400: cannot insert
NULL into (&quot;MYPROJDB&quot;.&quot;USER_UGROUPS&quot;.&quot;USER_UGROUPS_ID&quot;): INSERT INTO
user_ugroups (user_ugroups_id, user_id, ugroup_id) VALUES(NULL, 1, 1)


The migration creates my USER_UGROUPS_SEQ without issue, but then it
doesn't get used.


I found a work-around for the issue:

before_create :get_id

def get_id
  self.ugroup_permission_id = connection.next_sequence_value( self.class.sequence_name )
end</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm using&lt;/p&gt;
&lt;p&gt;ActiveRecord::Base.primary_key_prefix_type =
:table_name_with_underscore&lt;/p&gt;
&lt;p&gt;in my current project.&lt;/p&gt;
&lt;p&gt;My problem is that this setting seems to be causing me some
issues with my join model's primary keys.&lt;/p&gt;
&lt;p&gt;For example I have these three models:&lt;/p&gt;
&lt;p&gt;class User &amp;lt; ActiveRecord::Base has_many :user_ugroups
has_many :ugroups, :through =&amp;gt; :user_ugroups end&lt;/p&gt;
&lt;p&gt;class Ugroup &amp;lt; ActiveRecord::Base has_many :user_ugroups
has_many :users, :through =&amp;gt; :user_ugroups end&lt;/p&gt;
&lt;p&gt;class UserUgroup &amp;lt; ActiveRecord::Base belongs_to :user
belongs_to :ugroup end&lt;/p&gt;
&lt;p&gt;My migration for the join table looks like this:&lt;/p&gt;
&lt;p&gt;def self.up create_table :user_ugroups, :primary_key =&amp;gt;
:user_ugroups_id do |t| t.integer :user_id, :null =&amp;gt; false
t.integer :ugroup_id, :null =&amp;gt; false end end&lt;/p&gt;
&lt;p&gt;So when I create a UserUgroup like so:&lt;/p&gt;
&lt;p&gt;UserUgroup.create!( :user =&amp;gt; @gdonald, :ugroup =&amp;gt; @admin
)&lt;/p&gt;
&lt;p&gt;ActiveRecord tries to insert a NULL for the user_ugroups_id
field and then I get this:&lt;/p&gt;
&lt;p&gt;ActiveRecord::StatementInvalid: OCIError: ORA-01400: cannot
insert NULL into (&quot;MYPROJDB&quot;.&quot;USER_UGROUPS&quot;.&quot;USER_UGROUPS_ID&quot;):
INSERT INTO user_ugroups (user_ugroups_id, user_id, ugroup_id)
VALUES(NULL, 1, 1)&lt;/p&gt;
&lt;p&gt;The migration creates my USER_UGROUPS_SEQ without issue, but
then it doesn't get used.&lt;/p&gt;
&lt;p&gt;I found a work-around for the issue:&lt;/p&gt;
&lt;p&gt;before_create :get_id&lt;/p&gt;
&lt;p&gt;def get_id self.ugroup_permission_id =
connection.next_sequence_value( self.class.sequence_name ) end&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-04T19:08:38+00:00</created-at>
      <creator-id type="integer">22682</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1327</number>
      <permalink>oracle-join-model-primary-key-issue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Oracle + join model, primary key issue</title>
      <updated-at type="datetime">2008-11-04T19:09:20+00:00</updated-at>
      <user-id type="integer">22682</user-id>
      <version type="integer">1</version>
      <user-name>Greg Donald</user-name>
      <creator-name>Greg Donald</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1327</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This should probably be fixed by the Oracle adapter, which is not maintained in/by the rails core.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;This should probably be fixed by the Oracle adapter, which is
not maintained in/by the rails core.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-12T16:04:58+00:00</created-at>
      <creator-id type="integer">22682</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1327</number>
      <permalink>oracle-join-model-primary-key-issue</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Oracle + join model, primary key issue</title>
      <updated-at type="datetime">2009-03-12T16:05:02+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Greg Donald</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1327</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
