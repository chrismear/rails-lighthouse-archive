<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-04T15:38:13+01:00</created-at>
  <creator-id type="integer">24327</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1171</number>
  <permalink>patch-call-clear_active_connections-in-after_dispatch-to-give-pooled-connections-back</permalink>
  <priority type="integer">581</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>actionpack activerecord patch</tag>
  <title>[PATCH] call clear_active_connections! in :after_dispatch to give pooled connections back</title>
  <updated-at type="datetime">2008-10-04T16:49:31+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">2</version>
  <user-name>Repository</user-name>
  <creator-name>Aliaksey Kandratsenka</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1171</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Current rails does not return connections back to pool. I believe that people haven't run into this because of 2 things: persistent connections (which means that all requests are handled by one thread) and/or usage of servers which either process all requests with one thread or use thread pool.

Note that integration tests use dispatcher but doesn't want to rollback connection in the middle of the test. They don't want to return connection back to pool. So it's handled specially by dedicated flag on dispatcher.</original-body>
  <latest-body>Current rails does not return connections back to pool. I believe that people haven't run into this because of 2 things: persistent connections (which means that all requests are handled by one thread) and/or usage of servers which either process all requests with one thread or use thread pool.

Note that integration tests use dispatcher but doesn't want to rollback connection in the middle of the test. They don't want to return connection back to pool. So it's handled specially by dedicated flag on dispatcher.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Current rails does not return connections back to pool. I
believe that people haven't run into this because of 2 things:
persistent connections (which means that all requests are handled
by one thread) and/or usage of servers which either process all
requests with one thread or use thread pool.&lt;/p&gt;
&lt;p&gt;Note that integration tests use dispatcher but doesn't want to
rollback connection in the middle of the test. They don't want to
return connection back to pool. So it's handled specially by
dedicated flag on dispatcher.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Current rails does not return connections back to pool. I believe that people haven't run into this because of 2 things: persistent connections (which means that all requests are handled by one thread) and/or usage of servers which either process all requests with one thread or use thread pool.

Note that integration tests use dispatcher but doesn't want to rollback connection in the middle of the test. They don't want to return connection back to pool. So it's handled specially by dedicated flag on dispatcher.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Current rails does not return connections back to pool. I
believe that people haven't run into this because of 2 things:
persistent connections (which means that all requests are handled
by one thread) and/or usage of servers which either process all
requests with one thread or use thread pool.&lt;/p&gt;
&lt;p&gt;Note that integration tests use dispatcher but doesn't want to
rollback connection in the middle of the test. They don't want to
return connection back to pool. So it's handled specially by
dedicated flag on dispatcher.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-04T15:38:13+01:00</created-at>
      <creator-id type="integer">24327</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1171</number>
      <permalink>patch-call-clear_active_connections-in-after_dispatch-to-give-pooled-connections-back</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch</tag>
      <title>[PATCH] call clear_active_connections! in :after_dispatch to give pooled connections back</title>
      <updated-at type="datetime">2008-10-04T15:38:15+01:00</updated-at>
      <user-id type="integer">24327</user-id>
      <version type="integer">1</version>
      <user-name>Aliaksey Kandratsenka</user-name>
      <creator-name>Aliaksey Kandratsenka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1171</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [6080b73b1cf6c9ff969b81751a1e5d26d7633a32]) call clear_active_connections! in :after_dispatch to give pooled connections back

This fixes connection pool exhaustion for web servers which create new thread per connection (e.g. Webrick).

integration.rb changes are required to keep test transaction active for several requests.

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#1171 state:committed]
http://github.com/rails/rails/commit/6080b73b1cf6c9ff969b81751a1e5d26d7633a32</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [6080b73b1cf6c9ff969b81751a1e5d26d7633a32]) call
clear_active_connections! in :after_dispatch to give pooled
connections back&lt;/p&gt;
&lt;p&gt;This fixes connection pool exhaustion for web servers which
create new thread per connection (e.g. Webrick).&lt;/p&gt;
&lt;p&gt;integration.rb changes are required to keep test transaction
active for several requests.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt; [&lt;a href=&quot;/projects/8994/tickets/1171&quot; title=&quot;Ticket #1171&quot;&gt;#1171&lt;/a&gt;
state:committed] &lt;a href=&quot;http://github.com/rails/rails/commit/6080b73b1cf6c9ff969b81751a1e5d26d7633a32&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-10-04T16:49:29+01:00</created-at>
      <creator-id type="integer">24327</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord patch
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1171</number>
      <permalink>patch-call-clear_active_connections-in-after_dispatch-to-give-pooled-connections-back</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>actionpack activerecord patch</tag>
      <title>[PATCH] call clear_active_connections! in :after_dispatch to give pooled connections back</title>
      <updated-at type="datetime">2008-10-04T16:49:31+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">2</version>
      <user-name>Repository</user-name>
      <creator-name>Aliaksey Kandratsenka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1171</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>eddb23ba9c4da58e641b5515b927a9e2f731d047</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-10-04T15:38:13+01:00</created-at>
      <filename>0005-call-clear_active_connections-in-after_dispatch-to.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">51275</id>
      <size type="integer">2561</size>
      <uploader-id type="integer">24327</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/51275/0005-call-clear_active_connections-in-after_dispatch-to.patch</url>
    </attachment>
  </attachments>
</ticket>
