From 64b1462bb0b53977acef4bd84ef6637ddfc4a2b9 Mon Sep 17 00:00:00 2001
From: Brandon Keepers <brandon@collectiveidea.com>
Date: Sat, 13 Feb 2010 01:17:21 -0500
Subject: [PATCH] Fix filter_parameter_logging on Ruby 1.9 when params contains an array. Closes #2999

---
 .../lib/action_dispatch/http/filter_parameters.rb  |   36 ++++++++++---------
 actionpack/test/controller/subscriber_test.rb      |   26 ++++++++++++++-
 2 files changed, 44 insertions(+), 18 deletions(-)

diff --git a/actionpack/lib/action_dispatch/http/filter_parameters.rb b/actionpack/lib/action_dispatch/http/filter_parameters.rb
index 1958e16..7276c8a 100644
--- a/actionpack/lib/action_dispatch/http/filter_parameters.rb
+++ b/actionpack/lib/action_dispatch/http/filter_parameters.rb
@@ -72,26 +72,28 @@ module ActionDispatch
       def process_parameter_filter(original_params) #:nodoc:
         return original_params.dup unless filtering_parameters?
 
-        filtered_params = {}
         regexps, blocks = compile_parameter_filter
-
-        original_params.each do |key, value|
-          if regexps.find { |r| key =~ r }
-            value = '[FILTERED]'
-          elsif value.is_a?(Hash)
-            value = process_parameter_filter(value)
-          elsif value.is_a?(Array)
-            value = value.map { |i| process_parameter_filter(i) }
-          elsif blocks.present?
-            key = key.dup
-            value = value.dup if value.duplicable?
-            blocks.each { |b| b.call(key, value) }
+        
+        case original_params
+        when Hash
+          original_params.inject({}) do |filtered_params, (key, value)|
+            if regexps.find { |r| key =~ r }
+              value = '[FILTERED]'
+            elsif blocks.present?
+              key = key.dup
+              value = value.dup if value.duplicable?
+              blocks.each { |b| b.call(key, value) }
+            else
+              value = process_parameter_filter(value)
+            end
+            filtered_params[key] = value
+            filtered_params
           end
-
-          filtered_params[key] = value
+        when Array
+          original_params.map { |i| process_parameter_filter(i) }
+        else
+          original_params
         end
-
-        filtered_params
       end
     end
   end
diff --git a/actionpack/test/controller/subscriber_test.rb b/actionpack/test/controller/subscriber_test.rb
index d7c1166..5150636 100644
--- a/actionpack/test/controller/subscriber_test.rb
+++ b/actionpack/test/controller/subscriber_test.rb
@@ -99,7 +99,7 @@ class ACSubscriberTest < ActionController::TestCase
   def test_process_action_with_filter_parameters
     @request.env["action_dispatch.parameter_filter"] = [:lifo, :amount]
 
-    get :show, :lifo => 'Pratik', :amount => '420', :step => '1'
+    get :show, :lifo => 'Pratik', :amount => '420', :step => '1', :multi => ["1", "2"]
     wait
 
     params = logs[1]
@@ -107,6 +107,30 @@ class ACSubscriberTest < ActionController::TestCase
     assert_match /"lifo"=>"\[FILTERED\]"/, params
     assert_match /"step"=>"1"/, params
   end
+  
+  def test_process_action_with_filter_parameters_nested
+    @request.env["action_dispatch.parameter_filter"] = [:password]
+
+    get :show, :multi => [{:password => "hello"}]
+    wait
+
+    params = logs[1]
+    assert_match /"password"=>"\[FILTERED\]"/, params
+  end
+  
+  
+  def test_process_action_with_filter_parameters_block
+    @request.env["action_dispatch.parameter_filter"] = lambda do |k,v|
+      v.reverse! if k =~ /secret/i
+    end
+    
+    get :show, :secret => 'sssh', :name => 'Brandon'
+    wait
+
+    params = logs[1]
+    assert_match /"secret"=>"hsss"/, params
+    assert_match /"name"=>"Brandon"/, params
+  end
 
   def test_redirect_to
     get :redirector
-- 
1.6.5.4

