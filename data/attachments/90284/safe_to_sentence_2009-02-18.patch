diff --git a/actionpack/lib/action_controller/base.rb b/actionpack/lib/action_controller/base.rb
index def57a8..880b58c 100644
--- a/actionpack/lib/action_controller/base.rb
+++ b/actionpack/lib/action_controller/base.rb
@@ -22,7 +22,7 @@ module ActionController #:nodoc:
     attr_reader :allowed_methods
 
     def initialize(*allowed_methods)
-      super("Only #{allowed_methods.to_sentence} requests are allowed.")
+      super("Only #{allowed_methods.to_sentence(Array::SENTENCE_CONVERSION_DEFAULTS)} requests are allowed.")
       @allowed_methods = allowed_methods
     end
 
@@ -1270,7 +1270,7 @@ module ActionController #:nodoc:
           rescue ActionView::MissingTemplate => e
             # Was the implicit template missing, or was it another template?
             if e.path == default_template_name
-              raise UnknownAction, "No action responded to #{action_name}. Actions: #{action_methods.sort.to_sentence}", caller
+              raise UnknownAction, "No action responded to #{action_name}. Actions: #{action_methods.sort.to_sentence(Array::SENTENCE_CONVERSION_DEFAULTS)}", caller
             else
               raise e
             end
diff --git a/actionpack/lib/action_controller/request.rb b/actionpack/lib/action_controller/request.rb
index 0e95cfc..1ce1e47 100755
--- a/actionpack/lib/action_controller/request.rb
+++ b/actionpack/lib/action_controller/request.rb
@@ -32,7 +32,7 @@ module ActionController
     # <tt>:get</tt>. If the request \method is not listed in the HTTP_METHODS
     # constant above, an UnknownHttpMethod exception is raised.
     def request_method
-      @request_method ||= HTTP_METHOD_LOOKUP[super] || raise(UnknownHttpMethod, "#{super}, accepted HTTP methods are #{HTTP_METHODS.to_sentence}")
+      @request_method ||= HTTP_METHOD_LOOKUP[super] || raise(UnknownHttpMethod, "#{super}, accepted HTTP methods are #{HTTP_METHODS.to_sentence(Array::SENTENCE_CONVERSION_DEFAULTS)}")
     end
 
     # Returns the HTTP request \method used for action processing as a
diff --git a/activerecord/lib/active_record/associations.rb b/activerecord/lib/active_record/associations.rb
index 05ce8ff..fbafbf4 100755
--- a/activerecord/lib/active_record/associations.rb
+++ b/activerecord/lib/active_record/associations.rb
@@ -22,7 +22,7 @@ module ActiveRecord
       through_reflection      = reflection.through_reflection
       source_reflection_names = reflection.source_reflection_names
       source_associations     = reflection.through_reflection.klass.reflect_on_all_associations.collect { |a| a.name.inspect }
-      super("Could not find the source association(s) #{source_reflection_names.collect(&:inspect).to_sentence :two_words_connector => ' or ', :last_word_connector => ', or '} in model #{through_reflection.klass}.  Try 'has_many #{reflection.name.inspect}, :through => #{through_reflection.name.inspect}, :source => <name>'.  Is it one of #{source_associations.to_sentence :two_words_connector => ' or ', :last_word_connector => ', or '}?")
+      super("Could not find the source association(s) #{source_reflection_names.collect(&:inspect).to_sentence :words_connector => ', ', :two_words_connector => ' or ', :last_word_connector => ', or '} in model #{through_reflection.klass}.  Try 'has_many #{reflection.name.inspect}, :through => #{through_reflection.name.inspect}, :source => <name>'.  Is it one of #{source_associations.to_sentence :words_connector => ', ', :two_words_connector => ' or ', :last_word_connector => ', or '}?")
     end
   end
 
diff --git a/activesupport/lib/active_support/core_ext/array/conversions.rb b/activesupport/lib/active_support/core_ext/array/conversions.rb
index 69d35da..f8aa561 100644
--- a/activesupport/lib/active_support/core_ext/array/conversions.rb
+++ b/activesupport/lib/active_support/core_ext/array/conversions.rb
@@ -2,6 +2,13 @@ module ActiveSupport #:nodoc:
   module CoreExtensions #:nodoc:
     module Array #:nodoc:
       module Conversions
+
+        SENTENCE_CONVERSION_DEFAULTS = {
+          :words_connector     => ', ',
+          :two_words_connector => ' and ',
+          :last_word_connector => ', and '
+        }
+
         # Converts the array to a comma-separated sentence where the last element is joined by the connector word. Options:
         # * <tt>:words_connector</tt> - The sign or word used to join the elements in arrays with two or more elements (default: ", ")
         # * <tt>:two_words_connector</tt> - The sign or word used to join the elements in arrays with two elements (default: " and ")
@@ -9,10 +16,15 @@ module ActiveSupport #:nodoc:
         def to_sentence(options = {})          
           options.assert_valid_keys(:words_connector, :two_words_connector, :last_word_connector, :locale)
           
-          default_words_connector = I18n.translate(:'support.array.words_connector', :locale => options[:locale])
-          default_two_words_connector = I18n.translate(:'support.array.two_words_connector', :locale => options[:locale])
-          default_last_word_connector = I18n.translate(:'support.array.last_word_connector', :locale => options[:locale])
-          options.reverse_merge! :words_connector => default_words_connector, :two_words_connector => default_two_words_connector, :last_word_connector => default_last_word_connector
+          [:words_connector, :two_words_connector, :last_word_connector].each do | option |
+            unless options.has_key? option
+              options[option] = I18n.translate( option,
+                                                :scope   => :'support.array',
+                                                :default => SENTENCE_CONVERSION_DEFAULTS[option],
+                                                :locale  => options[:locale]
+                                               )
+            end
+          end
 
           case length
             when 0
diff --git a/activesupport/lib/active_support/duration.rb b/activesupport/lib/active_support/duration.rb
index c41e86d..26654d9 100644
--- a/activesupport/lib/active_support/duration.rb
+++ b/activesupport/lib/active_support/duration.rb
@@ -70,7 +70,7 @@ module ActiveSupport
       [:years, :months, :days, :minutes, :seconds].map do |length|
         n = consolidated[length]
         "#{n} #{n == 1 ? length.to_s.singularize : length.to_s}" if n.nonzero?
-      end.compact.to_sentence
+      end.compact.to_sentence(Array::SENTENCE_CONVERSION_DEFAULTS)
     end
 
     protected
diff --git a/activesupport/test/core_ext/array_ext_test.rb b/activesupport/test/core_ext/array_ext_test.rb
index 367f0e0..8b277cd 100644
diff --git a/activesupport/test/i18n_test.rb b/activesupport/test/i18n_test.rb
index 7535f4a..099a400 100644
--- a/activesupport/test/i18n_test.rb
+++ b/activesupport/test/i18n_test.rb
@@ -83,6 +83,13 @@ class I18nTest < Test::Unit::TestCase
     assert_equal ', and ', I18n.translate(:'support.array.last_word_connector')
   end
 
+  def test_to_sentence_does_not_lookup_if_defaults_are_used
+    I18n.backend.expects(:translate).never
+    assert_equal 'a, b, and c', %w[a b c].to_sentence(Array::SENTENCE_CONVERSION_DEFAULTS)
+  ensure
+    I18n.backend = nil
+  end
+
   def test_to_sentence
     default_two_words_connector = I18n.translate(:'support.array.two_words_connector')
     default_last_word_connector = I18n.translate(:'support.array.last_word_connector')
diff --git a/railties/lib/rails/plugin/loader.rb b/railties/lib/rails/plugin/loader.rb
index bc0184c..ced125d 100644
--- a/railties/lib/rails/plugin/loader.rb
+++ b/railties/lib/rails/plugin/loader.rb
@@ -176,7 +176,7 @@ module Rails
           if explicit_plugin_loading_order?
             if configuration.plugins.detect {|plugin| plugin != :all && !loaded?(plugin) }
               missing_plugins = configuration.plugins - (plugins.map{|p| p.name.to_sym} + [:all])
-              raise LoadError, "Could not locate the following plugins: #{missing_plugins.to_sentence}"
+              raise LoadError, "Could not locate the following plugins: #{missing_plugins.to_sentence(Array::SENTENCE_CONVERSION_DEFAULTS)}"
             end
           end
         end
diff --git a/railties/lib/tasks/testing.rake b/railties/lib/tasks/testing.rake
index 4242458..290c7fb 100644
--- a/railties/lib/tasks/testing.rake
+++ b/railties/lib/tasks/testing.rake
@@ -48,7 +48,7 @@ task :test do
       task
     end
   end.compact
-  abort "Errors running #{errors.to_sentence}!" if errors.any?
+  abort "Errors running #{errors.to_sentence(Array::SENTENCE_CONVERSION_DEFAULTS)}!" if errors.any?
 end
 
 namespace :test do
