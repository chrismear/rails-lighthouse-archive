<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-08-25T07:43:35+01:00</created-at>
  <creator-id type="integer">16908</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">896</number>
  <permalink>be-a-little-more-discerning-about-which-exceptions-to-handle</permalink>
  <priority type="integer">349</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>bug patch</tag>
  <title>Be a little more discerning about which exceptions to handle</title>
  <updated-at type="datetime">2010-05-29T05:01:35+01:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">6</version>
  <user-name>Repository</user-name>
  <creator-name>Matt Palmer</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/896</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Throughout the Rails source, it is common to rescue Exception, however this isn't a particularly good idea as various quite fatal exceptions don't get a chance to do their thing (NoMemoryError, for one, although SignalException, SystemExit, and SystemStackError all signify something a little more deadly than something mundane like an ArgumentError).

I've prepared a patch that goes through and &quot;fixes&quot; the occurances of &quot;rescue Exception&quot; to something slightly more reasonable.  The fixes were usually either just s/Exception/StandardError/, with the occasional more complicated fix.  The few &quot;rescue Exception&quot; blocks I left were ones that just added some useful info then re-raised.

My changes are in the exception_happiness branch of git://github.com/mpalmer/rails.git.</original-body>
  <latest-body>Throughout the Rails source, it is common to rescue Exception, however this isn't a particularly good idea as various quite fatal exceptions don't get a chance to do their thing (NoMemoryError, for one, although SignalException, SystemExit, and SystemStackError all signify something a little more deadly than something mundane like an ArgumentError).

I've prepared a patch that goes through and &quot;fixes&quot; the occurances of &quot;rescue Exception&quot; to something slightly more reasonable.  The fixes were usually either just s/Exception/StandardError/, with the occasional more complicated fix.  The few &quot;rescue Exception&quot; blocks I left were ones that just added some useful info then re-raised.

My changes are in the exception_happiness branch of git://github.com/mpalmer/rails.git.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Throughout the Rails source, it is common to rescue Exception, however this isn't a particularly good idea as various quite fatal exceptions don't get a chance to do their thing (NoMemoryError, for one, although SignalException, SystemExit, and SystemStackError all signify something a little more deadly than something mundane like an ArgumentError).&lt;/p&gt;

&lt;p&gt;I've prepared a patch that goes through and &quot;fixes&quot; the occurances of &quot;rescue Exception&quot; to something slightly more reasonable.  The fixes were usually either just s/Exception/StandardError/, with the occasional more complicated fix.  The few &quot;rescue Exception&quot; blocks I left were ones that just added some useful info then re-raised.&lt;/p&gt;

&lt;p&gt;My changes are in the exception_happiness branch of git://github.com/mpalmer/rails.git.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Throughout the Rails source, it is common to rescue Exception, however this isn't a particularly good idea as various quite fatal exceptions don't get a chance to do their thing (NoMemoryError, for one, although SignalException, SystemExit, and SystemStackError all signify something a little more deadly than something mundane like an ArgumentError).

I've prepared a patch that goes through and &quot;fixes&quot; the occurances of &quot;rescue Exception&quot; to something slightly more reasonable.  The fixes were usually either just s/Exception/StandardError/, with the occasional more complicated fix.  The few &quot;rescue Exception&quot; blocks I left were ones that just added some useful info then re-raised.

My changes are in the exception_happiness branch of git://github.com/mpalmer/rails.git.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Throughout the Rails source, it is common to rescue Exception, however this isn't a particularly good idea as various quite fatal exceptions don't get a chance to do their thing (NoMemoryError, for one, although SignalException, SystemExit, and SystemStackError all signify something a little more deadly than something mundane like an ArgumentError).&lt;/p&gt;

&lt;p&gt;I've prepared a patch that goes through and &quot;fixes&quot; the occurances of &quot;rescue Exception&quot; to something slightly more reasonable.  The fixes were usually either just s/Exception/StandardError/, with the occasional more complicated fix.  The few &quot;rescue Exception&quot; blocks I left were ones that just added some useful info then re-raised.&lt;/p&gt;

&lt;p&gt;My changes are in the exception_happiness branch of git://github.com/mpalmer/rails.git.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-25T07:43:36+01:00</created-at>
      <creator-id type="integer">16908</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">896</number>
      <permalink>be-a-little-more-discerning-about-which-exceptions-to-handle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug patch</tag>
      <title>Be a little more discerning about which exceptions to handle</title>
      <updated-at type="datetime">2008-08-25T07:43:36+01:00</updated-at>
      <user-id type="integer">16908</user-id>
      <version type="integer">1</version>
      <user-name>Matt Palmer</user-name>
      <creator-name>Matt Palmer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/896</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That sounds good. Could you please update a .diff file using git-format-patch ?

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;That sounds good. Could you please update a .diff file using
git-format-patch ?&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-08-30T17:55:46+01:00</created-at>
      <creator-id type="integer">16908</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">896</number>
      <permalink>be-a-little-more-discerning-about-which-exceptions-to-handle-2</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug patch</tag>
      <title>Be a little more discerning about which exceptions to handle</title>
      <updated-at type="datetime">2008-08-30T17:55:46+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Matt Palmer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/896</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Change to open when patch is attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Change to open when patch is attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-10T05:49:01+01:00</created-at>
      <creator-id type="integer">16908</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">896</number>
      <permalink>be-a-little-more-discerning-about-which-exceptions-to-handle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>bug patch</tag>
      <title>Be a little more discerning about which exceptions to handle</title>
      <updated-at type="datetime">2008-09-10T05:49:25+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">3</version>
      <user-name>DHH</user-name>
      <creator-name>Matt Palmer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/896</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:34+01:00</created-at>
      <creator-id type="integer">16908</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">896</number>
      <permalink>be-a-little-more-discerning-about-which-exceptions-to-handle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>bug patch</tag>
      <title>Be a little more discerning about which exceptions to handle</title>
      <updated-at type="datetime">2010-05-04T18:48:34+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Matt Palmer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/896</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey guys,

Perhaps I should open another ticket for this, please let me know if that's the case. I have a patch that addresses what is for me the most egregious case of overeager exception handling. In activerecord/lib/active_record/connection_adapters/abstract_adapter.rb the #log method rescues Exception and then re-raises as an ActiveRecord::StatementInvalid exception. 

Some people have hit this problem when they have slow queries that are hanging the system and so I think the response is generally &quot;fix your query&quot;. But we're hitting this problem when we try to exit out of our background processes that are just cranking through a whole bunch of data processing. 

In these background processes we have designed them to be tolerant to exceptions and expect the process to die when it's sent a SIGINT or SystemExit. However, we also want those processes to stay alive and continue on to the next job in the queue if any particular job hits an unexpected exception. So we take the approach of wrapping our job invocations in a 'rescue Exception' block and re-raising (allowing the process to die) in the case where the exception is a SystemExit or SignalException. So the AR approach of rescuing and re-raising as a StatementInvalid breaks this approach and leaves us in a situation where we have to do resort to less reliable methods of inspecting the rescued exceptions, like parsing the exception message. It also leads to confusing behavior where you sometimes see the process die cleanly (when it's not invoking an AR statement at the time the SystemExit is received) or continue running (when the exception was caught and re-wrapped).

I'm guessing there are other folks out there how are experiencing similar problems and so I'd like to offer a patch that applies against the 2-3-stable branch (rather than 3.x).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey guys,&lt;/p&gt;
&lt;p&gt;Perhaps I should open another ticket for this, please let me
know if that's the case. I have a patch that addresses what is for
me the most egregious case of overeager exception handling. In
activerecord/lib/active_record/connection_adapters/abstract_adapter.rb
the #log method rescues Exception and then re-raises as an
ActiveRecord::StatementInvalid exception.&lt;/p&gt;
&lt;p&gt;Some people have hit this problem when they have slow queries
that are hanging the system and so I think the response is
generally &quot;fix your query&quot;. But we're hitting this problem when we
try to exit out of our background processes that are just cranking
through a whole bunch of data processing.&lt;/p&gt;
&lt;p&gt;In these background processes we have designed them to be
tolerant to exceptions and expect the process to die when it's sent
a SIGINT or SystemExit. However, we also want those processes to
stay alive and continue on to the next job in the queue if any
particular job hits an unexpected exception. So we take the
approach of wrapping our job invocations in a 'rescue Exception'
block and re-raising (allowing the process to die) in the case
where the exception is a SystemExit or SignalException. So the AR
approach of rescuing and re-raising as a StatementInvalid breaks
this approach and leaves us in a situation where we have to do
resort to less reliable methods of inspecting the rescued
exceptions, like parsing the exception message. It also leads to
confusing behavior where you sometimes see the process die cleanly
(when it's not invoking an AR statement at the time the SystemExit
is received) or continue running (when the exception was caught and
re-wrapped).&lt;/p&gt;
&lt;p&gt;I'm guessing there are other folks out there how are
experiencing similar problems and so I'd like to offer a patch that
applies against the 2-3-stable branch (rather than 3.x).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-27T19:23:04+01:00</created-at>
      <creator-id type="integer">16908</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">896</number>
      <permalink>be-a-little-more-discerning-about-which-exceptions-to-handle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>bug patch</tag>
      <title>Be a little more discerning about which exceptions to handle</title>
      <updated-at type="datetime">2010-05-27T19:23:09+01:00</updated-at>
      <user-id type="integer">18589</user-id>
      <version type="integer">5</version>
      <user-name>acechase</user-name>
      <creator-name>Matt Palmer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/896</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [3d6ed501870f2a790c2d0e288e0f294e8c5f7be3]) Don't rewrap system level exceptions with StatementInvalid

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#896 state:committed]
http://github.com/rails/rails/commit/3d6ed501870f2a790c2d0e288e0f294e8c5f7be3</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/3d6ed501870f2a790c2d0e288e0f294e8c5f7be3&quot;
title=
&quot;Changeset [3d6ed501870f2a790c2d0e288e0f294e8c5f7be3]&quot;&gt;[3d6ed501870f2a790c2d0e288e0f294e8c5f7be3]&lt;/a&gt;)
Don't rewrap system level exceptions with StatementInvalid&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=
&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt;&lt;br&gt;
[&lt;a href=&quot;/projects/8994/tickets/896&quot; title=&quot;Ticket #896&quot;&gt;#896&lt;/a&gt;
state:committed] &lt;a href=
&quot;http://github.com/rails/rails/commit/3d6ed501870f2a790c2d0e288e0f294e8c5f7be3&quot;&gt;
http://github.com/rails/rails/commit/3d6ed501870f2a790c2d0e288e0f29...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-29T05:01:31+01:00</created-at>
      <creator-id type="integer">16908</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">896</number>
      <permalink>be-a-little-more-discerning-about-which-exceptions-to-handle</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>bug patch</tag>
      <title>Be a little more discerning about which exceptions to handle</title>
      <updated-at type="datetime">2010-05-29T05:01:35+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">6</version>
      <user-name>Repository</user-name>
      <creator-name>Matt Palmer</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/896</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>4cfe276a565b5ce7476515ad6776391c2cb8e1fa</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-05-27T19:23:04+01:00</created-at>
      <filename>system_exception_no_wrap.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">537660</id>
      <size type="integer">1377</size>
      <uploader-id type="integer">18589</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/537660/system_exception_no_wrap.diff</url>
    </attachment>
  </attachments>
</ticket>
