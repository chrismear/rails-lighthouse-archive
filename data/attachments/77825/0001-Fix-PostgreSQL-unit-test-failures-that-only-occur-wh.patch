From fa0ff13107c11bfcd3ba3c0e6e02e53302b121ca Mon Sep 17 00:00:00 2001
From: Hongli Lai (Phusion) <hongli@phusion.nl>
Date: Tue, 13 Jan 2009 16:01:44 +0100
Subject: [PATCH] Fix PostgreSQL unit test failures that only occur when using the old 'postgres' driver.

---
 .../abstract/database_statements.rb                |   12 ++++++++----
 .../connection_adapters/postgresql_adapter.rb      |    8 +++-----
 activerecord/test/cases/transactions_test.rb       |    3 +--
 3 files changed, 12 insertions(+), 11 deletions(-)

diff --git a/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb b/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb
index 3911858..08601da 100644
--- a/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb
+++ b/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb
@@ -89,7 +89,7 @@ module ActiveRecord
       # - The block will be run without doing anything. All database statements
       #   that happen within the block are effectively appended to the already
       #   open database transaction.
-      # - However, if +requires_new+ is set, the block will be wrapped in a
+      # - However, if +:requires_new+ is set, the block will be wrapped in a
       #   database savepoint acting as a sub-transaction.
       #
       # === Caveats
@@ -113,8 +113,12 @@ module ActiveRecord
       def transaction(options = {})
         options.assert_valid_keys :requires_new, :joinable
 
-        last_transaction_joinable, @transaction_joinable =
-          @transaction_joinable, options[:joinable] || true
+        last_transaction_joinable = @transaction_joinable
+        if options.has_key?(:joinable)
+          @transaction_joinable = options[:joinable]
+        else
+          @transaction_joinable = true
+        end
         requires_new = options[:requires_new] || !last_transaction_joinable
 
         transaction_open = false
@@ -141,7 +145,7 @@ module ActiveRecord
               rollback_to_savepoint
             end
           end
-          raise unless database_transaction_rollback.is_a? ActiveRecord::Rollback
+          raise unless database_transaction_rollback.is_a?(ActiveRecord::Rollback)
         end
       ensure
         @transaction_joinable = last_transaction_joinable
diff --git a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
index 5a8d999..549b6a1 100644
--- a/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
+++ b/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb
@@ -533,11 +533,9 @@ module ActiveRecord
         execute "ROLLBACK"
       end
       
-      if PGconn.public_method_defined?(:transaction_status)
-        # ruby-pg defines Ruby constants for transaction status,
-        # ruby-postgres does not.
-        PQTRANS_IDLE = defined?(PGconn::PQTRANS_IDLE) ? PGconn::PQTRANS_IDLE : 0
-        
+      if defined?(PGconn::PQTRANS_IDLE)
+        # The ruby-pg driver supports inspecting the transaction status,
+        # while the ruby-postgres driver does not.
         def outside_transaction?
           @connection.transaction_status == PQTRANS_IDLE
         end
diff --git a/activerecord/test/cases/transactions_test.rb b/activerecord/test/cases/transactions_test.rb
index f07fad1..4a07a8b 100644
--- a/activerecord/test/cases/transactions_test.rb
+++ b/activerecord/test/cases/transactions_test.rb
@@ -321,9 +321,8 @@ class TransactionTest < ActiveRecord::TestCase
     end
   end
   
-  if current_adapter?(:PostgreSQLAdapter) && PGconn.public_method_defined?(:transaction_status)
+  if current_adapter?(:PostgreSQLAdapter) && defined?(PGconn::PQTRANS_IDLE)
     def test_outside_transaction_works
-      Topic.logger.info("-------------")
       assert Topic.connection.outside_transaction?
       Topic.connection.begin_db_transaction
       assert !Topic.connection.outside_transaction?
-- 
1.6.1

