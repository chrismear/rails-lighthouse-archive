<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-09-22T05:40:33+01:00</created-at>
  <creator-id type="integer">53345</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3243</number>
  <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
  <priority type="integer">148775</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord bug patch serialization to_xml xml</tag>
  <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
  <updated-at type="datetime">2011-02-02T17:28:35+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">9</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Nick M</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
  <priority-name nil="true"></priority-name>
  <original-body>I've ran into a few problems using to_xml.

* On an ActiveRecord model, calling to_xml(:methods =&gt; :custom_method) where custom_method returns a hash, the hash is simply converted to a string and not represented in XML.
* In the same situation, if custom_method returns an array of values, the array is mashed together as a single string.
* to_xml(:camelize =&gt; true) doesn't always play nice with arrays. The inner tags might be camelized, but the outer &lt;records type=&quot;array&quot;&gt; tag never seems to be properly camelized.

These are just a few problems, but more generally I've repeatedly run into problems where to_json can simply handle converting any object to JSON, but to_xml will balk, convert objects into not so useful strings, or simply not do what's expected.

I began trying to fix these problems, but quickly fell down a rabbit-hole of completely refactoring how to_xml works. So now I have a patch where to_xml is organized and works much like to_json does now. It fixes all of these problems with certain objects not supporting to_xml by allowing any object to define how it will be coerced into an XML value and how it will build its XML tags if necessary.

Here's a quick example showing the previous problems and how things work with the patch, which I think would be the expected behavior:

@@@
class Report &lt; ActiveRecord::Base
  def item_ids
    [8, 9]
  end

  def metadata
    { :color =&gt; &quot;blue&quot;, :options =&gt; [:blue, :red] }
  end
end

report.to_xml(:methods =&gt; [:item_ids, :metadata])

Previously, this would generate:

&lt;report&gt;
  ...
  &lt;item-ids&gt;89&lt;/item-ids&gt;
  &lt;metadata&gt;colorblueoptionsbluered&lt;/metadata&gt;
&lt;/report&gt;

Now it generates:

&lt;report&gt;
  ...
  &lt;item-ids type=&quot;array&quot;&gt;
    &lt;item-id type=&quot;integer&quot;&gt;8&lt;/item-id&gt;
    &lt;item-id type=&quot;integer&quot;&gt;9&lt;/item-id&gt;
  &lt;/item-ids&gt;
  &lt;metadata&gt;
    &lt;color&gt;blue&lt;/color&gt;
    &lt;options type=&quot;array&quot;&gt;
      &lt;option type=&quot;symbol&quot;&gt;blue&lt;/option&gt;
      &lt;option type=&quot;symbol&quot;&gt;red&lt;/option&gt;
    &lt;/options&gt;
  &lt;/metadata&gt;
&lt;/report&gt;
@@@

I've introduced new tests to test these new cases. The patch maintains backwards compatibility with all previous tests. The one exception is a newer ActiveModel test where a method returns a hash and it was expecting to be converted to YAML. ActiveRecord serialized_attributes are still converted to YAML, but since ActiveModel doesn't know about serialized_attributes, the hash returned there is converted into nested XML.

Any feedback or questions are welcome. Hopefully this patch makes to_xml behave more as expected with other data types, and also makes it more flexible to customize how objects respond to XML encoding. The patch provided is against the latest master, but if this patch seems desirable, is there any chance of getting these changes implemented on 2.3 stable? I started out patching 2-3-stable, so I have most of this working there, but since this patch grew a bit more than I expected, I thought I'd get feedback first. But I can provide a 2.3 patch if it's wanted.

Here are a couple of older bug reports documenting some of these same issues: #458 and #1576</original-body>
  <latest-body>I've ran into a few problems using to_xml.

* On an ActiveRecord model, calling to_xml(:methods =&gt; :custom_method) where custom_method returns a hash, the hash is simply converted to a string and not represented in XML.
* In the same situation, if custom_method returns an array of values, the array is mashed together as a single string.
* to_xml(:camelize =&gt; true) doesn't always play nice with arrays. The inner tags might be camelized, but the outer &lt;records type=&quot;array&quot;&gt; tag never seems to be properly camelized.

These are just a few problems, but more generally I've repeatedly run into problems where to_json can simply handle converting any object to JSON, but to_xml will balk, convert objects into not so useful strings, or simply not do what's expected.

I began trying to fix these problems, but quickly fell down a rabbit-hole of completely refactoring how to_xml works. So now I have a patch where to_xml is organized and works much like to_json does now. It fixes all of these problems with certain objects not supporting to_xml by allowing any object to define how it will be coerced into an XML value and how it will build its XML tags if necessary.

Here's a quick example showing the previous problems and how things work with the patch, which I think would be the expected behavior:

@@@
class Report &lt; ActiveRecord::Base
  def item_ids
    [8, 9]
  end

  def metadata
    { :color =&gt; &quot;blue&quot;, :options =&gt; [:blue, :red] }
  end
end

report.to_xml(:methods =&gt; [:item_ids, :metadata])

Previously, this would generate:

&lt;report&gt;
  ...
  &lt;item-ids&gt;89&lt;/item-ids&gt;
  &lt;metadata&gt;colorblueoptionsbluered&lt;/metadata&gt;
&lt;/report&gt;

Now it generates:

&lt;report&gt;
  ...
  &lt;item-ids type=&quot;array&quot;&gt;
    &lt;item-id type=&quot;integer&quot;&gt;8&lt;/item-id&gt;
    &lt;item-id type=&quot;integer&quot;&gt;9&lt;/item-id&gt;
  &lt;/item-ids&gt;
  &lt;metadata&gt;
    &lt;color&gt;blue&lt;/color&gt;
    &lt;options type=&quot;array&quot;&gt;
      &lt;option type=&quot;symbol&quot;&gt;blue&lt;/option&gt;
      &lt;option type=&quot;symbol&quot;&gt;red&lt;/option&gt;
    &lt;/options&gt;
  &lt;/metadata&gt;
&lt;/report&gt;
@@@

I've introduced new tests to test these new cases. The patch maintains backwards compatibility with all previous tests. The one exception is a newer ActiveModel test where a method returns a hash and it was expecting to be converted to YAML. ActiveRecord serialized_attributes are still converted to YAML, but since ActiveModel doesn't know about serialized_attributes, the hash returned there is converted into nested XML.

Any feedback or questions are welcome. Hopefully this patch makes to_xml behave more as expected with other data types, and also makes it more flexible to customize how objects respond to XML encoding. The patch provided is against the latest master, but if this patch seems desirable, is there any chance of getting these changes implemented on 2.3 stable? I started out patching 2-3-stable, so I have most of this working there, but since this patch grew a bit more than I expected, I thought I'd get feedback first. But I can provide a 2.3 patch if it's wanted.

Here are a couple of older bug reports documenting some of these same issues: #458 and #1576</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I've ran into a few problems using to_xml.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On an ActiveRecord model, calling to_xml(:methods =&amp;gt;
:custom_method) where custom_method returns a hash, the hash is
simply converted to a string and not represented in XML.&lt;/li&gt;
&lt;li&gt;In the same situation, if custom_method returns an array of
values, the array is mashed together as a single string.&lt;/li&gt;
&lt;li&gt;to_xml(:camelize =&amp;gt; true) doesn't always play nice with
arrays. The inner tags might be camelized, but the outer tag never
seems to be properly camelized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just a few problems, but more generally I've
repeatedly run into problems where to_json can simply handle
converting any object to JSON, but to_xml will balk, convert
objects into not so useful strings, or simply not do what's
expected.&lt;/p&gt;
&lt;p&gt;I began trying to fix these problems, but quickly fell down a
rabbit-hole of completely refactoring how to_xml works. So now I
have a patch where to_xml is organized and works much like to_json
does now. It fixes all of these problems with certain objects not
supporting to_xml by allowing any object to define how it will be
coerced into an XML value and how it will build its XML tags if
necessary.&lt;/p&gt;
&lt;p&gt;Here's a quick example showing the previous problems and how
things work with the patch, which I think would be the expected
behavior:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Report &amp;lt; ActiveRecord::Base
  def item_ids
    [8, 9]
  end

  def metadata
    { :color =&amp;gt; &quot;blue&quot;, :options =&amp;gt; [:blue, :red] }
  end
end

report.to_xml(:methods =&amp;gt; [:item_ids, :metadata])

Previously, this would generate:

&amp;lt;report&amp;gt;
  ...
  &amp;lt;item-ids&amp;gt;89&amp;lt;/item-ids&amp;gt;
  &amp;lt;metadata&amp;gt;colorblueoptionsbluered&amp;lt;/metadata&amp;gt;
&amp;lt;/report&amp;gt;

Now it generates:

&amp;lt;report&amp;gt;
  ...
  &amp;lt;item-ids type=&quot;array&quot;&amp;gt;
    &amp;lt;item-id type=&quot;integer&quot;&amp;gt;8&amp;lt;/item-id&amp;gt;
    &amp;lt;item-id type=&quot;integer&quot;&amp;gt;9&amp;lt;/item-id&amp;gt;
  &amp;lt;/item-ids&amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;color&amp;gt;blue&amp;lt;/color&amp;gt;
    &amp;lt;options type=&quot;array&quot;&amp;gt;
      &amp;lt;option type=&quot;symbol&quot;&amp;gt;blue&amp;lt;/option&amp;gt;
      &amp;lt;option type=&quot;symbol&quot;&amp;gt;red&amp;lt;/option&amp;gt;
    &amp;lt;/options&amp;gt;
  &amp;lt;/metadata&amp;gt;
&amp;lt;/report&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've introduced new tests to test these new cases. The patch
maintains backwards compatibility with all previous tests. The one
exception is a newer ActiveModel test where a method returns a hash
and it was expecting to be converted to YAML. ActiveRecord
serialized_attributes are still converted to YAML, but since
ActiveModel doesn't know about serialized_attributes, the hash
returned there is converted into nested XML.&lt;/p&gt;
&lt;p&gt;Any feedback or questions are welcome. Hopefully this patch
makes to_xml behave more as expected with other data types, and
also makes it more flexible to customize how objects respond to XML
encoding. The patch provided is against the latest master, but if
this patch seems desirable, is there any chance of getting these
changes implemented on 2.3 stable? I started out patching
2-3-stable, so I have most of this working there, but since this
patch grew a bit more than I expected, I thought I'd get feedback
first. But I can provide a 2.3 patch if it's wanted.&lt;/p&gt;
&lt;p&gt;Here are a couple of older bug reports documenting some of these
same issues: &lt;a href=&quot;/projects/8994/tickets/458&quot; title=
&quot;Ticket #458&quot;&gt;#458&lt;/a&gt; and &lt;a href=&quot;/projects/8994/tickets/1576&quot;
title=&quot;Ticket #1576&quot;&gt;#1576&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I've ran into a few problems using to_xml.

* On an ActiveRecord model, calling to_xml(:methods =&gt; :custom_method) where custom_method returns a hash, the hash is simply converted to a string and not represented in XML.
* In the same situation, if custom_method returns an array of values, the array is mashed together as a single string.
* to_xml(:camelize =&gt; true) doesn't always play nice with arrays. The inner tags might be camelized, but the outer &lt;records type=&quot;array&quot;&gt; tag never seems to be properly camelized.

These are just a few problems, but more generally I've repeatedly run into problems where to_json can simply handle converting any object to JSON, but to_xml will balk, convert objects into not so useful strings, or simply not do what's expected.

I began trying to fix these problems, but quickly fell down a rabbit-hole of completely refactoring how to_xml works. So now I have a patch where to_xml is organized and works much like to_json does now. It fixes all of these problems with certain objects not supporting to_xml by allowing any object to define how it will be coerced into an XML value and how it will build its XML tags if necessary.

Here's a quick example showing the previous problems and how things work with the patch, which I think would be the expected behavior:

@@@
class Report &lt; ActiveRecord::Base
  def item_ids
    [8, 9]
  end

  def metadata
    { :color =&gt; &quot;blue&quot;, :options =&gt; [:blue, :red] }
  end
end

report.to_xml(:methods =&gt; [:item_ids, :metadata])

Previously, this would generate:

&lt;report&gt;
  ...
  &lt;item-ids&gt;89&lt;/item-ids&gt;
  &lt;metadata&gt;colorblueoptionsbluered&lt;/metadata&gt;
&lt;/report&gt;

Now it generates:

&lt;report&gt;
  ...
  &lt;item-ids type=&quot;array&quot;&gt;
    &lt;item-id type=&quot;integer&quot;&gt;8&lt;/item-id&gt;
    &lt;item-id type=&quot;integer&quot;&gt;9&lt;/item-id&gt;
  &lt;/item-ids&gt;
  &lt;metadata&gt;
    &lt;color&gt;blue&lt;/color&gt;
    &lt;options type=&quot;array&quot;&gt;
      &lt;option type=&quot;symbol&quot;&gt;blue&lt;/option&gt;
      &lt;option type=&quot;symbol&quot;&gt;red&lt;/option&gt;
    &lt;/options&gt;
  &lt;/metadata&gt;
&lt;/report&gt;
@@@

I've introduced new tests to test these new cases. The patch maintains backwards compatibility with all previous tests. The one exception is a newer ActiveModel test where a method returns a hash and it was expecting to be converted to YAML. ActiveRecord serialized_attributes are still converted to YAML, but since ActiveModel doesn't know about serialized_attributes, the hash returned there is converted into nested XML.

Any feedback or questions are welcome. Hopefully this patch makes to_xml behave more as expected with other data types, and also makes it more flexible to customize how objects respond to XML encoding. The patch provided is against the latest master, but if this patch seems desirable, is there any chance of getting these changes implemented on 2.3 stable? I started out patching 2-3-stable, so I have most of this working there, but since this patch grew a bit more than I expected, I thought I'd get feedback first. But I can provide a 2.3 patch if it's wanted.

Here are a couple of older bug reports documenting some of these same issues: #458 and #1576</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've ran into a few problems using to_xml.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On an ActiveRecord model, calling to_xml(:methods =&amp;gt;
:custom_method) where custom_method returns a hash, the hash is
simply converted to a string and not represented in XML.&lt;/li&gt;
&lt;li&gt;In the same situation, if custom_method returns an array of
values, the array is mashed together as a single string.&lt;/li&gt;
&lt;li&gt;to_xml(:camelize =&amp;gt; true) doesn't always play nice with
arrays. The inner tags might be camelized, but the outer tag never
seems to be properly camelized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are just a few problems, but more generally I've
repeatedly run into problems where to_json can simply handle
converting any object to JSON, but to_xml will balk, convert
objects into not so useful strings, or simply not do what's
expected.&lt;/p&gt;
&lt;p&gt;I began trying to fix these problems, but quickly fell down a
rabbit-hole of completely refactoring how to_xml works. So now I
have a patch where to_xml is organized and works much like to_json
does now. It fixes all of these problems with certain objects not
supporting to_xml by allowing any object to define how it will be
coerced into an XML value and how it will build its XML tags if
necessary.&lt;/p&gt;
&lt;p&gt;Here's a quick example showing the previous problems and how
things work with the patch, which I think would be the expected
behavior:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Report &amp;lt; ActiveRecord::Base
  def item_ids
    [8, 9]
  end

  def metadata
    { :color =&amp;gt; &quot;blue&quot;, :options =&amp;gt; [:blue, :red] }
  end
end

report.to_xml(:methods =&amp;gt; [:item_ids, :metadata])

Previously, this would generate:

&amp;lt;report&amp;gt;
  ...
  &amp;lt;item-ids&amp;gt;89&amp;lt;/item-ids&amp;gt;
  &amp;lt;metadata&amp;gt;colorblueoptionsbluered&amp;lt;/metadata&amp;gt;
&amp;lt;/report&amp;gt;

Now it generates:

&amp;lt;report&amp;gt;
  ...
  &amp;lt;item-ids type=&quot;array&quot;&amp;gt;
    &amp;lt;item-id type=&quot;integer&quot;&amp;gt;8&amp;lt;/item-id&amp;gt;
    &amp;lt;item-id type=&quot;integer&quot;&amp;gt;9&amp;lt;/item-id&amp;gt;
  &amp;lt;/item-ids&amp;gt;
  &amp;lt;metadata&amp;gt;
    &amp;lt;color&amp;gt;blue&amp;lt;/color&amp;gt;
    &amp;lt;options type=&quot;array&quot;&amp;gt;
      &amp;lt;option type=&quot;symbol&quot;&amp;gt;blue&amp;lt;/option&amp;gt;
      &amp;lt;option type=&quot;symbol&quot;&amp;gt;red&amp;lt;/option&amp;gt;
    &amp;lt;/options&amp;gt;
  &amp;lt;/metadata&amp;gt;
&amp;lt;/report&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've introduced new tests to test these new cases. The patch
maintains backwards compatibility with all previous tests. The one
exception is a newer ActiveModel test where a method returns a hash
and it was expecting to be converted to YAML. ActiveRecord
serialized_attributes are still converted to YAML, but since
ActiveModel doesn't know about serialized_attributes, the hash
returned there is converted into nested XML.&lt;/p&gt;
&lt;p&gt;Any feedback or questions are welcome. Hopefully this patch
makes to_xml behave more as expected with other data types, and
also makes it more flexible to customize how objects respond to XML
encoding. The patch provided is against the latest master, but if
this patch seems desirable, is there any chance of getting these
changes implemented on 2.3 stable? I started out patching
2-3-stable, so I have most of this working there, but since this
patch grew a bit more than I expected, I thought I'd get feedback
first. But I can provide a 2.3 patch if it's wanted.&lt;/p&gt;
&lt;p&gt;Here are a couple of older bug reports documenting some of these
same issues: &lt;a href=&quot;/projects/8994/tickets/458&quot; title=
&quot;Ticket #458&quot;&gt;#458&lt;/a&gt; and &lt;a href=&quot;/projects/8994/tickets/1576&quot;
title=&quot;Ticket #1576&quot;&gt;#1576&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-22T05:40:33+01:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2009-09-22T05:40:43+01:00</updated-at>
      <user-id type="integer">53345</user-id>
      <version type="integer">1</version>
      <user-name>Nick M</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-25T11:55:59+01:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord bug patch serialization to_xml xml
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug bugmash patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2009-09-25T12:47:36+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">2</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1. Agree with the fixes, but the patch doesn't apply neither on master nor on 2-3-stable.</body>
      <body-html>&lt;div&gt;&lt;ol&gt;
&lt;li&gt;Agree with the fixes, but the patch doesn't apply neither on
master nor on 2-3-stable.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T00:40:08+01:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug bugmash patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2009-09-28T01:06:35+01:00</updated-at>
      <user-id type="integer">40414</user-id>
      <version type="integer">3</version>
      <user-name>Elomar Fran&#231;a</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I think this updated patch should apply to master again. Let me know if there are still problems with it.

I can bring this same functionality back to 2-3-stable, but things are organized a bit differently there, so I'd just have to spend a bit of time sorting all that out and creating a separate patch. I think it would be great if these changes could be applied to 2.3 (they should be completely backwards compatible with what used to work correctly), but I wanted to see if others agreed before producing another patch for 2.3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think this updated patch should apply to master again. Let me
know if there are still problems with it.&lt;/p&gt;
&lt;p&gt;I can bring this same functionality back to 2-3-stable, but
things are organized a bit differently there, so I'd just have to
spend a bit of time sorting all that out and creating a separate
patch. I think it would be great if these changes could be applied
to 2.3 (they should be completely backwards compatible with what
used to work correctly), but I wanted to see if others agreed
before producing another patch for 2.3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-28T01:54:02+01:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug bugmash patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2009-09-28T01:54:07+01:00</updated-at>
      <user-id type="integer">53345</user-id>
      <version type="integer">4</version>
      <user-name>Nick M</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/13645)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/13645&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-12T12:46:18+00:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord bug bugmash patch serialization to_xml xml
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2010-02-12T12:46:18+00:00</updated-at>
      <user-id type="integer">65556</user-id>
      <version type="integer">5</version>
      <user-name>Rizwan Reza</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>We are building a json/xml api and the xml output is broken due to this bug, we would love to see this pushed to both master and 2.3 branch. JSON doesn't have those issues due to the as_json propagation, so implementing `as_xml` method seems like the right thing to do.

ps: the patch has become outdated</body>
      <body-html>&lt;div&gt;&lt;p&gt;We are building a json/xml api and the xml output is broken due
to this bug, we would love to see this pushed to both master and
2.3 branch. JSON doesn't have those issues due to the as_json
propagation, so implementing &lt;code&gt;as_xml&lt;/code&gt; method seems like
the right thing to do.&lt;/p&gt;
&lt;p&gt;ps: the patch has become outdated&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-14T13:50:15+01:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2010-05-14T13:50:16+01:00</updated-at>
      <user-id type="integer">17859</user-id>
      <version type="integer">6</version>
      <user-name>Christos Trochalakis</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Christos Trochalakis Can you please elaborate what part of xml output you don't like in the give below scenario.

@@@ ruby
ActiveRecord::Schema.define(:version =&gt; 20100514192542) do

  create_table &quot;reports&quot;, :force =&gt; true do |t|
    t.string   &quot;name&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

end
class Report &lt; ActiveRecord::Base
  def item_ids
    [8,9]
  end
  def metadata
    {:color =&gt; 'blue', :options =&gt; [:blue, :red]}
  end

  def self.lab
    Report.first.to_xml(:methods =&gt; [:item_ids, :metadata])
  end
end
#rails -v : Rails 3.0.0.beta3
#ruby -v : ruby 1.8.7 (2010-01-10 patchlevel 249) [i686-darwin10.3.0]
@@@

Report.lab comes out to be

 
  &lt;report&gt;
    &lt;name&gt;GDP growth&lt;/name&gt;
    &lt;created-at type=&quot;datetime&quot;&gt;2010-05-14T19:29:20Z&lt;/created-at&gt;
    &lt;updated-at type=&quot;datetime&quot;&gt;2010-05-14T19:29:20Z&lt;/updated-at&gt;
    &lt;id type=&quot;integer&quot;&gt;1&lt;/id&gt;
    &lt;item-ids type=&quot;array&quot;&gt;
      &lt;item-id type=&quot;integer&quot;&gt;8&lt;/item-id&gt;
      &lt;item-id type=&quot;integer&quot;&gt;9&lt;/item-id&gt;
    &lt;/item-ids&gt;
    &lt;metadata&gt;
      &lt;color&gt;blue&lt;/color&gt;
      &lt;options type=&quot;array&quot;&gt;
        &lt;option type=&quot;symbol&quot;&gt;blue&lt;/option&gt;
        &lt;option type=&quot;symbol&quot;&gt;red&lt;/option&gt;
      &lt;/options&gt;
    &lt;/metadata&gt;
  &lt;/report&gt;


The xml looks good to me.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Christos Trochalakis Can you please elaborate what part of xml
output you don't like in the give below scenario.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ActiveRecord::Schema.define(:version =&amp;gt; 20100514192542) do

  create_table &quot;reports&quot;, :force =&amp;gt; true do |t|
    t.string   &quot;name&quot;
    t.datetime &quot;created_at&quot;
    t.datetime &quot;updated_at&quot;
  end

end
class Report &amp;lt; ActiveRecord::Base
  def item_ids
    [8,9]
  end
  def metadata
    {:color =&amp;gt; 'blue', :options =&amp;gt; [:blue, :red]}
  end

  def self.lab
    Report.first.to_xml(:methods =&amp;gt; [:item_ids, :metadata])
  end
end
#rails -v : Rails 3.0.0.beta3
#ruby -v : ruby 1.8.7 (2010-01-10 patchlevel 249) [i686-darwin10.3.0]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Report.lab comes out to be&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;lt;name&amp;gt;GDP growth&amp;lt;/name&amp;gt;
&amp;lt;created-at type=&quot;datetime&quot;&amp;gt;2010-05-14T19:29:20Z&amp;lt;/created-at&amp;gt;
&amp;lt;updated-at type=&quot;datetime&quot;&amp;gt;2010-05-14T19:29:20Z&amp;lt;/updated-at&amp;gt;
&amp;lt;id type=&quot;integer&quot;&amp;gt;1&amp;lt;/id&amp;gt;
&amp;lt;item-ids type=&quot;array&quot;&amp;gt;
  &amp;lt;item-id type=&quot;integer&quot;&amp;gt;8&amp;lt;/item-id&amp;gt;
  &amp;lt;item-id type=&quot;integer&quot;&amp;gt;9&amp;lt;/item-id&amp;gt;
&amp;lt;/item-ids&amp;gt;
&amp;lt;metadata&amp;gt;
  &amp;lt;color&amp;gt;blue&amp;lt;/color&amp;gt;
  &amp;lt;options type=&quot;array&quot;&amp;gt;
    &amp;lt;option type=&quot;symbol&quot;&amp;gt;blue&amp;lt;/option&amp;gt;
    &amp;lt;option type=&quot;symbol&quot;&amp;gt;red&amp;lt;/option&amp;gt;
  &amp;lt;/options&amp;gt;
&amp;lt;/metadata&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The xml looks good to me.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-14T20:38:24+01:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord bug patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2010-05-14T20:38:27+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">7</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:39:01+00:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">148775</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord bug patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2011-02-02T17:27:52+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:39:04+00:00</created-at>
      <creator-id type="integer">53345</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3243</number>
      <permalink>patch-to_xml-doesnt-support-nested-structures-and-other-inconstancies</permalink>
      <priority type="integer">148775</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord bug patch serialization to_xml xml</tag>
      <title>[PATCH] to_xml doesn't support nested structures and other inconstancies </title>
      <updated-at type="datetime">2011-02-02T17:28:35+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Nick M</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3243</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ad4ab2de9350f7f8ae99c5db5df73da4d58b8111</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-22T05:40:35+01:00</created-at>
      <filename>to_xml_refactor.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">274795</id>
      <size type="integer">66519</size>
      <uploader-id type="integer">53345</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/274795/to_xml_refactor.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>5e5a7f83cf124562a9c705b1752a9a0b13532c09</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-09-28T01:54:02+01:00</created-at>
      <filename>to_xml_refactor2.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">279763</id>
      <size type="integer">66475</size>
      <uploader-id type="integer">53345</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/279763/to_xml_refactor2.diff</url>
    </attachment>
  </attachments>
</ticket>
