<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-22T12:32:15+01:00</created-at>
  <creator-id type="integer">750</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">2543</number>
  <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
  <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
  <updated-at type="datetime">2010-07-08T19:03:59+01:00</updated-at>
  <user-id type="integer">64168</user-id>
  <version type="integer">12</version>
  <user-name>Robin Salkeld</user-name>
  <creator-name>Peter Marklund</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
  <priority-name>Low</priority-name>
  <original-body>Currently ActiveRecord::Base#exists? does not support scopes with the :include option and it breaks for example if you have a scope with :include and an :order that depends on that :include. This patch solves this problems by making exists? reuse working code that we already have in the find* family of methods (find, find_every, find_initial etc.).</original-body>
  <latest-body>Currently ActiveRecord::Base#exists? does not support scopes with the :include option and it breaks for example if you have a scope with :include and an :order that depends on that :include. This patch solves this problems by making exists? reuse working code that we already have in the find* family of methods (find, find_every, find_initial etc.).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Currently ActiveRecord::Base#exists? does not support scopes
with the :include option and it breaks for example if you have a
scope with :include and an :order that depends on that :include.
This patch solves this problems by making exists? reuse working
code that we already have in the find* family of methods (find,
find_every, find_initial etc.).&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Currently ActiveRecord::Base.exists? does not support scopes with the :include option and it breaks for example if you have a scope with :include and an :order that depends on that :include. This patch solves this problem by making exists? reuse working code that we already have in the find family of methods (find, find_every, find_initial etc.).

This bug is discussed here:

http://groups.google.com/group/rubyonrails-core/browse_thread/thread/d91a48a09be7e2e8?hl=en</body>
      <body-html>&lt;div&gt;&lt;p&gt;Currently ActiveRecord::Base.exists? does not support scopes
with the :include option and it breaks for example if you have a
scope with :include and an :order that depends on that :include.
This patch solves this problem by making exists? reuse working code
that we already have in the find family of methods (find,
find_every, find_initial etc.).&lt;/p&gt;
&lt;p&gt;This bug is discussed here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://groups.google.com/group/rubyonrails-core/browse_thread/thread/d91a48a09be7e2e8?hl=en&quot;&gt;
http://groups.google.com/group/r...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-22T12:32:15+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-04-24T10:37:34+01:00</updated-at>
      <user-id type="integer">750</user-id>
      <version type="integer">1</version>
      <user-name>Peter Marklund</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-22T12:34:03+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2-3-stable 2.3.2 activerecord exists scope
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-04-22T12:34:06+01:00</updated-at>
      <user-id type="integer">750</user-id>
      <version type="integer">2</version>
      <user-name>Peter Marklund</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>As discussed on the mailing list, this misbehaviour can cause problems with association_include.

Shouldn't it be possible to use count == 1 instead of find_initial?  That'd at least avoid instantiating an object and firing the relevant callbacks?</body>
      <body-html>&lt;div&gt;&lt;p&gt;As discussed on the mailing list, this misbehaviour can cause
problems with association_include.&lt;/p&gt;
&lt;p&gt;Shouldn't it be possible to use count == 1 instead of
find_initial? That'd at least avoid instantiating an object and
firing the relevant callbacks?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-27T09:29:02+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-04-27T09:29:06+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">3</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks Michael! I think the count approach sounds like a really good. I uploaded a new patch.

Cheers

Peter</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks Michael! I think the count approach sounds like a really
good. I uploaded a new patch.&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;p&gt;Peter&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-27T10:17:03+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-04-27T10:17:08+01:00</updated-at>
      <user-id type="integer">750</user-id>
      <version type="integer">4</version>
      <user-name>Peter Marklund</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Back when the current implementation of exists? came into existance using count == 1 was discussed. Using count has performance implications since it means the database has to find all rows (and count them) rather than just a row</body>
      <body-html>&lt;div&gt;&lt;p&gt;Back when the current implementation of exists? came into
existance using count == 1 was discussed. Using count has
performance implications since it means the database has to find
all rows (and count them) rather than just a row&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-10T16:26:17+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-05-10T16:26:19+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">5</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Frederick,
thanks for the input on performance implications of count. I just wanted to give a recap of the options discussed here. We have:

1) The current implementation of exists? that does a connection.select_all table_name.primary_key with :limit =&gt; 1 within scopes where eager loaded tables are referenced.

2) The current patch that uses count(table_name.primary_key) and potentially performs worse.

3) My original patch that does a find_initial table_name.primary_key. The downside here is that we instantiate AR objects unnecessarily. The upside is that scopes with references to eager loaded tables work, thanks to this piece of logic in find_every:

          if include_associations.any? &amp;&amp; references_eager_loaded_tables?(options)
            records = find_with_associations(options)
          else
            records = find_by_sql(construct_finder_sql(options))
            if include_associations.any?
              preload_associations(records, include_associations)
            end
          end

Would it make sense to make it possible to do a find_every(:instantiate =&gt; false) that skips instantiation? Or would that maybe just be conceptually odd and convolute the code? If we had such an option then exists? using find_initial would be identical to the current implementation (connection.select_all) except when eager loaded tables are referenced in which case those would be included properly and the query wouldn't break.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Frederick, thanks for the input on performance implications of
count. I just wanted to give a recap of the options discussed here.
We have:&lt;/p&gt;
&lt;p&gt;1) The current implementation of exists? that does a
connection.select_all table_name.primary_key with :limit =&amp;gt; 1
within scopes where eager loaded tables are referenced.&lt;/p&gt;
&lt;p&gt;2) The current patch that uses count(table_name.primary_key) and
potentially performs worse.&lt;/p&gt;
&lt;p&gt;3) My original patch that does a find_initial
table_name.primary_key. The downside here is that we instantiate AR
objects unnecessarily. The upside is that scopes with references to
eager loaded tables work, thanks to this piece of logic in
find_every:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;      if include_associations.any? &amp;amp;&amp;amp; references_eager_loaded_tables?(options)
        records = find_with_associations(options)
      else
        records = find_by_sql(construct_finder_sql(options))
        if include_associations.any?
          preload_associations(records, include_associations)
        end
      end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Would it make sense to make it possible to do a
find_every(:instantiate =&amp;gt; false) that skips instantiation? Or
would that maybe just be conceptually odd and convolute the code?
If we had such an option then exists? using find_initial would be
identical to the current implementation (connection.select_all)
except when eager loaded tables are referenced in which case those
would be included properly and the query wouldn't break.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-10T21:41:31+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-05-10T21:41:34+01:00</updated-at>
      <user-id type="integer">750</user-id>
      <version type="integer">6</version>
      <user-name>Peter Marklund</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just to clarify, the implementation of exists? from my original patch looked like this:

    def exists?(id_or_conditions = {})
      find_initial(
        :select =&gt; &quot;#{quoted_table_name}.#{primary_key}&quot;,
        :conditions =&gt; expand_id_conditions(id_or_conditions)) ? true : false
    end

So my idea was to add an :instantiate =&gt; false to the find_initial call.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just to clarify, the implementation of exists? from my original
patch looked like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def exists?(id_or_conditions = {})
  find_initial(
    :select =&amp;gt; &quot;#{quoted_table_name}.#{primary_key}&quot;,
    :conditions =&amp;gt; expand_id_conditions(id_or_conditions)) ? true : false
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So my idea was to add an :instantiate =&amp;gt; false to the
find_initial call.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-10T21:44:55+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-05-10T21:44:58+01:00</updated-at>
      <user-id type="integer">750</user-id>
      <version type="integer">7</version>
      <user-name>Peter Marklund</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Don't worry about skipping instantiation, that's just me being
paranoid about performance.

Upload a version with find_initial (the original patch is gone?) and
I'm happy to apply it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Don't worry about skipping instantiation, that's just me
being&lt;br&gt;
paranoid about performance.&lt;/p&gt;
&lt;p&gt;Upload a version with find_initial (the original patch is gone?)
and&lt;br&gt;
I'm happy to apply it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-14T07:11:42+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-05-14T07:11:42+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">8</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hi Michael!
I agree with you that the find_initial approach seems like the best at this point. I've attached a patch file.

Thanks!

Peter</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Michael!&lt;br&gt;
I agree with you that the find_initial approach seems like the best
at this point. I've attached a patch file.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
&lt;p&gt;Peter&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-14T08:35:42+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-05-14T08:35:44+01:00</updated-at>
      <user-id type="integer">750</user-id>
      <version type="integer">9</version>
      <user-name>Peter Marklund</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [afcbdfc15f919a470e4cfca97fb0084eebd2ab1f]) Changed ActiveRecord::Base#exists? to invoke find_initial so that it is compatible with, and doesn't lose, :include scopes (references to eager loaded tables)

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#2543 state:committed]
http://github.com/rails/rails/commit/afcbdfc15f919a470e4cfca97fb0084eebd2ab1f</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/afcbdfc15f919a470e4cfca97fb0084eebd2ab1f&quot;
title=
&quot;Changeset [afcbdfc15f919a470e4cfca97fb0084eebd2ab1f]&quot;&gt;[afcbdfc15f919a470e4cfca97fb0084eebd2ab1f]&lt;/a&gt;)
Changed ActiveRecord::Base#exists? to invoke find_initial so that
it is compatible with, and doesn't lose, :include scopes
(references to eager loaded tables)&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski &lt;a href=
&quot;mailto:michael@koziarski.com&quot;&gt;michael@koziarski.com&lt;/a&gt;&lt;br&gt;
[&lt;a href=&quot;/projects/8994/tickets/2543&quot; title=
&quot;Ticket #2543&quot;&gt;#2543&lt;/a&gt; state:committed] &lt;a href=
&quot;http://github.com/rails/rails/commit/afcbdfc15f919a470e4cfca97fb0084eebd2ab1f&quot;&gt;
http://github.com/rails/rails/commit/afcbdfc15f919a470e4cfca97fb008...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-14T09:42:36+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-05-14T09:42:36+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">10</version>
      <user-name>Repository</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [0380e9ca5fa872e56d0920e6255a2f20b6e01030]) Changed ActiveRecord::Base#exists? to invoke find_initial so that it is compatible with, and doesn't lose, :include scopes (references to eager loaded tables)

Signed-off-by: Michael Koziarski &lt;michael@koziarski.com&gt;
[#2543 state:committed]
http://github.com/rails/rails/commit/0380e9ca5fa872e56d0920e6255a2f20b6e01030</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/0380e9ca5fa872e56d0920e6255a2f20b6e01030&quot;
title=
&quot;Changeset [0380e9ca5fa872e56d0920e6255a2f20b6e01030]&quot;&gt;[0380e9ca5fa872e56d0920e6255a2f20b6e01030]&lt;/a&gt;)
Changed ActiveRecord::Base#exists? to invoke find_initial so that
it is compatible with, and doesn't lose, :include scopes
(references to eager loaded tables)&lt;/p&gt;
&lt;p&gt;Signed-off-by: Michael Koziarski
&lt;a&gt;michael@koziarski.com&lt;/a&gt;&lt;br&gt;
[&lt;a href=&quot;/projects/8994/tickets/2543&quot; title=
&quot;Ticket #2543&quot;&gt;#2543&lt;/a&gt; state:committed] &lt;a href=
&quot;http://github.com/rails/rails/commit/0380e9ca5fa872e56d0920e6255a2f20b6e01030&quot;&gt;
http://github.com/rails/rails/commit/0380e9ca5fa872e56d0920e6255a2f...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-14T09:42:36+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2009-05-14T09:42:37+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">11</version>
      <user-name>Repository</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Hi all,

I know this is an old discussion, but I just hit this change when upgrading from 2.3.5 to 2.3.8 and it's caused me a bit of trouble. The issue is the fact that the find_initial call only selects the primary key. This means we now have classes instantiated without any of their expected attributes, and in some cases this can lead to &quot;attribute missing&quot; errors.

My particular experience with this was due to defining the eql? and hash methods on an ActiveRecord class to use one of the attributes, and at some point during the find flow it called uniq on an Array of them.

My suggestion would be to either remove the :select option (possibly a performance issue, but doesn't seem that bad to load extra columns) or perhaps refactor things so that exists? and find_initial can call a common method to build up the needed SQL.

Thanks,
Robin</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;I know this is an old discussion, but I just hit this change
when upgrading from 2.3.5 to 2.3.8 and it's caused me a bit of
trouble. The issue is the fact that the find_initial call only
selects the primary key. This means we now have classes
instantiated without any of their expected attributes, and in some
cases this can lead to &quot;attribute missing&quot; errors.&lt;/p&gt;
&lt;p&gt;My particular experience with this was due to defining the eql?
and hash methods on an ActiveRecord class to use one of the
attributes, and at some point during the find flow it called uniq
on an Array of them.&lt;/p&gt;
&lt;p&gt;My suggestion would be to either remove the :select option
(possibly a performance issue, but doesn't seem that bad to load
extra columns) or perhaps refactor things so that exists? and
find_initial can call a common method to build up the needed
SQL.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Robin&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-08T19:03:56+01:00</created-at>
      <creator-id type="integer">750</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2543</number>
      <permalink>make-activerecordbaseexists-invoke-find_initial-to-support-include-scopes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>2-3-stable 2.3.2 activerecord exists patch scope</tag>
      <title>Make ActiveRecord::Base.exists? invoke find_initial to support :include scopes</title>
      <updated-at type="datetime">2010-07-08T19:03:59+01:00</updated-at>
      <user-id type="integer">64168</user-id>
      <version type="integer">12</version>
      <user-name>Robin Salkeld</user-name>
      <creator-name>Peter Marklund</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2543</url>
      <priority-name>Low</priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>964b5b30eb9a90c4ea6808686e9ebec99c4fd18f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-27T10:17:03+01:00</created-at>
      <filename>exists_with_include.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">115490</id>
      <size type="integer">2035</size>
      <uploader-id type="integer">750</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/115490/exists_with_include.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>6290c701d389d89af9d08189970d66f8763d36d1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-05-14T08:35:42+01:00</created-at>
      <filename>exists-with-include.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">122409</id>
      <size type="integer">2168</size>
      <uploader-id type="integer">750</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/122409/exists-with-include.diff</url>
    </attachment>
  </attachments>
</ticket>
