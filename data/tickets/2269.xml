<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-17T13:40:02+00:00</created-at>
  <creator-id type="integer">39293</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2269</number>
  <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
  <priority type="integer">1447</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.3.2 enumerable sum</tag>
  <title>Enumerable#sum not called on some association collections</title>
  <updated-at type="datetime">2009-08-09T23:59:52+01:00</updated-at>
  <user-id type="integer">19965</user-id>
  <version type="integer">11</version>
  <user-name>Jos&#233; Valim</user-name>
  <creator-name>Chris Schumann</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>In Rails 2.3.2, Enumerable#sum is not always called on arrays that are association collections. If you have a simple parent-child relationship, the code parent.children.sum calls the association collection sum, but if you generate the collection with find, invoking its sum method calls Enumerable#sum.

There's a bit of code - patience is appreciated.

@@@
# With Rails 2.3.2
# Commands to re-create the issue:
$ rails sum
$ cd sum
sum $ script/generate model parent
sum $ script/generate model child parent_id:integer

# app/models/child.rb:
class Child &lt; ActiveRecord::Base
  belongs_to :parent
end

# app/models/parent.rb:
class Parent &lt; ActiveRecord::Base
  has_many :children
end

sum $ rake db:migrate
sum $ script/console

&gt;&gt; p=Parent.new
=&gt; #&lt;Parent id: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; p.save
=&gt; true
&gt;&gt; c=Child.new
=&gt; #&lt;Child id: nil, parent_id: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; c.parent=p
=&gt; #&lt;Parent id: 1, created_at: &quot;2009-03-17 01:57:30&quot;, updated_at: &quot;2009-03-17 01:57:30&quot;&gt;
&gt;&gt; c
=&gt; #&lt;Child id: nil, parent_id: 1, created_at: nil, updated_at: nil&gt;
&gt;&gt; c.save
=&gt; true

# Now the fun part. Find all children with find.
&gt;&gt; cs=Child.find(:all, :conditions =&gt; 'parent_id = 1')
=&gt; [#&lt;Child id: 1, parent_id: 1, created_at: &quot;2009-03-17 01:57:54&quot;, updated_at: &quot;2009-03-17 01:57:54&quot;&gt;]
# Compute sum of id's
&gt;&gt; cs.sum(&amp;:id)
=&gt; 1
# Now collect them through the association
&gt;&gt; ds=Parent.find(1).children
=&gt; [#&lt;Child id: 1, parent_id: 1, created_at: &quot;2009-03-17 01:57:54&quot;, updated_at: &quot;2009-03-17 01:57:54&quot;&gt;]
# Try to sum the id's
&gt;&gt; ds.sum(&amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
# Complete error copied below

# Try to make it call the desired method (Enumerable#sum):
&gt;&gt; ds.sum(0,&amp;:id)
=&gt; &quot;0&quot;
# This does it
&gt;&gt; ds.to_a.sum(&amp;:id)
=&gt; 1

# The two arrays appear to be equivalent
&gt;&gt; cs.class
=&gt; Array
&gt;&gt; ds.class
=&gt; Array
&gt;&gt; cs.size
=&gt; 1
&gt;&gt; ds.size
=&gt; 1
&gt;&gt; cs[0].class
=&gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&gt;&gt; ds[0].class
=&gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&gt;&gt; cs==ds
=&gt; true
&gt;&gt; cs===ds
=&gt; true

# Complete error output
&gt;&gt; ds.sum(&amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `calculate'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:2148:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:371:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:155:in `sum'
  from (irb):4
  from :0</original-body>
  <latest-body>In Rails 2.3.2, Enumerable#sum is not always called on arrays that are association collections. If you have a simple parent-child relationship, the code parent.children.sum calls the association collection sum, but if you generate the collection with find, invoking its sum method calls Enumerable#sum.

There's a bit of code - patience is appreciated.

@@@
# With Rails 2.3.2
# Commands to re-create the issue:
$ rails sum
$ cd sum
sum $ script/generate model parent
sum $ script/generate model child parent_id:integer

# app/models/child.rb:
class Child &lt; ActiveRecord::Base
  belongs_to :parent
end

# app/models/parent.rb:
class Parent &lt; ActiveRecord::Base
  has_many :children
end

sum $ rake db:migrate
sum $ script/console

&gt;&gt; p=Parent.new
=&gt; #&lt;Parent id: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; p.save
=&gt; true
&gt;&gt; c=Child.new
=&gt; #&lt;Child id: nil, parent_id: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; c.parent=p
=&gt; #&lt;Parent id: 1, created_at: &quot;2009-03-17 01:57:30&quot;, updated_at: &quot;2009-03-17 01:57:30&quot;&gt;
&gt;&gt; c
=&gt; #&lt;Child id: nil, parent_id: 1, created_at: nil, updated_at: nil&gt;
&gt;&gt; c.save
=&gt; true

# Now the fun part. Find all children with find.
&gt;&gt; cs=Child.find(:all, :conditions =&gt; 'parent_id = 1')
=&gt; [#&lt;Child id: 1, parent_id: 1, created_at: &quot;2009-03-17 01:57:54&quot;, updated_at: &quot;2009-03-17 01:57:54&quot;&gt;]
# Compute sum of id's
&gt;&gt; cs.sum(&amp;:id)
=&gt; 1
# Now collect them through the association
&gt;&gt; ds=Parent.find(1).children
=&gt; [#&lt;Child id: 1, parent_id: 1, created_at: &quot;2009-03-17 01:57:54&quot;, updated_at: &quot;2009-03-17 01:57:54&quot;&gt;]
# Try to sum the id's
&gt;&gt; ds.sum(&amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
# Complete error copied below

# Try to make it call the desired method (Enumerable#sum):
&gt;&gt; ds.sum(0,&amp;:id)
=&gt; &quot;0&quot;
# This does it
&gt;&gt; ds.to_a.sum(&amp;:id)
=&gt; 1

# The two arrays appear to be equivalent
&gt;&gt; cs.class
=&gt; Array
&gt;&gt; ds.class
=&gt; Array
&gt;&gt; cs.size
=&gt; 1
&gt;&gt; ds.size
=&gt; 1
&gt;&gt; cs[0].class
=&gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&gt;&gt; ds[0].class
=&gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&gt;&gt; cs==ds
=&gt; true
&gt;&gt; cs===ds
=&gt; true

# Complete error output
&gt;&gt; ds.sum(&amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `calculate'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:2148:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:371:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:155:in `sum'
  from (irb):4
  from :0</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In Rails 2.3.2, Enumerable#sum is not always called on arrays
that are association collections. If you have a simple parent-child
relationship, the code parent.children.sum calls the association
collection sum, but if you generate the collection with find,
invoking its sum method calls Enumerable#sum.&lt;/p&gt;
&lt;p&gt;There's a bit of code - patience is appreciated.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
# With Rails 2.3.2
# Commands to re-create the issue:
$ rails sum
$ cd sum
sum $ script/generate model parent
sum $ script/generate model child parent_id:integer

# app/models/child.rb:
class Child &amp;lt; ActiveRecord::Base
  belongs_to :parent
end

# app/models/parent.rb:
class Parent &amp;lt; ActiveRecord::Base
  has_many :children
end

sum $ rake db:migrate
sum $ script/console

&amp;gt;&amp;gt; p=Parent.new
=&amp;gt; #&amp;lt;Parent id: nil, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; p.save
=&amp;gt; true
&amp;gt;&amp;gt; c=Child.new
=&amp;gt; #&amp;lt;Child id: nil, parent_id: nil, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; c.parent=p
=&amp;gt; #&amp;lt;Parent id: 1, created_at: &amp;quot;2009-03-17 01:57:30&amp;quot;, updated_at: &amp;quot;2009-03-17 01:57:30&amp;quot;&amp;gt;
&amp;gt;&amp;gt; c
=&amp;gt; #&amp;lt;Child id: nil, parent_id: 1, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; c.save
=&amp;gt; true

# Now the fun part. Find all children with find.
&amp;gt;&amp;gt; cs=Child.find(:all, :conditions =&amp;gt; 'parent_id = 1')
=&amp;gt; [#&amp;lt;Child id: 1, parent_id: 1, created_at: &amp;quot;2009-03-17 01:57:54&amp;quot;, updated_at: &amp;quot;2009-03-17 01:57:54&amp;quot;&amp;gt;]
# Compute sum of id's
&amp;gt;&amp;gt; cs.sum(&amp;amp;:id)
=&amp;gt; 1
# Now collect them through the association
&amp;gt;&amp;gt; ds=Parent.find(1).children
=&amp;gt; [#&amp;lt;Child id: 1, parent_id: 1, created_at: &amp;quot;2009-03-17 01:57:54&amp;quot;, updated_at: &amp;quot;2009-03-17 01:57:54&amp;quot;&amp;gt;]
# Try to sum the id's
&amp;gt;&amp;gt; ds.sum(&amp;amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
# Complete error copied below

# Try to make it call the desired method (Enumerable#sum):
&amp;gt;&amp;gt; ds.sum(0,&amp;amp;:id)
=&amp;gt; &amp;quot;0&amp;quot;
# This does it
&amp;gt;&amp;gt; ds.to_a.sum(&amp;amp;:id)
=&amp;gt; 1

# The two arrays appear to be equivalent
&amp;gt;&amp;gt; cs.class
=&amp;gt; Array
&amp;gt;&amp;gt; ds.class
=&amp;gt; Array
&amp;gt;&amp;gt; cs.size
=&amp;gt; 1
&amp;gt;&amp;gt; ds.size
=&amp;gt; 1
&amp;gt;&amp;gt; cs[0].class
=&amp;gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&amp;gt;&amp;gt; ds[0].class
=&amp;gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&amp;gt;&amp;gt; cs==ds
=&amp;gt; true
&amp;gt;&amp;gt; cs===ds
=&amp;gt; true

# Complete error output
&amp;gt;&amp;gt; ds.sum(&amp;amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `calculate'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:2148:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:371:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:155:in `sum'
  from (irb):4
  from :0@@@
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In Rails 2.3.2, Enumerable#sum is not always called on arrays that are association collections. If you have a simple parent-child relationship, the code parent.children.sum calls the association collection sum, but if you generate the collection with find, invoking its sum method calls Enumerable#sum.

There's a bit of code - patience is appreciated.

@@@
# With Rails 2.3.2
# Commands to re-create the issue:
$ rails sum
$ cd sum
sum $ script/generate model parent
sum $ script/generate model child parent_id:integer

# app/models/child.rb:
class Child &lt; ActiveRecord::Base
  belongs_to :parent
end

# app/models/parent.rb:
class Parent &lt; ActiveRecord::Base
  has_many :children
end

sum $ rake db:migrate
sum $ script/console

&gt;&gt; p=Parent.new
=&gt; #&lt;Parent id: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; p.save
=&gt; true
&gt;&gt; c=Child.new
=&gt; #&lt;Child id: nil, parent_id: nil, created_at: nil, updated_at: nil&gt;
&gt;&gt; c.parent=p
=&gt; #&lt;Parent id: 1, created_at: &quot;2009-03-17 01:57:30&quot;, updated_at: &quot;2009-03-17 01:57:30&quot;&gt;
&gt;&gt; c
=&gt; #&lt;Child id: nil, parent_id: 1, created_at: nil, updated_at: nil&gt;
&gt;&gt; c.save
=&gt; true

# Now the fun part. Find all children with find.
&gt;&gt; cs=Child.find(:all, :conditions =&gt; 'parent_id = 1')
=&gt; [#&lt;Child id: 1, parent_id: 1, created_at: &quot;2009-03-17 01:57:54&quot;, updated_at: &quot;2009-03-17 01:57:54&quot;&gt;]
# Compute sum of id's
&gt;&gt; cs.sum(&amp;:id)
=&gt; 1
# Now collect them through the association
&gt;&gt; ds=Parent.find(1).children
=&gt; [#&lt;Child id: 1, parent_id: 1, created_at: &quot;2009-03-17 01:57:54&quot;, updated_at: &quot;2009-03-17 01:57:54&quot;&gt;]
# Try to sum the id's
&gt;&gt; ds.sum(&amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
# Complete error copied below

# Try to make it call the desired method (Enumerable#sum):
&gt;&gt; ds.sum(0,&amp;:id)
=&gt; &quot;0&quot;
# This does it
&gt;&gt; ds.to_a.sum(&amp;:id)
=&gt; 1

# The two arrays appear to be equivalent
&gt;&gt; cs.class
=&gt; Array
&gt;&gt; ds.class
=&gt; Array
&gt;&gt; cs.size
=&gt; 1
&gt;&gt; ds.size
=&gt; 1
&gt;&gt; cs[0].class
=&gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&gt;&gt; ds[0].class
=&gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&gt;&gt; cs==ds
=&gt; true
&gt;&gt; cs===ds
=&gt; true

# Complete error output
&gt;&gt; ds.sum(&amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `calculate'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:2148:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:371:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:155:in `sum'
  from (irb):4
  from :0</body>
      <body-html>&lt;div&gt;&lt;p&gt;In Rails 2.3.2, Enumerable#sum is not always called on arrays
that are association collections. If you have a simple parent-child
relationship, the code parent.children.sum calls the association
collection sum, but if you generate the collection with find,
invoking its sum method calls Enumerable#sum.&lt;/p&gt;
&lt;p&gt;There's a bit of code - patience is appreciated.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
# With Rails 2.3.2
# Commands to re-create the issue:
$ rails sum
$ cd sum
sum $ script/generate model parent
sum $ script/generate model child parent_id:integer

# app/models/child.rb:
class Child &amp;lt; ActiveRecord::Base
  belongs_to :parent
end

# app/models/parent.rb:
class Parent &amp;lt; ActiveRecord::Base
  has_many :children
end

sum $ rake db:migrate
sum $ script/console

&amp;gt;&amp;gt; p=Parent.new
=&amp;gt; #&amp;lt;Parent id: nil, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; p.save
=&amp;gt; true
&amp;gt;&amp;gt; c=Child.new
=&amp;gt; #&amp;lt;Child id: nil, parent_id: nil, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; c.parent=p
=&amp;gt; #&amp;lt;Parent id: 1, created_at: &amp;quot;2009-03-17 01:57:30&amp;quot;, updated_at: &amp;quot;2009-03-17 01:57:30&amp;quot;&amp;gt;
&amp;gt;&amp;gt; c
=&amp;gt; #&amp;lt;Child id: nil, parent_id: 1, created_at: nil, updated_at: nil&amp;gt;
&amp;gt;&amp;gt; c.save
=&amp;gt; true

# Now the fun part. Find all children with find.
&amp;gt;&amp;gt; cs=Child.find(:all, :conditions =&amp;gt; 'parent_id = 1')
=&amp;gt; [#&amp;lt;Child id: 1, parent_id: 1, created_at: &amp;quot;2009-03-17 01:57:54&amp;quot;, updated_at: &amp;quot;2009-03-17 01:57:54&amp;quot;&amp;gt;]
# Compute sum of id's
&amp;gt;&amp;gt; cs.sum(&amp;amp;:id)
=&amp;gt; 1
# Now collect them through the association
&amp;gt;&amp;gt; ds=Parent.find(1).children
=&amp;gt; [#&amp;lt;Child id: 1, parent_id: 1, created_at: &amp;quot;2009-03-17 01:57:54&amp;quot;, updated_at: &amp;quot;2009-03-17 01:57:54&amp;quot;&amp;gt;]
# Try to sum the id's
&amp;gt;&amp;gt; ds.sum(&amp;amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
# Complete error copied below

# Try to make it call the desired method (Enumerable#sum):
&amp;gt;&amp;gt; ds.sum(0,&amp;amp;:id)
=&amp;gt; &amp;quot;0&amp;quot;
# This does it
&amp;gt;&amp;gt; ds.to_a.sum(&amp;amp;:id)
=&amp;gt; 1

# The two arrays appear to be equivalent
&amp;gt;&amp;gt; cs.class
=&amp;gt; Array
&amp;gt;&amp;gt; ds.class
=&amp;gt; Array
&amp;gt;&amp;gt; cs.size
=&amp;gt; 1
&amp;gt;&amp;gt; ds.size
=&amp;gt; 1
&amp;gt;&amp;gt; cs[0].class
=&amp;gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&amp;gt;&amp;gt; ds[0].class
=&amp;gt; Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime)
&amp;gt;&amp;gt; cs==ds
=&amp;gt; true
&amp;gt;&amp;gt; cs===ds
=&amp;gt; true

# Complete error output
&amp;gt;&amp;gt; ds.sum(&amp;amp;:id)
ArgumentError: wrong number of arguments (1 for 2)
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `calculate'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:373:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/base.rb:2148:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `send'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_proxy.rb:206:in `with_scope'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:371:in `method_missing'
  from /usr/lib/ruby/gems/1.8/gems/activerecord-2.3.2/lib/active_record/associations/association_collection.rb:155:in `sum'
  from (irb):4
  from :0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T13:40:02+00:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-03-17T13:40:03+00:00</updated-at>
      <user-id type="integer">39293</user-id>
      <version type="integer">1</version>
      <user-name>Chris Schumann</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>A failing unit test:

@@@
# test/unit/child_test.rb
require 'test_helper'

class ChildTest &lt; ActiveSupport::TestCase
  test &quot;should sum ids&quot; do
    p = Parent.new
    p.children.build
    p.save
    # This one passes
    assert p.children.find(:all).sum(&amp;:id) &gt; 0
    # This one fails
    assert p.children.sum(&amp;:id) &gt; 0
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;A failing unit test:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
# test/unit/child_test.rb
require 'test_helper'

class ChildTest &amp;lt; ActiveSupport::TestCase
  test &amp;quot;should sum ids&amp;quot; do
    p = Parent.new
    p.children.build
    p.save
    # This one passes
    assert p.children.find(:all).sum(&amp;amp;:id) &amp;gt; 0
    # This one fails
    assert p.children.sum(&amp;amp;:id) &amp;gt; 0
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-17T15:24:37+00:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-03-17T15:24:42+00:00</updated-at>
      <user-id type="integer">39293</user-id>
      <version type="integer">2</version>
      <user-name>Chris Schumann</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is the expected current behaviour.  Calling some_has_many.sum calls the Calculations module sum, which passes the string argument you give it to the database - so you should use &quot;p.children.sum('id')&quot;.

A patch to support loading the target array and delegating the calculation when passing a block instead of a string (which is effectively what you're doing above) to the calculation method (sum etc.) would be welcome.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is the expected current behaviour. Calling
some_has_many.sum calls the Calculations module sum, which passes
the string argument you give it to the database - so you should use
&quot;p.children.sum('id')&quot;.&lt;/p&gt;
&lt;p&gt;A patch to support loading the target array and delegating the
calculation when passing a block instead of a string (which is
effectively what you're doing above) to the calculation method (sum
etc.) would be welcome.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-05-06T04:15:10+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-05-06T04:15:12+01:00</updated-at>
      <user-id type="integer">10460</user-id>
      <version type="integer">3</version>
      <user-name>Will Bryant</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-06T14:25:49+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 enumerable sum
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 bugmash enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-06T14:25:55+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">4</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Will, I'm wondering if changing some_has_many.sum to load all records is too sugary. Case in point, I can look at this and think &quot;hey, this is obviously loading a bunch of records into memory&quot;:

person.children.all.sum(&amp;:id)

And that this is going to do some aggregate cleverness on the database and avoid huge loads:

Person.all(&amp;:id)

But the changing this to load all the records on the has_many muddies the waters:

person.children.sum(&amp;:id) 

Does this do something clever with aggregates or does it load a bunch of objects? Or am I missing something?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Will, I'm wondering if changing some_has_many.sum to load all
records is too sugary. Case in point, I can look at this and think
&quot;hey, this is obviously loading a bunch of records into
memory&quot;:&lt;/p&gt;
&lt;p&gt;person.children.all.sum(&amp;amp;:id)&lt;/p&gt;
&lt;p&gt;And that this is going to do some aggregate cleverness on the
database and avoid huge loads:&lt;/p&gt;
&lt;p&gt;Person.all(&amp;amp;:id)&lt;/p&gt;
&lt;p&gt;But the changing this to load all the records on the has_many
muddies the waters:&lt;/p&gt;
&lt;p&gt;person.children.sum(&amp;amp;:id)&lt;/p&gt;
&lt;p&gt;Does this do something clever with aggregates or does it load a
bunch of objects? Or am I missing something?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-08T17:01:18+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 bugmash enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-08T17:01:21+01:00</updated-at>
      <user-id type="integer">65600</user-id>
      <version type="integer">5</version>
      <user-name>Adam Keys</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>-1 - I disagree that this is a bug - 

this is by design to me - the finder should always return an array. conditions should be supplied in the sum call.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 - I disagree that this is a bug -&lt;/p&gt;
&lt;p&gt;this is by design to me - the finder should always return an
array. conditions should be supplied in the sum call.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-08T20:01:30+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 bugmash enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-08T20:01:36+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">6</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I agree - this is design, not a bug.  -1 for BugMash.

The requested syntactic sugar for has_many has two facets:
- it would cause 'huge loads' from the database if the 'many' are not loaded yet
- it would be more efficient if the data is loaded already :)

I favor implementation of the suggestion because the some_has_many should support the Enumerable interface.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree - this is design, not a bug. -1 for BugMash.&lt;/p&gt;
&lt;p&gt;The requested syntactic sugar for has_many has two facets:&lt;br&gt;
- it would cause 'huge loads' from the database if the 'many' are
not loaded yet - it would be more efficient if the data is loaded
already :)&lt;/p&gt;
&lt;p&gt;I favor implementation of the suggestion because the
some_has_many should support the Enumerable interface.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T15:10:39+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 bugmash enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-09T15:10:44+01:00</updated-at>
      <user-id type="integer">65618</user-id>
      <version type="integer">7</version>
      <user-name>dira</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>-1 here too, seem that it will require too much db attention to avoid huge loads when the association is not memo'd, chaining to #all seem to be the way i would go for.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 here too, seem that it will require too much db attention to
avoid huge loads when the association is not memo'd, chaining to
#all seem to be the way i would go for.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T15:37:19+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 bugmash enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-09T15:37:25+01:00</updated-at>
      <user-id type="integer">10379</user-id>
      <version type="integer">8</version>
      <user-name>Elad Meidar</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>-1 For me this is by design too.

I also disagree supporting the Enumerable interface, since they are different things. In Chris case, for example, the proper way to calculate the sum, would be:

@@@ ruby
@parent.children.sum('id')
@@@

If we allow people to do this:

@@@ ruby
@parent.children.sum(&amp;:id)
@@@

We are giving a shortcut to write non performant code. If you really want to do that, invoking to array looks like the way to go (and it also make obvious what is happening):

@@@ ruby
@parent.children.to_a.sum(&amp;:id)
@@@

Could be handy a documentation patch, to explain the differences between AssoicationProxy#sum and Array#sum.</body>
      <body-html>&lt;div&gt;&lt;p&gt;-1 For me this is by design too.&lt;/p&gt;
&lt;p&gt;I also disagree supporting the Enumerable interface, since they
are different things. In Chris case, for example, the proper way to
calculate the sum, would be:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@parent.children.sum('id')&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If we allow people to do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@parent.children.sum(&amp;amp;:id)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;We are giving a shortcut to write non performant code. If you
really want to do that, invoking to array looks like the way to go
(and it also make obvious what is happening):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;@parent.children.to_a.sum(&amp;amp;:id)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Could be handy a documentation patch, to explain the differences
between AssoicationProxy#sum and Array#sum.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-09T15:42:54+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.2 bugmash enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-09T15:42:58+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">9</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-09T23:58:57+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.2 bugmash enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-09T23:58:59+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">10</version>
      <user-name>Pratik</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-09T23:59:50+01:00</created-at>
      <creator-id type="integer">39293</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.3.2 bugmash enumerable sum
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2269</number>
      <permalink>enumerablesum-not-called-on-some-association-collections</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.2 enumerable sum</tag>
      <title>Enumerable#sum not called on some association collections</title>
      <updated-at type="datetime">2009-08-09T23:59:52+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">11</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Chris Schumann</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2269</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
