<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">8406</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-06-20T04:19:50+01:00</created-at>
  <creator-id type="integer">60464</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2821</number>
  <permalink>associations-do-not-autosave-when-a-child-is-modified-by-creating-a-grandchild-thru-nested-attributes</permalink>
  <priority type="integer">1917</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>hold</state>
  <tag>accepts_nested_attributes_for activerecord autosave</tag>
  <title>associations do not autosave when a child is modified by creating a &quot;grandchild&quot; thru nested attributes</title>
  <updated-at type="datetime">2009-07-12T13:20:48+01:00</updated-at>
  <user-id type="integer">8406</user-id>
  <version type="integer">5</version>
  <user-name>Eloy Duran</user-name>
  <creator-name>sarah (at ultrasaurus)</creator-name>
  <assigned-user-name>Eloy Duran</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2821</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>accepts_nested_attributes_for is fabulous, but we've run into an issue where an object in our hierarchy doesn't save when we think it should.

Here's a test case that fails when added to: autosave_association_test.rb in the rails 2-3-stable branch

Pirate (new object)
  |
  |-&gt; Ship (existing object identified by id)
       |
       |-&gt; ShipPart (new object)

The ShipPart fails to save when saving Pirate.  Both Pirate and Ship use accepts_nested_attributes to permit creation of the next lower child via attribute assignments.

Our speculation of the source of this bug is that autosave does not cascade past objects are are not new_record? or whose attributes are not changed?


class TestDeepAutosaveAssociation &lt; ActiveRecord::TestCase
  self.use_transactional_fixtures = false

  def setup
    Ship.accepts_nested_attributes_for :parts

    @ship = Ship.create!(:name =&gt; &quot;Bounty&quot;)
    assert_not_nil @ship
  end

  def test_that_new_grandchild_will_save_when_child_exists
    assert_difference &quot;Pirate.count&quot;, 1 do
      assert_difference &quot;ShipPart.count&quot;, 1 do
        assert_no_difference &quot;Ship.count&quot;  do
           @pirate = Pirate.create!(:catchphrase =&gt; &quot;Arhh!&quot;, 
                         :ship_attributes =&gt; { :id =&gt; @ship.id,
                                               :parts_attributes =&gt; [ {:name =&gt; &quot;plank&quot;} ] })
        end
      end
    end

  end


end</original-body>
  <latest-body>accepts_nested_attributes_for is fabulous, but we've run into an issue where an object in our hierarchy doesn't save when we think it should.

Here's a test case that fails when added to: autosave_association_test.rb in the rails 2-3-stable branch

Pirate (new object)
  |
  |-&gt; Ship (existing object identified by id)
       |
       |-&gt; ShipPart (new object)

The ShipPart fails to save when saving Pirate.  Both Pirate and Ship use accepts_nested_attributes to permit creation of the next lower child via attribute assignments.

Our speculation of the source of this bug is that autosave does not cascade past objects are are not new_record? or whose attributes are not changed?


class TestDeepAutosaveAssociation &lt; ActiveRecord::TestCase
  self.use_transactional_fixtures = false

  def setup
    Ship.accepts_nested_attributes_for :parts

    @ship = Ship.create!(:name =&gt; &quot;Bounty&quot;)
    assert_not_nil @ship
  end

  def test_that_new_grandchild_will_save_when_child_exists
    assert_difference &quot;Pirate.count&quot;, 1 do
      assert_difference &quot;ShipPart.count&quot;, 1 do
        assert_no_difference &quot;Ship.count&quot;  do
           @pirate = Pirate.create!(:catchphrase =&gt; &quot;Arhh!&quot;, 
                         :ship_attributes =&gt; { :id =&gt; @ship.id,
                                               :parts_attributes =&gt; [ {:name =&gt; &quot;plank&quot;} ] })
        end
      end
    end

  end


end</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;accepts_nested_attributes_for is fabulous, but we've run into an
issue where an object in our hierarchy doesn't save when we think
it should.&lt;/p&gt;
&lt;p&gt;Here's a test case that fails when added to:
autosave_association_test.rb in the rails 2-3-stable branch&lt;/p&gt;
&lt;p&gt;Pirate (new object) | |-&amp;gt; Ship (existing object identified by
id)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;   |
   |-&amp;gt; ShipPart (new object)
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The ShipPart fails to save when saving Pirate. Both Pirate and
Ship use accepts_nested_attributes to permit creation of the next
lower child via attribute assignments.&lt;/p&gt;
&lt;p&gt;Our speculation of the source of this bug is that autosave does
not cascade past objects are are not new_record? or whose
attributes are not changed?&lt;/p&gt;
&lt;p&gt;class TestDeepAutosaveAssociation &amp;lt; ActiveRecord::TestCase
self.use_transactional_fixtures = false&lt;/p&gt;
&lt;p&gt;def setup&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Ship.accepts_nested_attributes_for :parts

@ship = Ship.create!(:name =&amp;gt; &quot;Bounty&quot;)
assert_not_nil @ship
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;def test_that_new_grandchild_will_save_when_child_exists&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;assert_difference &quot;Pirate.count&quot;, 1 do
  assert_difference &quot;ShipPart.count&quot;, 1 do
    assert_no_difference &quot;Ship.count&quot;  do
       @pirate = Pirate.create!(:catchphrase =&amp;gt; &quot;Arhh!&quot;, 
                     :ship_attributes =&amp;gt; { :id =&amp;gt; @ship.id,
                                           :parts_attributes =&amp;gt; [ {:name =&amp;gt; &quot;plank&quot;} ] })
    end
  end
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;end&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>accepts_nested_attributes_for is fabulous, but we've run into an issue where an object in our hierarchy doesn't save when we think it should.

Here's a test case that fails when added to: autosave_association_test.rb in the rails 2-3-stable branch

    Pirate (new object)
      |
      |-&gt; Ship (existing object identified by id)
           |
           |-&gt; ShipPart (new object)

The ShipPart fails to save when saving Pirate.  Both Pirate and Ship use accepts_nested_attributes to permit creation of the next lower child via attribute assignments.

Our speculation of the source of this bug is that autosave does not cascade past objects are are not new_record? or whose attributes are not changed?


    class TestDeepAutosaveAssociation &lt; ActiveRecord::TestCase
        self.use_transactional_fixtures = false

        def setup
            Ship.accepts_nested_attributes_for :parts

            @ship = Ship.create!(:name =&gt; &quot;Bounty&quot;)
            assert_not_nil @ship
        end

        def test_that_new_grandchild_will_save_when_child_exists
          assert_difference &quot;Pirate.count&quot;, 1 do
            assert_difference &quot;ShipPart.count&quot;, 1 do
                assert_no_difference &quot;Ship.count&quot;  do
                @pirate = Pirate.create!(:catchphrase =&gt; &quot;Arhh!&quot;, 
                                :ship_attributes =&gt; { :id =&gt; @ship.id,
                                                    :parts_attributes =&gt; [ {:name =&gt; &quot;plank&quot;} ] })
                end
            end
          end

        end


    end</body>
      <body-html>&lt;div&gt;&lt;p&gt;accepts_nested_attributes_for is fabulous, but we've run into an
issue where an object in our hierarchy doesn't save when we think
it should.&lt;/p&gt;
&lt;p&gt;Here's a test case that fails when added to:
autosave_association_test.rb in the rails 2-3-stable branch&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Pirate (new object)
  |
  |-&amp;gt; Ship (existing object identified by id)
       |
       |-&amp;gt; ShipPart (new object)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The ShipPart fails to save when saving Pirate. Both Pirate and
Ship use accepts_nested_attributes to permit creation of the next
lower child via attribute assignments.&lt;/p&gt;
&lt;p&gt;Our speculation of the source of this bug is that autosave does
not cascade past objects are are not new_record? or whose
attributes are not changed?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class TestDeepAutosaveAssociation &amp;lt; ActiveRecord::TestCase
    self.use_transactional_fixtures = false

    def setup
        Ship.accepts_nested_attributes_for :parts

        @ship = Ship.create!(:name =&amp;gt; &quot;Bounty&quot;)
        assert_not_nil @ship
    end

    def test_that_new_grandchild_will_save_when_child_exists
      assert_difference &quot;Pirate.count&quot;, 1 do
        assert_difference &quot;ShipPart.count&quot;, 1 do
            assert_no_difference &quot;Ship.count&quot;  do
            @pirate = Pirate.create!(:catchphrase =&amp;gt; &quot;Arhh!&quot;, 
                            :ship_attributes =&amp;gt; { :id =&amp;gt; @ship.id,
                                                :parts_attributes =&amp;gt; [ {:name =&amp;gt; &quot;plank&quot;} ] })
            end
        end
      end

    end


end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-20T04:19:50+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2821</number>
      <permalink>associations-do-not-autosave-when-a-child-is-modified-by-creating-a-grandchild-thru-nested-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for activerecord autosave</tag>
      <title>associations do not autosave when a child is modified by creating a &quot;grandchild&quot; thru nested attributes</title>
      <updated-at type="datetime">2009-06-20T04:22:13+01:00</updated-at>
      <user-id type="integer">60464</user-id>
      <version type="integer">1</version>
      <user-name>sarah (at ultrasaurus)</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We've discovered that if this is done without nested attributes it works fine.  The following test passes:

    class TestDeepAutosaveAssociationRevised &lt; ActiveRecord::TestCase
        self.use_transactional_fixtures = false

        def setup
            Ship.accepts_nested_attributes_for :parts

            @ship = Ship.create!(:name =&gt; &quot;Bounty&quot;)
            assert_not_nil @ship
        end

        def test_that_new_grandchild_will_save_when_child_exists
          assert_difference &quot;Pirate.count&quot;, 1 do
            assert_difference &quot;ShipPart.count&quot;, 1 do
                assert_no_difference &quot;Ship.count&quot;  do
                    @pirate = Pirate.new(:catchphrase =&gt; &quot;Arhh!&quot;)
                    @pirate.ship = @ship
                    @ship.parts.build(:name =&gt; &quot;plank&quot;)
                    @pirate.save!
                end
            end
          end

        end


    end</body>
      <body-html>&lt;div&gt;&lt;p&gt;We've discovered that if this is done without nested attributes
it works fine. The following test passes:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class TestDeepAutosaveAssociationRevised &amp;lt; ActiveRecord::TestCase
    self.use_transactional_fixtures = false

    def setup
        Ship.accepts_nested_attributes_for :parts

        @ship = Ship.create!(:name =&amp;gt; &quot;Bounty&quot;)
        assert_not_nil @ship
    end

    def test_that_new_grandchild_will_save_when_child_exists
      assert_difference &quot;Pirate.count&quot;, 1 do
        assert_difference &quot;ShipPart.count&quot;, 1 do
            assert_no_difference &quot;Ship.count&quot;  do
                @pirate = Pirate.new(:catchphrase =&amp;gt; &quot;Arhh!&quot;)
                @pirate.ship = @ship
                @ship.parts.build(:name =&amp;gt; &quot;plank&quot;)
                @pirate.save!
            end
        end
      end

    end


end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-20T04:46:06+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2821</number>
      <permalink>associations-do-not-autosave-when-a-child-is-modified-by-creating-a-grandchild-thru-nested-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for activerecord autosave</tag>
      <title>associations do not autosave when a child is modified by creating a &quot;grandchild&quot; thru nested attributes</title>
      <updated-at type="datetime">2009-06-20T04:46:10+01:00</updated-at>
      <user-id type="integer">60464</user-id>
      <version type="integer">2</version>
      <user-name>sarah (at ultrasaurus)</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-20T12:19:03+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2821</number>
      <permalink>associations-do-not-autosave-when-a-child-is-modified-by-creating-a-grandchild-thru-nested-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for activerecord autosave</tag>
      <title>associations do not autosave when a child is modified by creating a &quot;grandchild&quot; thru nested attributes</title>
      <updated-at type="datetime">2009-06-20T12:19:08+01:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">3</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Eloy -- thanks for taking this on.  Now that I've looked at the code a little, I'm quite curious about this (aside from the practical need for a fix).  We looked into this last night but couldn't really understand the autosave mechanism.  In the second test which passes, how does Rails know that it needs to save the ship when @ship.changed? is false and only its association &quot;parts&quot; has changed?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Eloy -- thanks for taking this on. Now that I've looked at the
code a little, I'm quite curious about this (aside from the
practical need for a fix). We looked into this last night but
couldn't really understand the autosave mechanism. In the second
test which passes, how does Rails know that it needs to save the
ship when @ship.changed? is false and only its association &quot;parts&quot;
has changed?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-20T18:29:20+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2821</number>
      <permalink>associations-do-not-autosave-when-a-child-is-modified-by-creating-a-grandchild-thru-nested-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>accepts_nested_attributes_for activerecord autosave</tag>
      <title>associations do not autosave when a child is modified by creating a &quot;grandchild&quot; thru nested attributes</title>
      <updated-at type="datetime">2009-06-20T18:29:24+01:00</updated-at>
      <user-id type="integer">60464</user-id>
      <version type="integer">4</version>
      <user-name>sarah (at ultrasaurus)</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes you are quite right, this is the problem. I haven't worked out yet how I'm going to fix this. But after breaking my head over it for a few hours I came to the conclusion that I don't have the right idea atm. I'll be on vacation for the next 3 weeks, so I hope that will clear my thoughts and I can come up with the right one when I'm back.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes you are quite right, this is the problem. I haven't worked
out yet how I'm going to fix this. But after breaking my head over
it for a few hours I came to the conclusion that I don't have the
right idea atm. I'll be on vacation for the next 3 weeks, so I hope
that will clear my thoughts and I can come up with the right one
when I'm back.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-12T13:20:42+01:00</created-at>
      <creator-id type="integer">60464</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2821</number>
      <permalink>associations-do-not-autosave-when-a-child-is-modified-by-creating-a-grandchild-thru-nested-attributes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>hold</state>
      <tag>accepts_nested_attributes_for activerecord autosave</tag>
      <title>associations do not autosave when a child is modified by creating a &quot;grandchild&quot; thru nested attributes</title>
      <updated-at type="datetime">2009-07-12T13:20:48+01:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">5</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>sarah (at ultrasaurus)</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2821</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
