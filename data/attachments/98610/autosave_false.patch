diff --git a/activerecord/lib/active_record/autosave_association.rb b/activerecord/lib/active_record/autosave_association.rb
index 1c3d056..c3009e8 100644
--- a/activerecord/lib/active_record/autosave_association.rb
+++ b/activerecord/lib/active_record/autosave_association.rb
@@ -284,7 +284,7 @@ module ActiveRecord
           records.each do |record|
             if autosave && record.marked_for_destruction?
               record.destroy
-            elsif @new_record_before_save || record.new_record?
+            elsif autosave != false && (@new_record_before_save || record.new_record?)
               if autosave
                 association.send(:insert_record, record, false, false)
               else
@@ -313,7 +313,9 @@ module ActiveRecord
       if association = association_instance_get(reflection.name)
         if reflection.options[:autosave] && association.marked_for_destruction?
           association.destroy
-        elsif new_record? || association.new_record? || association[reflection.primary_key_name] != id || reflection.options[:autosave]
+        elsif reflection.options[:autosave] != false && 
+              (new_record? || association.new_record? || 
+               association[reflection.primary_key_name] != id || reflection.options[:autosave])
           association[reflection.primary_key_name] = id
           association.save(false)
         end
@@ -333,8 +335,10 @@ module ActiveRecord
         if reflection.options[:autosave] && association.marked_for_destruction?
           association.destroy
         else
-          association.save(false) if association.new_record? || reflection.options[:autosave]
-
+          if reflection.options[:autosave] != false && (association.new_record? || reflection.options[:autosave])
+            association.save(false)
+          end
+          
           if association.updated?
             self[reflection.primary_key_name] = association.id
             # TODO: Removing this code doesn't seem to matterâ€¦
diff --git a/activerecord/test/cases/autosave_association_test.rb b/activerecord/test/cases/autosave_association_test.rb
index b179bd8..2ed1dc9 100644
--- a/activerecord/test/cases/autosave_association_test.rb
+++ b/activerecord/test/cases/autosave_association_test.rb
@@ -863,4 +863,70 @@ class TestAutosaveAssociationOnAHasAndBelongsToManyAssociation < ActiveRecord::T
   end
 
   include AutosaveAssociationOnACollectionAssociationTests
-end
\ No newline at end of file
+end
+
+class TestDefaultAutosaveAssociationOnNewRecord < ActiveRecord::TestCase
+
+  def test_autosave_new_record_on_belongs_to_can_be_disabled_per_relationship
+    new_account = Account.new("credit_limit" => 1000)
+    new_firm = Firm.new("name" => "some firm")
+    
+    assert new_firm.new_record?
+    new_account.firm = new_firm
+    new_account.save!
+    
+    assert !new_firm.new_record?
+
+    new_account = Account.new("credit_limit" => 1000)
+    new_autosaved_firm = Firm.new("name" => "some firm")
+    
+    assert new_autosaved_firm.new_record?
+    new_account.unautosaved_firm = new_autosaved_firm
+    new_account.save!
+    
+    assert new_autosaved_firm.new_record?    
+  end
+
+  def test_autosave_new_record_on_has_one_can_be_disabled_per_relationship
+    firm = Firm.new("name" => "some firm")
+    account = Account.new("credit_limit" => 1000)
+        
+    assert account.new_record?
+    firm.account = account
+    firm.save!
+    
+    assert !account.new_record?
+    
+    firm = Firm.new("name" => "some firm")
+    account = Account.new("credit_limit" => 1000)
+    
+    firm.unautosaved_account = account
+    
+    assert account.new_record?
+    firm.unautosaved_account = account
+    firm.save!
+    
+    assert account.new_record?
+  end
+  
+  def test_autosave_new_record_on_has_many_can_be_disabled_per_relationship
+    firm = Firm.new("name" => "some firm")
+    account = Account.new("credit_limit" => 1000)
+    
+    assert account.new_record?
+    firm.accounts << account
+    
+    firm.save!
+    assert !account.new_record?
+
+    firm = Firm.new("name" => "some firm")
+    account = Account.new("credit_limit" => 1000)
+    
+    assert account.new_record?
+    firm.unautosaved_accounts << account
+    
+    firm.save!
+    assert account.new_record?    
+  end
+  
+end
diff --git a/activerecord/test/cases/reflection_test.rb b/activerecord/test/cases/reflection_test.rb
index db64bbb..5fd35b1 100644
--- a/activerecord/test/cases/reflection_test.rb
+++ b/activerecord/test/cases/reflection_test.rb
@@ -170,9 +170,9 @@ class ReflectionTest < ActiveRecord::TestCase
 
   def test_reflection_of_all_associations
     # FIXME these assertions bust a lot
-    assert_equal 28, Firm.reflect_on_all_associations.size
-    assert_equal 21, Firm.reflect_on_all_associations(:has_many).size
-    assert_equal 7, Firm.reflect_on_all_associations(:has_one).size
+    assert_equal 31, Firm.reflect_on_all_associations.size
+    assert_equal 23, Firm.reflect_on_all_associations(:has_many).size
+    assert_equal 8, Firm.reflect_on_all_associations(:has_one).size
     assert_equal 0, Firm.reflect_on_all_associations(:belongs_to).size
   end
 
diff --git a/activerecord/test/models/company.rb b/activerecord/test/models/company.rb
index 02a775f..831cfbe 100644
--- a/activerecord/test/models/company.rb
+++ b/activerecord/test/models/company.rb
@@ -71,6 +71,10 @@ class Firm < Company
   has_one :readonly_account, :foreign_key => "firm_id", :class_name => "Account", :readonly => true
   has_one :account_using_primary_key, :primary_key => "firm_id", :class_name => "Account"
   has_one :deletable_account, :foreign_key => "firm_id", :class_name => "Account", :dependent => :delete
+  
+  has_one :unautosaved_account, :foreign_key => "firm_id", :class_name => 'Account', :autosave => false    
+  has_many :accounts
+  has_many :unautosaved_accounts, :foreign_key => "firm_id", :class_name => 'Account', :autosave => false
 end
 
 class DependentFirm < Company
@@ -134,6 +138,7 @@ end
 
 class Account < ActiveRecord::Base
   belongs_to :firm
+  belongs_to :unautosaved_firm, :foreign_key => "firm_id", :class_name => "Firm", :autosave => false
 
   def self.destroyed_account_ids
     @destroyed_account_ids ||= Hash.new { |h,k| h[k] = [] }
