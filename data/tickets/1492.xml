<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-29T02:28:01+00:00</created-at>
  <creator-id type="integer">16858</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1492</number>
  <permalink>models-not-loaded-properly-when-using-named_scope</permalink>
  <priority type="integer">856</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.2.2 named_scope</tag>
  <title>Models not loaded properly when using named_scope</title>
  <updated-at type="datetime">2008-12-16T00:10:52+00:00</updated-at>
  <user-id type="integer">17477</user-id>
  <version type="integer">4</version>
  <user-name>Frederick Cheung</user-name>
  <creator-name>joshsmoore (at gmail)</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1492</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This bug is a little complicated to explain.  So I will introduce my program and then at the end I will introduce what is going wrong.

I have two models note and label.  The models look like this

@@@ ruby
class Note &lt; ActiveRecord::Base
  has_and_belongs_to_many :labels


  named_scope :has_labels, lambda { |label| {:include =&gt; :labels,
    :conditions =&gt; ['labels.label =?', label]}}
end
@@@ 

@@@ ruby
class Label &lt; ActiveRecord::Base
  has_and_belongs_to_many :notes
end
@@@

These are what is in my fixtures.
Notes
@@@ yaml
one:
  title: note1
  body: this is a test note 1
  
two:
  title: note 2
  body: sthis is  the second note
  labels: test, test2

three:
  title: note 3
  body: I like this note
  labels: test, test4
@@@

Labels
@@@ yaml

test:
  label: test

test_1:
  label: test_1

test2:
  label: test2

test4:
  label: test 4

@@@

The problem is when I run this test
@@@ ruby
  def test_load_labels
    n = Note.find_by_title('note 3')
    n2 = Note.has_labels(['test 4']).first

    assert_equal n.labels.count, n2.labels.count
    assert_equal n.title, n2.title
    assert_equal n.labels.collect{|label| label.label}.join,
      n2.labels.collect{|label| label.label}.join
  end
@@@

I would expect all these assertions to match (because the objects are identical).  However, the last one does not.  The first assertion passes (so it thinks that both objects have the same number of labels).  But, the last one fails with this comment:
`&lt;&quot;testtest 4&quot;&gt; expected but was &lt;&quot;test 4&quot;&gt;`.  I am assuming this is a bug.  If not can somebody please tell me why it works this why?

System Information:
Rails: 2.2.2
Ruby: jruby 1.1.5 or Ruby 1.8.6-p111 (have tested both)
Database: sqlite3 or MySQL (have tested both)
OS: Ubuntu 8.04</original-body>
  <latest-body>This bug is a little complicated to explain.  So I will introduce my program and then at the end I will introduce what is going wrong.

I have two models note and label.  The models look like this

@@@ ruby
class Note &lt; ActiveRecord::Base
  has_and_belongs_to_many :labels


  named_scope :has_labels, lambda { |label| {:include =&gt; :labels,
    :conditions =&gt; ['labels.label =?', label]}}
end
@@@ 

@@@ ruby
class Label &lt; ActiveRecord::Base
  has_and_belongs_to_many :notes
end
@@@

These are what is in my fixtures.
Notes
@@@ yaml
one:
  title: note1
  body: this is a test note 1
  
two:
  title: note 2
  body: sthis is  the second note
  labels: test, test2

three:
  title: note 3
  body: I like this note
  labels: test, test4
@@@

Labels
@@@ yaml

test:
  label: test

test_1:
  label: test_1

test2:
  label: test2

test4:
  label: test 4

@@@

The problem is when I run this test
@@@ ruby
  def test_load_labels
    n = Note.find_by_title('note 3')
    n2 = Note.has_labels(['test 4']).first

    assert_equal n.labels.count, n2.labels.count
    assert_equal n.title, n2.title
    assert_equal n.labels.collect{|label| label.label}.join,
      n2.labels.collect{|label| label.label}.join
  end
@@@

I would expect all these assertions to match (because the objects are identical).  However, the last one does not.  The first assertion passes (so it thinks that both objects have the same number of labels).  But, the last one fails with this comment:
`&lt;&quot;testtest 4&quot;&gt; expected but was &lt;&quot;test 4&quot;&gt;`.  I am assuming this is a bug.  If not can somebody please tell me why it works this why?

System Information:
Rails: 2.2.2
Ruby: jruby 1.1.5 or Ruby 1.8.6-p111 (have tested both)
Database: sqlite3 or MySQL (have tested both)
OS: Ubuntu 8.04</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This bug is a little complicated to explain. So I will introduce
my program and then at the end I will introduce what is going
wrong.&lt;/p&gt;
&lt;p&gt;I have two models note and label. The models look like this&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Note &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :labels


  named_scope :has_labels, lambda { |label| {:include =&amp;gt; :labels,
    :conditions =&amp;gt; ['labels.label =?', label]}}
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Label &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :notes
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are what is in my fixtures. Notes&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;
one:
  title: note1
  body: this is a test note 1

two:
  title: note 2
  body: sthis is  the second note
  labels: test, test2

three:
  title: note 3
  body: I like this note
  labels: test, test4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Labels&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;

test:
  label: test

test_1:
  label: test_1

test2:
  label: test2

test4:
  label: test 4

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is when I run this test&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_load_labels
    n = Note.find_by_title('note 3')
    n2 = Note.has_labels(['test 4']).first

    assert_equal n.labels.count, n2.labels.count
    assert_equal n.title, n2.title
    assert_equal n.labels.collect{|label| label.label}.join,
      n2.labels.collect{|label| label.label}.join
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect all these assertions to match (because the
objects are identical). However, the last one does not. The first
assertion passes (so it thinks that both objects have the same
number of labels). But, the last one fails with this comment:
&lt;code&gt;&amp;lt;&quot;testtest 4&quot;&amp;gt; expected but was &amp;lt;&quot;test
4&quot;&amp;gt;&lt;/code&gt;. I am assuming this is a bug. If not can somebody
please tell me why it works this why?&lt;/p&gt;
&lt;p&gt;System Information: Rails: 2.2.2 Ruby: jruby 1.1.5 or Ruby
1.8.6-p111 (have tested both) Database: sqlite3 or MySQL (have
tested both) OS: Ubuntu 8.04&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This bug is a little complicated to explain.  So I will introduce my program and then at the end I will introduce what is going wrong.

I have two models note and label.  The models look like this

@@@ ruby
class Note &lt; ActiveRecord::Base
  has_and_belongs_to_many :labels


  named_scope :has_labels, lambda { |label| {:include =&gt; :labels,
    :conditions =&gt; ['labels.label =?', label]}}
end
@@@ 

@@@ ruby
class Label &lt; ActiveRecord::Base
  has_and_belongs_to_many :notes
end
@@@

These are what is in my fixtures.
Notes
@@@ yaml
one:
  title: note1
  body: this is a test note 1
  
two:
  title: note 2
  body: sthis is  the second note
  labels: test, test2

three:
  title: note 3
  body: I like this note
  labels: test, test4
@@@

Labels
@@@ yaml

test:
  label: test

test_1:
  label: test_1

test2:
  label: test2

test4:
  label: test 4

@@@

The problem is when I run this test
@@@ ruby
  def test_load_labels
    n = Note.find_by_title('note 3')
    n2 = Note.has_labels(['test 4']).first

    assert_equal n.labels.count, n2.labels.count
    assert_equal n.title, n2.title
    assert_equal n.labels.collect{|label| label.label}.join,
      n2.labels.collect{|label| label.label}.join
  end
@@@

I would expect all these assertions to match (because the objects are identical).  However, the last one does not.  The first assertion passes (so it thinks that both objects have the same number of labels).  But, the last one fails with this comment:
`&lt;&quot;testtest 4&quot;&gt; expected but was &lt;&quot;test 4&quot;&gt;`.  I am assuming this is a bug.  If not can somebody please tell me why it works this why?

System Information:
Rails: 2.2.2
Ruby: jruby 1.1.5 or Ruby 1.8.6-p111 (have tested both)
Database: sqlite3 or MySQL (have tested both)
OS: Ubuntu 8.04</body>
      <body-html>&lt;div&gt;&lt;p&gt;This bug is a little complicated to explain. So I will introduce
my program and then at the end I will introduce what is going
wrong.&lt;/p&gt;
&lt;p&gt;I have two models note and label. The models look like this&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Note &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :labels


  named_scope :has_labels, lambda { |label| {:include =&amp;gt; :labels,
    :conditions =&amp;gt; ['labels.label =?', label]}}
end
&lt;/code&gt;&lt;/pre&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Label &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :notes
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are what is in my fixtures. Notes&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;
one:
  title: note1
  body: this is a test note 1

two:
  title: note 2
  body: sthis is  the second note
  labels: test, test2

three:
  title: note 3
  body: I like this note
  labels: test, test4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Labels&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;

test:
  label: test

test_1:
  label: test_1

test2:
  label: test2

test4:
  label: test 4

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem is when I run this test&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_load_labels
    n = Note.find_by_title('note 3')
    n2 = Note.has_labels(['test 4']).first

    assert_equal n.labels.count, n2.labels.count
    assert_equal n.title, n2.title
    assert_equal n.labels.collect{|label| label.label}.join,
      n2.labels.collect{|label| label.label}.join
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would expect all these assertions to match (because the
objects are identical). However, the last one does not. The first
assertion passes (so it thinks that both objects have the same
number of labels). But, the last one fails with this comment:
&lt;code&gt;&amp;lt;&quot;testtest 4&quot;&amp;gt; expected but was &amp;lt;&quot;test
4&quot;&amp;gt;&lt;/code&gt;. I am assuming this is a bug. If not can somebody
please tell me why it works this why?&lt;/p&gt;
&lt;p&gt;System Information: Rails: 2.2.2 Ruby: jruby 1.1.5 or Ruby
1.8.6-p111 (have tested both) Database: sqlite3 or MySQL (have
tested both) OS: Ubuntu 8.04&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-29T02:28:01+00:00</created-at>
      <creator-id type="integer">16858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1492</number>
      <permalink>models-not-loaded-properly-when-using-named_scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 named_scope</tag>
      <title>Models not loaded properly when using named_scope</title>
      <updated-at type="datetime">2008-11-29T02:28:04+00:00</updated-at>
      <user-id type="integer">16858</user-id>
      <version type="integer">1</version>
      <user-name>joshsmoore (at gmail)</user-name>
      <creator-name>joshsmoore (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1492</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I just confirmed this still happens in edge rails.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I just confirmed this still happens in edge rails.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-29T04:52:36+00:00</created-at>
      <creator-id type="integer">16858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1492</number>
      <permalink>models-not-loaded-properly-when-using-named_scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 named_scope</tag>
      <title>Models not loaded properly when using named_scope</title>
      <updated-at type="datetime">2008-11-29T04:52:40+00:00</updated-at>
      <user-id type="integer">16858</user-id>
      <version type="integer">2</version>
      <user-name>joshsmoore (at gmail)</user-name>
      <creator-name>joshsmoore (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1492</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is an odd interaction between named scopes and join based includes.

The :include means that your select looks like
@@@ sql
SELECT ... FROM notes
LEFT OUTER JOIN labels ...
@@@

For the case you gave this would return two rows (because the note in question has 2 notes), however the first on the scope is limiting the select to just one row - so you only get one label back.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is an odd interaction between named scopes and join based
includes.&lt;/p&gt;
&lt;p&gt;The :include means that your select looks like&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;
SELECT ... FROM notes
LEFT OUTER JOIN labels ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the case you gave this would return two rows (because the
note in question has 2 notes), however the first on the scope is
limiting the select to just one row - so you only get one label
back.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-15T23:22:30+00:00</created-at>
      <creator-id type="integer">16858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1492</number>
      <permalink>models-not-loaded-properly-when-using-named_scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 named_scope</tag>
      <title>Models not loaded properly when using named_scope</title>
      <updated-at type="datetime">2008-12-15T23:22:33+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">3</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>joshsmoore (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1492</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>D'oh, read too quickly. The start of what I said was correct, the problem you get is that the conditions (labels.label = '...') applies to the whole query.

The named scope here is irrelevant,

@@@ ruby
Note.find :all, :include =&gt; :labels, :conditions =&gt;['labels.label =?', 'test']
@@@

will exhibit the same problem: all of the notes loaded in this way will have exactly one label, because the conditions prevent any other labels from being loaded by the big join query.

What this boils down to is that :include with :conditions on the included table has dubious semantics. If you don't actually care about the eager loading, 

@@@ ruby
named_scope :has_labels, lambda { |label| {:joins =&gt; :labels, :conditions =&gt; ['labels.label =?', label]}}
@@@

would select the correct notes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;D'oh, read too quickly. The start of what I said was correct,
the problem you get is that the conditions (labels.label = '...')
applies to the whole query.&lt;/p&gt;
&lt;p&gt;The named scope here is irrelevant,&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
Note.find :all, :include =&amp;gt; :labels, :conditions =&amp;gt;['labels.label =?', 'test']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will exhibit the same problem: all of the notes loaded in this
way will have exactly one label, because the conditions prevent any
other labels from being loaded by the big join query.&lt;/p&gt;
&lt;p&gt;What this boils down to is that :include with :conditions on the
included table has dubious semantics. If you don't actually care
about the eager loading,&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
named_scope :has_labels, lambda { |label| {:joins =&amp;gt; :labels, :conditions =&amp;gt; ['labels.label =?', label]}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would select the correct notes.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-16T00:04:31+00:00</created-at>
      <creator-id type="integer">16858</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1492</number>
      <permalink>models-not-loaded-properly-when-using-named_scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.2.2 named_scope</tag>
      <title>Models not loaded properly when using named_scope</title>
      <updated-at type="datetime">2008-12-16T00:10:47+00:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">4</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>joshsmoore (at gmail)</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1492</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
