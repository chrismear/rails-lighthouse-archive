<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-04-21T20:52:53+01:00</created-at>
  <creator-id type="integer">17461</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">33</number>
  <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
  <priority type="integer">9570</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord patch</tag>
  <title>AssociationsPreload casts foreign keys to integers</title>
  <updated-at type="datetime">2008-05-01T14:04:36+01:00</updated-at>
  <user-id type="integer">17461</user-id>
  <version type="integer">15</version>
  <user-name>Chris Hapgood</user-name>
  <creator-name>Chris Hapgood</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
  <priority-name nil="true"></priority-name>
  <original-body>In several places in the association preload code, foreign keys are converted to integers (to_i).   For example, in the `preload_has_many_association` method, there is this line: 

add_preloaded_records_to_collection(id_to_record_map[through_record[through_primary_key].to_i], ... 

It appears these casts are required because the `preload_has_and_belongs_to_many_association` method does not fetch the _parent_record_id in such as way as to preserve the DB type.

Nowhere else in AR are keys forced to integers and nowhere else (AFAICT) do db queries result in ambiguous return types.  Consequently, AssociationPreload is going to single handedly break a lot of legacy apps and some plugins (multipart keys, UUID keys, etc.).  It also sets a precedent of not being able to assume keys are returned as their native type.

Unfortunately, my DB adapter fu is not strong enough to understand WHY the query in `preload_has_and_belongs_to_many_association` confuses the adapter.  Any help would be greatly appreciated as I try to run this problem down...

NB: Previously discussed patch (also on Trac) is inadequate to fix the problem.  No patch is currently available.</original-body>
  <latest-body>In several places in the association preload code, foreign keys are converted to integers (to_i).   For example, in the `preload_has_many_association` method, there is this line: 

add_preloaded_records_to_collection(id_to_record_map[through_record[through_primary_key].to_i], ... 

It appears these casts are required because the `preload_has_and_belongs_to_many_association` method does not fetch the _parent_record_id in such as way as to preserve the DB type.

Nowhere else in AR are keys forced to integers and nowhere else (AFAICT) do db queries result in ambiguous return types.  Consequently, AssociationPreload is going to single handedly break a lot of legacy apps and some plugins (multipart keys, UUID keys, etc.).  It also sets a precedent of not being able to assume keys are returned as their native type.

Unfortunately, my DB adapter fu is not strong enough to understand WHY the query in `preload_has_and_belongs_to_many_association` confuses the adapter.  Any help would be greatly appreciated as I try to run this problem down...

NB: Previously discussed patch (also on Trac) is inadequate to fix the problem.  No patch is currently available.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
In several places in the association preload code, foreign keys are converted to integers (to_i).   For example, in the `preload_has_many_association` method, there is this line:
&lt;/p&gt;&lt;p&gt;
add_preloaded_records_to_collection(id_to_record_map[through_record[through_primary_key].to_i], ...
&lt;/p&gt;&lt;p&gt;
It appears these casts are required because the `preload_has_and_belongs_to_many_association` method does not fetch the _parent_record_id in such as way as to preserve the DB type.
&lt;/p&gt;&lt;p&gt;
Nowhere else in AR are keys forced to integers and nowhere else (AFAICT) do db queries result in ambiguous return types.  Consequently, AssociationPreload is going to single handedly break a lot of legacy apps and some plugins (multipart keys, UUID keys, etc.).  It also sets a precedent of not being able to assume keys are returned as their native type.
&lt;/p&gt;&lt;p&gt;
Unfortunately, my DB adapter fu is not strong enough to understand WHY the query in `preload_has_and_belongs_to_many_association` confuses the adapter.  Any help would be greatly appreciated as I try to run this problem down...
&lt;/p&gt;&lt;p&gt;
NB: Previously discussed patch (also on Trac) is inadequate to fix the problem.  No patch is currently available.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In several places in the association preload code, foreign keys are converted to integers (to_i).   For example, in the `preload_has_many_association` method, there is this line: 

add_preloaded_records_to_collection(id_to_record_map[through_record[through_primary_key].to_i], ... 

It appears these casts are required because the `preload_has_and_belongs_to_many_association` method does not fetch the _parent_record_id in such as way as to preserve the DB type.

Nowhere else in AR are keys forced to integers and nowhere else (AFAICT) do db queries result in ambiguous return types.  Consequently, AssociationPreload is going to single handedly break a lot of legacy apps and some plugins (multipart keys, UUID keys, etc.).  It also sets a precedent of not being able to assume keys are returned as their native type.

Unfortunately, my DB adapter fu is not strong enough to understand WHY the query in `preload_has_and_belongs_to_many_association` confuses the adapter.  Any help would be greatly appreciated as I try to run this problem down...

NB: Previously discussed patch (also on Trac) is inadequate to fix the problem.  No patch is currently available.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
In several places in the association preload code, foreign keys are converted to integers (to_i).   For example, in the `preload_has_many_association` method, there is this line:
&lt;/p&gt;&lt;p&gt;
add_preloaded_records_to_collection(id_to_record_map[through_record[through_primary_key].to_i], ...
&lt;/p&gt;&lt;p&gt;
It appears these casts are required because the `preload_has_and_belongs_to_many_association` method does not fetch the _parent_record_id in such as way as to preserve the DB type.
&lt;/p&gt;&lt;p&gt;
Nowhere else in AR are keys forced to integers and nowhere else (AFAICT) do db queries result in ambiguous return types.  Consequently, AssociationPreload is going to single handedly break a lot of legacy apps and some plugins (multipart keys, UUID keys, etc.).  It also sets a precedent of not being able to assume keys are returned as their native type.
&lt;/p&gt;&lt;p&gt;
Unfortunately, my DB adapter fu is not strong enough to understand WHY the query in `preload_has_and_belongs_to_many_association` confuses the adapter.  Any help would be greatly appreciated as I try to run this problem down...
&lt;/p&gt;&lt;p&gt;
NB: Previously discussed patch (also on Trac) is inadequate to fix the problem.  No patch is currently available.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-21T20:52:53+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-21T20:52:53+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">1</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Are you running afoul of a (lack of) quoting problem? I've got that on my todo list.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Are you running afoul of a (lack of) quoting problem? I've got that on my todo list.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-22T00:23:07+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-22T00:23:07+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">2</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Frederick,
I tried to find you online yesterday to discuss this as I saw your name all over the patch. 

I don't think it's a quoting problem.  I think it is a much more fundamental problem in several of the Rails DB adapters.  

Quick Summary: When extending the &quot;selected&quot; fields of a record with a calculated or custom field, AR cannot determine the type of the field.  For example

extended_post = Post.find(:first, :select =&gt; &quot;posts.*, posts.id as _custom&quot;)

In this example, extended_post['_custom'] is a string even though the id column is an integer.  Now that we have fallen into the trap, there is only one way out: assume all keys are integers and cast.  Game Over.

It would appear that AssociationsPreload is the first place in Rails where extended records are exploited internally.  And it exposes the weakness in the DB adapters.  I can confirm that the MySQL adapter has this problem, and the SQLite3 adapter.  Rumour is that the Oracle adapter does not have this problem.

What to do?

1. Fix the DB adapters to return type information with custom fields.  While this is the ideal solution, it's not likely to happen soon.  And it is probably impossible with some adapters.

2. Back out the AssociaitonsPreload code.  Sadly, I think we are too far gone for this to be realistic.  I know a lot of people put a lot of time into this performance optimization, and realistically, I know a lot of people don't care about non-integer keys.

3. Recode AP to not use extended fields.  I don't know enough about AP to assess if this is realistic - I would appreciate comments.

4. Recode AP to examine the foreign key type indirectly and cast only as required.  If Forum has_many Posts, AR knows the type of field for forums.#{primary_key} (DESCRIBE) and thus it knows the foreign key posts.forum_id when AP is preloading from posts.  By consulting this information, it would be possible to cast only when there is a mismatch between the custom field's type and the expected foreign key type.

Your thoughts?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Frederick,
&lt;/p&gt;&lt;p&gt;
I tried to find you online yesterday to discuss this as I saw your name all over the patch.
&lt;/p&gt;&lt;p&gt;
I don't think it's a quoting problem.  I think it is a much more fundamental problem in several of the Rails DB adapters.
&lt;/p&gt;&lt;p&gt;
Quick Summary: When extending the &quot;selected&quot; fields of a record with a calculated or custom field, AR cannot determine the type of the field.  For example
&lt;/p&gt;&lt;p&gt;
extended_post = Post.find(:first, :select =&gt; &quot;posts.*, posts.id as _custom&quot;)
&lt;/p&gt;&lt;p&gt;
In this example, extended_post['_custom'] is a string even though the id column is an integer.  Now that we have fallen into the trap, there is only one way out: assume all keys are integers and cast.  Game Over.
&lt;/p&gt;&lt;p&gt;
It would appear that AssociationsPreload is the first place in Rails where extended records are exploited internally.  And it exposes the weakness in the DB adapters.  I can confirm that the MySQL adapter has this problem, and the SQLite3 adapter.  Rumour is that the Oracle adapter does not have this problem.
&lt;/p&gt;&lt;p&gt;
What to do?
&lt;/p&gt;&lt;p&gt;
1. Fix the DB adapters to return type information with custom fields.  While this is the ideal solution, it's not likely to happen soon.  And it is probably impossible with some adapters.
&lt;/p&gt;&lt;p&gt;
2. Back out the AssociaitonsPreload code.  Sadly, I think we are too far gone for this to be realistic.  I know a lot of people put a lot of time into this performance optimization, and realistically, I know a lot of people don't care about non-integer keys.
&lt;/p&gt;&lt;p&gt;
3. Recode AP to not use extended fields.  I don't know enough about AP to assess if this is realistic - I would appreciate comments.
&lt;/p&gt;&lt;p&gt;
4. Recode AP to examine the foreign key type indirectly and cast only as required.  If Forum has_many Posts, AR knows the type of field for forums.#{primary_key} (DESCRIBE) and thus it knows the foreign key posts.forum_id when AP is preloading from posts.  By consulting this information, it would be possible to cast only when there is a mismatch between the custom field's type and the expected foreign key type.
&lt;/p&gt;&lt;p&gt;
Your thoughts?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-22T14:10:46+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-22T14:10:46+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">3</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Could we not go the other way and assume all keys are strings ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Could we not go the other way and assume all keys are strings ?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-22T14:27:51+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-22T14:27:51+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">4</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Frederick,
I love you man, but I just don't think that would work.  It would require unprecedented Ruby fu to always pull off the &quot;123&quot; == 123 when comparing keys (uniq, amongst others).  Or force the keys to strings EVERYWHERE, which would be a backwards compatible nightmare (but otherwise kinda smart).

Or am I missing something?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Frederick,
&lt;/p&gt;&lt;p&gt;
I love you man, but I just don't think that would work.  It would require unprecedented Ruby fu to always pull off the &quot;123&quot; == 123 when comparing keys (uniq, amongst others).  Or force the keys to strings EVERYWHERE, which would be a backwards compatible nightmare (but otherwise kinda smart).
&lt;/p&gt;&lt;p&gt;
Or am I missing something?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-22T14:32:09+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-22T14:32:09+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">5</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not everywhere, just for the bits in association preload where it's trying to match up records to their owners. I'll give it a go and see if it works</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Not everywhere, just for the bits in association preload where it's trying to match up records to their owners. I'll give it a go and see if it works
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-22T14:44:16+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-22T14:44:16+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">6</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ahhh... I think I see where you are going with this.  Casting _parent_record_id to a string (and everything it's compared to) would not lose any fidelity incomparisons (which is not the case for to_i) and since it's only used internally in AP, who cares if it doesn't match the expected class!  Brilliant.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Ahhh... I think I see where you are going with this.  Casting _parent_record_id to a string (and everything it's compared to) would not lose any fidelity incomparisons (which is not the case for to_i) and since it's only used internally in AP, who cares if it doesn't match the expected class!  Brilliant.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-22T15:28:15+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-22T15:28:15+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">7</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Exactly. If you look at the old eager loading code it basically did that.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Exactly. If you look at the old eager loading code it basically did that.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-22T15:30:30+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-22T15:30:30+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">8</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Make AP not care about whether keys are strings or integers</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Make AP not care about whether keys are strings or integers
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-25T22:31:04+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-25T22:31:04+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">9</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>rebased patch against current</body>
      <body-html>&lt;div&gt;&lt;p&gt;
rebased patch against current
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-30T23:17:28+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-04-30T23:17:28+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">10</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Thanks Frederick.  Can you tell me where/how to see the patch?

-Chris</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Thanks Frederick.  Can you tell me where/how to see the patch?
&lt;/p&gt;&lt;p&gt;
-Chris
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T01:34:42+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-05-01T01:34:42+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">11</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>It's attached to this ticket :-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It's attached to this ticket :-)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T02:04:04+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-05-01T02:04:04+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">12</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I need some sleep.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I need some sleep.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T02:08:41+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-05-01T02:08:41+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">13</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>(from [6f20efdaf733db26fbf337da73121983785064d5]) Fixed AssociationsPreload such that it doesnt require foreign keys to be integers (fcheung) [#33 state:resolved]
http://github.com/rails/rails/commit/6f20efdaf733db26fbf337da73121983785064d5</body>
      <body-html>&lt;div&gt;&lt;p&gt;
(from [6f20efdaf733db26fbf337da73121983785064d5]) Fixed AssociationsPreload such that it doesnt require foreign keys to be integers (fcheung) [#33 state:resolved]
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://github.com/rails/rails/commit/6f20efdaf733db26fbf337da73121983785064d5&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T05:31:09+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-05-01T05:31:09+01:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">14</version>
      <user-name>Repository</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I am really pleased that this ticket was acted on so quickly.

I know that non-integer keys are not exactly mainstream RoR (although if you saw all the mileage I get out of UUIDs, you might wish they were).  That just makes the response on this patch all the more impressive.

Frederick: thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I am really pleased that this ticket was acted on so quickly.
&lt;/p&gt;&lt;p&gt;
I know that non-integer keys are not exactly mainstream RoR (although if you saw all the mileage I get out of UUIDs, you might wish they were).  That just makes the response on this patch all the more impressive.
&lt;/p&gt;&lt;p&gt;
Frederick: thanks!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T14:04:36+01:00</created-at>
      <creator-id type="integer">17461</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">33</number>
      <permalink>associationspreload-casts-foreign-keys-to-integers</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>AssociationsPreload casts foreign keys to integers</title>
      <updated-at type="datetime">2008-05-01T14:04:36+01:00</updated-at>
      <user-id type="integer">17461</user-id>
      <version type="integer">15</version>
      <user-name>Chris Hapgood</user-name>
      <creator-name>Chris Hapgood</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/33</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2418b99065287723e2772198e2782b228e429b80</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-04-25T22:31:04+01:00</created-at>
      <filename>association_preload_should_not_assume_integer_keys.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">20267</id>
      <size type="integer">7647</size>
      <uploader-id type="integer">17477</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/20267/association_preload_should_not_assume_integer_keys.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>cf21e6ab2fc9a36c598ba54af3517382017864d8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-04-30T23:17:29+01:00</created-at>
      <filename>0001-Association-preload-should-not-assume-integer-keys.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">20953</id>
      <size type="integer">8484</size>
      <uploader-id type="integer">17477</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/20953/0001-Association-preload-should-not-assume-integer-keys.patch</url>
    </attachment>
  </attachments>
</ticket>
