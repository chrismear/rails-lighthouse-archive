<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">8407</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-30T01:35:48+00:00</created-at>
  <creator-id type="integer">17373</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">1496</number>
  <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
  <priority type="integer">859</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>multibyte patch</tag>
  <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
  <updated-at type="datetime">2011-02-02T19:11:41+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Chris Kampmeier</creator-name>
  <assigned-user-name>Manfred Stienstra</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Multibyte strings can't be used as hash keys without Ruby 1.9:

@@@ ruby
&gt;&gt; RUBY_VERSION
=&gt; &quot;1.8.7&quot;
&gt;&gt; {&quot;string&quot;.mb_chars =&gt; true} == {&quot;string&quot;.mb_chars =&gt; true}
=&gt; false
{&quot;string&quot;.mb_chars =&gt; 3}.merge(&quot;string&quot;.mb_chars =&gt; 4).keys.map(&amp;:to_s)
&gt;&gt; [&quot;foo&quot;, &quot;foo&quot;]
@@@

In my testing, this affects both Ruby 1.8.6 and 1.8.7.

Objects used as hash keys must define `#hash` and `#eql?`, which are used during hash insertion and comparison. `ActiveSupport::Multibyte::Chars` should proxy those methods to the wrapped string instead of handling them itself.

This has come up quite a bit for me, since we sometimes need to use user-inputted strings as hash keys, and we like to downcase/strip them to normalize.

As far as I can tell, this works out-of-the-box on Ruby 1.9.1, so the attached patch only affects `RUBY_VERSION &lt; '1.9'`.</original-body>
  <latest-body>Multibyte strings can't be used as hash keys without Ruby 1.9:

@@@ ruby
&gt;&gt; RUBY_VERSION
=&gt; &quot;1.8.7&quot;
&gt;&gt; {&quot;string&quot;.mb_chars =&gt; true} == {&quot;string&quot;.mb_chars =&gt; true}
=&gt; false
{&quot;string&quot;.mb_chars =&gt; 3}.merge(&quot;string&quot;.mb_chars =&gt; 4).keys.map(&amp;:to_s)
&gt;&gt; [&quot;foo&quot;, &quot;foo&quot;]
@@@

In my testing, this affects both Ruby 1.8.6 and 1.8.7.

Objects used as hash keys must define `#hash` and `#eql?`, which are used during hash insertion and comparison. `ActiveSupport::Multibyte::Chars` should proxy those methods to the wrapped string instead of handling them itself.

This has come up quite a bit for me, since we sometimes need to use user-inputted strings as hash keys, and we like to downcase/strip them to normalize.

As far as I can tell, this works out-of-the-box on Ruby 1.9.1, so the attached patch only affects `RUBY_VERSION &lt; '1.9'`.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Multibyte strings can't be used as hash keys without Ruby
1.9:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; RUBY_VERSION
=&amp;gt; &amp;quot;1.8.7&amp;quot;
&amp;gt;&amp;gt; {&amp;quot;string&amp;quot;.mb_chars =&amp;gt; true} == {&amp;quot;string&amp;quot;.mb_chars =&amp;gt; true}
=&amp;gt; false
{&amp;quot;string&amp;quot;.mb_chars =&amp;gt; 3}.merge(&amp;quot;string&amp;quot;.mb_chars =&amp;gt; 4).keys.map(&amp;amp;:to_s)
&amp;gt;&amp;gt; [&amp;quot;foo&amp;quot;, &amp;quot;foo&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my testing, this affects both Ruby 1.8.6 and 1.8.7.&lt;/p&gt;
&lt;p&gt;Objects used as hash keys must define &lt;code&gt;#hash&lt;/code&gt; and
&lt;code&gt;#eql?&lt;/code&gt;, which are used during hash insertion and
comparison. &lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt; should
proxy those methods to the wrapped string instead of handling them
itself.&lt;/p&gt;
&lt;p&gt;This has come up quite a bit for me, since we sometimes need to
use user-inputted strings as hash keys, and we like to
downcase/strip them to normalize.&lt;/p&gt;
&lt;p&gt;As far as I can tell, this works out-of-the-box on Ruby 1.9.1,
so the attached patch only affects &lt;code&gt;RUBY_VERSION &amp;lt;
'1.9'&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Multibyte strings can't be used as hash keys without Ruby 1.9:

@@@ ruby
&gt;&gt; RUBY_VERSION
=&gt; &quot;1.8.7&quot;
&gt;&gt; {&quot;string&quot;.mb_chars =&gt; true} == {&quot;string&quot;.mb_chars =&gt; true}
=&gt; false
&gt;&gt; {&quot;string&quot;.mb_chars =&gt; 3}.merge(&quot;string&quot;.mb_chars =&gt; 4).keys.map(&amp;:to_s)
=&gt; [&quot;string&quot;, &quot;string&quot;]
@@@

In my testing, this affects both Ruby 1.8.6 and 1.8.7.

Objects used as hash keys must define `#hash` and `#eql?`, which are used during hash insertion and comparison. `ActiveSupport::Multibyte::Chars` should proxy those methods to the wrapped string instead of handling them itself.

This has come up quite a bit for me, since we sometimes need to use user-inputted strings as hash keys, and we like to downcase/strip them to normalize.

As far as I can tell, this works out-of-the-box on Ruby 1.9.1, so the attached patch only affects `RUBY_VERSION &lt; '1.9'`.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Multibyte strings can't be used as hash keys without Ruby
1.9:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;gt;&amp;gt; RUBY_VERSION
=&amp;gt; &amp;quot;1.8.7&amp;quot;
&amp;gt;&amp;gt; {&amp;quot;string&amp;quot;.mb_chars =&amp;gt; true} == {&amp;quot;string&amp;quot;.mb_chars =&amp;gt; true}
=&amp;gt; false
&amp;gt;&amp;gt; {&amp;quot;string&amp;quot;.mb_chars =&amp;gt; 3}.merge(&amp;quot;string&amp;quot;.mb_chars =&amp;gt; 4).keys.map(&amp;amp;:to_s)
=&amp;gt; [&amp;quot;string&amp;quot;, &amp;quot;string&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my testing, this affects both Ruby 1.8.6 and 1.8.7.&lt;/p&gt;
&lt;p&gt;Objects used as hash keys must define &lt;code&gt;#hash&lt;/code&gt; and
&lt;code&gt;#eql?&lt;/code&gt;, which are used during hash insertion and
comparison. &lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt; should
proxy those methods to the wrapped string instead of handling them
itself.&lt;/p&gt;
&lt;p&gt;This has come up quite a bit for me, since we sometimes need to
use user-inputted strings as hash keys, and we like to
downcase/strip them to normalize.&lt;/p&gt;
&lt;p&gt;As far as I can tell, this works out-of-the-box on Ruby 1.9.1,
so the attached patch only affects &lt;code&gt;RUBY_VERSION &amp;lt;
'1.9'&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-30T01:35:48+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1496</number>
      <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>patch</tag>
      <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
      <updated-at type="datetime">2008-11-30T08:55:52+00:00</updated-at>
      <user-id type="integer">17373</user-id>
      <version type="integer">1</version>
      <user-name>Chris Kampmeier</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8407</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree that it would be great if you could use Chars instances as hash keys, there are two problems.

The first problem is that your solution is too broad:

@@@ ruby
'1'.mb_chars.eql?(1) #=&gt; true
@@@

I would suggest the following:

@@@ ruby
def eql?(other)
  other.acts_like?(:string) ? @wrapped_string.eql?(other.to_s) : super(other)
end
@@@

The other problem is a limitation caused by Hash#[] optimizations for String. So even if you do the following:

@@@ ruby
class String
  def eql_with_wrapped_string?(other)
    eql_without_wrapped_string?(other.acts_like?(:string) ? other.to_s : other)
  end
  alias_method_chain :eql?, :wrapped_string
end
@@@

The following will still be the case:

@@@ ruby
hash = {}
hash['string'] = 'value'
hash['string'.mb_chars] = 'other value'

hash.keys.map(&amp;:to_s) #=&gt; ['string', 'string']
@@@

So I'm not sure what the correct course of action is. Maybe we should just tell people to coerce the Chars instance to string before using it as a key?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I agree that it would be great if you could use Chars instances
as hash keys, there are two problems.&lt;/p&gt;
&lt;p&gt;The first problem is that your solution is too broad:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
'1'.mb_chars.eql?(1) #=&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I would suggest the following:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def eql?(other)
  other.acts_like?(:string) ? @wrapped_string.eql?(other.to_s) : super(other)
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other problem is a limitation caused by Hash#[]
optimizations for String. So even if you do the following:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class String
  def eql_with_wrapped_string?(other)
    eql_without_wrapped_string?(other.acts_like?(:string) ? other.to_s : other)
  end
  alias_method_chain :eql?, :wrapped_string
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following will still be the case:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
hash = {}
hash['string'] = 'value'
hash['string'.mb_chars] = 'other value'

hash.keys.map(&amp;amp;:to_s) #=&amp;gt; ['string', 'string']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I'm not sure what the correct course of action is. Maybe we
should just tell people to coerce the Chars instance to string
before using it as a key?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-22T14:21:32+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: patch
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1496</number>
      <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>multibyte patch</tag>
      <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
      <updated-at type="datetime">2008-12-22T14:22:01+00:00</updated-at>
      <user-id type="integer">8407</user-id>
      <version type="integer">2</version>
      <user-name>Manfred Stienstra</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Manfred Stienstra</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8407</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I'm closing the ticket as incomplete for now, please pick it up again if you want this to move forward.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm closing the ticket as incomplete for now, please pick it up
again if you want this to move forward.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-30T12:22:43+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1496</number>
      <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>multibyte patch</tag>
      <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
      <updated-at type="datetime">2008-12-30T12:22:47+00:00</updated-at>
      <user-id type="integer">8407</user-id>
      <version type="integer">3</version>
      <user-name>Manfred Stienstra</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Manfred Stienstra</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8407</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Attached is an updated patch that uses the implementation that Manfred Stienstra suggested.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is an updated patch that uses the implementation that
Manfred Stienstra suggested.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-08T04:34:29+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1496</number>
      <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>multibyte patch</tag>
      <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
      <updated-at type="datetime">2009-03-08T04:34:31+00:00</updated-at>
      <user-id type="integer">18068</user-id>
      <version type="integer">4</version>
      <user-name>Brandon Keepers</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Manfred Stienstra</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8407</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:36+01:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1496</number>
      <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>multibyte patch</tag>
      <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
      <updated-at type="datetime">2010-05-04T18:48:36+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Manfred Stienstra</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8407</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:04:13+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1496</number>
      <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
      <priority type="integer">859</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>multibyte patch</tag>
      <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
      <updated-at type="datetime">2011-02-02T19:10:55+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Manfred Stienstra</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8407</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:04:14+00:00</created-at>
      <creator-id type="integer">17373</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1496</number>
      <permalink>add-hash-and-eql-to-activesupportmultibytechars-so-you-can-use-multibyte-strings-as-hash-keys-without-ruby-19</permalink>
      <priority type="integer">859</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>multibyte patch</tag>
      <title>Add #hash and #eql? to ActiveSupport::Multibyte::Chars so you can use multibyte strings as hash keys without Ruby 1.9</title>
      <updated-at type="datetime">2011-02-02T19:11:41+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Chris Kampmeier</creator-name>
      <assigned-user-name>Manfred Stienstra</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1496</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>a00ddcbfa51731c90fe819e59f4e4f3aaefa4993</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-11-30T01:35:49+00:00</created-at>
      <filename>multibyte_strings_as_hash_keys.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">66348</id>
      <size type="integer">3160</size>
      <uploader-id type="integer">17373</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/66348/multibyte_strings_as_hash_keys.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>1ed16df9af540486d6871d000964f612ee450287</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-08T04:34:29+00:00</created-at>
      <filename>mb_chars_eql.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">97272</id>
      <size type="integer">3192</size>
      <uploader-id type="integer">18068</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/97272/mb_chars_eql.diff</url>
    </attachment>
  </attachments>
</ticket>
