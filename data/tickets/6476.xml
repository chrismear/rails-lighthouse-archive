<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-03T09:20:23+00:00</created-at>
  <creator-id type="integer">91056</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6476</number>
  <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag>bug eager_loading patch</tag>
  <title>[PATCH] Eager loading don't work properly on nested includes</title>
  <updated-at type="datetime">2011-05-01T10:20:17+01:00</updated-at>
  <user-id type="integer">91056</user-id>
  <version type="integer">10</version>
  <user-name>fxposter</user-name>
  <creator-name>fxposter</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
  <priority-name>Low</priority-name>
  <original-body>If we have a following models:

@@@ ruby
class Article &lt; ActiveRecord::Base
  has_and_belongs_to_many :tags
end

class Tag &lt; ActiveRecord::Base
  has_and_belongs_to_many :articles
  has_many :translations
end

class Translation &lt; ActiveRecord::Base
  belongs_to :tag
end
@@@

and some seed data:

@@@ ruby
tag1_translation = Translation.create!
tag2_translation = Translation.create!
tag3_translation = Translation.create!
tag4_translation = Translation.create!
tag1 = Tag.create! :translations =&gt; [tag1_translation]
tag2 = Tag.create! :translations =&gt; [tag2_translation]
tag3 = Tag.create! :translations =&gt; [tag3_translation]
tag4 = Tag.create! :translations =&gt; [tag4_translation]
article1 = Article.create! :tags =&gt; [tag1, tag2]
article2 = Article.create! :tags =&gt; [tag2, tag3]
article3 = Article.create! :tags =&gt; [tag1, tag2, tag3]
article4 = Article.create! :tags =&gt; [tag4]
@@@

Then this query:
@@@ ruby
Article.includes(:tags =&gt; :translations)
@@@

will not preload :translations to all tag objects

@@@ ruby
 &gt; Article.includes(:tags =&gt; :translations).map { |a| a.tags.first.id }
=&gt; [1, 1, 1, 4] 
 &gt; Article.includes(:tags =&gt; :translations).map { |a| a.tags.first }.map(&amp;:translations).map(&amp;:loaded?)
=&gt; [true, false, false, true]
@@@

The bug appears when we have one record mapped into several ruby objects - then only one object of those will get next &quot;includes()&quot;.

After some investigations, I've come to this line:
https://github.com/rails/rails/blob/master/activerecord/lib/active_record/association_preload.rb#L88

If I remove &quot;.uniq&quot; call - everything works just fine except one failing test - test_including_duplicate_objects_from_belongs_to.</original-body>
  <latest-body>If we have a following models:

@@@ ruby
class Article &lt; ActiveRecord::Base
  has_and_belongs_to_many :tags
end

class Tag &lt; ActiveRecord::Base
  has_and_belongs_to_many :articles
  has_many :translations
end

class Translation &lt; ActiveRecord::Base
  belongs_to :tag
end
@@@

and some seed data:

@@@ ruby
tag1_translation = Translation.create!
tag2_translation = Translation.create!
tag3_translation = Translation.create!
tag4_translation = Translation.create!
tag1 = Tag.create! :translations =&gt; [tag1_translation]
tag2 = Tag.create! :translations =&gt; [tag2_translation]
tag3 = Tag.create! :translations =&gt; [tag3_translation]
tag4 = Tag.create! :translations =&gt; [tag4_translation]
article1 = Article.create! :tags =&gt; [tag1, tag2]
article2 = Article.create! :tags =&gt; [tag2, tag3]
article3 = Article.create! :tags =&gt; [tag1, tag2, tag3]
article4 = Article.create! :tags =&gt; [tag4]
@@@

Then this query:
@@@ ruby
Article.includes(:tags =&gt; :translations)
@@@

will not preload :translations to all tag objects

@@@ ruby
 &gt; Article.includes(:tags =&gt; :translations).map { |a| a.tags.first.id }
=&gt; [1, 1, 1, 4] 
 &gt; Article.includes(:tags =&gt; :translations).map { |a| a.tags.first }.map(&amp;:translations).map(&amp;:loaded?)
=&gt; [true, false, false, true]
@@@

The bug appears when we have one record mapped into several ruby objects - then only one object of those will get next &quot;includes()&quot;.

After some investigations, I've come to this line:
https://github.com/rails/rails/blob/master/activerecord/lib/active_record/association_preload.rb#L88

If I remove &quot;.uniq&quot; call - everything works just fine except one failing test - test_including_duplicate_objects_from_belongs_to.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If we have a following models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Article &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :tags
end

class Tag &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :articles
  has_many :translations
end

class Translation &amp;lt; ActiveRecord::Base
  belongs_to :tag
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and some seed data:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;tag1_translation = Translation.create!
tag2_translation = Translation.create!
tag3_translation = Translation.create!
tag4_translation = Translation.create!
tag1 = Tag.create! :translations =&amp;gt; [tag1_translation]
tag2 = Tag.create! :translations =&amp;gt; [tag2_translation]
tag3 = Tag.create! :translations =&amp;gt; [tag3_translation]
tag4 = Tag.create! :translations =&amp;gt; [tag4_translation]
article1 = Article.create! :tags =&amp;gt; [tag1, tag2]
article2 = Article.create! :tags =&amp;gt; [tag2, tag3]
article3 = Article.create! :tags =&amp;gt; [tag1, tag2, tag3]
article4 = Article.create! :tags =&amp;gt; [tag4]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then this query:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Article.includes(:tags =&amp;gt; :translations)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;will not preload :translations to all tag objects&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; &amp;gt; Article.includes(:tags =&amp;gt; :translations).map { |a| a.tags.first.id }
=&amp;gt; [1, 1, 1, 4] 
 &amp;gt; Article.includes(:tags =&amp;gt; :translations).map { |a| a.tags.first }.map(&amp;amp;:translations).map(&amp;amp;:loaded?)
=&amp;gt; [true, false, false, true]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The bug appears when we have one record mapped into several ruby
objects - then only one object of those will get next
&quot;includes()&quot;.&lt;/p&gt;
&lt;p&gt;After some investigations, I've come to this line:&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/association_preload.rb#L88&quot;&gt;
https://github.com/rails/rails/blob/master/activerecord/lib/active_...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If I remove &quot;.uniq&quot; call - everything works just fine except one
failing test -
test_including_duplicate_objects_from_belongs_to.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If we have a following models:

@@@ ruby
class Article &lt; ActiveRecord::Base
  has_and_belongs_to_many :tags
end

class Tag &lt; ActiveRecord::Base
  has_and_belongs_to_many :articles
  has_many :translations
end

class Translation &lt; ActiveRecord::Base
  belongs_to :tag
end
@@@

and some seed data:

@@@ ruby
tag1_translation = Translation.create!
tag2_translation = Translation.create!
tag3_translation = Translation.create!
tag4_translation = Translation.create!
tag1 = Tag.create! :translations =&gt; [tag1_translation]
tag2 = Tag.create! :translations =&gt; [tag2_translation]
tag3 = Tag.create! :translations =&gt; [tag3_translation]
tag4 = Tag.create! :translations =&gt; [tag4_translation]
article1 = Article.create! :tags =&gt; [tag1, tag2]
article2 = Article.create! :tags =&gt; [tag2, tag3]
article3 = Article.create! :tags =&gt; [tag1, tag2, tag3]
article4 = Article.create! :tags =&gt; [tag4]
@@@

Then this query:
@@@ ruby
Article.includes(:tags =&gt; :translations)
@@@

will not preload :translations to all tag objects

@@@ ruby
 &gt; Article.includes(:tags =&gt; :translations).map { |a| a.tags.first.id }
=&gt; [1, 1, 1, 4] 
 &gt; Article.includes(:tags =&gt; :translations).map { |a| a.tags.first }.map(&amp;:translations).map(&amp;:loaded?)
=&gt; [true, false, false, true]
@@@

The bug appears when we have one record mapped into several ruby objects - then only one object of those will get next &quot;includes()&quot;.

After some investigations, I've come to this line:
https://github.com/rails/rails/blob/master/activerecord/lib/active_record/association_preload.rb#L88

If I remove &quot;.uniq&quot; call - everything works just fine except one failing test - test_including_duplicate_objects_from_belongs_to.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If we have a following models:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Article &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :tags
end

class Tag &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :articles
  has_many :translations
end

class Translation &amp;lt; ActiveRecord::Base
  belongs_to :tag
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;and some seed data:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;tag1_translation = Translation.create!
tag2_translation = Translation.create!
tag3_translation = Translation.create!
tag4_translation = Translation.create!
tag1 = Tag.create! :translations =&amp;gt; [tag1_translation]
tag2 = Tag.create! :translations =&amp;gt; [tag2_translation]
tag3 = Tag.create! :translations =&amp;gt; [tag3_translation]
tag4 = Tag.create! :translations =&amp;gt; [tag4_translation]
article1 = Article.create! :tags =&amp;gt; [tag1, tag2]
article2 = Article.create! :tags =&amp;gt; [tag2, tag3]
article3 = Article.create! :tags =&amp;gt; [tag1, tag2, tag3]
article4 = Article.create! :tags =&amp;gt; [tag4]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then this query:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;Article.includes(:tags =&amp;gt; :translations)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;will not preload :translations to all tag objects&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; &amp;gt; Article.includes(:tags =&amp;gt; :translations).map { |a| a.tags.first.id }
=&amp;gt; [1, 1, 1, 4] 
 &amp;gt; Article.includes(:tags =&amp;gt; :translations).map { |a| a.tags.first }.map(&amp;amp;:translations).map(&amp;amp;:loaded?)
=&amp;gt; [true, false, false, true]&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The bug appears when we have one record mapped into several ruby
objects - then only one object of those will get next
&quot;includes()&quot;.&lt;/p&gt;
&lt;p&gt;After some investigations, I've come to this line:&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/blob/master/activerecord/lib/active_record/association_preload.rb#L88&quot;&gt;
https://github.com/rails/rails/blob/master/activerecord/lib/active_...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If I remove &quot;.uniq&quot; call - everything works just fine except one
failing test -
test_including_duplicate_objects_from_belongs_to.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T03:42:58+00:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading</tag>
      <title>Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-02-27T03:43:01+00:00</updated-at>
      <user-id type="integer">91056</user-id>
      <version type="integer">1</version>
      <user-name>fxposter</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It seems that removing &quot;.uniq&quot; ActiveRecord::AssociationPreload::ClassMethods#preload_associations and adding &quot;records = Array.wrap(records).compact.uniq&quot; to ActiveRecord::AssociationPreload::ClassMethods#preload_has_many_association fixes that bug and doesn't break anything (according to tests).</body>
      <body-html>&lt;div&gt;&lt;p&gt;It seems that removing &quot;.uniq&quot;
ActiveRecord::AssociationPreload::ClassMethods#preload_associations
and adding &quot;records = Array.wrap(records).compact.uniq&quot; to
ActiveRecord::AssociationPreload::ClassMethods#preload_has_many_association
fixes that bug and doesn't break anything (according to tests).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T04:16:46+00:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading</tag>
      <title>Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-02-27T04:16:51+00:00</updated-at>
      <user-id type="integer">91056</user-id>
      <version type="integer">2</version>
      <user-name>fxposter</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>No, I was wrong. It doesn't fix the problem.

@@@ ruby
  def test_including_duplicate_objects_from_has_many
    post = Post.create!(:title =&gt; 'foo', :body =&gt; &quot;I like cars!&quot;)
    comment = SpecialComment.create!(:body =&gt; 'Come on!', :post =&gt; post)
    first_category = Category.create! :name =&gt; 'First!', :posts =&gt; [post]
    second_category = Category.create! :name =&gt; 'Second!', :posts =&gt; [post]
    
    categories = Category.where(:id =&gt; [first_category.id, second_category.id]).includes(:posts =&gt; :special_comments)
    assert_equal categories.map { |category| category.posts.first.special_comments.loaded? }, [true, true]
  end
@@@

That's the test case, showing the bug.</body>
      <body-html>&lt;div&gt;&lt;p&gt;No, I was wrong. It doesn't fix the problem.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  def test_including_duplicate_objects_from_has_many
    post = Post.create!(:title =&amp;gt; 'foo', :body =&amp;gt; &quot;I like cars!&quot;)
    comment = SpecialComment.create!(:body =&amp;gt; 'Come on!', :post =&amp;gt; post)
    first_category = Category.create! :name =&amp;gt; 'First!', :posts =&amp;gt; [post]
    second_category = Category.create! :name =&amp;gt; 'Second!', :posts =&amp;gt; [post]
    
    categories = Category.where(:id =&amp;gt; [first_category.id, second_category.id]).includes(:posts =&amp;gt; :special_comments)
    assert_equal categories.map { |category| category.posts.first.special_comments.loaded? }, [true, true]
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;That's the test case, showing the bug.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T04:33:54+00:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>eager_loading</tag>
      <title>Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-02-27T04:33:56+00:00</updated-at>
      <user-id type="integer">91056</user-id>
      <version type="integer">3</version>
      <user-name>fxposter</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Added patch with fix and test case (I'm not sure if my fix is 100% right, but it works + doesn't break any tests).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added patch with fix and test case (I'm not sure if my fix is
100% right, but it works + doesn't break any tests).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-27T21:41:31+00:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: eager_loading
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug eager_loading patch</tag>
      <title>Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-02-27T21:41:35+00:00</updated-at>
      <user-id type="integer">91056</user-id>
      <version type="integer">4</version>
      <user-name>fxposter</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-02T09:06:37+00:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Eager loading don't work properly on nested includes
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug eager_loading patch</tag>
      <title>[PATCH] Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-03-02T09:06:43+00:00</updated-at>
      <user-id type="integer">91056</user-id>
      <version type="integer">5</version>
      <user-name>fxposter</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

I applied this patch successfully to the 3-0-stable branch and ran the tests successfully. 

I went back and looked at why the Array#uniq call was there in the first place (https://github.com/rails/rails/commit/5dee6ce9e0e31c86c4319c17a1ee551832ecb7a8#activerecord/lib/active_record/association_preload.rb) and it looks like it's residue from 3 years ago. The current code base (before patch) already ensures there are no duplicate records loaded with eager loading, so you're right that the Array#uniq is not needed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;I applied this patch successfully to the 3-0-stable branch and
ran the tests successfully.&lt;/p&gt;
&lt;p&gt;I went back and looked at why the Array#uniq call was there in
the first place (&lt;a href=
&quot;https://github.com/rails/rails/commit/5dee6ce9e0e31c86c4319c17a1ee551832ecb7a8#activerecord/lib/active_record/association_preload.rb&quot;&gt;https://github.com/rails/rails/commit/5dee6ce9e0e31c86c4319c17a1ee5...&lt;/a&gt;)
and it looks like it's residue from 3 years ago. The current code
base (before patch) already ensures there are no duplicate records
loaded with eager loading, so you're right that the Array#uniq is
not needed.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-02T22:01:16+00:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug eager_loading patch</tag>
      <title>[PATCH] Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-03-02T22:02:28+00:00</updated-at>
      <user-id type="integer">88981</user-id>
      <version type="integer">6</version>
      <user-name>Peter Bui</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Well, it's very waste and not only you but also crazed at nowadays. &lt;a href=&quot;http://www.coachoutletofus.com/&quot;&gt;coach outlet&lt;/a&gt; And you very well dress't yearn to stutter exporting your car honorable because you bought the Coach Handbag for manually.Nevertheless stitch! Can each prepare a School Container? No, they can't. The shortfall to be told them? When you loss Implant Handbags.You are a sis. And you are hunting for Guide Market Coupons. But also many others push the bundle. They enterprise are an alias inflection for sex. Guide &lt;a href=&quot;http://www.coachoutletofus.com/&quot;&gt;coach online&lt;/a&gt; and
&lt;a href=&quot;http://www.coachoutletofus.com/&quot;&gt;discount coach&lt;/a&gt; are not only tidy But do you catch how to have an extensive hear in structure to have a Implant Note or any other inhabitants come across at a muddled emolument, haw be you are looking for a Direct Purse at the same demand in their clothes and creeps the other accessories from Show that is. Unquestionably, it is fresh to advert that Guide is a specializer variety, And why shouldn't they? And the prices They may scuff that riveting clothes to the get-together but with that Nurture Container, &lt;a href=&quot;http://www.coachoutletofus.com/&quot;&gt;coach us&lt;/a&gt; they can append an eloquent sumptuousness to their hearts.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Well, it's very waste and not only you but also crazed at
nowadays. &lt;a href=&quot;http://www.coachoutletofus.com/&quot;&gt;coach
outlet&lt;/a&gt; And you very well dress't yearn to stutter exporting
your car honorable because you bought the Coach Handbag for
manually.Nevertheless stitch! Can each prepare a School Container?
No, they can't. The shortfall to be told them? When you loss
Implant Handbags.You are a sis. And you are hunting for Guide
Market Coupons. But also many others push the bundle. They
enterprise are an alias inflection for sex. Guide &lt;a href=
&quot;http://www.coachoutletofus.com/&quot;&gt;coach online&lt;/a&gt; and&lt;br&gt;
&lt;a href=&quot;http://www.coachoutletofus.com/&quot;&gt;discount coach&lt;/a&gt; are
not only tidy But do you catch how to have an extensive hear in
structure to have a Implant Note or any other inhabitants come
across at a muddled emolument, haw be you are looking for a Direct
Purse at the same demand in their clothes and creeps the other
accessories from Show that is. Unquestionably, it is fresh to
advert that Guide is a specializer variety, And why shouldn't they?
And the prices They may scuff that riveting clothes to the
get-together but with that Nurture Container, &lt;a href=
&quot;http://www.coachoutletofus.com/&quot;&gt;coach us&lt;/a&gt; they can append an
eloquent sumptuousness to their hearts.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-03T08:31:51+00:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>bug eager_loading patch</tag>
      <title>[PATCH] Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-03-03T09:20:23+00:00</updated-at>
      <user-id type="integer">139624</user-id>
      <version type="integer">7</version>
      <user-name>cheap coach bags</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've pulled this commit in to 3-0-stable.  I tried porting to master, but the test didn't fail on master.  I'm closing this, but can you verify that master is OK?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've pulled this commit in to 3-0-stable. I tried porting to
master, but the test didn't fail on master. I'm closing this, but
can you verify that master is OK?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-22T18:07:59+01:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>bug eager_loading patch</tag>
      <title>[PATCH] Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-04-22T18:08:12+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">8</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks. I'll try to test master branch a bit later.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks. I'll try to test master branch a bit later.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-22T21:54:10+01:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>bug eager_loading patch</tag>
      <title>[PATCH] Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-04-22T21:54:22+01:00</updated-at>
      <user-id type="integer">91056</user-id>
      <version type="integer">9</version>
      <user-name>fxposter</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It seems like rails edge doesn't have this problem - everything works fine.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It seems like rails edge doesn't have this problem - everything
works fine.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-05-01T10:20:03+01:00</created-at>
      <creator-id type="integer">91056</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6476</number>
      <permalink>eager-loading-dont-work-properly-on-nested-includes</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>bug eager_loading patch</tag>
      <title>[PATCH] Eager loading don't work properly on nested includes</title>
      <updated-at type="datetime">2011-05-01T10:20:17+01:00</updated-at>
      <user-id type="integer">91056</user-id>
      <version type="integer">10</version>
      <user-name>fxposter</user-name>
      <creator-name>fxposter</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6476</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>45167c01bacf07b630d4f860cc0637b463463ff0</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-27T21:41:31+00:00</created-at>
      <filename>eager_loading_patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">932608</id>
      <size type="integer">2752</size>
      <uploader-id type="integer">91056</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/932608/eager_loading_patch.diff</url>
    </attachment>
  </attachments>
</ticket>
