From 247058c54311746eaa3d83f44a4c4405e47d1498 Mon Sep 17 00:00:00 2001
From: Andrew White <andyw@pixeltrix.co.uk>
Date: Mon, 15 Mar 2010 10:14:49 +0000
Subject: [PATCH] Refactor compute_type to handle situations where the correct class is already loaded

---
 activerecord/lib/active_record/base.rb  |   35 ++++++++++++++++--------------
 activerecord/test/cases/base_test.rb    |    8 -------
 activerecord/test/cases/modules_test.rb |    8 +++++++
 3 files changed, 27 insertions(+), 24 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index 0ce876d..eb93d63 100755
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1065,16 +1065,6 @@ module ActiveRecord #:nodoc:
           end
         end
 
-        # Nest the type name in the same module as this class.
-        # Bar is "MyApp::Business::Bar" relative to MyApp::Business::Foo
-        def type_name_with_module(type_name)
-          if store_full_sti_class
-            type_name
-          else
-            (/^::/ =~ type_name) ? type_name : "#{parent.name}::#{type_name}"
-          end
-        end
-
         def construct_finder_arel(options = {}, scope = nil)
           relation = options.is_a?(Hash) ? unscoped.apply_finder_options(options) : unscoped.merge(options)
           relation = scope.merge(relation) if scope
@@ -1301,13 +1291,26 @@ module ActiveRecord #:nodoc:
         # Returns the class type of the record using the current module as a prefix. So descendants of
         # MyApp::Business::Account would appear as MyApp::Business::AccountSubclass.
         def compute_type(type_name)
-          modularized_name = type_name_with_module(type_name)
-          silence_warnings do
-            begin
-              class_eval(modularized_name, __FILE__, __LINE__)
-            rescue NameError
-              class_eval(type_name, __FILE__, __LINE__)
+          if type_name.match(/^::/)
+            # If the type is prefixed with a scope operator then we assume that
+            # the type_name is an absolute reference.
+            type_name.constantize
+          else
+            # Build a list of candidates to search for
+            candiates = []
+            name.scan(/::|$/) { candiates.unshift "#{$`}::#{type_name}" }
+            candiates << type_name
+
+            candiates.each do |candidate|
+              begin
+                constant = candidate.constantize
+                return constant if candidate == constant.to_s
+              rescue NameError
+              rescue ArgumentError
+              end
             end
+
+            raise NameError, "uninitialized constant #{candiates.first}"
           end
         end
 
diff --git a/activerecord/test/cases/base_test.rb b/activerecord/test/cases/base_test.rb
index e3047fe..ad6a334 100755
--- a/activerecord/test/cases/base_test.rb
+++ b/activerecord/test/cases/base_test.rb
@@ -2157,14 +2157,6 @@ class BasicsTest < ActiveRecord::TestCase
     assert xml.include?(%(<arbitrary-element>#{value}</arbitrary-element>))
   end
 
-  def test_type_name_with_module_should_handle_beginning
-    ActiveRecord::Base.store_full_sti_class = false
-    assert_equal 'ActiveRecord::Person', ActiveRecord::Base.send(:type_name_with_module, 'Person')
-    assert_equal '::Person', ActiveRecord::Base.send(:type_name_with_module, '::Person')
-  ensure
-    ActiveRecord::Base.store_full_sti_class = true
-  end
-
   def test_to_param_should_return_string
     assert_kind_of String, Client.find(:first).to_param
   end
diff --git a/activerecord/test/cases/modules_test.rb b/activerecord/test/cases/modules_test.rb
index d781a22..440b674 100644
--- a/activerecord/test/cases/modules_test.rb
+++ b/activerecord/test/cases/modules_test.rb
@@ -82,4 +82,12 @@ class ModulesTest < ActiveRecord::TestCase
       end
     end
   end
+
+  def test_compute_type_can_infer_class_name_of_sibling_inside_module
+    old = ActiveRecord::Base.store_full_sti_class
+    ActiveRecord::Base.store_full_sti_class = true
+    assert_equal MyApplication::Business::Firm, MyApplication::Business::Client.send(:compute_type, "Firm")
+  ensure
+    ActiveRecord::Base.store_full_sti_class = old
+  end
 end
-- 
1.6.4.4

