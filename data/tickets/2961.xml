<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-17T06:48:12+00:00</created-at>
  <creator-id type="integer">64168</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2961</number>
  <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
  <priority type="integer">2039</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>associations association_proxy belongs_to nil</tag>
  <title>belongd_to proxy loads from database every time if record is missing</title>
  <updated-at type="datetime">2011-02-17T06:48:12+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">8</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Robin Salkeld</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Greetings all,

I'm hitting some interesting behaviour in the association proxy code that seems to be intentional, but seems non-optimal and is actually causing quite a bit of unnecessary DB querying in our case. 

Basically it looks like there is some special-casing of the BelongsToAssociation proxy to avoid setting its target to nil. In particular there are these lines in association.rb:

  define_method(reflection.name) do |*params|
    force_reload = params.first unless params.empty?
    association = association_instance_get(reflection.name)

    if association.nil? || force_reload
      association = association_proxy_class.new(self, reflection)
      retval = association.reload
      if retval.nil? and association_proxy_class == BelongsToAssociation
        association_instance_set(reflection.name, nil)
        return nil
      end
      association_instance_set(reflection.name, association)
    end

    association.target.nil? ? nil : association
  end

I can understand not returning the proxy when the target is nil, since the proxy can't impersonate nil. However, not setting the proxy into the instance variable means the DB will be requeried every time for no good reason, and it seems to me that assigning the proxy will still have the correct behaviour from the model's perspective. The same thing happens on preloading, meaning that preloading doesn't actually do anything for missing records.

Does anyone know the reason for this behaviour? I'm using Rails 2.3.2. Here's a reproduction of the problem from the application's perspective.

  class Alpha &lt; ActiveRecord::Base
  end

  class Beta &lt; ActiveRecord::Base
    belongs_to :alpha
  end

  a = Alpha.create
  b = Beta.create :alpha =&gt; a
  a.destroy

  b_loaded = Beta.find(b.id, :include =&gt; :alpha)
  b_loaded.loaded_alpha?    # =&gt; false (or nil, rather, but not true)
  b_loaded.alpha            # =&gt; nil
  b_loaded.loaded_alpha?    # =&gt; still nil rather than true
  b_loaded.alpha            # =&gt; nil (and hits the DB again)

Thanks!</original-body>
  <latest-body>Greetings all,

I'm hitting some interesting behaviour in the association proxy code that seems to be intentional, but seems non-optimal and is actually causing quite a bit of unnecessary DB querying in our case. 

Basically it looks like there is some special-casing of the BelongsToAssociation proxy to avoid setting its target to nil. In particular there are these lines in association.rb:

  define_method(reflection.name) do |*params|
    force_reload = params.first unless params.empty?
    association = association_instance_get(reflection.name)

    if association.nil? || force_reload
      association = association_proxy_class.new(self, reflection)
      retval = association.reload
      if retval.nil? and association_proxy_class == BelongsToAssociation
        association_instance_set(reflection.name, nil)
        return nil
      end
      association_instance_set(reflection.name, association)
    end

    association.target.nil? ? nil : association
  end

I can understand not returning the proxy when the target is nil, since the proxy can't impersonate nil. However, not setting the proxy into the instance variable means the DB will be requeried every time for no good reason, and it seems to me that assigning the proxy will still have the correct behaviour from the model's perspective. The same thing happens on preloading, meaning that preloading doesn't actually do anything for missing records.

Does anyone know the reason for this behaviour? I'm using Rails 2.3.2. Here's a reproduction of the problem from the application's perspective.

  class Alpha &lt; ActiveRecord::Base
  end

  class Beta &lt; ActiveRecord::Base
    belongs_to :alpha
  end

  a = Alpha.create
  b = Beta.create :alpha =&gt; a
  a.destroy

  b_loaded = Beta.find(b.id, :include =&gt; :alpha)
  b_loaded.loaded_alpha?    # =&gt; false (or nil, rather, but not true)
  b_loaded.alpha            # =&gt; nil
  b_loaded.loaded_alpha?    # =&gt; still nil rather than true
  b_loaded.alpha            # =&gt; nil (and hits the DB again)

Thanks!</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Greetings all,&lt;/p&gt;
&lt;p&gt;I'm hitting some interesting behaviour in the association proxy
code that seems to be intentional, but seems non-optimal and is
actually causing quite a bit of unnecessary DB querying in our
case.&lt;/p&gt;
&lt;p&gt;Basically it looks like there is some special-casing of the
BelongsToAssociation proxy to avoid setting its target to nil. In
particular there are these lines in association.rb:&lt;/p&gt;
&lt;p&gt;define_method(reflection.name) do |*params|&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;force_reload = params.first unless params.empty?
association = association_instance_get(reflection.name)

if association.nil? || force_reload
  association = association_proxy_class.new(self, reflection)
  retval = association.reload
  if retval.nil? and association_proxy_class == BelongsToAssociation
    association_instance_set(reflection.name, nil)
    return nil
  end
  association_instance_set(reflection.name, association)
end

association.target.nil? ? nil : association
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;I can understand not returning the proxy when the target is nil,
since the proxy can't impersonate nil. However, not setting the
proxy into the instance variable means the DB will be requeried
every time for no good reason, and it seems to me that assigning
the proxy will still have the correct behaviour from the model's
perspective. The same thing happens on preloading, meaning that
preloading doesn't actually do anything for missing records.&lt;/p&gt;
&lt;p&gt;Does anyone know the reason for this behaviour? I'm using Rails
2.3.2. Here's a reproduction of the problem from the application's
perspective.&lt;/p&gt;
&lt;p&gt;class Alpha &amp;lt; ActiveRecord::Base end&lt;/p&gt;
&lt;p&gt;class Beta &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;belongs_to :alpha
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;a = Alpha.create b = Beta.create :alpha =&amp;gt; a a.destroy&lt;/p&gt;
&lt;p&gt;b_loaded = Beta.find(b.id, :include =&amp;gt; :alpha)
b_loaded.loaded_alpha? # =&amp;gt; false (or nil, rather, but not true)
b_loaded.alpha # =&amp;gt; nil b_loaded.loaded_alpha? # =&amp;gt; still nil
rather than true b_loaded.alpha # =&amp;gt; nil (and hits the DB
again)&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Greetings all,

I'm hitting some interesting behaviour in the association proxy code that seems to be intentional, but seems non-optimal and is actually causing quite a bit of unnecessary DB querying in our case. 

Basically it looks like there is some special-casing of the BelongsToAssociation proxy to avoid setting its target to nil. In particular there are these lines in association.rb:

    define_method(reflection.name) do |*params|
      force_reload = params.first unless params.empty?
      association = association_instance_get(reflection.name)

      if association.nil? || force_reload
        association = association_proxy_class.new(self, reflection)
        retval = association.reload
        if retval.nil? and association_proxy_class == BelongsToAssociation
          association_instance_set(reflection.name, nil)
          return nil
        end
        association_instance_set(reflection.name, association)
      end

      association.target.nil? ? nil : association
    end

I can understand not returning the proxy when the target is nil, since the proxy can't impersonate nil. However, not setting the proxy into the instance variable means the DB will be requeried every time for no good reason, and it seems to me that assigning the proxy will still have the correct behaviour from the model's perspective. The same thing happens on preloading, meaning that preloading doesn't actually do anything for missing records.

Does anyone know the reason for this behaviour? I'm using Rails 2.3.2. Here's a reproduction of the problem from the application's perspective.

    class Alpha &lt; ActiveRecord::Base
    end

    class Beta &lt; ActiveRecord::Base
      belongs_to :alpha
    end

    a = Alpha.create
    b = Beta.create :alpha =&gt; a
    a.destroy

    b_loaded = Beta.find(b.id, :include =&gt; :alpha)
    b_loaded.loaded_alpha?    # =&gt; false (or nil, rather, but not true)
    b_loaded.alpha            # =&gt; nil
    b_loaded.loaded_alpha?    # =&gt; still nil rather than true
    b_loaded.alpha            # =&gt; nil (and hits the DB again)

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Greetings all,&lt;/p&gt;
&lt;p&gt;I'm hitting some interesting behaviour in the association proxy
code that seems to be intentional, but seems non-optimal and is
actually causing quite a bit of unnecessary DB querying in our
case.&lt;/p&gt;
&lt;p&gt;Basically it looks like there is some special-casing of the
BelongsToAssociation proxy to avoid setting its target to nil. In
particular there are these lines in association.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;define_method(reflection.name) do |*params|
  force_reload = params.first unless params.empty?
  association = association_instance_get(reflection.name)

  if association.nil? || force_reload
    association = association_proxy_class.new(self, reflection)
    retval = association.reload
    if retval.nil? and association_proxy_class == BelongsToAssociation
      association_instance_set(reflection.name, nil)
      return nil
    end
    association_instance_set(reflection.name, association)
  end

  association.target.nil? ? nil : association
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can understand not returning the proxy when the target is nil,
since the proxy can't impersonate nil. However, not setting the
proxy into the instance variable means the DB will be requeried
every time for no good reason, and it seems to me that assigning
the proxy will still have the correct behaviour from the model's
perspective. The same thing happens on preloading, meaning that
preloading doesn't actually do anything for missing records.&lt;/p&gt;
&lt;p&gt;Does anyone know the reason for this behaviour? I'm using Rails
2.3.2. Here's a reproduction of the problem from the application's
perspective.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Alpha &amp;lt; ActiveRecord::Base
end

class Beta &amp;lt; ActiveRecord::Base
  belongs_to :alpha
end

a = Alpha.create
b = Beta.create :alpha =&amp;gt; a
a.destroy

b_loaded = Beta.find(b.id, :include =&amp;gt; :alpha)
b_loaded.loaded_alpha?    # =&amp;gt; false (or nil, rather, but not true)
b_loaded.alpha            # =&amp;gt; nil
b_loaded.loaded_alpha?    # =&amp;gt; still nil rather than true
b_loaded.alpha            # =&amp;gt; nil (and hits the DB again)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-27T22:18:39+01:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongs_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2009-07-28T19:12:40+01:00</updated-at>
      <user-id type="integer">64168</user-id>
      <version type="integer">1</version>
      <user-name>Robin Salkeld</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Whoops, didn't format the example correctly. Sorry - I'm a lighthouse noob. :)

  class Alpha &lt; ActiveRecord::Base end

  class Beta &lt; ActiveRecord::Base
    belongs_to :alpha
  end 

  a = Alpha.create b = Beta.create :alpha =&gt; a a.destroy

  b_loaded = Beta.find(b.id, :include =&gt; :alpha) 
  b_loaded.loaded_alpha? # =&gt; false (or nil, rather, but not true) 
  b_loaded.alpha # =&gt; nil b_loaded.loaded_alpha? # =&gt; still nil rather than true 
  b_loaded.alpha # =&gt; nil (and hits the DB again)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Whoops, didn't format the example correctly. Sorry - I'm a
lighthouse noob. :)&lt;/p&gt;
&lt;p&gt;class Alpha &amp;lt; ActiveRecord::Base end&lt;/p&gt;
&lt;p&gt;class Beta &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;belongs_to :alpha&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;a = Alpha.create b = Beta.create :alpha =&amp;gt; a a.destroy&lt;/p&gt;
&lt;p&gt;b_loaded = Beta.find(b.id, :include =&amp;gt; :alpha)
b_loaded.loaded_alpha? # =&amp;gt; false (or nil, rather, but not true)
b_loaded.alpha # =&amp;gt; nil b_loaded.loaded_alpha? # =&amp;gt; still nil
rather than true b_loaded.alpha # =&amp;gt; nil (and hits the DB
again)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-27T22:19:40+01:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2009-07-27T22:19:46+01:00</updated-at>
      <user-id type="integer">64168</user-id>
      <version type="integer">2</version>
      <user-name>Robin Salkeld</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Whoops, didn't format the example correctly. Sorry - I'm a lighthouse noob. :)

  class Alpha &lt; ActiveRecord::Base end

  class Beta &lt; ActiveRecord::Base
    belongs_to :alpha
  end 

  a = Alpha.create 
  b = Beta.create :alpha =&gt; a 
  a.destroy

  b_loaded = Beta.find(b.id, :include =&gt; :alpha) 
  b_loaded.loaded_alpha? # =&gt; false (or nil, rather, but not true) 
  b_loaded.alpha # =&gt; nil b_loaded.loaded_alpha? # =&gt; still nil rather than true 
  b_loaded.alpha # =&gt; nil (and hits the DB again)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Whoops, didn't format the example correctly. Sorry - I'm a
lighthouse noob. :)&lt;/p&gt;
&lt;p&gt;class Alpha &amp;lt; ActiveRecord::Base end&lt;/p&gt;
&lt;p&gt;class Beta &amp;lt; ActiveRecord::Base&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;belongs_to :alpha&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;a = Alpha.create b = Beta.create :alpha =&amp;gt; a a.destroy&lt;/p&gt;
&lt;p&gt;b_loaded = Beta.find(b.id, :include =&amp;gt; :alpha)
b_loaded.loaded_alpha? # =&amp;gt; false (or nil, rather, but not true)
b_loaded.alpha # =&amp;gt; nil b_loaded.loaded_alpha? # =&amp;gt; still nil
rather than true b_loaded.alpha # =&amp;gt; nil (and hits the DB
again)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-27T22:19:57+01:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2009-07-27T22:20:07+01:00</updated-at>
      <user-id type="integer">64168</user-id>
      <version type="integer">3</version>
      <user-name>Robin Salkeld</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:54+01:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2010-05-04T18:48:54+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">4</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Robin,

Could you provide a failing test case that verifies this errant behavior?

Ryan - assigning to you in order to mark this as stale or incomplete.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Robin,&lt;/p&gt;
&lt;p&gt;Could you provide a failing test case that verifies this errant
behavior?&lt;/p&gt;
&lt;p&gt;Ryan - assigning to you in order to mark this as stale or
incomplete.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T18:55:49+01:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2010-05-09T18:55:51+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">5</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-09T22:16:48+01:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2010-05-09T22:16:49+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">6</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:39:18+00:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">2039</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2011-02-02T17:29:32+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:39:20+00:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">2039</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2011-02-02T17:29:53+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-17T06:12:47+00:00</created-at>
      <creator-id type="integer">64168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2961</number>
      <permalink>belongd_to-proxy-loads-from-database-every-time-if-record-is-missing</permalink>
      <priority type="integer">2039</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>associations association_proxy belongs_to nil</tag>
      <title>belongd_to proxy loads from database every time if record is missing</title>
      <updated-at type="datetime">2011-02-17T06:48:12+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">9</version>
      <user-name>gfh</user-name>
      <creator-name>Robin Salkeld</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2961</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
