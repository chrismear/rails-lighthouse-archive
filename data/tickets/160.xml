<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-09T19:51:10+01:00</created-at>
  <creator-id type="integer">19858</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">160</number>
  <permalink>rails-application-recipes</permalink>
  <priority type="integer">11953</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>enhancement patch railties</tag>
  <title>Rails application recipes</title>
  <updated-at type="datetime">2008-05-11T21:38:08+01:00</updated-at>
  <user-id type="integer">7400</user-id>
  <version type="integer">5</version>
  <user-name>Sven Fuchs</user-name>
  <creator-name>Edwin Vlieg</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/160</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?

The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.

A recipe in the simplest form should contain a number of commands to execute, e.g.:

@@@
script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure
@@@

In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:

@@@
plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure
@@@

This recipe file should be passed as an argument to the rails script:

@@@
rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
@@@

It is even possible to make it possible to give an URL as argument, but this might be a bit overkill. It can be nice though when someone wants to share his recipes or to share recipes within a company.

I'm willing to add the functionality to the Rails core with a patch, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.</original-body>
  <latest-body>I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?

The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.

A recipe in the simplest form should contain a number of commands to execute, e.g.:

@@@
script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure
@@@

In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:

@@@
plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure
@@@

This recipe file should be passed as an argument to the rails script:

@@@
rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
@@@

It is even possible to make it possible to give an URL as argument, but this might be a bit overkill. It can be nice though when someone wants to share his recipes or to share recipes within a company.

I'm willing to add the functionality to the Rails core with a patch, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?
&lt;/p&gt;&lt;p&gt;
The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.
&lt;/p&gt;&lt;p&gt;
A recipe in the simplest form should contain a number of commands to execute, e.g.:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This recipe file should be passed as an argument to the rails script:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;rails weblog --recipe=/home/edwin/rails_with_rspec.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It is even possible to make it possible to give an URL as argument, but this might be a bit overkill. It can be nice though when someone wants to share his recipes or to share recipes within a company.
&lt;/p&gt;&lt;p&gt;
I'm willing to add the functionality to the Rails core with a patch, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?

The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.

A recipe in the simplest form should contain a number of commands to execute, e.g.:

@@@
script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure
@@@

In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:

@@@
plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure
@@@

This recipe file should be passed as an argument to the rails script:

@@@
rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
@@@

It is even possible to make it possible to give an URL as argument, but this might be a bit overkill. It can be nice though when someone wants to share his recipes or to share recipes within a company.

I'm willing to add the functionality to the Rails core with a patch, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?
&lt;/p&gt;&lt;p&gt;
The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.
&lt;/p&gt;&lt;p&gt;
A recipe in the simplest form should contain a number of commands to execute, e.g.:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This recipe file should be passed as an argument to the rails script:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;rails weblog --recipe=/home/edwin/rails_with_rspec.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It is even possible to make it possible to give an URL as argument, but this might be a bit overkill. It can be nice though when someone wants to share his recipes or to share recipes within a company.
&lt;/p&gt;&lt;p&gt;
I'm willing to add the functionality to the Rails core with a patch, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-09T22:01:09+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">160</number>
      <permalink>rails-application-recipes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Rails application recipes</title>
      <updated-at type="datetime">2008-05-09T22:01:09+01:00</updated-at>
      <user-id type="integer">19858</user-id>
      <version type="integer">1</version>
      <user-name>Edwin Vlieg</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/160</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think this is rather specific to a certain use case (many applications using exactly the same setup). I think it'd work better as a plugin for starters.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I think this is rather specific to a certain use case (many applications using exactly the same setup). I think it'd work better as a plugin for starters.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-11T19:45:23+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">160</number>
      <permalink>rails-application-recipes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Rails application recipes</title>
      <updated-at type="datetime">2008-05-11T19:45:23+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">2</version>
      <user-name>DHH</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/160</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I don't totally agree with you David. It is not the case that many of my applications are using the same setup. I'm using for example RSpec and whatever the content or setup of the application I'm building is, I need the plugins. The same for plugins as exception_notification or mail_queue.

But I do agree with you on your other point, a plugin would be a good starting solution as long as it is not sure more people are experiencing this problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't totally agree with you David. It is not the case that many of my applications are using the same setup. I'm using for example RSpec and whatever the content or setup of the application I'm building is, I need the plugins. The same for plugins as exception_notification or mail_queue.
&lt;/p&gt;&lt;p&gt;
But I do agree with you on your other point, a plugin would be a good starting solution as long as it is not sure more people are experiencing this problem.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-11T19:54:56+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">160</number>
      <permalink>rails-application-recipes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Rails application recipes</title>
      <updated-at type="datetime">2008-05-11T19:54:56+01:00</updated-at>
      <user-id type="integer">19858</user-id>
      <version type="integer">3</version>
      <user-name>Edwin Vlieg</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/160</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Or, you could keep your blank-state application in Git, which would solve the upstream issue.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Or, you could keep your blank-state application in Git, which would solve the upstream issue.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-11T20:21:14+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">160</number>
      <permalink>rails-application-recipes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Rails application recipes</title>
      <updated-at type="datetime">2008-05-11T20:21:14+01:00</updated-at>
      <user-id type="integer">13</user-id>
      <version type="integer">4</version>
      <user-name>court3nay</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/160</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>How about a bash script? Or a rake task?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
How about a bash script? Or a rake task?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-11T21:38:08+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">160</number>
      <permalink>rails-application-recipes</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Rails application recipes</title>
      <updated-at type="datetime">2008-05-11T21:38:08+01:00</updated-at>
      <user-id type="integer">7400</user-id>
      <version type="integer">5</version>
      <user-name>Sven Fuchs</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/160</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
