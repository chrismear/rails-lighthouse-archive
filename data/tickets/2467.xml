<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">14998</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-09T19:23:49+01:00</created-at>
  <creator-id type="integer">53612</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2467</number>
  <permalink>parameterized-partials</permalink>
  <priority type="integer">1616</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>parameterize partial render rendering</tag>
  <title>Parameterized partials</title>
  <updated-at type="datetime">2010-04-16T00:38:41+01:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">3</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>ebelin</creator-name>
  <assigned-user-name>Ryan Bigg</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2467</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Suggestion
---

I suggest to parameterize 'smart' partials rendering like that:

@@@ ruby
&lt;%= render :partial =&gt; @cart.products, :context =&gt; 'cart' %&gt;
@@@

which would be an equivalent to something like that:

@@@ ruby
&lt;%= render :partial =&gt; 'products/product_for_cart', :collection =&gt; @cart.products %&gt;
@@@


Justification
---

In the snippet below all product, category and cart pages (in a standard 'category has many products' scenario) display the same views/products/_product.html.erb partial.

@@@ ruby
# views/products/show.html.erb
&lt;%= render @products, :locals =&gt; {:context =&gt; 'product'} %&gt;

# views/categories/show.html.erb
&lt;%= render @category.products, :locals =&gt; {:context =&gt; 'category'} %&gt;

# views/shopping_cart/show.html.erb
&lt;%= render @cart.products, :locals =&gt; {:context =&gt; 'cart'} %&gt;
@@@

This leads to overly complicated views/products/_product.html.erb logic of what and how to display that depends on context.  I found that readability is more important than DRY sometimes and I usually end up with a series of partials:

@@@ ruby
views/products/_product.html.erb
views/products/_category_product.html.erb
views/products/_cart_product.html.erb
@@@

and render them appropriately:

@@@ ruby
&lt;%= render :partial =&gt; 'products/category_product', :collection =&gt; @category.products %&gt;
@@@

I suggest to improve smart partials by parameterizing their rendering a-la:

@@@ ruby
&lt;%= render :partial =&gt; @cart.products, :context =&gt; 'cart' %&gt;
@@@

which would be an equivalent to 

@@@ ruby
&lt;%= render :partial =&gt; 'products/product_for_cart', :collection =&gt; @cart.products %&gt;
@@@</original-body>
  <latest-body>Suggestion
---

I suggest to parameterize 'smart' partials rendering like that:

@@@ ruby
&lt;%= render :partial =&gt; @cart.products, :context =&gt; 'cart' %&gt;
@@@

which would be an equivalent to something like that:

@@@ ruby
&lt;%= render :partial =&gt; 'products/product_for_cart', :collection =&gt; @cart.products %&gt;
@@@


Justification
---

In the snippet below all product, category and cart pages (in a standard 'category has many products' scenario) display the same views/products/_product.html.erb partial.

@@@ ruby
# views/products/show.html.erb
&lt;%= render @products, :locals =&gt; {:context =&gt; 'product'} %&gt;

# views/categories/show.html.erb
&lt;%= render @category.products, :locals =&gt; {:context =&gt; 'category'} %&gt;

# views/shopping_cart/show.html.erb
&lt;%= render @cart.products, :locals =&gt; {:context =&gt; 'cart'} %&gt;
@@@

This leads to overly complicated views/products/_product.html.erb logic of what and how to display that depends on context.  I found that readability is more important than DRY sometimes and I usually end up with a series of partials:

@@@ ruby
views/products/_product.html.erb
views/products/_category_product.html.erb
views/products/_cart_product.html.erb
@@@

and render them appropriately:

@@@ ruby
&lt;%= render :partial =&gt; 'products/category_product', :collection =&gt; @category.products %&gt;
@@@

I suggest to improve smart partials by parameterizing their rendering a-la:

@@@ ruby
&lt;%= render :partial =&gt; @cart.products, :context =&gt; 'cart' %&gt;
@@@

which would be an equivalent to 

@@@ ruby
&lt;%= render :partial =&gt; 'products/product_for_cart', :collection =&gt; @cart.products %&gt;
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;h2&gt;Suggestion&lt;/h2&gt;
&lt;p&gt;I suggest to parameterize 'smart' partials rendering like
that:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; @cart.products, :context =&amp;gt; 'cart' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which would be an equivalent to something like that:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; 'products/product_for_cart', :collection =&amp;gt; @cart.products %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Justification&lt;/h2&gt;
&lt;p&gt;In the snippet below all product, category and cart pages (in a
standard 'category has many products' scenario) display the same
views/products/_product.html.erb partial.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# views/products/show.html.erb
&amp;lt;%= render @products, :locals =&amp;gt; {:context =&amp;gt; 'product'} %&amp;gt;

# views/categories/show.html.erb
&amp;lt;%= render @category.products, :locals =&amp;gt; {:context =&amp;gt; 'category'} %&amp;gt;

# views/shopping_cart/show.html.erb
&amp;lt;%= render @cart.products, :locals =&amp;gt; {:context =&amp;gt; 'cart'} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This leads to overly complicated
views/products/_product.html.erb logic of what and how to display
that depends on context. I found that readability is more important
than DRY sometimes and I usually end up with a series of
partials:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
views/products/_product.html.erb
views/products/_category_product.html.erb
views/products/_cart_product.html.erb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and render them appropriately:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; 'products/category_product', :collection =&amp;gt; @category.products %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suggest to improve smart partials by parameterizing their
rendering a-la:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; @cart.products, :context =&amp;gt; 'cart' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which would be an equivalent to&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; 'products/product_for_cart', :collection =&amp;gt; @cart.products %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Suggestion
---

I suggest to parameterize 'smart' partials rendering like that:

@@@ ruby
&lt;%= render :partial =&gt; @cart.products, :context =&gt; 'cart' %&gt;
@@@

which would be an equivalent to something like that:

@@@ ruby
&lt;%= render :partial =&gt; 'products/product_for_cart', :collection =&gt; @cart.products %&gt;
@@@


Justification
---

In the snippet below all product, category and cart pages (in a standard 'category has many products' scenario) display the same views/products/_product.html.erb partial.

@@@ ruby
# views/products/show.html.erb
&lt;%= render @products, :locals =&gt; {:context =&gt; 'product'} %&gt;

# views/categories/show.html.erb
&lt;%= render @category.products, :locals =&gt; {:context =&gt; 'category'} %&gt;

# views/shopping_cart/show.html.erb
&lt;%= render @cart.products, :locals =&gt; {:context =&gt; 'cart'} %&gt;
@@@

This leads to overly complicated views/products/_product.html.erb logic of what and how to display that depends on context.  I found that readability is more important than DRY sometimes and I usually end up with a series of partials:

@@@ ruby
views/products/_product.html.erb
views/products/_category_product.html.erb
views/products/_cart_product.html.erb
@@@

and render them appropriately:

@@@ ruby
&lt;%= render :partial =&gt; 'products/category_product', :collection =&gt; @category.products %&gt;
@@@

I suggest to improve smart partials by parameterizing their rendering a-la:

@@@ ruby
&lt;%= render :partial =&gt; @cart.products, :context =&gt; 'cart' %&gt;
@@@

which would be an equivalent to 

@@@ ruby
&lt;%= render :partial =&gt; 'products/product_for_cart', :collection =&gt; @cart.products %&gt;
@@@</body>
      <body-html>&lt;div&gt;&lt;h2&gt;Suggestion&lt;/h2&gt;
&lt;p&gt;I suggest to parameterize 'smart' partials rendering like
that:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; @cart.products, :context =&amp;gt; 'cart' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which would be an equivalent to something like that:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; 'products/product_for_cart', :collection =&amp;gt; @cart.products %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Justification&lt;/h2&gt;
&lt;p&gt;In the snippet below all product, category and cart pages (in a
standard 'category has many products' scenario) display the same
views/products/_product.html.erb partial.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
# views/products/show.html.erb
&amp;lt;%= render @products, :locals =&amp;gt; {:context =&amp;gt; 'product'} %&amp;gt;

# views/categories/show.html.erb
&amp;lt;%= render @category.products, :locals =&amp;gt; {:context =&amp;gt; 'category'} %&amp;gt;

# views/shopping_cart/show.html.erb
&amp;lt;%= render @cart.products, :locals =&amp;gt; {:context =&amp;gt; 'cart'} %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This leads to overly complicated
views/products/_product.html.erb logic of what and how to display
that depends on context. I found that readability is more important
than DRY sometimes and I usually end up with a series of
partials:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
views/products/_product.html.erb
views/products/_category_product.html.erb
views/products/_cart_product.html.erb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and render them appropriately:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; 'products/category_product', :collection =&amp;gt; @category.products %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suggest to improve smart partials by parameterizing their
rendering a-la:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; @cart.products, :context =&amp;gt; 'cart' %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which would be an equivalent to&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
&amp;lt;%= render :partial =&amp;gt; 'products/product_for_cart', :collection =&amp;gt; @cart.products %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-09T19:23:49+01:00</created-at>
      <creator-id type="integer">53612</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2467</number>
      <permalink>parameterized-partials</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>parameterize partial render rendering</tag>
      <title>Parameterized partials</title>
      <updated-at type="datetime">2009-04-09T19:23:53+01:00</updated-at>
      <user-id type="integer">53612</user-id>
      <version type="integer">1</version>
      <user-name>ebelin</user-name>
      <creator-name>ebelin</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2467</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not sure I 100% understand the usecase here why if readability was more important than dry how adding :context makes it anymore readable.

I would use the following, it gives you the separation you require, no added functionality, and reads cleanly showing its intent. the only sacrifice is the partials are not all contained under views/products. However i would argue that if the partials are so heavily different they cannot be shared, they are likely tied to the section they are contained within to begin with.

@@@ ruby
  # views/shopping_cart/show.html.erb -&gt; /views/shopping_cart/_product.html.erb
  &lt;%= render :partial =&gt; 'product', :collection =&gt; @cart.products %&gt;

  # views/categories/show.html.erb -&gt; /views/categories/_product.html.erb
  &lt;%= render :partial =&gt; 'product', :collection =&gt; @category.products %&gt;

  # views/products/show.html.erb -&gt; /views/products/_product.html.erb
  &lt;%= render :partial =&gt; 'product', :collection =&gt; @products %&gt;
@@@

suggest marking as invalid</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure I 100% understand the usecase here why if readability
was more important than dry how adding :context makes it anymore
readable.&lt;/p&gt;
&lt;p&gt;I would use the following, it gives you the separation you
require, no added functionality, and reads cleanly showing its
intent. the only sacrifice is the partials are not all contained
under views/products. However i would argue that if the partials
are so heavily different they cannot be shared, they are likely
tied to the section they are contained within to begin with.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  # views/shopping_cart/show.html.erb -&amp;gt; /views/shopping_cart/_product.html.erb
  &amp;lt;%= render :partial =&amp;gt; 'product', :collection =&amp;gt; @cart.products %&amp;gt;

  # views/categories/show.html.erb -&amp;gt; /views/categories/_product.html.erb
  &amp;lt;%= render :partial =&amp;gt; 'product', :collection =&amp;gt; @category.products %&amp;gt;

  # views/products/show.html.erb -&amp;gt; /views/products/_product.html.erb
  &amp;lt;%= render :partial =&amp;gt; 'product', :collection =&amp;gt; @products %&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;suggest marking as invalid&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-04-16T00:28:56+01:00</created-at>
      <creator-id type="integer">53612</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2467</number>
      <permalink>parameterized-partials</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>parameterize partial render rendering</tag>
      <title>Parameterized partials</title>
      <updated-at type="datetime">2010-04-16T00:28:59+01:00</updated-at>
      <user-id type="integer">65576</user-id>
      <version type="integer">2</version>
      <user-name>Steve St. Martin</user-name>
      <creator-name>ebelin</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2467</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">14998</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>That final example you can just `render @products.`</body>
      <body-html>&lt;div&gt;&lt;p&gt;That final example you can just &lt;code&gt;render
@products.&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-04-16T00:38:37+01:00</created-at>
      <creator-id type="integer">53612</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2467</number>
      <permalink>parameterized-partials</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>parameterize partial render rendering</tag>
      <title>Parameterized partials</title>
      <updated-at type="datetime">2010-04-16T00:38:41+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">3</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>ebelin</creator-name>
      <assigned-user-name>Ryan Bigg</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2467</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
