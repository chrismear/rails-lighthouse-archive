<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-12-08T03:08:56+00:00</created-at>
  <creator-id type="integer">38672</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">1527</number>
  <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
  <priority type="integer">870</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord destroy memoizable memoize</tag>
  <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
  <updated-at type="datetime">2011-04-12T01:01:00+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">14</version>
  <user-name>rails</user-name>
  <creator-name>Mike Grafton</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When you call #destroy on an AR model, it calls #freeze.  The ActiveSupport::Memoizable mixin, however, alias_method_chains freeze to add a call to #memoize_all.  This is probably not what you want on destroy (or maybe on freeze at all), since memoized methods are often computationally expensive.

If this is really the desired behavior, then there should be a way around it (there is currently not a good one).  Either a :freeze =&gt; false option could be passed to destroy, or a :on_freeze =&gt; false could be passed to #memoize.</original-body>
  <latest-body>When you call #destroy on an AR model, it calls #freeze.  The ActiveSupport::Memoizable mixin, however, alias_method_chains freeze to add a call to #memoize_all.  This is probably not what you want on destroy (or maybe on freeze at all), since memoized methods are often computationally expensive.

If this is really the desired behavior, then there should be a way around it (there is currently not a good one).  Either a :freeze =&gt; false option could be passed to destroy, or a :on_freeze =&gt; false could be passed to #memoize.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When you call #destroy on an AR model, it calls #freeze. The
ActiveSupport::Memoizable mixin, however, alias_method_chains
freeze to add a call to #memoize_all. This is probably not what you
want on destroy (or maybe on freeze at all), since memoized methods
are often computationally expensive.&lt;/p&gt;
&lt;p&gt;If this is really the desired behavior, then there should be a
way around it (there is currently not a good one). Either a :freeze
=&amp;gt; false option could be passed to destroy, or a :on_freeze
=&amp;gt; false could be passed to #memoize.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When you call #destroy on an AR model, it calls #freeze.  The ActiveSupport::Memoizable mixin, however, alias_method_chains freeze to add a call to #memoize_all.  This is probably not what you want on destroy (or maybe on freeze at all), since memoized methods are often computationally expensive.

If this is really the desired behavior, then there should be a way around it (there is currently not a good one).  Either a :freeze =&gt; false option could be passed to destroy, or a :on_freeze =&gt; false could be passed to #memoize.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When you call #destroy on an AR model, it calls #freeze. The
ActiveSupport::Memoizable mixin, however, alias_method_chains
freeze to add a call to #memoize_all. This is probably not what you
want on destroy (or maybe on freeze at all), since memoized methods
are often computationally expensive.&lt;/p&gt;
&lt;p&gt;If this is really the desired behavior, then there should be a
way around it (there is currently not a good one). Either a :freeze
=&amp;gt; false option could be passed to destroy, or a :on_freeze
=&amp;gt; false could be passed to #memoize.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-08T03:08:57+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2008-12-08T03:09:01+00:00</updated-at>
      <user-id type="integer">38672</user-id>
      <version type="integer">1</version>
      <user-name>Mike Grafton</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think it makes sense that destroy would freeze an AR object because you should not able to make any changes after.

And one of the main reasons for freeze to invoke your memoized methods is to make sure the ivar is set since you can't modify them after. Otherwise you'd get an error when you called a memorized method on a frozen object.

So both have there reasons, however combining leads to the issue that you explained.

The temporary fixed would be to over the freeze_with_memoizable method.

@@@ ruby
def freeze_with_memoizable
  freeze_without_memoizable
end
@@@

As mentioned a possible API to exclude a method from would be &quot;memoize :foo, :freeze =&gt; false&quot; or something like that. But there are some other issues we still have to consider like does this apply to other methods on the object and what happens when you call that method again.

Heres my proposal: Create 2 separate cases for what will happen to each method on freeze.

1) Current behavior: On freeze, we prime the cache so the method will be permanently remembered and would work under the frozen context. Default setting.

@@@ ruby
memoize :foo, :on_freeze =&gt; :prime
# or just
memoize :foo
@@@

2) Alternate behavior: On freeze, discard the memoization feature. This way the method will still work (unmemoized) while frozen. I think the easiest way to accomplish this would be to alias the original method back the its original name.

@@@ ruby
memoize :foo, :on_freeze =&gt; :flush
@@@

Take a stab at it, and I'll help you out if you need some.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think it makes sense that destroy would freeze an AR object
because you should not able to make any changes after.&lt;/p&gt;
&lt;p&gt;And one of the main reasons for freeze to invoke your memoized
methods is to make sure the ivar is set since you can't modify them
after. Otherwise you'd get an error when you called a memorized
method on a frozen object.&lt;/p&gt;
&lt;p&gt;So both have there reasons, however combining leads to the issue
that you explained.&lt;/p&gt;
&lt;p&gt;The temporary fixed would be to over the freeze_with_memoizable
method.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def freeze_with_memoizable
  freeze_without_memoizable
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As mentioned a possible API to exclude a method from would be
&quot;memoize :foo, :freeze =&amp;gt; false&quot; or something like that. But
there are some other issues we still have to consider like does
this apply to other methods on the object and what happens when you
call that method again.&lt;/p&gt;
&lt;p&gt;Heres my proposal: Create 2 separate cases for what will happen
to each method on freeze.&lt;/p&gt;
&lt;p&gt;1) Current behavior: On freeze, we prime the cache so the method
will be permanently remembered and would work under the frozen
context. Default setting.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
memoize :foo, :on_freeze =&amp;gt; :prime
# or just
memoize :foo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2) Alternate behavior: On freeze, discard the memoization
feature. This way the method will still work (unmemoized) while
frozen. I think the easiest way to accomplish this would be to
alias the original method back the its original name.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
memoize :foo, :on_freeze =&amp;gt; :flush
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a stab at it, and I'll help you out if you need some.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-08T03:49:02+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2008-12-08T03:49:05+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Cool, thanks. 

I actually think it might be *better* to throw an error if you called an un-primed memoized method after freeze.  Especially if it blew up in an obvious way, with an explicit message like &quot;This memoized method cannot be called after freeze. Use :on_freeze =&gt; :prime&quot;

But I admit, I don't really understand freezing well enough to have a strong opinion. For my case your solution would work, so I'll give it a shot.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Cool, thanks.&lt;/p&gt;
&lt;p&gt;I actually think it might be &lt;em&gt;better&lt;/em&gt; to throw an error
if you called an un-primed memoized method after freeze. Especially
if it blew up in an obvious way, with an explicit message like
&quot;This memoized method cannot be called after freeze. Use :on_freeze
=&amp;gt; :prime&quot;&lt;/p&gt;
&lt;p&gt;But I admit, I don't really understand freezing well enough to
have a strong opinion. For my case your solution would work, so
I'll give it a shot.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-08T13:54:54+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2008-12-08T13:54:58+00:00</updated-at>
      <user-id type="integer">38672</user-id>
      <version type="integer">3</version>
      <user-name>Mike Grafton</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-28T20:55:30+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2008-12-28T20:55:34+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">4</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The above workaround did not work for me (freeze was still calling memoize_all). However, the following worked for me:

def freeze
  freeze_without_memoization
end</body>
      <body-html>&lt;div&gt;&lt;p&gt;The above workaround did not work for me (freeze was still
calling memoize_all). However, the following worked for me:&lt;/p&gt;
&lt;p&gt;def freeze freeze_without_memoization end&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-04T11:51:09+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2009-01-04T11:51:12+00:00</updated-at>
      <user-id type="integer">5965</user-id>
      <version type="integer">5</version>
      <user-name>Andreas Neuhaus</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1 for an :on_freeze =&gt; :flush</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for an :on_freeze =&amp;gt; :flush&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-09T16:00:31+01:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2009-07-09T16:00:34+01:00</updated-at>
      <user-id type="integer">48412</user-id>
      <version type="integer">6</version>
      <user-name>ransom-briggs (at uiowa)</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T15:55:16+01:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 424
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2009-08-19T15:55:21+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">7</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:36+01:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2010-05-04T18:48:36+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">8</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I like the :flush idea as well, +1.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I like the :flush idea as well, +1.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T18:23:15+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">870</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2010-11-04T18:23:20+00:00</updated-at>
      <user-id type="integer">10292</user-id>
      <version type="integer">9</version>
      <user-name>jerrett</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If &quot;one of the main reasons for freeze to invoke your memoized methods is to make sure the ivar is set since you can't modify them after&quot; why don't we just create the required ivars on freeze without actually priming the cache (and calling memoized methods in turn) then?</body>
      <body-html>&lt;div&gt;&lt;p&gt;If &quot;one of the main reasons for freeze to invoke your memoized
methods is to make sure the ivar is set since you can't modify them
after&quot; why don't we just create the required ivars on freeze
without actually priming the cache (and calling memoized methods in
turn) then?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-10T13:35:46+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">870</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2011-01-10T13:35:56+00:00</updated-at>
      <user-id type="integer">43210</user-id>
      <version type="integer">10</version>
      <user-name>Evgeniy Dolzhenko</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm not sure I'm going about this in the right way; but I made a patch that saves a Set of methods to be primed on freeze; and only primes those.

I can't seem to attach a patch; pasted it to this gist instead.
https://gist.github.com/773768</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm not sure I'm going about this in the right way; but I made a
patch that saves a Set of methods to be primed on freeze; and only
primes those.&lt;/p&gt;
&lt;p&gt;I can't seem to attach a patch; pasted it to this gist
instead.&lt;br&gt;
&lt;a href=
&quot;https://gist.github.com/773768&quot;&gt;https://gist.github.com/773768&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-11T00:16:30+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">870</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2011-01-11T00:16:41+00:00</updated-at>
      <user-id type="integer">131744</user-id>
      <version type="integer">11</version>
      <user-name>dspencer</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Really the &quot;prime on freeze&quot; idea makes little sense to me especially because memoization is arguments based so you'll be able to prime cache only for the methods which don't take any arguments. 
So I can't see the need in these additional options to memoize, just create the required (empty) ivars on freeze which will be filled later when required (turns out freeze is not &quot;deep&quot; in ruby, i.e. you can't add instance variables on the frozen object, but can change them freely)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Really the &quot;prime on freeze&quot; idea makes little sense to me
especially because memoization is arguments based so you'll be able
to prime cache only for the methods which don't take any
arguments.&lt;br&gt;
So I can't see the need in these additional options to memoize,
just create the required (empty) ivars on freeze which will be
filled later when required (turns out freeze is not &quot;deep&quot; in ruby,
i.e. you can't add instance variables on the frozen object, but can
change them freely)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-11T07:56:40+00:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">870</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2011-01-11T07:56:51+00:00</updated-at>
      <user-id type="integer">43210</user-id>
      <version type="integer">12</version>
      <user-name>Evgeniy Dolzhenko</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-12T01:00:09+01:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">870</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2011-04-12T01:00:20+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">13</version>
      <user-name>rails</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-12T01:00:09+01:00</created-at>
      <creator-id type="integer">38672</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1527</number>
      <permalink>for-activerecord-models-there-should-be-a-way-to-avoid-calling-memoized-methods-when-you-call-destroy</permalink>
      <priority type="integer">870</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord destroy memoizable memoize</tag>
      <title>For ActiveRecord models there should be a way to avoid calling memoized methods when you call #destroy</title>
      <updated-at type="datetime">2011-04-12T01:01:00+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">14</version>
      <user-name>rails</user-name>
      <creator-name>Mike Grafton</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1527</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
</ticket>
