<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">3</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-06T23:44:55+01:00</created-at>
  <creator-id type="integer">41571</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2435</number>
  <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
  <priority type="integer">1511</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>belongs_to polymorphic_association sti</tag>
  <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
  <updated-at type="datetime">2011-02-02T17:32:22+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">11</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Esteban</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>As you asked on irc, here's the patch to Rails 2.3.2

Polymorphic has_one and has_many should set proper polymorphic_type in case of STI
http://dev.rubyonrails.org/ticket/8841

&quot;Right now, it always sets the polymorphic_type as that of base class in case of STI is used. The worse part is, even the tests cases check for the wrong type.

This patch fixes the issue and also correct the test case, in addition to adding new test cases. &quot;</original-body>
  <latest-body>As you asked on irc, here's the patch to Rails 2.3.2

Polymorphic has_one and has_many should set proper polymorphic_type in case of STI
http://dev.rubyonrails.org/ticket/8841

&quot;Right now, it always sets the polymorphic_type as that of base class in case of STI is used. The worse part is, even the tests cases check for the wrong type.

This patch fixes the issue and also correct the test case, in addition to adding new test cases. &quot;</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;As you asked on irc, here's the patch to Rails 2.3.2&lt;/p&gt;
&lt;p&gt;Polymorphic has_one and has_many should set proper
polymorphic_type in case of STI &lt;a href=&quot;http://dev.rubyonrails.org/ticket/8841&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&quot;Right now, it always sets the polymorphic_type as that of base
class in case of STI is used. The worse part is, even the tests
cases check for the wrong type.&lt;/p&gt;
&lt;p&gt;This patch fixes the issue and also correct the test case, in
addition to adding new test cases. &quot;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>As you asked on irc, here's the patch to Rails 2.3.2

Polymorphic has_one and has_many should set proper polymorphic_type in case of STI
http://dev.rubyonrails.org/ticket/8841

&quot;Right now, it always sets the polymorphic_type as that of base class in case of STI is used. The worse part is, even the tests cases check for the wrong type.

This patch fixes the issue and also correct the test case, in addition to adding new test cases. &quot;</body>
      <body-html>&lt;div&gt;&lt;p&gt;As you asked on irc, here's the patch to Rails 2.3.2&lt;/p&gt;
&lt;p&gt;Polymorphic has_one and has_many should set proper
polymorphic_type in case of STI &lt;a href=&quot;http://dev.rubyonrails.org/ticket/8841&quot;&gt;http://dev.rubyonrails.org/ticke...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&quot;Right now, it always sets the polymorphic_type as that of base
class in case of STI is used. The worse part is, even the tests
cases check for the wrong type.&lt;/p&gt;
&lt;p&gt;This patch fixes the issue and also correct the test case, in
addition to adding new test cases. &quot;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-06T23:44:55+01:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-04-06T23:44:59+01:00</updated-at>
      <user-id type="integer">41571</user-id>
      <version type="integer">1</version>
      <user-name>Esteban</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Pratik</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This is missing the test cases; also, the issue raised in the ticket you linked to specifically occurs and causes problems only in the non-STI case.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is missing the test cases; also, the issue raised in the
ticket you linked to specifically occurs and causes problems only
in the non-STI case.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-06-08T21:28:38+01:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-06-08T21:28:44+01:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">2</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Pratik</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've updated the diff with passing test cases, only I'm not sure *why* this is the expected behaviour. in the application I'm working on there are Events and Shows. both are virtually identical except that Shows have bands and venues and there needs to be a distinction between the two, so STI is being attempted

the problem came up when bringing in a permission system. so saying these are our models:

    class Event &lt; ActiveRecord::Base
    end
    
    class Show &lt; Event
      belongs_to :venue
      has_many :bands
    end
    
    class Permission &lt; ActiveRecord::Base
      belongs_to :user
      belongs_to :object, :polymorphic =&gt; true
    end

when creating a show and adding it to the permissions table the `object_type` column is set to Event, which seems undesirable in this case. is this a problem with the application's design or a problem within ActiveRecord?</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've updated the diff with passing test cases, only I'm not sure
&lt;em&gt;why&lt;/em&gt; this is the expected behaviour. in the application I'm
working on there are Events and Shows. both are virtually identical
except that Shows have bands and venues and there needs to be a
distinction between the two, so STI is being attempted&lt;/p&gt;
&lt;p&gt;the problem came up when bringing in a permission system. so
saying these are our models:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Event &amp;lt; ActiveRecord::Base
end

class Show &amp;lt; Event
  belongs_to :venue
  has_many :bands
end

class Permission &amp;lt; ActiveRecord::Base
  belongs_to :user
  belongs_to :object, :polymorphic =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;when creating a show and adding it to the permissions table the
&lt;code&gt;object_type&lt;/code&gt; column is set to Event, which seems
undesirable in this case. is this a problem with the application's
design or a problem within ActiveRecord?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-21T05:52:49+01:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-10-21T05:52:54+01:00</updated-at>
      <user-id type="integer">20136</user-id>
      <version type="integer">3</version>
      <user-name>Mike Wyatt</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Pratik</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>whoops, here's a patch more like the one found in the ticket linked above</body>
      <body-html>&lt;div&gt;&lt;p&gt;whoops, here's a patch more like the one found in the ticket
linked above&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-21T06:14:57+01:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-10-21T06:15:00+01:00</updated-at>
      <user-id type="integer">20136</user-id>
      <version type="integer">4</version>
      <user-name>Mike Wyatt</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Pratik</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>The behavior in the current code is correct; putting the STI type into object_type essentially denormalizes the database - you've got the same value in object_type and the association target's type field. Changing (in your example) a Show to another subclass of Event would mean that you'd need to change every polymorphic association key referring to that record. Not a common case, but it happens.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The behavior in the current code is correct; putting the STI
type into object_type essentially denormalizes the database -
you've got the same value in object_type and the association
target's type field. Changing (in your example) a Show to another
subclass of Event would mean that you'd need to change every
polymorphic association key referring to that record. Not a common
case, but it happens.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-21T07:00:33+01:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-10-21T07:00:36+01:00</updated-at>
      <user-id type="integer">22589</user-id>
      <version type="integer">5</version>
      <user-name>Matt Jones</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Pratik</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>thanks for the explanation. I also didn't know this little ActiveRecord tidbit:

    Event.find(3)
    -&gt; #&lt;Event ...&gt;
    
    Event.find(4)
    -&gt; #&lt;Show ...&gt;

so when actually iterating through a collection of permissions, their classes are still respected. though it does make you use `object.class.base_class.name.to_s` when checking for permission</body>
      <body-html>&lt;div&gt;&lt;p&gt;thanks for the explanation. I also didn't know this little
ActiveRecord tidbit:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Event.find(3)
-&amp;gt; #&amp;lt;Event ...&amp;gt;

Event.find(4)
-&amp;gt; #&amp;lt;Show ...&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;so when actually iterating through a collection of permissions,
their classes are still respected. though it does make you use
&lt;code&gt;object.class.base_class.name.to_s&lt;/code&gt; when checking for
permission&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-21T08:10:52+01:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-10-21T08:10:58+01:00</updated-at>
      <user-id type="integer">20136</user-id>
      <version type="integer">6</version>
      <user-name>Mike Wyatt</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name>Pratik</assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I have a case where I think this patch makes sense.

### Votables:

class Poll &lt; ActiveRecord::Base
  has_many :possibles
end

class RankingPoll &lt; Poll
  has_many :votes, :as =&gt; :votable, :class_name =&gt; &quot;RankingVote&quot;
end

class RatingPoll &lt; Poll
  has_many :votes, :as =&gt; :votable, :class_name =&gt; &quot;RankingVote&quot;
end

class Request &lt; ActiveRecord::Base
  has_many :votes, :as =&gt; :votable, :class_name =&gt; &quot;RequestVote&quot;
end

### Votes

class Vote
  belongs_to :poll, :polymorpic =&gt; true
end

class RatingVote &lt; Vote
end

class RankingVote &lt; Vote
end

class RequestVote &lt; Vote
  belongs_to :votable, :polymorphic =&gt; :true, :class_name =&gt; &quot;Request&quot;
end



Each of these votes and votables has unique behavior (not included here). STI is necessary for the Ranking/Rating polls, but Request is too different and has its own table.

I want to be able to write:

poll = RankingPoll.new
vote = poll.votes.build

It's possible to make it work by replacing &quot;belong_to :votable, :polymorphic =&gt; true&quot;
with &quot;belongs_to :votable, :foreign_key =&gt; ..., :class_name =&gt; ...&quot;
(and that is what I am doing right now instead of the above code)

However, everything would be simpler if votable_type was always set to the correct 'Poll' subclass. 

Also, I don't ever imagine wanting to switch RatingPoll to RankingPoll by changing it's type - they are pretty different.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have a case where I think this patch makes sense.&lt;/p&gt;
&lt;h3&gt;Votables:&lt;/h3&gt;
&lt;p&gt;class Poll &amp;lt; ActiveRecord::Base&lt;br&gt;
has_many :possibles end&lt;/p&gt;
&lt;p&gt;class RankingPoll &amp;lt; Poll&lt;br&gt;
has_many :votes, :as =&amp;gt; :votable, :class_name =&amp;gt;
&quot;RankingVote&quot; end&lt;/p&gt;
&lt;p&gt;class RatingPoll &amp;lt; Poll&lt;br&gt;
has_many :votes, :as =&amp;gt; :votable, :class_name =&amp;gt;
&quot;RankingVote&quot; end&lt;/p&gt;
&lt;p&gt;class Request &amp;lt; ActiveRecord::Base&lt;br&gt;
has_many :votes, :as =&amp;gt; :votable, :class_name =&amp;gt;
&quot;RequestVote&quot; end&lt;/p&gt;
&lt;h3&gt;Votes&lt;/h3&gt;
&lt;p&gt;class Vote&lt;br&gt;
belongs_to :poll, :polymorpic =&amp;gt; true end&lt;/p&gt;
&lt;p&gt;class RatingVote &amp;lt; Vote&lt;br&gt;
end&lt;/p&gt;
&lt;p&gt;class RankingVote &amp;lt; Vote&lt;br&gt;
end&lt;/p&gt;
&lt;p&gt;class RequestVote &amp;lt; Vote&lt;br&gt;
belongs_to :votable, :polymorphic =&amp;gt; :true, :class_name =&amp;gt;
&quot;Request&quot; end&lt;/p&gt;
&lt;p&gt;Each of these votes and votables has unique behavior (not
included here). STI is necessary for the Ranking/Rating polls, but
Request is too different and has its own table.&lt;/p&gt;
&lt;p&gt;I want to be able to write:&lt;/p&gt;
&lt;p&gt;poll = RankingPoll.new&lt;br&gt;
vote = poll.votes.build&lt;/p&gt;
&lt;p&gt;It's possible to make it work by replacing &quot;belong_to :votable,
:polymorphic =&amp;gt; true&quot;&lt;br&gt;
with &quot;belongs_to :votable, :foreign_key =&amp;gt; ..., :class_name
=&amp;gt; ...&quot;&lt;br&gt;
(and that is what I am doing right now instead of the above
code)&lt;/p&gt;
&lt;p&gt;However, everything would be simpler if votable_type was always
set to the correct 'Poll' subclass.&lt;/p&gt;
&lt;p&gt;Also, I don't ever imagine wanting to switch RatingPoll to
RankingPoll by changing it's type - they are pretty different.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-25T09:50:44+00:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:assigned_user: 1366
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>belongs_to polymorphic_association sti</tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-11-25T09:50:47+00:00</updated-at>
      <user-id type="integer">61187</user-id>
      <version type="integer">7</version>
      <user-name>juozasgaigalas (at gmail)</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Same code as above but with formatting.

# Votables

@@@
class Poll &lt; ActiveRecord::Base
  has_many :possibles 
end

class RankingPoll &lt; Poll
  has_many :votes, :as =&gt; :votable, :class_name =&gt; &quot;RankingVote&quot; 
end

class RatingPoll &lt; Poll
  has_many :votes, :as =&gt; :votable, :class_name =&gt; &quot;RankingVote&quot; 
end

class Request &lt; ActiveRecord::Base
  has_many :votes, :as =&gt; :votable, :class_name =&gt; &quot;RequestVote&quot; 
end
@@@

# Votes

@@@
class Vote
  belongs_to :poll, :polymorpic =&gt; true 
end

class RatingVote &lt; Vote
end

class RankingVote &lt; Vote
end

class RequestVote &lt; Vote
  belongs_to :votable, :polymorphic =&gt; :true, :class_name =&gt; &quot;Request&quot; 
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Same code as above but with formatting.&lt;/p&gt;
&lt;h1&gt;Votables&lt;/h1&gt;
&lt;pre&gt;
&lt;code&gt;class Poll &amp;lt; ActiveRecord::Base
  has_many :possibles 
end

class RankingPoll &amp;lt; Poll
  has_many :votes, :as =&amp;gt; :votable, :class_name =&amp;gt; &quot;RankingVote&quot; 
end

class RatingPoll &amp;lt; Poll
  has_many :votes, :as =&amp;gt; :votable, :class_name =&amp;gt; &quot;RankingVote&quot; 
end

class Request &amp;lt; ActiveRecord::Base
  has_many :votes, :as =&amp;gt; :votable, :class_name =&amp;gt; &quot;RequestVote&quot; 
end&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;Votes&lt;/h1&gt;
&lt;pre&gt;
&lt;code&gt;class Vote
  belongs_to :poll, :polymorpic =&amp;gt; true 
end

class RatingVote &amp;lt; Vote
end

class RankingVote &amp;lt; Vote
end

class RequestVote &amp;lt; Vote
  belongs_to :votable, :polymorphic =&amp;gt; :true, :class_name =&amp;gt; &quot;Request&quot; 
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-25T09:53:31+00:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>belongs_to polymorphic_association sti</tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2009-11-25T09:53:34+00:00</updated-at>
      <user-id type="integer">61187</user-id>
      <version type="integer">8</version>
      <user-name>juozasgaigalas (at gmail)</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:45+01:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>belongs_to polymorphic_association sti</tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2010-05-04T18:48:45+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">9</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:39:39+00:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">1511</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>belongs_to polymorphic_association sti</tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2011-02-02T17:31:32+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">10</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:39:40+00:00</created-at>
      <creator-id type="integer">41571</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2435</number>
      <permalink>polymorphic-has_one-and-has_many-should-set-proper-polymorphic_type-in-case-of-sti-patch-ported-to-rails-23</permalink>
      <priority type="integer">1511</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>belongs_to polymorphic_association sti</tag>
      <title>&quot;Polymorphic has_one and has_many should set proper polymorphic_type in case of STI&quot;, patch ported to Rails 2.3</title>
      <updated-at type="datetime">2011-02-02T17:32:22+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">11</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Esteban</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2435</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
      <assigned-user-name nil="true"></assigned-user-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5656c761dfc8a3e3c7f310f1bdaaa944e9628c1f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-06T23:44:55+01:00</created-at>
      <filename>association_proxy.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">108628</id>
      <size type="integer">626</size>
      <uploader-id type="integer">41571</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/108628/association_proxy.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>20263feae3af0418ceff4981fd0b74cd62b35a99</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-21T05:52:49+01:00</created-at>
      <filename>association_proxy.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">300954</id>
      <size type="integer">1716</size>
      <uploader-id type="integer">20136</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/300954/association_proxy.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>d34507e6c4bf4db6d2a5b51ccf3d232b27ac7bb4</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-21T06:14:57+01:00</created-at>
      <filename>association_proxy.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">300963</id>
      <size type="integer">2211</size>
      <uploader-id type="integer">20136</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/300963/association_proxy.diff</url>
    </attachment>
  </attachments>
</ticket>
