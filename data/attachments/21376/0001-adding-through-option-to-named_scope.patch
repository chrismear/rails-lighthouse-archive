From 6f29ea723d95ffa1a95ceef4ba12dc7d7960d89c Mon Sep 17 00:00:00 2001
From: Matthew Rudy Jacobs <MatthewRudyJacobs@gmail.com>
Date: Sun, 27 Apr 2008 23:18:26 +0100
Subject: [PATCH] adding :through option to "named_scope"

named_scope is a welcome addition to rails core,
and it's a treat to see examples like;
  Topic.approved.replied
working right out of the box.

My patch aims to make it easier to define a combined scope;
  named_scope :approved_and_replied, :conditions =>
['replies_count > 0'], :through => :approved

My patch adds this functionality, as well as allowing arrays of :through
scopes (the array case needs a test to be added, but I need some advice
on how to extend the Topic class in test/models to allow this)

A clear next step is to allow the following;
  :through => {:written_before => "2007-01-01", :approved => nil}

which would call the "written_before" scope, passing it the value as
argument

A more amibitious aim is to allow arguments to accumulate from :through
scopes,

eg.
  named_scope :written_before_and_replied, :conditions => *blah*,
:through => :written_before

would yield a scope object which passed the first argument to
:written_before

  Topic.written_before_and_replied(1.year.ago)

same as Topic.written_before(1.year.ago).replied
---
 activerecord/lib/active_record/named_scope.rb |    7 ++++++-
 activerecord/test/cases/named_scope_test.rb   |    1 +
 activerecord/test/models/topic.rb             |    2 ++
 3 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/activerecord/lib/active_record/named_scope.rb b/activerecord/lib/active_record/named_scope.rb
index 120ec88..4372367 100644
--- a/activerecord/lib/active_record/named_scope.rb
+++ b/activerecord/lib/active_record/named_scope.rb
@@ -73,6 +73,8 @@ module ActiveRecord
       #   end
       #
       def named_scope(name, options = {}, &block)
+        through_scopes = []
+        through_scopes = [options.delete(:through)].flatten.compact if options.is_a?(Hash)
         scopes[name] = lambda do |parent_scope, *args|
           Scope.new(parent_scope, case options
             when Hash
@@ -83,7 +85,10 @@ module ActiveRecord
         end
         (class << self; self end).instance_eval do
           define_method name do |*args|
-            scopes[name].call(self, *args)
+            parent_scope = through_scopes.inject(self) do |parent_scope, through|
+              scopes[through].call(parent_scope)
+            end
+            scopes[name].call(parent_scope, *args)
           end
         end
       end
diff --git a/activerecord/test/cases/named_scope_test.rb b/activerecord/test/cases/named_scope_test.rb
index 3d3cecd..89bcd0c 100644
--- a/activerecord/test/cases/named_scope_test.rb
+++ b/activerecord/test/cases/named_scope_test.rb
@@ -66,6 +66,7 @@ class NamedScopeTest < ActiveRecord::TestCase
     assert !(approved & replied).empty?
 
     assert_equal approved & replied, Topic.approved.replied
+    assert_equal Topic.approved.replied, Topic.approved_and_replied
   end
 
   def test_procedural_scopes
diff --git a/activerecord/test/models/topic.rb b/activerecord/test/models/topic.rb
index d2503b7..037d96a 100755
--- a/activerecord/test/models/topic.rb
+++ b/activerecord/test/models/topic.rb
@@ -4,6 +4,8 @@ class Topic < ActiveRecord::Base
   }
   named_scope :approved, :conditions => {:approved => true}
   named_scope :replied, :conditions => ['replies_count > 0']
+  
+  named_scope :approved_and_replied, :conditions => ['replies_count > 0'], :through => :approved
   named_scope :anonymous_extension do
     def one
       1
-- 
1.5.4.3

