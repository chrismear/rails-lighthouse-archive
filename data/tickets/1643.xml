<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">141</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-12-27T08:22:03+00:00</created-at>
  <creator-id type="integer">29892</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1643</number>
  <permalink>association-proxies-should-correctly-respond-to-method-defined-via-method_missing</permalink>
  <priority type="integer">980</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord associations patch tested</tag>
  <title>Association proxies should correctly respond to method defined via #method_missing</title>
  <updated-at type="datetime">2009-05-18T22:35:16+01:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">5</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>Adam Milligan</creator-name>
  <assigned-user-name>Michael Koziarski</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1643</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch: http://rails.lighthouseapp.com/projects/8994/tickets/1083-calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch changed association proxies so they will not respond to private methods.  However, they also now will not respond to methods defined via #method_missing, since #respond_to? cannot return true for these methods.  

This new patch changes this so that proxies will respond to methods defined via #method_missing.  Tests included.

Note that this patch will produce a failing test unless applied after this patch: http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1642-hasonethroughassociation-should-not-be-a-child-of-hasmanythroughassociation .  This is because the HasOneThroughAssociation &lt; HasManyThroughAssociation subclass relationship imported unnecessary collection-specific behavior into the has_one :through association.</original-body>
  <latest-body>This patch: http://rails.lighthouseapp.com/projects/8994/tickets/1083-calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch changed association proxies so they will not respond to private methods.  However, they also now will not respond to methods defined via #method_missing, since #respond_to? cannot return true for these methods.  

This new patch changes this so that proxies will respond to methods defined via #method_missing.  Tests included.

Note that this patch will produce a failing test unless applied after this patch: http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1642-hasonethroughassociation-should-not-be-a-child-of-hasmanythroughassociation .  This is because the HasOneThroughAssociation &lt; HasManyThroughAssociation subclass relationship imported unnecessary collection-specific behavior into the has_one :through association.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch: &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/1083-calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt; changed association proxies
so they will not respond to private methods. However, they also now
will not respond to methods defined via #method_missing, since
#respond_to? cannot return true for these methods.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This new patch changes this so that proxies will respond to
methods defined via #method_missing. Tests included.&lt;/p&gt;
&lt;p&gt;Note that this patch will produce a failing test unless applied
after this patch: &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1642-hasonethroughassociation-should-not-be-a-child-of-hasmanythroughassociation&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt; . This is because the
HasOneThroughAssociation &amp;lt; HasManyThroughAssociation subclass
relationship imported unnecessary collection-specific behavior into
the has_one :through association.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch: http://rails.lighthouseapp.com/projects/8994/tickets/1083-calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch changed association proxies so they will not respond to private methods.  However, they also now will not respond to methods defined via #method_missing, since #respond_to? cannot return true for these methods.  

This new patch changes this so that proxies will respond to methods defined via #method_missing.  Tests included.

Note that this patch will produce a failing test unless applied after this patch: http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1642-hasonethroughassociation-should-not-be-a-child-of-hasmanythroughassociation .  This is because the HasOneThroughAssociation &lt; HasManyThroughAssociation subclass relationship imported unnecessary collection-specific behavior into the has_one :through association.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch: &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/1083-calls-to-private-methods-via-association-proxies-should-act-consistently-with-ruby-method-dispatch&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt; changed association proxies
so they will not respond to private methods. However, they also now
will not respond to methods defined via #method_missing, since
#respond_to? cannot return true for these methods.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This new patch changes this so that proxies will respond to
methods defined via #method_missing. Tests included.&lt;/p&gt;
&lt;p&gt;Note that this patch will produce a failing test unless applied
after this patch: &lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/1642-hasonethroughassociation-should-not-be-a-child-of-hasmanythroughassociation&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt; . This is because the
HasOneThroughAssociation &amp;lt; HasManyThroughAssociation subclass
relationship imported unnecessary collection-specific behavior into
the has_one :through association.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-27T08:22:03+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1643</number>
      <permalink>association-proxies-should-correctly-respond-to-method-defined-via-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch tested</tag>
      <title>Association proxies should correctly respond to method defined via #method_missing</title>
      <updated-at type="datetime">2008-12-27T08:22:06+00:00</updated-at>
      <user-id type="integer">29892</user-id>
      <version type="integer">1</version>
      <user-name>Adam Milligan</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>A fairly trivial amount of investigation made clear that #include? isn't going to cut it, performance-wise.  Here is a new patch with a small change.  Basically, I introduced a #respond_to? condition into the privacy check; this should short-circuit the conditional expression the vast majority of the time.  Only the small remainder of calls will execute the #include? condition as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;A fairly trivial amount of investigation made clear that
#include? isn't going to cut it, performance-wise. Here is a new
patch with a small change. Basically, I introduced a #respond_to?
condition into the privacy check; this should short-circuit the
conditional expression the vast majority of the time. Only the
small remainder of calls will execute the #include? condition as
well.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-28T01:50:34+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1643</number>
      <permalink>association-proxies-should-correctly-respond-to-method-defined-via-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch tested</tag>
      <title>Association proxies should correctly respond to method defined via #method_missing</title>
      <updated-at type="datetime">2008-12-28T01:50:36+00:00</updated-at>
      <user-id type="integer">29892</user-id>
      <version type="integer">2</version>
      <user-name>Adam Milligan</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>If someone is manually overriding method_missing(), they should also be overriding respond_to?() to match the behaviour of method_missing. I imagine that would solve the problem ?

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If someone is manually overriding method_missing(), they should
also be overriding respond_to?() to match the behaviour of
method_missing. I imagine that would solve the problem ?&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-08T14:37:14+00:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1643</number>
      <permalink>association-proxies-should-correctly-respond-to-method-defined-via-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations patch tested</tag>
      <title>Association proxies should correctly respond to method defined via #method_missing</title>
      <updated-at type="datetime">2009-03-08T14:37:19+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-18T21:42:55+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 1366
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1643</number>
      <permalink>association-proxies-should-correctly-respond-to-method-defined-via-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations patch tested</tag>
      <title>Association proxies should correctly respond to method defined via #method_missing</title>
      <updated-at type="datetime">2009-05-18T21:43:00+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">141</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>if you override method_missing you must also override respond_to? otherwise you'll have this problem.

Ditto any other code which checks respond_to? before sending a method.</body>
      <body-html>&lt;div&gt;&lt;p&gt;if you override method_missing you must also override
respond_to? otherwise you'll have this problem.&lt;/p&gt;
&lt;p&gt;Ditto any other code which checks respond_to? before sending a
method.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-18T22:35:13+01:00</created-at>
      <creator-id type="integer">29892</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1643</number>
      <permalink>association-proxies-should-correctly-respond-to-method-defined-via-method_missing</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord associations patch tested</tag>
      <title>Association proxies should correctly respond to method defined via #method_missing</title>
      <updated-at type="datetime">2009-05-18T22:35:16+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">5</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Adam Milligan</creator-name>
      <assigned-user-name>Michael Koziarski</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1643</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5ff842eab27bcbff493e0eabcc349fb595c56a21</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-12-27T08:22:03+00:00</created-at>
      <filename>method_missing.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">74026</id>
      <size type="integer">6574</size>
      <uploader-id type="integer">29892</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/74026/method_missing.patch</url>
    </attachment>
    <attachment type="Attachment">
      <code>84822835c949ef4c2a9e48b1804ec85efae5ee8f</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-12-28T01:50:35+00:00</created-at>
      <filename>method_missing.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">74084</id>
      <size type="integer">6887</size>
      <uploader-id type="integer">29892</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/74084/method_missing.patch</url>
    </attachment>
  </attachments>
</ticket>
