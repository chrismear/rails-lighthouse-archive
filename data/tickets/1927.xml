<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">424</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-10T10:07:27+00:00</created-at>
  <creator-id type="integer">46865</creator-id>
  <milestone-due-on type="datetime">2009-01-31T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">1927</number>
  <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
  <priority type="integer">29</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.3 performance rack</tag>
  <title>Connection pool timeout in production mode with AR sessions</title>
  <updated-at type="datetime">2009-04-04T17:37:34+01:00</updated-at>
  <user-id type="integer">37309</user-id>
  <version type="integer">10</version>
  <user-name>Ryan Angilly</user-name>
  <creator-name>Peter Nash</creator-name>
  <assigned-user-name>Joshua Peek</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
  <priority-name nil="true"></priority-name>
  <original-body>It would appear that in Production mode with ActiveRecord session store enabled there is a timeout (default 5 seconds) when the connection pool is full when using MySQL.

To reproduce:

Create a trivial rails app with 2.3RC1 with ActionController::Base.session_store = :active_record_store  (I'm using a trivial, scaffold generated model/controller)

Run the app in production mode, create a record in the database and then, in the browser, hit &quot;refresh&quot; on the index action of the controller at 1 second intervals.  Every 4-5 refreshes the browser will &quot;stall&quot; for 5 seconds although the log output shows no addtional time in the &quot;View:&quot; or &quot;DB:&quot; entries in the log (see below).

Increasing the size of &quot;pool&quot; in database.yml delays the onset of the problem.

Changing &quot;timeout&quot; from it's default of 5000 in database.yml appears to have no effect.

However, adding an entry for &quot;wait_timeout&quot; to database.yml and reducing it's default value(5) to 1 or 0.5 changes the &quot;stall&quot; time in the browser to 1 or 0.5 seconds.

The problem is not apparent in development mode (I believe the connection pool is cleared for each request).

The problem is not apparent if AR session store is disabled.

Monitoring the connections in MySQL Admin I can see that the number of open connections increases with each request until it reaches the value of &quot;pool&quot; at which point the problem starts - I assume that connections are not being closed at the end of each request.

Environment:

Server:
MySQL server 5.0.45 on a networked RedHat Linux server (not localhost)

Client 1:
CentOS 5.2, MySQL 5.0.45, mysql gem 2.7.3

Client 2:
Windows Vista, MySQL 5.0.67, mysql gem 2.7.3

Identical results on both clients.

I have not tried to reproduce the problem with any other database adapter.

Sample log output from hitting &quot;refresh&quot; in the browser aprrox. 1 second after each page reload - note the 5+ second delay between the last an penultimate request: 




Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:02:58) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 7ms (View: 2, DB: 6) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:02:59) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 7ms (View: 4, DB: 5) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:01) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 6ms (View: 3, DB: 10) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:02) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 8ms (View: 3, DB: 9) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:03) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 5ms (View: 2, DB: 52) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:09) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 6ms (View: 2, DB: 9) | 200 OK [http://localhost/movies]</original-body>
  <latest-body>It would appear that in Production mode with ActiveRecord session store enabled there is a timeout (default 5 seconds) when the connection pool is full when using MySQL.

To reproduce:

Create a trivial rails app with 2.3RC1 with ActionController::Base.session_store = :active_record_store  (I'm using a trivial, scaffold generated model/controller)

Run the app in production mode, create a record in the database and then, in the browser, hit &quot;refresh&quot; on the index action of the controller at 1 second intervals.  Every 4-5 refreshes the browser will &quot;stall&quot; for 5 seconds although the log output shows no addtional time in the &quot;View:&quot; or &quot;DB:&quot; entries in the log (see below).

Increasing the size of &quot;pool&quot; in database.yml delays the onset of the problem.

Changing &quot;timeout&quot; from it's default of 5000 in database.yml appears to have no effect.

However, adding an entry for &quot;wait_timeout&quot; to database.yml and reducing it's default value(5) to 1 or 0.5 changes the &quot;stall&quot; time in the browser to 1 or 0.5 seconds.

The problem is not apparent in development mode (I believe the connection pool is cleared for each request).

The problem is not apparent if AR session store is disabled.

Monitoring the connections in MySQL Admin I can see that the number of open connections increases with each request until it reaches the value of &quot;pool&quot; at which point the problem starts - I assume that connections are not being closed at the end of each request.

Environment:

Server:
MySQL server 5.0.45 on a networked RedHat Linux server (not localhost)

Client 1:
CentOS 5.2, MySQL 5.0.45, mysql gem 2.7.3

Client 2:
Windows Vista, MySQL 5.0.67, mysql gem 2.7.3

Identical results on both clients.

I have not tried to reproduce the problem with any other database adapter.

Sample log output from hitting &quot;refresh&quot; in the browser aprrox. 1 second after each page reload - note the 5+ second delay between the last an penultimate request: 




Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:02:58) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 7ms (View: 2, DB: 6) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:02:59) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 7ms (View: 4, DB: 5) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:01) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 6ms (View: 3, DB: 10) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:02) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 8ms (View: 3, DB: 9) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:03) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 5ms (View: 2, DB: 52) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:09) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 6ms (View: 2, DB: 9) | 200 OK [http://localhost/movies]</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It would appear that in Production mode with ActiveRecord
session store enabled there is a timeout (default 5 seconds) when
the connection pool is full when using MySQL.&lt;/p&gt;
&lt;p&gt;To reproduce:&lt;/p&gt;
&lt;p&gt;Create a trivial rails app with 2.3RC1 with
ActionController::Base.session_store = :active_record_store (I'm
using a trivial, scaffold generated model/controller)&lt;/p&gt;
&lt;p&gt;Run the app in production mode, create a record in the database
and then, in the browser, hit &quot;refresh&quot; on the index action of the
controller at 1 second intervals. Every 4-5 refreshes the browser
will &quot;stall&quot; for 5 seconds although the log output shows no
addtional time in the &quot;View:&quot; or &quot;DB:&quot; entries in the log (see
below).&lt;/p&gt;
&lt;p&gt;Increasing the size of &quot;pool&quot; in database.yml delays the onset
of the problem.&lt;/p&gt;
&lt;p&gt;Changing &quot;timeout&quot; from it's default of 5000 in database.yml
appears to have no effect.&lt;/p&gt;
&lt;p&gt;However, adding an entry for &quot;wait_timeout&quot; to database.yml and
reducing it's default value(5) to 1 or 0.5 changes the &quot;stall&quot; time
in the browser to 1 or 0.5 seconds.&lt;/p&gt;
&lt;p&gt;The problem is not apparent in development mode (I believe the
connection pool is cleared for each request).&lt;/p&gt;
&lt;p&gt;The problem is not apparent if AR session store is disabled.&lt;/p&gt;
&lt;p&gt;Monitoring the connections in MySQL Admin I can see that the
number of open connections increases with each request until it
reaches the value of &quot;pool&quot; at which point the problem starts - I
assume that connections are not being closed at the end of each
request.&lt;/p&gt;
&lt;p&gt;Environment:&lt;/p&gt;
&lt;p&gt;Server: MySQL server 5.0.45 on a networked RedHat Linux server
(not localhost)&lt;/p&gt;
&lt;p&gt;Client 1: CentOS 5.2, MySQL 5.0.45, mysql gem 2.7.3&lt;/p&gt;
&lt;p&gt;Client 2: Windows Vista, MySQL 5.0.67, mysql gem 2.7.3&lt;/p&gt;
&lt;p&gt;Identical results on both clients.&lt;/p&gt;
&lt;p&gt;I have not tried to reproduce the problem with any other
database adapter.&lt;/p&gt;
&lt;p&gt;Sample log output from hitting &quot;refresh&quot; in the browser aprrox.
1 second after each page reload - note the 5+ second delay between
the last an penultimate request:&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:02:58) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 7ms (View: 2, DB: 6) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:02:59) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 7ms (View: 4, DB: 5) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:01) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 6ms (View: 3, DB: 10) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:02) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 8ms (View: 3, DB: 9) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:03) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 5ms (View: 2, DB: 52) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:09) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 6ms (View: 2, DB: 9) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It would appear that in Production mode with ActiveRecord session store enabled there is a timeout (default 5 seconds) when the connection pool is full when using MySQL.

To reproduce:

Create a trivial rails app with 2.3RC1 with ActionController::Base.session_store = :active_record_store  (I'm using a trivial, scaffold generated model/controller)

Run the app in production mode, create a record in the database and then, in the browser, hit &quot;refresh&quot; on the index action of the controller at 1 second intervals.  Every 4-5 refreshes the browser will &quot;stall&quot; for 5 seconds although the log output shows no addtional time in the &quot;View:&quot; or &quot;DB:&quot; entries in the log (see below).

Increasing the size of &quot;pool&quot; in database.yml delays the onset of the problem.

Changing &quot;timeout&quot; from it's default of 5000 in database.yml appears to have no effect.

However, adding an entry for &quot;wait_timeout&quot; to database.yml and reducing it's default value(5) to 1 or 0.5 changes the &quot;stall&quot; time in the browser to 1 or 0.5 seconds.

The problem is not apparent in development mode (I believe the connection pool is cleared for each request).

The problem is not apparent if AR session store is disabled.

Monitoring the connections in MySQL Admin I can see that the number of open connections increases with each request until it reaches the value of &quot;pool&quot; at which point the problem starts - I assume that connections are not being closed at the end of each request.

Environment:

Server:
MySQL server 5.0.45 on a networked RedHat Linux server (not localhost)

Client 1:
CentOS 5.2, MySQL 5.0.45, mysql gem 2.7.3

Client 2:
Windows Vista, MySQL 5.0.67, mysql gem 2.7.3

Identical results on both clients.

I have not tried to reproduce the problem with any other database adapter.

Sample log output from hitting &quot;refresh&quot; in the browser aprrox. 1 second after each page reload - note the 5+ second delay between the last an penultimate request: 




Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:02:58) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 7ms (View: 2, DB: 6) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:02:59) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 7ms (View: 4, DB: 5) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:01) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 6ms (View: 3, DB: 10) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:02) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 8ms (View: 3, DB: 9) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:03) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 5ms (View: 2, DB: 52) | 200 OK [http://localhost/movies]


Processing MoviesController#index (for 127.0.0.1 at 2009-02-10 10:03:09) [GET]
Rendering template within layouts/movies
Rendering movies/index
Completed in 6ms (View: 2, DB: 9) | 200 OK [http://localhost/movies]</body>
      <body-html>&lt;div&gt;&lt;p&gt;It would appear that in Production mode with ActiveRecord
session store enabled there is a timeout (default 5 seconds) when
the connection pool is full when using MySQL.&lt;/p&gt;
&lt;p&gt;To reproduce:&lt;/p&gt;
&lt;p&gt;Create a trivial rails app with 2.3RC1 with
ActionController::Base.session_store = :active_record_store (I'm
using a trivial, scaffold generated model/controller)&lt;/p&gt;
&lt;p&gt;Run the app in production mode, create a record in the database
and then, in the browser, hit &quot;refresh&quot; on the index action of the
controller at 1 second intervals. Every 4-5 refreshes the browser
will &quot;stall&quot; for 5 seconds although the log output shows no
addtional time in the &quot;View:&quot; or &quot;DB:&quot; entries in the log (see
below).&lt;/p&gt;
&lt;p&gt;Increasing the size of &quot;pool&quot; in database.yml delays the onset
of the problem.&lt;/p&gt;
&lt;p&gt;Changing &quot;timeout&quot; from it's default of 5000 in database.yml
appears to have no effect.&lt;/p&gt;
&lt;p&gt;However, adding an entry for &quot;wait_timeout&quot; to database.yml and
reducing it's default value(5) to 1 or 0.5 changes the &quot;stall&quot; time
in the browser to 1 or 0.5 seconds.&lt;/p&gt;
&lt;p&gt;The problem is not apparent in development mode (I believe the
connection pool is cleared for each request).&lt;/p&gt;
&lt;p&gt;The problem is not apparent if AR session store is disabled.&lt;/p&gt;
&lt;p&gt;Monitoring the connections in MySQL Admin I can see that the
number of open connections increases with each request until it
reaches the value of &quot;pool&quot; at which point the problem starts - I
assume that connections are not being closed at the end of each
request.&lt;/p&gt;
&lt;p&gt;Environment:&lt;/p&gt;
&lt;p&gt;Server: MySQL server 5.0.45 on a networked RedHat Linux server
(not localhost)&lt;/p&gt;
&lt;p&gt;Client 1: CentOS 5.2, MySQL 5.0.45, mysql gem 2.7.3&lt;/p&gt;
&lt;p&gt;Client 2: Windows Vista, MySQL 5.0.67, mysql gem 2.7.3&lt;/p&gt;
&lt;p&gt;Identical results on both clients.&lt;/p&gt;
&lt;p&gt;I have not tried to reproduce the problem with any other
database adapter.&lt;/p&gt;
&lt;p&gt;Sample log output from hitting &quot;refresh&quot; in the browser aprrox.
1 second after each page reload - note the 5+ second delay between
the last an penultimate request:&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:02:58) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 7ms (View: 2, DB: 6) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:02:59) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 7ms (View: 4, DB: 5) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:01) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 6ms (View: 3, DB: 10) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:02) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 8ms (View: 3, DB: 9) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:03) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 5ms (View: 2, DB: 52) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;
&lt;p&gt;Processing MoviesController#index (for 127.0.0.1 at 2009-02-10
10:03:09) [GET] Rendering template within layouts/movies Rendering
movies/index Completed in 6ms (View: 2, DB: 9) | 200 OK [&lt;a href=&quot;http://localhost/movies&quot;&gt;http://localhost/movies&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-10T10:07:27+00:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-02-10T10:07:29+00:00</updated-at>
      <user-id type="integer">46865</user-id>
      <version type="integer">1</version>
      <user-name>Peter Nash</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I can confirm this on our pre-2.3RC1 app that's now running RC1. Pretty difficult to track down, given all of our logs show normal response times as Peter indicated. We were seeing this both on Ubuntu and on OS X.

Seems like it could pose a pretty significant problem; we've moved onto a different session store in the meantime, but given the somewhat common MySQL+ActiveRecordStore combo and how opaque it is to the developer, it might be worth taking a closer look at.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can confirm this on our pre-2.3RC1 app that's now running RC1.
Pretty difficult to track down, given all of our logs show normal
response times as Peter indicated. We were seeing this both on
Ubuntu and on OS X.&lt;/p&gt;
&lt;p&gt;Seems like it could pose a pretty significant problem; we've
moved onto a different session store in the meantime, but given the
somewhat common MySQL+ActiveRecordStore combo and how opaque it is
to the developer, it might be worth taking a closer look at.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-23T19:24:30+00:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-02-23T19:24:36+00:00</updated-at>
      <user-id type="integer">6262</user-id>
      <version type="integer">2</version>
      <user-name>Zach Holman</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-23T20:06:34+00:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-02-23T20:06:38+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">3</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For what it's worth, I observe this connection pool timeout behavior when running requests through mongrel (1.1.5) but everything appears to be fine when using thin (1.0.0).</body>
      <body-html>&lt;div&gt;&lt;p&gt;For what it's worth, I observe this connection pool timeout
behavior when running requests through mongrel (1.1.5) but
everything appears to be fine when using thin (1.0.0).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-24T15:30:47+00:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-02-24T15:30:48+00:00</updated-at>
      <user-id type="integer">48519</user-id>
      <version type="integer">4</version>
      <user-name>Brendan Schwartz</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>(from [1b22071b276a2a2b3e65e6db40c6a0aa92d9ebc3]) Ensure ActiveRecord session store's connections are checked in after each request [#1927 state:resolved]
http://github.com/rails/rails/commit/1b22071b276a2a2b3e65e6db40c6a0aa92d9ebc3</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from [1b22071b276a2a2b3e65e6db40c6a0aa92d9ebc3]) Ensure
ActiveRecord session store's connections are checked in after each
request [&lt;a href=&quot;/projects/8994/tickets/1927&quot; title=&quot;Ticket #1927&quot;&gt;#1927&lt;/a&gt; state:resolved] &lt;a href=&quot;http://github.com/rails/rails/commit/1b22071b276a2a2b3e65e6db40c6a0aa92d9ebc3&quot;&gt;
http://github.com/rails/rails/co...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-24T17:34:51+00:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-02-24T17:34:52+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">5</version>
      <user-name>Repository</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Thanks - that's fixed it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks - that's fixed it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-25T15:48:56+00:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-02-25T15:48:58+00:00</updated-at>
      <user-id type="integer">46865</user-id>
      <version type="integer">6</version>
      <user-name>Peter Nash</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey is anyone else seeing this again?  We were seeing a problem like this on our staging server for the past month (after upgrading to 2.3), but figured it might have just been our crappy staging server.  We just pushed live to a much more powerful slice, and sure enough every 20-30 seconds we see requests take 4.8 - 5.3 seconds to return in curl.

Josh, could you give some insight into what this problem actually was, and how you believed you were fixing it when you committed the patch?

Thanks guys,
Ryan</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey is anyone else seeing this again? We were seeing a problem
like this on our staging server for the past month (after upgrading
to 2.3), but figured it might have just been our crappy staging
server. We just pushed live to a much more powerful slice, and sure
enough every 20-30 seconds we see requests take 4.8 - 5.3 seconds
to return in curl.&lt;/p&gt;
&lt;p&gt;Josh, could you give some insight into what this problem
actually was, and how you believed you were fixing it when you
committed the patch?&lt;/p&gt;
&lt;p&gt;Thanks guys, Ryan&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-03T23:52:50+01:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;2.3&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3 performance rack</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-04-03T23:52:52+01:00</updated-at>
      <user-id type="integer">37309</user-id>
      <version type="integer">7</version>
      <user-name>Ryan Angilly</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Ryan

I'm not seeing the problem the the 2.3.2 gem version of Rails.  I've tested against the two apps where I originally saw this in production mode and all looks fine.  I've not tested against Edge.

Peter.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Ryan&lt;/p&gt;
&lt;p&gt;I'm not seeing the problem the the 2.3.2 gem version of Rails.
I've tested against the two apps where I originally saw this in
production mode and all looks fine. I've not tested against
Edge.&lt;/p&gt;
&lt;p&gt;Peter.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-04T15:55:01+01:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3 performance rack</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-04-04T15:55:02+01:00</updated-at>
      <user-id type="integer">46865</user-id>
      <version type="integer">8</version>
      <user-name>Peter Nash</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>.... that should have been &quot;with the 2.3.2&quot; .....</body>
      <body-html>&lt;div&gt;&lt;p&gt;.... that should have been &quot;with the 2.3.2&quot; .....&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-04T15:57:10+01:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3 performance rack</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-04-04T15:57:14+01:00</updated-at>
      <user-id type="integer">46865</user-id>
      <version type="integer">9</version>
      <user-name>Peter Nash</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yeah turns out we were using sql_session_store (it's a _really_ old app) instead of active_record_store.  We put AR store up on our staging slice and things seems to be behaving properly now.

Thanks for posting such a detailed description originally.  The wait_timeout set to 0.5 hack gave us just enough time to figure things out.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yeah turns out we were using sql_session_store (it's a
&lt;em&gt;really&lt;/em&gt; old app) instead of active_record_store. We put AR
store up on our staging slice and things seems to be behaving
properly now.&lt;/p&gt;
&lt;p&gt;Thanks for posting such a detailed description originally. The
wait_timeout set to 0.5 hack gave us just enough time to figure
things out.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-04-04T17:37:28+01:00</created-at>
      <creator-id type="integer">46865</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">1927</number>
      <permalink>connection-pool-timeout-in-production-mode-with-ar-sessions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.3 performance rack</tag>
      <title>Connection pool timeout in production mode with AR sessions</title>
      <updated-at type="datetime">2009-04-04T17:37:34+01:00</updated-at>
      <user-id type="integer">37309</user-id>
      <version type="integer">10</version>
      <user-name>Ryan Angilly</user-name>
      <creator-name>Peter Nash</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1927</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
</ticket>
