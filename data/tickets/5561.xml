<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-17T06:48:19+00:00</created-at>
  <creator-id type="integer">84181</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5561</number>
  <permalink>modelvalidate-is-dropped-if-the-same-validator-method-is-used-twice</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activemodel &quot;rails 30&quot; validate</tag>
  <title>model.validate is dropped if the same validator-method is used twice</title>
  <updated-at type="datetime">2011-02-17T06:48:19+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Marcel Jackwerth</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5561</url>
  <priority-name nil="true"></priority-name>
  <original-body>When having multiple calls to @validate@ (with different conditions) only one is used.

@@@
  class Topic
    include ActiveModel::Validations
    include ActiveModel::Validations::Callbacks

    Topic.validate :forbid_swearing, :on =&gt; :create
    Topic.validate :forbid_swearing, :on =&gt; :update, :unless =&gt; :approved

    def forbid_swearing
      # ...
    end
  end
@@@

@validate_quota@ won't be called on creation (@Post.new.valid?(:create)@).

The following test can be added to the #activemodel@ test set, to demonstrate that behavior:

@@@
  def test_multiple_validators_with_same_name
    Topic.class_eval do
      def forbid_swearing
        if title and title.include?(&quot;bad&quot;)
          errors.add(&quot;title&quot;, &quot;must not contain swearing&quot;)
        end
      end
    end
    
    Topic.validate :forbid_swearing, :on =&gt; :create
    Topic.validate :forbid_swearing, :on =&gt; :update, :unless =&gt; :approved
    
    t = Topic.new(:title =&gt; &quot;bad&quot;)
    assert t.invalid?(:create)
    assert t.invalid?(:update)
    
    t.approved = true
    assert t.invalid?(:create)
    assert t.valid?(:update)
  end
@@@

Now there are workarounds for this issue. Since the validators heavily rely on ActiveSupports callback implementation I don't think it makes much sense to it.

But a clear warning or exception would have made my debug-session a lot easier.</original-body>
  <latest-body>When having multiple calls to @validate@ (with different conditions) only one is used.

@@@
  class Topic
    include ActiveModel::Validations
    include ActiveModel::Validations::Callbacks

    Topic.validate :forbid_swearing, :on =&gt; :create
    Topic.validate :forbid_swearing, :on =&gt; :update, :unless =&gt; :approved

    def forbid_swearing
      # ...
    end
  end
@@@

@validate_quota@ won't be called on creation (@Post.new.valid?(:create)@).

The following test can be added to the #activemodel@ test set, to demonstrate that behavior:

@@@
  def test_multiple_validators_with_same_name
    Topic.class_eval do
      def forbid_swearing
        if title and title.include?(&quot;bad&quot;)
          errors.add(&quot;title&quot;, &quot;must not contain swearing&quot;)
        end
      end
    end
    
    Topic.validate :forbid_swearing, :on =&gt; :create
    Topic.validate :forbid_swearing, :on =&gt; :update, :unless =&gt; :approved
    
    t = Topic.new(:title =&gt; &quot;bad&quot;)
    assert t.invalid?(:create)
    assert t.invalid?(:update)
    
    t.approved = true
    assert t.invalid?(:create)
    assert t.valid?(:update)
  end
@@@

Now there are workarounds for this issue. Since the validators heavily rely on ActiveSupports callback implementation I don't think it makes much sense to it.

But a clear warning or exception would have made my debug-session a lot easier.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When having multiple calls to &lt;code&gt;validate&lt;/code&gt; (with
different conditions) only one is used.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  class Topic
    include ActiveModel::Validations
    include ActiveModel::Validations::Callbacks

    Topic.validate :forbid_swearing, :on =&amp;gt; :create
    Topic.validate :forbid_swearing, :on =&amp;gt; :update, :unless =&amp;gt; :approved

    def forbid_swearing
      # ...
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;validate_quota&lt;/code&gt; won't be called on creation
(&lt;code&gt;Post.new.valid?(:create)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The following test can be added to the #activemodel@ test set,
to demonstrate that behavior:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def test_multiple_validators_with_same_name
    Topic.class_eval do
      def forbid_swearing
        if title and title.include?(&quot;bad&quot;)
          errors.add(&quot;title&quot;, &quot;must not contain swearing&quot;)
        end
      end
    end
    
    Topic.validate :forbid_swearing, :on =&amp;gt; :create
    Topic.validate :forbid_swearing, :on =&amp;gt; :update, :unless =&amp;gt; :approved
    
    t = Topic.new(:title =&amp;gt; &quot;bad&quot;)
    assert t.invalid?(:create)
    assert t.invalid?(:update)
    
    t.approved = true
    assert t.invalid?(:create)
    assert t.valid?(:update)
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now there are workarounds for this issue. Since the validators
heavily rely on ActiveSupports callback implementation I don't
think it makes much sense to it.&lt;/p&gt;
&lt;p&gt;But a clear warning or exception would have made my
debug-session a lot easier.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When having multiple calls to @validate@ (with different conditions) only one is used.

@@@
  class Topic
    include ActiveModel::Validations
    include ActiveModel::Validations::Callbacks

    Topic.validate :forbid_swearing, :on =&gt; :create
    Topic.validate :forbid_swearing, :on =&gt; :update, :unless =&gt; :approved

    def forbid_swearing
      # ...
    end
  end
@@@

@validate_quota@ won't be called on creation (@Post.new.valid?(:create)@).

The following test can be added to the #activemodel@ test set, to demonstrate that behavior:

@@@
  def test_multiple_validators_with_same_name
    Topic.class_eval do
      def forbid_swearing
        if title and title.include?(&quot;bad&quot;)
          errors.add(&quot;title&quot;, &quot;must not contain swearing&quot;)
        end
      end
    end
    
    Topic.validate :forbid_swearing, :on =&gt; :create
    Topic.validate :forbid_swearing, :on =&gt; :update, :unless =&gt; :approved
    
    t = Topic.new(:title =&gt; &quot;bad&quot;)
    assert t.invalid?(:create)
    assert t.invalid?(:update)
    
    t.approved = true
    assert t.invalid?(:create)
    assert t.valid?(:update)
  end
@@@

Now there are workarounds for this issue. Since the validators heavily rely on ActiveSupports callback implementation I don't think it makes much sense to it.

But a clear warning or exception would have made my debug-session a lot easier.</body>
      <body-html>&lt;div&gt;&lt;p&gt;When having multiple calls to &lt;code&gt;validate&lt;/code&gt; (with
different conditions) only one is used.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  class Topic
    include ActiveModel::Validations
    include ActiveModel::Validations::Callbacks

    Topic.validate :forbid_swearing, :on =&amp;gt; :create
    Topic.validate :forbid_swearing, :on =&amp;gt; :update, :unless =&amp;gt; :approved

    def forbid_swearing
      # ...
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;validate_quota&lt;/code&gt; won't be called on creation
(&lt;code&gt;Post.new.valid?(:create)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The following test can be added to the #activemodel@ test set,
to demonstrate that behavior:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;  def test_multiple_validators_with_same_name
    Topic.class_eval do
      def forbid_swearing
        if title and title.include?(&quot;bad&quot;)
          errors.add(&quot;title&quot;, &quot;must not contain swearing&quot;)
        end
      end
    end
    
    Topic.validate :forbid_swearing, :on =&amp;gt; :create
    Topic.validate :forbid_swearing, :on =&amp;gt; :update, :unless =&amp;gt; :approved
    
    t = Topic.new(:title =&amp;gt; &quot;bad&quot;)
    assert t.invalid?(:create)
    assert t.invalid?(:update)
    
    t.approved = true
    assert t.invalid?(:create)
    assert t.valid?(:update)
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now there are workarounds for this issue. Since the validators
heavily rely on ActiveSupports callback implementation I don't
think it makes much sense to it.&lt;/p&gt;
&lt;p&gt;But a clear warning or exception would have made my
debug-session a lot easier.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-09-06T05:38:44+01:00</created-at>
      <creator-id type="integer">84181</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5561</number>
      <permalink>modelvalidate-is-dropped-if-the-same-validator-method-is-used-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel &quot;rails 3.0&quot; validate</tag>
      <title>model.validate is dropped if the same validator-method is used twice</title>
      <updated-at type="datetime">2010-09-06T05:38:49+01:00</updated-at>
      <user-id type="integer">84181</user-id>
      <version type="integer">1</version>
      <user-name>Marcel Jackwerth</user-name>
      <creator-name>Marcel Jackwerth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5561</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:32:30+00:00</created-at>
      <creator-id type="integer">84181</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activemodel &quot;rails 3.0&quot; validate
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5561</number>
      <permalink>modelvalidate-is-dropped-if-the-same-validator-method-is-used-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activemodel &quot;rails 30&quot; validate</tag>
      <title>model.validate is dropped if the same validator-method is used twice</title>
      <updated-at type="datetime">2011-02-02T16:57:18+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Marcel Jackwerth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5561</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:32:32+00:00</created-at>
      <creator-id type="integer">84181</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5561</number>
      <permalink>modelvalidate-is-dropped-if-the-same-validator-method-is-used-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activemodel &quot;rails 30&quot; validate</tag>
      <title>model.validate is dropped if the same validator-method is used twice</title>
      <updated-at type="datetime">2011-02-02T18:38:18+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Marcel Jackwerth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5561</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-17T06:35:16+00:00</created-at>
      <creator-id type="integer">84181</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5561</number>
      <permalink>modelvalidate-is-dropped-if-the-same-validator-method-is-used-twice</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activemodel &quot;rails 30&quot; validate</tag>
      <title>model.validate is dropped if the same validator-method is used twice</title>
      <updated-at type="datetime">2011-02-17T06:48:19+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">4</version>
      <user-name>gfh</user-name>
      <creator-name>Marcel Jackwerth</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5561</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
