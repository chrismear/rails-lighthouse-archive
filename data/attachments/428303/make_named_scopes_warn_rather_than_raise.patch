From 3a29b8fc473a15c321b1b1e7d95a31cdea681918 Mon Sep 17 00:00:00 2001
From: Matthew Rudy Jacobs <matthewrudyjacobs@gmail.com>
Date: Tue, 2 Mar 2010 11:24:35 +0800
Subject: [PATCH] defining a named_scope which overwrites an existing method is now allowed
 we just log a warning.

This was motivated by the fact that :open is defined on all classes
as such the named_scope "open" can never be used, without hacking
ActiveRecord with an "undef_method"
---
 activerecord/lib/active_record/named_scope.rb |    2 +-
 activerecord/test/cases/named_scope_test.rb   |   17 +++++++++++++++--
 2 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/activerecord/lib/active_record/named_scope.rb b/activerecord/lib/active_record/named_scope.rb
index f1f5685..ec920d6 100644
--- a/activerecord/lib/active_record/named_scope.rb
+++ b/activerecord/lib/active_record/named_scope.rb
@@ -101,7 +101,7 @@ module ActiveRecord
         name = name.to_sym
 
         if !scopes[name] && respond_to?(name, true)
-          raise ArgumentError, "Cannot define scope :#{name} because #{self.name}.#{name} method already exists."
+          logger.warn "Creating scope :#{name}. Overwriting existing method #{self.name}.#{name}."
         end
 
         scopes[name] = lambda do |parent_scope, *args|
diff --git a/activerecord/test/cases/named_scope_test.rb b/activerecord/test/cases/named_scope_test.rb
index 894d963..9974661 100644
--- a/activerecord/test/cases/named_scope_test.rb
+++ b/activerecord/test/cases/named_scope_test.rb
@@ -371,8 +371,21 @@ class NamedScopeTest < ActiveRecord::TestCase
   end
 
   def test_named_scopes_with_reserved_names
-    [:where, :with_scope].each do |protected_method|
-      assert_raises(ArgumentError) { Topic.scope protected_method }
+    class << Topic
+      def public_method; end
+      public :public_method
+      
+      def protected_method; end
+      protected :protected_method
+      
+      def private_method; end
+      private :private_method
+    end
+    
+    [:public_method, :protected_method, :private_method].each do |reserved_method|
+      assert Topic.respond_to?(reserved_method, true)
+      ActiveRecord::Base.logger.expects(:warn)
+      Topic.scope(reserved_method)
     end
   end
 
-- 
1.6.6

