<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-11-04T16:15:12+00:00</created-at>
  <creator-id type="integer">2309</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5917</number>
  <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>incomplete</state>
  <tag nil="true"></tag>
  <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
  <updated-at type="datetime">2011-02-25T23:49:56+00:00</updated-at>
  <user-id type="integer">15316</user-id>
  <version type="integer">9</version>
  <user-name>Aaron Patterson</user-name>
  <creator-name>James MacAulay</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
  <priority-name>Low</priority-name>
  <original-body>The problem comes from ticket [#3164](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164), which ended up as commit [6361d42](https://github.com/rails/rails/commit/6361d4234ca7f7c2dcb98e6ed34187d2933b56d7).

Its concern was with `AR::B#clone`, but it had the side effect of giving `dup` almost exactly the same behaviour as `clone`, since both methods call `initialize_copy` as a hook in ruby.

As a result, these are the main changes to duped records in Rails 3.0:

* `new_record` is set to true
* dirty tracking is set so that all attributes with non-default values are considered changed

Because `dup` itself also has a custom implementation which duplicates the attributes hash _after_ `initialize_copy` is called, the behaviour of `clone` to remove the primary key was _not_ carried over to `dup`. This combination of things means that, for example, you can't save a dup of a persisted record:

@@@ ruby
    &gt;&gt; Shop.first.dup.save
    ActiveRecord::RecordNotUnique: Mysql::Error: Duplicate entry '2' for key 1: INSERT INTO `shops` ...
@@@

The error is raised because Active Record looks at `new_record`, sees that it's true, decides to use an INSERT instead of an UPDATE, and the INSERT tries to save a primary key which already exists.

In Rails 2.x, `clone` was used to create copies intended to be saved as new records, while `dup` was a simpler operation which made a more direct (but still shallow) copy of the object. Both methods would remove the frozen state of the original.

Notes on the patch:

The provided patch brings `dup` back in line with its old behaviour, while maintaining the improvements made to `clone` which still seem to make sense. One minor improvement to `clone` was made as well, to set its `previous_changes` to an empty hash (since it doesn't make any sense for it to keep the hash from the original). Tests have been added both to establish new behaviour and clarify existing behaviour. Many of the dup tests were just copied from the clone tests with minor changes.

The weirdest aspect of the patch is that it checks `RUBY_VERSION` in a few places. This is ugly, I know. Basically I wanted people to still be able to override initialize_copy in the same way that the [original ticket](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164) intended, while also providing different behaviour for `clone` and `dup`. I thought an `initialize_dup` method would be a good thing to have, and then found that ruby 1.9 already has it. (Ruby 1.9 will first look for `initialize_clone` or `initialize_dup` as appropriate, and only fall back to `initialize_copy` if the more specific hook is not implemented.) So the checks on `RUBY_VERSION` are there so that `initialize_copy` is run exactly once, followed by `initialize_clone`/`initialize_dup` exactly once, regardless of ruby version. If the checks weren't there, then one method or another would be called twice, dependent on ruby version.

I can think of a few alternate ways to handle this, by sacrificing a little bit of backwards compatibility and/or ruby version compatibility for the sake of cleaner code.</original-body>
  <latest-body>The problem comes from ticket [#3164](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164), which ended up as commit [6361d42](https://github.com/rails/rails/commit/6361d4234ca7f7c2dcb98e6ed34187d2933b56d7).

Its concern was with `AR::B#clone`, but it had the side effect of giving `dup` almost exactly the same behaviour as `clone`, since both methods call `initialize_copy` as a hook in ruby.

As a result, these are the main changes to duped records in Rails 3.0:

* `new_record` is set to true
* dirty tracking is set so that all attributes with non-default values are considered changed

Because `dup` itself also has a custom implementation which duplicates the attributes hash _after_ `initialize_copy` is called, the behaviour of `clone` to remove the primary key was _not_ carried over to `dup`. This combination of things means that, for example, you can't save a dup of a persisted record:

@@@ ruby
    &gt;&gt; Shop.first.dup.save
    ActiveRecord::RecordNotUnique: Mysql::Error: Duplicate entry '2' for key 1: INSERT INTO `shops` ...
@@@

The error is raised because Active Record looks at `new_record`, sees that it's true, decides to use an INSERT instead of an UPDATE, and the INSERT tries to save a primary key which already exists.

In Rails 2.x, `clone` was used to create copies intended to be saved as new records, while `dup` was a simpler operation which made a more direct (but still shallow) copy of the object. Both methods would remove the frozen state of the original.

Notes on the patch:

The provided patch brings `dup` back in line with its old behaviour, while maintaining the improvements made to `clone` which still seem to make sense. One minor improvement to `clone` was made as well, to set its `previous_changes` to an empty hash (since it doesn't make any sense for it to keep the hash from the original). Tests have been added both to establish new behaviour and clarify existing behaviour. Many of the dup tests were just copied from the clone tests with minor changes.

The weirdest aspect of the patch is that it checks `RUBY_VERSION` in a few places. This is ugly, I know. Basically I wanted people to still be able to override initialize_copy in the same way that the [original ticket](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164) intended, while also providing different behaviour for `clone` and `dup`. I thought an `initialize_dup` method would be a good thing to have, and then found that ruby 1.9 already has it. (Ruby 1.9 will first look for `initialize_clone` or `initialize_dup` as appropriate, and only fall back to `initialize_copy` if the more specific hook is not implemented.) So the checks on `RUBY_VERSION` are there so that `initialize_copy` is run exactly once, followed by `initialize_clone`/`initialize_dup` exactly once, regardless of ruby version. If the checks weren't there, then one method or another would be called twice, dependent on ruby version.

I can think of a few alternate ways to handle this, by sacrificing a little bit of backwards compatibility and/or ruby version compatibility for the sake of cleaner code.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The problem comes from ticket &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164&quot;&gt;
#3164&lt;/a&gt;, which ended up as commit &lt;a href=
&quot;https://github.com/rails/rails/commit/6361d4234ca7f7c2dcb98e6ed34187d2933b56d7&quot;&gt;
6361d42&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its concern was with &lt;code&gt;AR::B#clone&lt;/code&gt;, but it had the
side effect of giving &lt;code&gt;dup&lt;/code&gt; almost exactly the same
behaviour as &lt;code&gt;clone&lt;/code&gt;, since both methods call
&lt;code&gt;initialize_copy&lt;/code&gt; as a hook in ruby.&lt;/p&gt;
&lt;p&gt;As a result, these are the main changes to duped records in
Rails 3.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new_record&lt;/code&gt; is set to true&lt;/li&gt;
&lt;li&gt;dirty tracking is set so that all attributes with non-default
values are considered changed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because &lt;code&gt;dup&lt;/code&gt; itself also has a custom implementation
which duplicates the attributes hash &lt;em&gt;after&lt;/em&gt;
&lt;code&gt;initialize_copy&lt;/code&gt; is called, the behaviour of
&lt;code&gt;clone&lt;/code&gt; to remove the primary key was &lt;em&gt;not&lt;/em&gt;
carried over to &lt;code&gt;dup&lt;/code&gt;. This combination of things means
that, for example, you can't save a dup of a persisted record:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    &amp;gt;&amp;gt; Shop.first.dup.save
    ActiveRecord::RecordNotUnique: Mysql::Error: Duplicate entry '2' for key 1: INSERT INTO `shops` ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The error is raised because Active Record looks at
&lt;code&gt;new_record&lt;/code&gt;, sees that it's true, decides to use an
INSERT instead of an UPDATE, and the INSERT tries to save a primary
key which already exists.&lt;/p&gt;
&lt;p&gt;In Rails 2.x, &lt;code&gt;clone&lt;/code&gt; was used to create copies
intended to be saved as new records, while &lt;code&gt;dup&lt;/code&gt; was a
simpler operation which made a more direct (but still shallow) copy
of the object. Both methods would remove the frozen state of the
original.&lt;/p&gt;
&lt;p&gt;Notes on the patch:&lt;/p&gt;
&lt;p&gt;The provided patch brings &lt;code&gt;dup&lt;/code&gt; back in line with its
old behaviour, while maintaining the improvements made to
&lt;code&gt;clone&lt;/code&gt; which still seem to make sense. One minor
improvement to &lt;code&gt;clone&lt;/code&gt; was made as well, to set its
&lt;code&gt;previous_changes&lt;/code&gt; to an empty hash (since it doesn't
make any sense for it to keep the hash from the original). Tests
have been added both to establish new behaviour and clarify
existing behaviour. Many of the dup tests were just copied from the
clone tests with minor changes.&lt;/p&gt;
&lt;p&gt;The weirdest aspect of the patch is that it checks
&lt;code&gt;RUBY_VERSION&lt;/code&gt; in a few places. This is ugly, I know.
Basically I wanted people to still be able to override
initialize_copy in the same way that the &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164&quot;&gt;
original ticket&lt;/a&gt; intended, while also providing different
behaviour for &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;dup&lt;/code&gt;. I thought an
&lt;code&gt;initialize_dup&lt;/code&gt; method would be a good thing to have,
and then found that ruby 1.9 already has it. (Ruby 1.9 will first
look for &lt;code&gt;initialize_clone&lt;/code&gt; or
&lt;code&gt;initialize_dup&lt;/code&gt; as appropriate, and only fall back to
&lt;code&gt;initialize_copy&lt;/code&gt; if the more specific hook is not
implemented.) So the checks on &lt;code&gt;RUBY_VERSION&lt;/code&gt; are there
so that &lt;code&gt;initialize_copy&lt;/code&gt; is run exactly once, followed
by &lt;code&gt;initialize_clone&lt;/code&gt;/&lt;code&gt;initialize_dup&lt;/code&gt;
exactly once, regardless of ruby version. If the checks weren't
there, then one method or another would be called twice, dependent
on ruby version.&lt;/p&gt;
&lt;p&gt;I can think of a few alternate ways to handle this, by
sacrificing a little bit of backwards compatibility and/or ruby
version compatibility for the sake of cleaner code.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The problem comes from ticket [#3164](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164), which ended up as commit [6361d42](https://github.com/rails/rails/commit/6361d4234ca7f7c2dcb98e6ed34187d2933b56d7).

Its concern was with `AR::B#clone`, but it had the side effect of giving `dup` almost exactly the same behaviour as `clone`, since both methods call `initialize_copy` as a hook in ruby.

As a result, these are the main changes to duped records in Rails 3.0:

* `new_record` is set to true
* dirty tracking is set so that all attributes with non-default values are considered changed

Because `dup` itself also has a custom implementation which duplicates the attributes hash _after_ `initialize_copy` is called, the behaviour of `clone` to remove the primary key was _not_ carried over to `dup`. This combination of things means that, for example, you can't save a dup of a persisted record:

@@@ ruby
    &gt;&gt; Shop.first.dup.save
    ActiveRecord::RecordNotUnique: Mysql::Error: Duplicate entry '2' for key 1: INSERT INTO `shops` ...
@@@

The error is raised because Active Record looks at `new_record`, sees that it's true, decides to use an INSERT instead of an UPDATE, and the INSERT tries to save a primary key which already exists.

In Rails 2.x, `clone` was used to create copies intended to be saved as new records, while `dup` was a simpler operation which made a more direct (but still shallow) copy of the object. Both methods would remove the frozen state of the original.

Notes on the patch:

The provided patch brings `dup` back in line with its old behaviour, while maintaining the improvements made to `clone` which still seem to make sense. One minor improvement to `clone` was made as well, to set its `previous_changes` to an empty hash (since it doesn't make any sense for it to keep the hash from the original). Tests have been added both to establish new behaviour and clarify existing behaviour. Many of the dup tests were just copied from the clone tests with minor changes.

The weirdest aspect of the patch is that it checks `RUBY_VERSION` in a few places. This is ugly, I know. Basically I wanted people to still be able to override initialize_copy in the same way that the [original ticket](https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164) intended, while also providing different behaviour for `clone` and `dup`. I thought an `initialize_dup` method would be a good thing to have, and then found that ruby 1.9 already has it. (Ruby 1.9 will first look for `initialize_clone` or `initialize_dup` as appropriate, and only fall back to `initialize_copy` if the more specific hook is not implemented.) So the checks on `RUBY_VERSION` are there so that `initialize_copy` is run exactly once, followed by `initialize_clone`/`initialize_dup` exactly once, regardless of ruby version. If the checks weren't there, then one method or another would be called twice, dependent on ruby version.

I can think of a few alternate ways to handle this, by sacrificing a little bit of backwards compatibility and/or ruby version compatibility for the sake of cleaner code.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The problem comes from ticket &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164&quot;&gt;
#3164&lt;/a&gt;, which ended up as commit &lt;a href=
&quot;https://github.com/rails/rails/commit/6361d4234ca7f7c2dcb98e6ed34187d2933b56d7&quot;&gt;
6361d42&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Its concern was with &lt;code&gt;AR::B#clone&lt;/code&gt;, but it had the
side effect of giving &lt;code&gt;dup&lt;/code&gt; almost exactly the same
behaviour as &lt;code&gt;clone&lt;/code&gt;, since both methods call
&lt;code&gt;initialize_copy&lt;/code&gt; as a hook in ruby.&lt;/p&gt;
&lt;p&gt;As a result, these are the main changes to duped records in
Rails 3.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new_record&lt;/code&gt; is set to true&lt;/li&gt;
&lt;li&gt;dirty tracking is set so that all attributes with non-default
values are considered changed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because &lt;code&gt;dup&lt;/code&gt; itself also has a custom implementation
which duplicates the attributes hash &lt;em&gt;after&lt;/em&gt;
&lt;code&gt;initialize_copy&lt;/code&gt; is called, the behaviour of
&lt;code&gt;clone&lt;/code&gt; to remove the primary key was &lt;em&gt;not&lt;/em&gt;
carried over to &lt;code&gt;dup&lt;/code&gt;. This combination of things means
that, for example, you can't save a dup of a persisted record:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    &amp;gt;&amp;gt; Shop.first.dup.save
    ActiveRecord::RecordNotUnique: Mysql::Error: Duplicate entry '2' for key 1: INSERT INTO `shops` ...&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The error is raised because Active Record looks at
&lt;code&gt;new_record&lt;/code&gt;, sees that it's true, decides to use an
INSERT instead of an UPDATE, and the INSERT tries to save a primary
key which already exists.&lt;/p&gt;
&lt;p&gt;In Rails 2.x, &lt;code&gt;clone&lt;/code&gt; was used to create copies
intended to be saved as new records, while &lt;code&gt;dup&lt;/code&gt; was a
simpler operation which made a more direct (but still shallow) copy
of the object. Both methods would remove the frozen state of the
original.&lt;/p&gt;
&lt;p&gt;Notes on the patch:&lt;/p&gt;
&lt;p&gt;The provided patch brings &lt;code&gt;dup&lt;/code&gt; back in line with its
old behaviour, while maintaining the improvements made to
&lt;code&gt;clone&lt;/code&gt; which still seem to make sense. One minor
improvement to &lt;code&gt;clone&lt;/code&gt; was made as well, to set its
&lt;code&gt;previous_changes&lt;/code&gt; to an empty hash (since it doesn't
make any sense for it to keep the hash from the original). Tests
have been added both to establish new behaviour and clarify
existing behaviour. Many of the dup tests were just copied from the
clone tests with minor changes.&lt;/p&gt;
&lt;p&gt;The weirdest aspect of the patch is that it checks
&lt;code&gt;RUBY_VERSION&lt;/code&gt; in a few places. This is ugly, I know.
Basically I wanted people to still be able to override
initialize_copy in the same way that the &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/3164&quot;&gt;
original ticket&lt;/a&gt; intended, while also providing different
behaviour for &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;dup&lt;/code&gt;. I thought an
&lt;code&gt;initialize_dup&lt;/code&gt; method would be a good thing to have,
and then found that ruby 1.9 already has it. (Ruby 1.9 will first
look for &lt;code&gt;initialize_clone&lt;/code&gt; or
&lt;code&gt;initialize_dup&lt;/code&gt; as appropriate, and only fall back to
&lt;code&gt;initialize_copy&lt;/code&gt; if the more specific hook is not
implemented.) So the checks on &lt;code&gt;RUBY_VERSION&lt;/code&gt; are there
so that &lt;code&gt;initialize_copy&lt;/code&gt; is run exactly once, followed
by &lt;code&gt;initialize_clone&lt;/code&gt;/&lt;code&gt;initialize_dup&lt;/code&gt;
exactly once, regardless of ruby version. If the checks weren't
there, then one method or another would be called twice, dependent
on ruby version.&lt;/p&gt;
&lt;p&gt;I can think of a few alternate ways to handle this, by
sacrificing a little bit of backwards compatibility and/or ruby
version compatibility for the sake of cleaner code.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T16:15:12+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2010-11-04T16:15:15+00:00</updated-at>
      <user-id type="integer">2309</user-id>
      <version type="integer">1</version>
      <user-name>James MacAulay</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T16:19:41+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2010-11-04T16:19:44+00:00</updated-at>
      <user-id type="integer">2309</user-id>
      <version type="integer">2</version>
      <user-name>James MacAulay</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T21:38:56+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord</tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2010-11-04T21:38:59+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">3</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-08T08:27:42+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2010-11-08T08:27:44+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">5</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>@James, would you mind rebasing this patch from 3-0-stable, and I'll apply it?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@James, would you mind rebasing this patch from 3-0-stable, and
I'll apply it?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-23T01:14:33+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2010-11-23T01:14:35+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">6</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-15T22:06:04+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2010-12-15T22:06:19+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">7</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/42275)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/42275&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-12T21:58:22+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 92071
</diffable-attributes>
      <milestone-id type="integer">101623</milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2011-02-12T21:58:22+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name>Low</priority-name>
      <milestone-title>3.0.5</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-25T23:49:42+00:00</created-at>
      <creator-id type="integer">2309</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 101623
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5917</number>
      <permalink>patch-activerecordbasedup-changed-drastically-in-30-should-be-brought-back-to-2x-behaviour</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>[PATCH] ActiveRecord::Base#dup changed drastically in 3.0, should be brought back to 2.x behaviour </title>
      <updated-at type="datetime">2011-02-25T23:49:56+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">9</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>James MacAulay</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5917</url>
      <priority-name>Low</priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>37a14e65198ac094d93987516d66b90bb70e504d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-11-04T16:19:41+00:00</created-at>
      <filename>fix-activerecord-dup.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">753658</id>
      <size type="integer">9664</size>
      <uploader-id type="integer">2309</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/753658/fix-activerecord-dup.diff</url>
    </attachment>
  </attachments>
</ticket>
