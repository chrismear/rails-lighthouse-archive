<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-07-13T21:51:51+01:00</created-at>
  <creator-id type="integer">62645</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2906</number>
  <permalink>activerecord-connection-sets-sigpipe-to-sig_ign-damaging-subshells</permalink>
  <priority type="integer">1991</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord sigpipe sig_ign</tag>
  <title>ActiveRecord connection sets SIGPIPE to SIG_IGN, damaging subshells</title>
  <updated-at type="datetime">2011-02-02T18:55:06+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">5</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>John Zwinck</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2906</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>The following code should print one line and exit.  Instead, it runs forever.

@@@ ruby
#!/usr/bin/ruby

require 'active_record'

ActiveRecord::Base.establish_connection(
    :adapter  =&gt; &quot;mysql&quot;,
    :database =&gt; &quot;your-db&quot;,
    :username =&gt; &quot;your-user&quot;,
    :password =&gt; &quot;your-password&quot;,
    :host     =&gt; &quot;your-server&quot;
    )

ActiveRecord::Base.connection # connect to the server

# Uncomment the following line to work around bug.
# Rather than using SIG_IGN, set a do-nothing signal handler.
# SIG_IGN is inherited by children (e.g. via system),
# which we don't necessarily want.
# The a specific handler like this will cause children to use SIG_DFL.
# Signal.trap(&quot;SIGPIPE&quot;) {}

# The following &quot;od&quot; command will print random bits forever,
# but it should be stopped by SIGPIPE from head after just one line.
# Unfortunately ActiveRecord will set SIGPIPE to SIG_DFL,
# causing od not to receive SIGPIPE and therefore to run forever.
system(&quot;od /dev/urandom | head -1&quot;) # should print one line and return
@@@

If your system doesn't have &quot;od&quot; or &quot;/dev/urandom&quot; you can instead use the following trivial C program (which if run by itself will terminate immediately):

@@@ c
#include &lt;signal.h&gt;

int main()
{
    for(;;)
        raise(SIGPIPE);
    return 0;
}
@@@

Then replace the string passed to &quot;system&quot; with the path to your compiled C program.

You can make the script work correctly by either commenting out the call to &quot;connection&quot; (or completely removing the ActiveRecord code), or by uncommenting the call to Signal.trap.  This latter workaround is probably what ActiveRecord should be doing on its own: setting a do-nothing signal handler for SIGPIPE, rather than using SIG_IGN.  This is because SIG_IGN is inherited by the child process in &quot;system&quot;, which causes surprising behavior, whereas any custom signal handler is reset to SIG_DFL upon exec.

Running the program under &quot;strace -f&quot; (on Linux; try &quot;truss&quot; on Solaris) shows the culprit call:

@@@ c
sigaction(SIGPIPE, {SIG_IGN}, {0x..., [], SA_RESTORER, 0x...}, 8)
@@@

&lt;em&gt;Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formating.&lt;/em&gt;</original-body>
  <latest-body>The following code should print one line and exit.  Instead, it runs forever.

@@@ ruby
#!/usr/bin/ruby

require 'active_record'

ActiveRecord::Base.establish_connection(
    :adapter  =&gt; &quot;mysql&quot;,
    :database =&gt; &quot;your-db&quot;,
    :username =&gt; &quot;your-user&quot;,
    :password =&gt; &quot;your-password&quot;,
    :host     =&gt; &quot;your-server&quot;
    )

ActiveRecord::Base.connection # connect to the server

# Uncomment the following line to work around bug.
# Rather than using SIG_IGN, set a do-nothing signal handler.
# SIG_IGN is inherited by children (e.g. via system),
# which we don't necessarily want.
# The a specific handler like this will cause children to use SIG_DFL.
# Signal.trap(&quot;SIGPIPE&quot;) {}

# The following &quot;od&quot; command will print random bits forever,
# but it should be stopped by SIGPIPE from head after just one line.
# Unfortunately ActiveRecord will set SIGPIPE to SIG_DFL,
# causing od not to receive SIGPIPE and therefore to run forever.
system(&quot;od /dev/urandom | head -1&quot;) # should print one line and return
@@@

If your system doesn't have &quot;od&quot; or &quot;/dev/urandom&quot; you can instead use the following trivial C program (which if run by itself will terminate immediately):

@@@ c
#include &lt;signal.h&gt;

int main()
{
    for(;;)
        raise(SIGPIPE);
    return 0;
}
@@@

Then replace the string passed to &quot;system&quot; with the path to your compiled C program.

You can make the script work correctly by either commenting out the call to &quot;connection&quot; (or completely removing the ActiveRecord code), or by uncommenting the call to Signal.trap.  This latter workaround is probably what ActiveRecord should be doing on its own: setting a do-nothing signal handler for SIGPIPE, rather than using SIG_IGN.  This is because SIG_IGN is inherited by the child process in &quot;system&quot;, which causes surprising behavior, whereas any custom signal handler is reset to SIG_DFL upon exec.

Running the program under &quot;strace -f&quot; (on Linux; try &quot;truss&quot; on Solaris) shows the culprit call:

@@@ c
sigaction(SIGPIPE, {SIG_IGN}, {0x..., [], SA_RESTORER, 0x...}, 8)
@@@

&lt;em&gt;Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formating.&lt;/em&gt;</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The following code should print one line and exit. Instead, it
runs forever.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;#!/usr/bin/ruby

require 'active_record'

ActiveRecord::Base.establish_connection(
    :adapter  =&amp;gt; &quot;mysql&quot;,
    :database =&amp;gt; &quot;your-db&quot;,
    :username =&amp;gt; &quot;your-user&quot;,
    :password =&amp;gt; &quot;your-password&quot;,
    :host     =&amp;gt; &quot;your-server&quot;
    )

ActiveRecord::Base.connection # connect to the server

# Uncomment the following line to work around bug.
# Rather than using SIG_IGN, set a do-nothing signal handler.
# SIG_IGN is inherited by children (e.g. via system),
# which we don't necessarily want.
# The a specific handler like this will cause children to use SIG_DFL.
# Signal.trap(&quot;SIGPIPE&quot;) {}

# The following &quot;od&quot; command will print random bits forever,
# but it should be stopped by SIGPIPE from head after just one line.
# Unfortunately ActiveRecord will set SIGPIPE to SIG_DFL,
# causing od not to receive SIGPIPE and therefore to run forever.
system(&quot;od /dev/urandom | head -1&quot;) # should print one line and return&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If your system doesn't have &quot;od&quot; or &quot;/dev/urandom&quot; you can
instead use the following trivial C program (which if run by itself
will terminate immediately):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c&quot;&gt;#include &amp;lt;signal.h&amp;gt;

int main()
{
    for(;;)
        raise(SIGPIPE);
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then replace the string passed to &quot;system&quot; with the path to your
compiled C program.&lt;/p&gt;
&lt;p&gt;You can make the script work correctly by either commenting out
the call to &quot;connection&quot; (or completely removing the ActiveRecord
code), or by uncommenting the call to Signal.trap. This latter
workaround is probably what ActiveRecord should be doing on its
own: setting a do-nothing signal handler for SIGPIPE, rather than
using SIG_IGN. This is because SIG_IGN is inherited by the child
process in &quot;system&quot;, which causes surprising behavior, whereas any
custom signal handler is reset to SIG_DFL upon exec.&lt;/p&gt;
&lt;p&gt;Running the program under &quot;strace -f&quot; (on Linux; try &quot;truss&quot; on
Solaris) shows the culprit call:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;c&quot;&gt;sigaction(SIGPIPE, {SIG_IGN}, {0x..., [], SA_RESTORER, 0x...}, 8)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Edited by &lt;a href=
&quot;https://rails.lighthouseapp.com/users/89656&quot;&gt;Rohit Arondekar&lt;/a&gt;
for formating.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The following code should print one line and exit.  Instead, it runs forever.

@@@ ruby
#!/usr/bin/ruby

require 'active_record'

ActiveRecord::Base.establish_connection(
    :adapter  =&gt; &quot;mysql&quot;,
    :database =&gt; &quot;your-db&quot;,
    :username =&gt; &quot;your-user&quot;,
    :password =&gt; &quot;your-password&quot;,
    :host     =&gt; &quot;your-server&quot;
    )

ActiveRecord::Base.connection # connect to the server

# Uncomment the following line to work around bug.
# Rather than using SIG_IGN, set a do-nothing signal handler.
# SIG_IGN is inherited by children (e.g. via system),
# which we don't necessarily want.
# The a specific handler like this will cause children to use SIG_DFL.
# Signal.trap(&quot;SIGPIPE&quot;) {}

# The following &quot;od&quot; command will print random bits forever,
# but it should be stopped by SIGPIPE from head after just one line.
# Unfortunately ActiveRecord will set SIGPIPE to SIG_DFL,
# causing od not to receive SIGPIPE and therefore to run forever.
system(&quot;od /dev/urandom | head -1&quot;) # should print one line and return
@@@

If your system doesn't have &quot;od&quot; or &quot;/dev/urandom&quot; you can instead use the following trivial C program (which if run by itself will terminate immediately):

@@@ c
#include &lt;signal.h&gt;

int main()
{
    for(;;)
        raise(SIGPIPE);
    return 0;
}
@@@

Then replace the string passed to &quot;system&quot; with the path to your compiled C program.

You can make the script work correctly by either commenting out the call to &quot;connection&quot; (or completely removing the ActiveRecord code), or by uncommenting the call to Signal.trap.  This latter workaround is probably what ActiveRecord should be doing on its own: setting a do-nothing signal handler for SIGPIPE, rather than using SIG_IGN.  This is because SIG_IGN is inherited by the child process in &quot;system&quot;, which causes surprising behavior, whereas any custom signal handler is reset to SIG_DFL upon exec.

Running the program under &quot;strace -f&quot; (on Linux; try &quot;truss&quot; on Solaris) shows the culprit call:

@@@ c
sigaction(SIGPIPE, {SIG_IGN}, {0x..., [], SA_RESTORER, 0x...}, 8)
@@@

&lt;em&gt;Edited by [Rohit Arondekar](https://rails.lighthouseapp.com/users/89656) for formating.&lt;/em&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;The following code should print one line and exit. Instead, it
runs forever.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;#!/usr/bin/ruby

require 'active_record'

ActiveRecord::Base.establish_connection(
    :adapter  =&amp;gt; &quot;mysql&quot;,
    :database =&amp;gt; &quot;your-db&quot;,
    :username =&amp;gt; &quot;your-user&quot;,
    :password =&amp;gt; &quot;your-password&quot;,
    :host     =&amp;gt; &quot;your-server&quot;
    )

ActiveRecord::Base.connection # connect to the server

# Uncomment the following line to work around bug.
# Rather than using SIG_IGN, set a do-nothing signal handler.
# SIG_IGN is inherited by children (e.g. via system),
# which we don't necessarily want.
# The a specific handler like this will cause children to use SIG_DFL.
# Signal.trap(&quot;SIGPIPE&quot;) {}

# The following &quot;od&quot; command will print random bits forever,
# but it should be stopped by SIGPIPE from head after just one line.
# Unfortunately ActiveRecord will set SIGPIPE to SIG_DFL,
# causing od not to receive SIGPIPE and therefore to run forever.
system(&quot;od /dev/urandom | head -1&quot;) # should print one line and return&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If your system doesn't have &quot;od&quot; or &quot;/dev/urandom&quot; you can
instead use the following trivial C program (which if run by itself
will terminate immediately):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;c&quot;&gt;#include &amp;lt;signal.h&amp;gt;

int main()
{
    for(;;)
        raise(SIGPIPE);
    return 0;
}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then replace the string passed to &quot;system&quot; with the path to your
compiled C program.&lt;/p&gt;
&lt;p&gt;You can make the script work correctly by either commenting out
the call to &quot;connection&quot; (or completely removing the ActiveRecord
code), or by uncommenting the call to Signal.trap. This latter
workaround is probably what ActiveRecord should be doing on its
own: setting a do-nothing signal handler for SIGPIPE, rather than
using SIG_IGN. This is because SIG_IGN is inherited by the child
process in &quot;system&quot;, which causes surprising behavior, whereas any
custom signal handler is reset to SIG_DFL upon exec.&lt;/p&gt;
&lt;p&gt;Running the program under &quot;strace -f&quot; (on Linux; try &quot;truss&quot; on
Solaris) shows the culprit call:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;c&quot;&gt;sigaction(SIGPIPE, {SIG_IGN}, {0x..., [], SA_RESTORER, 0x...}, 8)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Edited by &lt;a href=
&quot;https://rails.lighthouseapp.com/users/89656&quot;&gt;Rohit Arondekar&lt;/a&gt;
for formating.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-13T21:51:51+01:00</created-at>
      <creator-id type="integer">62645</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2906</number>
      <permalink>activerecord-connection-sets-sigpipe-to-sig_ign-damaging-subshells</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sigpipe sig_ign</tag>
      <title>ActiveRecord connection sets SIGPIPE to SIG_IGN, damaging subshells</title>
      <updated-at type="datetime">2010-07-05T09:51:06+01:00</updated-at>
      <user-id type="integer">62645</user-id>
      <version type="integer">1</version>
      <user-name>John Zwinck</user-name>
      <creator-name>John Zwinck</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2906</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can you tell me where ActiveRecord sets the SIG_IGN for SIGPIPE?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can you tell me where ActiveRecord sets the SIG_IGN for
SIGPIPE?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-01T16:58:37+01:00</created-at>
      <creator-id type="integer">62645</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2906</number>
      <permalink>activerecord-connection-sets-sigpipe-to-sig_ign-damaging-subshells</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sigpipe sig_ign</tag>
      <title>ActiveRecord connection sets SIGPIPE to SIG_IGN, damaging subshells</title>
      <updated-at type="datetime">2010-05-01T16:58:39+01:00</updated-at>
      <user-id type="integer">16504</user-id>
      <version type="integer">2</version>
      <user-name>Marius Nuennerich</user-name>
      <creator-name>John Zwinck</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2906</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:53+01:00</created-at>
      <creator-id type="integer">62645</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2906</number>
      <permalink>activerecord-connection-sets-sigpipe-to-sig_ign-damaging-subshells</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sigpipe sig_ign</tag>
      <title>ActiveRecord connection sets SIGPIPE to SIG_IGN, damaging subshells</title>
      <updated-at type="datetime">2010-05-04T18:48:53+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>John Zwinck</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2906</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:00:59+00:00</created-at>
      <creator-id type="integer">62645</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2906</number>
      <permalink>activerecord-connection-sets-sigpipe-to-sig_ign-damaging-subshells</permalink>
      <priority type="integer">1991</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord sigpipe sig_ign</tag>
      <title>ActiveRecord connection sets SIGPIPE to SIG_IGN, damaging subshells</title>
      <updated-at type="datetime">2011-02-02T18:55:00+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>John Zwinck</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2906</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:01:00+00:00</created-at>
      <creator-id type="integer">62645</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2906</number>
      <permalink>activerecord-connection-sets-sigpipe-to-sig_ign-damaging-subshells</permalink>
      <priority type="integer">1991</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord sigpipe sig_ign</tag>
      <title>ActiveRecord connection sets SIGPIPE to SIG_IGN, damaging subshells</title>
      <updated-at type="datetime">2011-02-02T18:55:06+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>John Zwinck</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2906</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
