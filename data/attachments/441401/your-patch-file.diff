From f0accd3bf9886305f5077988573b3def2bc417a5 Mon Sep 17 00:00:00 2001
From: Aaron Patterson <aaron.patterson@gmail.com>
Date: Wed, 10 Mar 2010 08:51:11 -0800
Subject: [PATCH] removing spawn from SpawnMethods

---
 activerecord/lib/active_record/named_scope.rb      |    2 +-
 activerecord/lib/active_record/relation.rb         |    4 ++++
 .../lib/active_record/relation/query_methods.rb    |   12 ++++++------
 .../lib/active_record/relation/spawn_methods.rb    |    8 ++------
 4 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/activerecord/lib/active_record/named_scope.rb b/activerecord/lib/active_record/named_scope.rb
index f1f5685..394e158 100644
--- a/activerecord/lib/active_record/named_scope.rb
+++ b/activerecord/lib/active_record/named_scope.rb
@@ -26,7 +26,7 @@ module ActiveRecord
         if options.present?
           Scope.init(self, options, &block)
         else
-          current_scoped_methods ? unscoped.merge(current_scoped_methods) : unscoped.spawn
+          current_scoped_methods ? unscoped.merge(current_scoped_methods) : unscoped.clone
         end
       end
 
diff --git a/activerecord/lib/active_record/relation.rb b/activerecord/lib/active_record/relation.rb
index 7bc3d3b..aca4629 100644
--- a/activerecord/lib/active_record/relation.rb
+++ b/activerecord/lib/active_record/relation.rb
@@ -21,6 +21,10 @@ module ActiveRecord
       with_create_scope { @klass.new(*args, &block) }
     end
 
+    def initialize_copy(other)
+      reset
+    end
+
     alias build new
 
     def create(*args, &block)
diff --git a/activerecord/lib/active_record/relation/query_methods.rb b/activerecord/lib/active_record/relation/query_methods.rb
index 6c4e84a..e00d9cd 100644
--- a/activerecord/lib/active_record/relation/query_methods.rb
+++ b/activerecord/lib/active_record/relation/query_methods.rb
@@ -8,7 +8,7 @@ module ActiveRecord
 
         class_eval <<-CEVAL
           def #{query_method}(*args)
-            new_relation = spawn
+            new_relation = clone
             value = Array.wrap(args.flatten).reject {|x| x.blank? }
             new_relation.#{query_method}_values += value if value.present?
             new_relation
@@ -19,7 +19,7 @@ module ActiveRecord
       [:where, :having].each do |query_method|
         class_eval <<-CEVAL
           def #{query_method}(*args)
-            new_relation = spawn
+            new_relation = clone
             value = build_where(*args)
             new_relation.#{query_method}_values += [*value] if value.present?
             new_relation
@@ -32,7 +32,7 @@ module ActiveRecord
 
         class_eval <<-CEVAL
           def #{query_method}(value = true)
-            new_relation = spawn
+            new_relation = clone
             new_relation.#{query_method}_value = value
             new_relation
           end
@@ -41,12 +41,12 @@ module ActiveRecord
     end
 
     def lock(locks = true)
-      relation = spawn
+      relation = clone
       case locks
       when String, TrueClass, NilClass
-        spawn.tap {|new_relation| new_relation.lock_value = locks || true }
+        clone.tap {|new_relation| new_relation.lock_value = locks || true }
       else
-        spawn.tap {|new_relation| new_relation.lock_value = false }
+        clone.tap {|new_relation| new_relation.lock_value = false }
       end
     end
 
diff --git a/activerecord/lib/active_record/relation/spawn_methods.rb b/activerecord/lib/active_record/relation/spawn_methods.rb
index cccf413..a18380f 100644
--- a/activerecord/lib/active_record/relation/spawn_methods.rb
+++ b/activerecord/lib/active_record/relation/spawn_methods.rb
@@ -1,11 +1,7 @@
 module ActiveRecord
   module SpawnMethods
-    def spawn
-      clone.reset
-    end
-
     def merge(r)
-      merged_relation = spawn
+      merged_relation = clone
       return merged_relation unless r
 
       merged_relation = merged_relation.eager_load(r.eager_load_values).preload(r.preload_values).includes(r.includes_values)
@@ -83,7 +79,7 @@ module ActiveRecord
                            :order, :select, :readonly, :group, :having, :from, :lock ]
 
     def apply_finder_options(options)
-      relation = spawn
+      relation = clone
       return relation unless options
 
       options.assert_valid_keys(VALID_FIND_OPTIONS)
-- 
1.6.6

