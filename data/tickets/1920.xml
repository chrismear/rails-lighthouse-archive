<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-09T15:19:10+00:00</created-at>
  <creator-id type="integer">29524</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1920</number>
  <permalink>named_scope-fails-when-accessed-through-a-class-method-over-an-association</permalink>
  <priority type="integer">1183</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>2.3 has_many named_scope</tag>
  <title>named_scope fails when accessed through a class method over an association</title>
  <updated-at type="datetime">2009-08-05T14:11:12+01:00</updated-at>
  <user-id type="integer">7211</user-id>
  <version type="integer">4</version>
  <user-name>CancelProfileIsBroken</user-name>
  <creator-name>unders</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1920</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>When accessing a class method, that calls a named scope, through an association collection, the association scope seems to be lost.

Given 

    Layer 
      has_many :items

    Item
      named_scope :published, lambda  { {:conditions =&gt; ['items.published_at &lt; ?', Time.now.utc] } }

      def.self find_v1
        all
      end

      def.self find_v2
        published
      end

    end

From the console:

    &gt; l = Layer.find :first

    &gt; l.items.find_v1
    SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1)
 
    &gt; l.items.find_v2 
    SELECT * FROM &quot;items&quot; WHERE (items.published_at &lt; '2009-02-09 15:03:18')

This is where it goes wrong `(&quot;items&quot;.layer_id = 1)` is missing!

    &gt; l.items.published
    SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1) AND (items.published_at &lt; '2009-02-09 15:06:37')

Accessing the named scope directly works perfectly fine


Versions:
Rails 2.3.0 (same issue in 2.2.2)
ruby 1.8.6 (2008-03-03 patchlevel 114) [universal-darwin9.0]
sqlite3 -version 3.6.10</original-body>
  <latest-body>When accessing a class method, that calls a named scope, through an association collection, the association scope seems to be lost.

Given 

    Layer 
      has_many :items

    Item
      named_scope :published, lambda  { {:conditions =&gt; ['items.published_at &lt; ?', Time.now.utc] } }

      def.self find_v1
        all
      end

      def.self find_v2
        published
      end

    end

From the console:

    &gt; l = Layer.find :first

    &gt; l.items.find_v1
    SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1)
 
    &gt; l.items.find_v2 
    SELECT * FROM &quot;items&quot; WHERE (items.published_at &lt; '2009-02-09 15:03:18')

This is where it goes wrong `(&quot;items&quot;.layer_id = 1)` is missing!

    &gt; l.items.published
    SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1) AND (items.published_at &lt; '2009-02-09 15:06:37')

Accessing the named scope directly works perfectly fine


Versions:
Rails 2.3.0 (same issue in 2.2.2)
ruby 1.8.6 (2008-03-03 patchlevel 114) [universal-darwin9.0]
sqlite3 -version 3.6.10</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When accessing a class method, that calls a named scope, through
an association collection, the association scope seems to be
lost.&lt;/p&gt;
&lt;p&gt;Given&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Layer
  has_many :items

Item
  named_scope :published, lambda  { {:conditions =&amp;gt; ['items.published_at &amp;lt; ?', Time.now.utc] } }

  def.self find_v1
    all
  end

  def.self find_v2
    published
  end

end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;From the console:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; l = Layer.find :first

&amp;gt; l.items.find_v1
SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1)

&amp;gt; l.items.find_v2 
SELECT * FROM &quot;items&quot; WHERE (items.published_at &amp;lt; '2009-02-09 15:03:18')
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is where it goes wrong &lt;code&gt;(&quot;items&quot;.layer_id = 1)&lt;/code&gt;
is missing!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; l.items.published
SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1) AND (items.published_at &amp;lt; '2009-02-09 15:06:37')
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Accessing the named scope directly works perfectly fine&lt;/p&gt;
&lt;p&gt;Versions: Rails 2.3.0 (same issue in 2.2.2) ruby 1.8.6
(2008-03-03 patchlevel 114) [universal-darwin9.0] sqlite3 -version
3.6.10&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When accessing a class method, that calls a named scope, through an association collection, the association scope seems to be lost.

Given 

    Layer 
      has_many :items

    Item
      named_scope :published, lambda  { {:conditions =&gt; ['items.published_at &lt; ?', Time.now.utc] } }

      def.self find_v1
        all
      end

      def.self find_v2
        published
      end

    end

From the console:

    &gt; l = Layer.find :first

    &gt; l.items.find_v1
    SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1)
 
    &gt; l.items.find_v2 
    SELECT * FROM &quot;items&quot; WHERE (items.published_at &lt; '2009-02-09 15:03:18')

This is where it goes wrong `(&quot;items&quot;.layer_id = 1)` is missing!

    &gt; l.items.published
    SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1) AND (items.published_at &lt; '2009-02-09 15:06:37')

Accessing the named scope directly works perfectly fine


Versions:
Rails 2.3.0 (same issue in 2.2.2)
ruby 1.8.6 (2008-03-03 patchlevel 114) [universal-darwin9.0]
sqlite3 -version 3.6.10</body>
      <body-html>&lt;div&gt;&lt;p&gt;When accessing a class method, that calls a named scope, through
an association collection, the association scope seems to be
lost.&lt;/p&gt;
&lt;p&gt;Given&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Layer
  has_many :items

Item
  named_scope :published, lambda  { {:conditions =&amp;gt; ['items.published_at &amp;lt; ?', Time.now.utc] } }

  def.self find_v1
    all
  end

  def.self find_v2
    published
  end

end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;From the console:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; l = Layer.find :first

&amp;gt; l.items.find_v1
SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1)

&amp;gt; l.items.find_v2 
SELECT * FROM &quot;items&quot; WHERE (items.published_at &amp;lt; '2009-02-09 15:03:18')
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is where it goes wrong &lt;code&gt;(&quot;items&quot;.layer_id = 1)&lt;/code&gt;
is missing!&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt; l.items.published
SELECT * FROM &quot;items&quot; WHERE (&quot;items&quot;.layer_id = 1) AND (items.published_at &amp;lt; '2009-02-09 15:06:37')
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Accessing the named scope directly works perfectly fine&lt;/p&gt;
&lt;p&gt;Versions: Rails 2.3.0 (same issue in 2.2.2) ruby 1.8.6
(2008-03-03 patchlevel 114) [universal-darwin9.0] sqlite3 -version
3.6.10&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-09T15:19:10+00:00</created-at>
      <creator-id type="integer">29524</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1920</number>
      <permalink>named_scope-fails-when-accessed-through-a-class-method-over-an-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3 has_many named_scope</tag>
      <title>named_scope fails when accessed through a class method over an association</title>
      <updated-at type="datetime">2009-02-09T15:19:13+00:00</updated-at>
      <user-id type="integer">29524</user-id>
      <version type="integer">1</version>
      <user-name>unders</user-name>
      <creator-name>unders</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1920</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Looks like the scoped_methods get popped before the query is actually executed. The call graph for l.items.find_v2 and l.items.published is actually quite different and I couldn't get my head around it to figure out how to fix this the right way. However applying this change to the named_scope.rb file fixes the issue and doesn't brake any existing tests in rails version 2.2.2. I don't consider this at proper patch just as a temp fix in case someone needs it.

@@@
--- a/activerecord/lib/active_record/named_scope.rb
+++ b/activerecord/lib/active_record/named_scope.rb
@@ -114,6 +114,7 @@ module ActiveRecord
         [options[:extend]].flatten.each { |extension| extend extension } if options[:extend]
         extend Module.new(&amp;block) if block_given?
         @proxy_scope, @proxy_options = proxy_scope, options.except(:extend)
+        @scoped_methods = proxy_scope.send(:scoped_methods).dup
       end
 
       def reload
@@ -166,9 +167,11 @@ module ActiveRecord
         if scopes.include?(method)
           scopes[method].call(self, *args)
         else
-          with_scope :find =&gt; proxy_options, :create =&gt; proxy_options[:conditions].is_a?(Hash) ?  proxy_options[:conditions] : {} do
-            method = :new if method == :build
-            proxy_scope.send(method, *args, &amp;block)
+          with_scope(@scoped_methods.last || {}) do
+            with_scope :find =&gt; proxy_options, :create =&gt; proxy_options[:conditions].is_a?(Hash) ?  proxy_options[:conditions] : {} do
+              method = :new if method == :build
+              proxy_scope.send(method, *args, &amp;block)
+            end
           end
         end
       end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Looks like the scoped_methods get popped before the query is
actually executed. The call graph for l.items.find_v2 and
l.items.published is actually quite different and I couldn't get my
head around it to figure out how to fix this the right way. However
applying this change to the named_scope.rb file fixes the issue and
doesn't brake any existing tests in rails version 2.2.2. I don't
consider this at proper patch just as a temp fix in case someone
needs it.&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
--- a/activerecord/lib/active_record/named_scope.rb
+++ b/activerecord/lib/active_record/named_scope.rb
@@ -114,6 +114,7 @@ module ActiveRecord
         [options[:extend]].flatten.each { |extension| extend extension } if options[:extend]
         extend Module.new(&amp;amp;block) if block_given?
         @proxy_scope, @proxy_options = proxy_scope, options.except(:extend)
+        @scoped_methods = proxy_scope.send(:scoped_methods).dup
       end
 
       def reload
@@ -166,9 +167,11 @@ module ActiveRecord
         if scopes.include?(method)
           scopes[method].call(self, *args)
         else
-          with_scope :find =&amp;gt; proxy_options, :create =&amp;gt; proxy_options[:conditions].is_a?(Hash) ?  proxy_options[:conditions] : {} do
-            method = :new if method == :build
-            proxy_scope.send(method, *args, &amp;amp;block)
+          with_scope(@scoped_methods.last || {}) do
+            with_scope :find =&amp;gt; proxy_options, :create =&amp;gt; proxy_options[:conditions].is_a?(Hash) ?  proxy_options[:conditions] : {} do
+              method = :new if method == :build
+              proxy_scope.send(method, *args, &amp;amp;block)
+            end
           end
         end
       end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-26T05:46:04+00:00</created-at>
      <creator-id type="integer">29524</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1920</number>
      <permalink>named_scope-fails-when-accessed-through-a-class-method-over-an-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3 has_many named_scope</tag>
      <title>named_scope fails when accessed through a class method over an association</title>
      <updated-at type="datetime">2009-02-26T05:46:07+00:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">2</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>unders</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1920</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ah actually this bug is already resolved in couple other tickets. E.g. #1960</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ah actually this bug is already resolved in couple other
tickets. E.g. &lt;a href=&quot;/projects/8994/tickets/1960&quot; title=&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-26T05:58:37+00:00</created-at>
      <creator-id type="integer">29524</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1920</number>
      <permalink>named_scope-fails-when-accessed-through-a-class-method-over-an-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3 has_many named_scope</tag>
      <title>named_scope fails when accessed through a class method over an association</title>
      <updated-at type="datetime">2009-02-26T05:58:40+00:00</updated-at>
      <user-id type="integer">2529</user-id>
      <version type="integer">3</version>
      <user-name>Daniel Guettler</user-name>
      <creator-name>unders</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1920</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Resolved by #1960</body>
      <body-html>&lt;div&gt;&lt;p&gt;Resolved by &lt;a href=&quot;/projects/8994/tickets/1960&quot; title=
&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-08-05T14:11:09+01:00</created-at>
      <creator-id type="integer">29524</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1920</number>
      <permalink>named_scope-fails-when-accessed-through-a-class-method-over-an-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>2.3 has_many named_scope</tag>
      <title>named_scope fails when accessed through a class method over an association</title>
      <updated-at type="datetime">2009-08-05T14:11:12+01:00</updated-at>
      <user-id type="integer">7211</user-id>
      <version type="integer">4</version>
      <user-name>CancelProfileIsBroken</user-name>
      <creator-name>unders</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1920</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
