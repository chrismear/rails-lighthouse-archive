<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-05T16:03:53+00:00</created-at>
  <creator-id type="integer">32604</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6377</number>
  <permalink>support-for-disabling-other_idsidid-method-on-associations</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Support for disabling other_ids=(id,id,...) method on associations?</title>
  <updated-at type="datetime">2011-05-07T01:01:39+01:00</updated-at>
  <user-id type="integer">136779</user-id>
  <version type="integer">3</version>
  <user-name>rails</user-name>
  <creator-name>Joseph Palermo</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6377</url>
  <priority-name nil="true"></priority-name>
  <original-body>In my mind, the _ids= setter methods are very dangerous.  I'd say typically people use update_attributes, and typically people don't make all of their models attr_acessible.

This combination leads to the situation where malicious users can do very unexpected things, very easily.

The regular others= method is safe because you can't get classes through a form post, but getting a list of ids through a form post is a no brainer.

Nested Attributes are very well done, safe by default.  You have to turn them on, you even have to explicitly turn on the ability to destroy.  Giving every has_many association a unprotected id setter is just not safe by default.

So what I propose, and if there is support for this I can code it up, is a Rails::Application level config flag that would cause the _ids= to not be created.  In my mind, at some point moving forward, this should go from being off by default, to on by default.  But that's a decision of others to make.  Perhaps there could also be an option to has_many to enable the creation of the _ids= setter, even if the app level flag is set to disable them.

Other options would be to keep the other_ids= setters, but make them attr_protected.  This is a little bit uglier, since there is a dependency if you have already called attr_accessible we would need to detect that, and not do anything in that case.  But also doable.

Thoughts?  Am I the only one who thinks these are dangerous methods to create by default?</original-body>
  <latest-body>In my mind, the _ids= setter methods are very dangerous.  I'd say typically people use update_attributes, and typically people don't make all of their models attr_acessible.

This combination leads to the situation where malicious users can do very unexpected things, very easily.

The regular others= method is safe because you can't get classes through a form post, but getting a list of ids through a form post is a no brainer.

Nested Attributes are very well done, safe by default.  You have to turn them on, you even have to explicitly turn on the ability to destroy.  Giving every has_many association a unprotected id setter is just not safe by default.

So what I propose, and if there is support for this I can code it up, is a Rails::Application level config flag that would cause the _ids= to not be created.  In my mind, at some point moving forward, this should go from being off by default, to on by default.  But that's a decision of others to make.  Perhaps there could also be an option to has_many to enable the creation of the _ids= setter, even if the app level flag is set to disable them.

Other options would be to keep the other_ids= setters, but make them attr_protected.  This is a little bit uglier, since there is a dependency if you have already called attr_accessible we would need to detect that, and not do anything in that case.  But also doable.

Thoughts?  Am I the only one who thinks these are dangerous methods to create by default?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In my mind, the _ids= setter methods are very dangerous. I'd say
typically people use update_attributes, and typically people don't
make all of their models attr_acessible.&lt;/p&gt;
&lt;p&gt;This combination leads to the situation where malicious users
can do very unexpected things, very easily.&lt;/p&gt;
&lt;p&gt;The regular others= method is safe because you can't get classes
through a form post, but getting a list of ids through a form post
is a no brainer.&lt;/p&gt;
&lt;p&gt;Nested Attributes are very well done, safe by default. You have
to turn them on, you even have to explicitly turn on the ability to
destroy. Giving every has_many association a unprotected id setter
is just not safe by default.&lt;/p&gt;
&lt;p&gt;So what I propose, and if there is support for this I can code
it up, is a Rails::Application level config flag that would cause
the &lt;em&gt;ids= to not be created. In my mind, at some point moving
forward, this should go from being off by default, to on by
default. But that's a decision of others to make. Perhaps there
could also be an option to has_many to enable the creation of
the&lt;/em&gt; ids= setter, even if the app level flag is set to disable
them.&lt;/p&gt;
&lt;p&gt;Other options would be to keep the other_ids= setters, but make
them attr_protected. This is a little bit uglier, since there is a
dependency if you have already called attr_accessible we would need
to detect that, and not do anything in that case. But also
doable.&lt;/p&gt;
&lt;p&gt;Thoughts? Am I the only one who thinks these are dangerous
methods to create by default?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In my mind, the _ids= setter methods are very dangerous.  I'd say typically people use update_attributes, and typically people don't make all of their models attr_acessible.

This combination leads to the situation where malicious users can do very unexpected things, very easily.

The regular others= method is safe because you can't get classes through a form post, but getting a list of ids through a form post is a no brainer.

Nested Attributes are very well done, safe by default.  You have to turn them on, you even have to explicitly turn on the ability to destroy.  Giving every has_many association a unprotected id setter is just not safe by default.

So what I propose, and if there is support for this I can code it up, is a Rails::Application level config flag that would cause the _ids= to not be created.  In my mind, at some point moving forward, this should go from being off by default, to on by default.  But that's a decision of others to make.  Perhaps there could also be an option to has_many to enable the creation of the _ids= setter, even if the app level flag is set to disable them.

Other options would be to keep the other_ids= setters, but make them attr_protected.  This is a little bit uglier, since there is a dependency if you have already called attr_accessible we would need to detect that, and not do anything in that case.  But also doable.

Thoughts?  Am I the only one who thinks these are dangerous methods to create by default?</body>
      <body-html>&lt;div&gt;&lt;p&gt;In my mind, the _ids= setter methods are very dangerous. I'd say
typically people use update_attributes, and typically people don't
make all of their models attr_acessible.&lt;/p&gt;
&lt;p&gt;This combination leads to the situation where malicious users
can do very unexpected things, very easily.&lt;/p&gt;
&lt;p&gt;The regular others= method is safe because you can't get classes
through a form post, but getting a list of ids through a form post
is a no brainer.&lt;/p&gt;
&lt;p&gt;Nested Attributes are very well done, safe by default. You have
to turn them on, you even have to explicitly turn on the ability to
destroy. Giving every has_many association a unprotected id setter
is just not safe by default.&lt;/p&gt;
&lt;p&gt;So what I propose, and if there is support for this I can code
it up, is a Rails::Application level config flag that would cause
the &lt;em&gt;ids= to not be created. In my mind, at some point moving
forward, this should go from being off by default, to on by
default. But that's a decision of others to make. Perhaps there
could also be an option to has_many to enable the creation of
the&lt;/em&gt; ids= setter, even if the app level flag is set to disable
them.&lt;/p&gt;
&lt;p&gt;Other options would be to keep the other_ids= setters, but make
them attr_protected. This is a little bit uglier, since there is a
dependency if you have already called attr_accessible we would need
to detect that, and not do anything in that case. But also
doable.&lt;/p&gt;
&lt;p&gt;Thoughts? Am I the only one who thinks these are dangerous
methods to create by default?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-05T16:03:53+00:00</created-at>
      <creator-id type="integer">32604</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6377</number>
      <permalink>support-for-disabling-other_idsidid-method-on-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Support for disabling other_ids=(id,id,...) method on associations?</title>
      <updated-at type="datetime">2011-02-05T16:03:54+00:00</updated-at>
      <user-id type="integer">32604</user-id>
      <version type="integer">1</version>
      <user-name>Joseph Palermo</user-name>
      <creator-name>Joseph Palermo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6377</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-05-07T01:00:10+01:00</created-at>
      <creator-id type="integer">32604</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6377</number>
      <permalink>support-for-disabling-other_idsidid-method-on-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Support for disabling other_ids=(id,id,...) method on associations?</title>
      <updated-at type="datetime">2011-05-07T01:01:18+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">2</version>
      <user-name>rails</user-name>
      <creator-name>Joseph Palermo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6377</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-05-07T01:00:11+01:00</created-at>
      <creator-id type="integer">32604</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6377</number>
      <permalink>support-for-disabling-other_idsidid-method-on-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Support for disabling other_ids=(id,id,...) method on associations?</title>
      <updated-at type="datetime">2011-05-07T01:01:39+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">3</version>
      <user-name>rails</user-name>
      <creator-name>Joseph Palermo</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6377</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
