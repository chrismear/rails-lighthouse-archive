From 0a8e62f941bae111c928f11e25f9e396aa8aca71 Mon Sep 17 00:00:00 2001
From: Szymon Nowak <szimek@gmail.com>
Date: Thu, 13 Aug 2009 21:18:43 +0200
Subject: [PATCH] Fix has_many through with primary_key option on belongs_to

---
 .../associations/through_association_scope.rb      |    5 ++-
 .../has_many_through_associations_test.rb          |   30 +++++++++++++++++++-
 activerecord/test/models/author.rb                 |    1 +
 activerecord/test/models/categorization.rb         |    3 +-
 activerecord/test/schema/schema.rb                 |    7 ++--
 5 files changed, 39 insertions(+), 7 deletions(-)

diff --git a/activerecord/lib/active_record/associations/through_association_scope.rb b/activerecord/lib/active_record/associations/through_association_scope.rb
index cabb33c..b88b1df 100644
--- a/activerecord/lib/active_record/associations/through_association_scope.rb
+++ b/activerecord/lib/active_record/associations/through_association_scope.rb
@@ -53,7 +53,7 @@ module ActiveRecord
       def construct_joins(custom_joins = nil)
         polymorphic_join = nil
         if @reflection.source_reflection.macro == :belongs_to
-          reflection_primary_key = @reflection.klass.primary_key
+          reflection_primary_key = @reflection.source_reflection.options[:primary_key] || @reflection.klass.primary_key
           source_primary_key     = @reflection.source_reflection.primary_key_name
           if @reflection.options[:source_type]
             polymorphic_join = "AND %s.%s = %s" % [
@@ -95,7 +95,8 @@ module ActiveRecord
         # TODO: revisit this to allow it for deletion, supposing dependent option is supported
         raise ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection.new(@owner, @reflection) if [:has_one, :has_many].include?(@reflection.source_reflection.macro)
 
-        join_attributes = construct_owner_attributes(@reflection.through_reflection).merge(@reflection.source_reflection.primary_key_name => associate.id)
+        associate_id = @reflection.source_reflection.options[:primary_key] ? associate.send(@reflection.source_reflection.options[:primary_key]) : associate.id
+        join_attributes = construct_owner_attributes(@reflection.through_reflection).merge(@reflection.source_reflection.primary_key_name => associate_id)
 
         if @reflection.options[:source_type]
           join_attributes.merge!(@reflection.source_reflection.options[:foreign_type] => associate.class.base_class.name.to_s)
diff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb
index 45f8bd6..88db3fa 100644
--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb
+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb
@@ -21,7 +21,7 @@ require 'models/subscription'
 class HasManyThroughAssociationsTest < ActiveRecord::TestCase
   fixtures :posts, :readers, :people, :comments, :authors,
            :owners, :pets, :toys, :jobs, :references, :companies,
-           :subscribers, :books, :subscriptions, :developers
+           :subscribers, :books, :subscriptions, :developers, :categories
 
   # Dummies to force column loads so query counts are clean.
   def setup
@@ -389,6 +389,34 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase
     ].each {|block| assert_raise(ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection, &block) }
   end
 
+  def test_associate_existing_with_nonstandard_primary_key_on_belongs_to
+    Categorization.create(:author => authors(:mary), :named_category_name => categories(:general).name)
+    assert_equal categories(:general), authors(:mary).named_categories.first
+  end
+
+  def test_collection_build_with_nonstandard_primary_key_on_belongs_to
+    author   = authors(:mary)
+    category = author.named_categories.build(:name => "Primary")
+    author.save
+    assert Categorization.exists?(:author_id => author.id, :named_category_name => category.name)
+    assert author.named_categories(true).include?(category)
+  end
+
+  def test_collection_create_with_nonstandard_primary_key_on_belongs_to
+    author   = authors(:mary)
+    category = author.named_categories.create(:name => "Primary")
+    assert Categorization.exists?(:author_id => author.id, :named_category_name => category.name)
+    assert author.named_categories(true).include?(category)
+  end
+
+  def test_collection_delete_with_nonstandard_primary_key_on_belongs_to
+    author   = authors(:mary)
+    category = author.named_categories.create(:name => "Primary")
+    author.named_categories.delete(category)
+    assert !Categorization.exists?(:author_id => author.id, :named_category_name => category.name)
+    assert author.named_categories(true).empty?
+  end
+
   def test_collection_singular_ids_getter_with_string_primary_keys
     book = books(:awdr)
     assert_equal 2, book.subscriber_ids.size
diff --git a/activerecord/test/models/author.rb b/activerecord/test/models/author.rb
index 34bfd2d..7669eff 100644
--- a/activerecord/test/models/author.rb
+++ b/activerecord/test/models/author.rb
@@ -72,6 +72,7 @@ class Author < ActiveRecord::Base
 
   has_many :categorizations
   has_many :categories, :through => :categorizations
+  has_many :named_categories, :through => :categorizations
 
   has_many :categories_like_general, :through => :categorizations, :source => :category, :class_name => 'Category', :conditions => { :name => 'General' }
 
diff --git a/activerecord/test/models/categorization.rb b/activerecord/test/models/categorization.rb
index 1059432..95e95f8 100644
--- a/activerecord/test/models/categorization.rb
+++ b/activerecord/test/models/categorization.rb
@@ -1,5 +1,6 @@
 class Categorization < ActiveRecord::Base
   belongs_to :post
   belongs_to :category
+  belongs_to :named_category, :class_name => 'Category', :foreign_key => :named_category_name, :primary_key => :name
   belongs_to :author
-end
\ No newline at end of file
+end
diff --git a/activerecord/test/schema/schema.rb b/activerecord/test/schema/schema.rb
index ea62833..7643983 100644
--- a/activerecord/test/schema/schema.rb
+++ b/activerecord/test/schema/schema.rb
@@ -100,9 +100,10 @@ ActiveRecord::Schema.define do
   end
 
   create_table :categorizations, :force => true do |t|
-    t.column :category_id, :integer
-    t.column :post_id, :integer
-    t.column :author_id, :integer
+    t.integer :category_id
+    t.string  :named_category_name
+    t.integer :post_id
+    t.integer :author_id
   end
 
   create_table :citations, :force => true do |t|
-- 
1.7.2.3

