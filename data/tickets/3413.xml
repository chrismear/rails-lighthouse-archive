<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-10-22T17:22:35+01:00</created-at>
  <creator-id type="integer">30467</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3413</number>
  <permalink>associationcollection-should-not-do-transaction-if-ownernew_record</permalink>
  <priority type="integer">166214</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2-3-stable activerecord association_collection transaction</tag>
  <title>AssociationCollection should not do transaction if @owner.new_record?</title>
  <updated-at type="datetime">2010-10-06T06:37:42+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">2</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Nobuhiro IMAI</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3413</url>
  <priority-name nil="true"></priority-name>
  <original-body>I found that AssociationCollection#&lt;&lt; do empty transaction even if the @owner is new record.

@@@
&gt;&gt; firm = Firm.new
&gt;&gt; firm.clients &lt;&lt; Client.new
BEGIN
COMMIT
@@@

I feel that this is not necessary. How about not doing empty transaction is such case?

@@@
diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index 42b6e5d..850d0d5 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -137,6 +137,7 @@ module ActiveRecord
       #     # same effect as calling Book.transaction
       #   end
       def transaction(*args)
+        return yield if @owner.new_record?
         @reflection.klass.transaction(*args) do
           yield
         end
@@@

However, I'm not sure how to check this behavior in test. BEGIN and COMMIT are ignored 
in assert_queries, and SQLite3 doesn't execute BEGIN/COMMIT AFAIK.


Thanks,</original-body>
  <latest-body>I found that AssociationCollection#&lt;&lt; do empty transaction even if the @owner is new record.

@@@
&gt;&gt; firm = Firm.new
&gt;&gt; firm.clients &lt;&lt; Client.new
BEGIN
COMMIT
@@@

I feel that this is not necessary. How about not doing empty transaction is such case?

@@@
diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index 42b6e5d..850d0d5 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -137,6 +137,7 @@ module ActiveRecord
       #     # same effect as calling Book.transaction
       #   end
       def transaction(*args)
+        return yield if @owner.new_record?
         @reflection.klass.transaction(*args) do
           yield
         end
@@@

However, I'm not sure how to check this behavior in test. BEGIN and COMMIT are ignored 
in assert_queries, and SQLite3 doesn't execute BEGIN/COMMIT AFAIK.


Thanks,</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I found that AssociationCollection#&amp;lt;&amp;lt; do empty transaction
even if the @owner is new record.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; firm = Firm.new
&amp;gt;&amp;gt; firm.clients &amp;lt;&amp;lt; Client.new
BEGIN
COMMIT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I feel that this is not necessary. How about not doing empty
transaction is such case?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index 42b6e5d..850d0d5 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -137,6 +137,7 @@ module ActiveRecord
       #     # same effect as calling Book.transaction
       #   end
       def transaction(*args)
+        return yield if @owner.new_record?
         @reflection.klass.transaction(*args) do
           yield
         end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, I'm not sure how to check this behavior in test. BEGIN
and COMMIT are ignored&lt;br&gt;
in assert_queries, and SQLite3 doesn't execute BEGIN/COMMIT
AFAIK.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I found that AssociationCollection#&lt;&lt; do empty transaction even if the @owner is new record.

@@@
&gt;&gt; firm = Firm.new
&gt;&gt; firm.clients &lt;&lt; Client.new
BEGIN
COMMIT
@@@

I feel that this is not necessary. How about not doing empty transaction is such case?

@@@
diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index 42b6e5d..850d0d5 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -137,6 +137,7 @@ module ActiveRecord
       #     # same effect as calling Book.transaction
       #   end
       def transaction(*args)
+        return yield if @owner.new_record?
         @reflection.klass.transaction(*args) do
           yield
         end
@@@

However, I'm not sure how to check this behavior in test. BEGIN and COMMIT are ignored 
in assert_queries, and SQLite3 doesn't execute BEGIN/COMMIT AFAIK.


Thanks,</body>
      <body-html>&lt;div&gt;&lt;p&gt;I found that AssociationCollection#&amp;lt;&amp;lt; do empty transaction
even if the @owner is new record.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; firm = Firm.new
&amp;gt;&amp;gt; firm.clients &amp;lt;&amp;lt; Client.new
BEGIN
COMMIT&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I feel that this is not necessary. How about not doing empty
transaction is such case?&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;diff --git a/activerecord/lib/active_record/associations/association_collection.rb b/activerecord/lib/active_record/associations/association_collection.rb
index 42b6e5d..850d0d5 100644
--- a/activerecord/lib/active_record/associations/association_collection.rb
+++ b/activerecord/lib/active_record/associations/association_collection.rb
@@ -137,6 +137,7 @@ module ActiveRecord
       #     # same effect as calling Book.transaction
       #   end
       def transaction(*args)
+        return yield if @owner.new_record?
         @reflection.klass.transaction(*args) do
           yield
         end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;However, I'm not sure how to check this behavior in test. BEGIN
and COMMIT are ignored&lt;br&gt;
in assert_queries, and SQLite3 doesn't execute BEGIN/COMMIT
AFAIK.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-22T17:22:35+01:00</created-at>
      <creator-id type="integer">30467</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3413</number>
      <permalink>associationcollection-should-not-do-transaction-if-ownernew_record</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2-3-stable activerecord association_collection transaction</tag>
      <title>AssociationCollection should not do transaction if @owner.new_record?</title>
      <updated-at type="datetime">2009-10-22T17:22:40+01:00</updated-at>
      <user-id type="integer">30467</user-id>
      <version type="integer">1</version>
      <user-name>Nobuhiro IMAI</user-name>
      <creator-name>Nobuhiro IMAI</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3413</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:37:40+01:00</created-at>
      <creator-id type="integer">30467</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3413</number>
      <permalink>associationcollection-should-not-do-transaction-if-ownernew_record</permalink>
      <priority type="integer">166214</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2-3-stable activerecord association_collection transaction</tag>
      <title>AssociationCollection should not do transaction if @owner.new_record?</title>
      <updated-at type="datetime">2010-10-06T06:37:42+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">2</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Nobuhiro IMAI</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3413</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
