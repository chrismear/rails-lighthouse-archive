<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-01T21:54:30+01:00</created-at>
  <creator-id type="integer">18106</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">90</number>
  <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
  <priority type="integer">10590</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>enhancement named_scope patch ticket</tag>
  <title>Enhancement: Add support for named scopes with optional arguments</title>
  <updated-at type="datetime">2008-05-11T21:45:43+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">10</version>
  <user-name>Pratik</user-name>
  <creator-name>duncanbeevers</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
  <priority-name nil="true"></priority-name>
  <original-body>The current declaration of dynamic named scopes requires use of the lambda syntax which has no support for optional arguments or arguments with default values.

This patch adds the ability to specify a class method name to use for generating the scope options.

It also provides a simpler fallback allowing you to rely on a class method whose name is the scopes name, prefixed with &quot;scope_&quot;

&lt;code class=&quot;ruby&quot;&gt;
class Topic &lt; ActiveRecord::Base
  named_scope :written_before
  def self.scope_written_before time
    { :conditions =&gt; [ 'written_on &lt; ?', time ] }
  end
end
&lt;/code&gt;</original-body>
  <latest-body>The current declaration of dynamic named scopes requires use of the lambda syntax which has no support for optional arguments or arguments with default values.

This patch adds the ability to specify a class method name to use for generating the scope options.

It also provides a simpler fallback allowing you to rely on a class method whose name is the scopes name, prefixed with &quot;scope_&quot;

&lt;code class=&quot;ruby&quot;&gt;
class Topic &lt; ActiveRecord::Base
  named_scope :written_before
  def self.scope_written_before time
    { :conditions =&gt; [ 'written_on &lt; ?', time ] }
  end
end
&lt;/code&gt;</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
The current declaration of dynamic named scopes requires use of the lambda syntax which has no support for optional arguments or arguments with default values.
&lt;/p&gt;&lt;p&gt;
This patch adds the ability to specify a class method name to use for generating the scope options.
&lt;/p&gt;&lt;p&gt;
It also provides a simpler fallback allowing you to rely on a class method whose name is the scopes name, prefixed with &quot;scope_&quot;
&lt;/p&gt;&lt;p&gt;
class Topic &amp;lt; ActiveRecord::Base
&lt;/p&gt;&lt;p&gt;
named_scope :written_before
&lt;/p&gt;&lt;p&gt;
def self.scope_written_before time
&lt;/p&gt;&lt;p&gt;
{ :conditions =&gt; [ 'written_on &amp;lt; ?', time ] }
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The current declaration of dynamic named scopes requires use of the lambda syntax which has no support for optional arguments or arguments with default values.

This patch adds the ability to specify a class method name to use for generating the scope options.

It also provides a simpler fallback allowing you to rely on a class method whose name is the scopes name, prefixed with &quot;scope_&quot;

@@@ ruby
class Topic &lt; ActiveRecord::Base
  named_scope :written_before
  def self.scope_written_before time
    { :conditions =&gt; [ 'written_on &lt; ?', time ] }
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The current declaration of dynamic named scopes requires use of the lambda syntax which has no support for optional arguments or arguments with default values.
&lt;/p&gt;&lt;p&gt;
This patch adds the ability to specify a class method name to use for generating the scope options.
&lt;/p&gt;&lt;p&gt;
It also provides a simpler fallback allowing you to rely on a class method whose name is the scopes name, prefixed with &quot;scope_&quot;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Topic &amp;lt; ActiveRecord::Base
  named_scope :written_before
  def self.scope_written_before time
    { :conditions =&amp;gt; [ 'written_on &amp;lt; ?', time ] }
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T21:57:09+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-01T21:57:09+01:00</updated-at>
      <user-id type="integer">18106</user-id>
      <version type="integer">1</version>
      <user-name>duncanbeevers</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't know if I quite get the reason for this.
and it seems less clear what's going on

@@@ ruby
class Topic &lt; ActiveRecord::Base
  named_scope :written_before, Proc.new{|time|
    time ||= Time.now
    {:conditions =&gt; [&quot;written_on &lt; ?&quot;, time]}
  end
end
@@@

accepts an optional argument, if that's what you're looking for.

Alternatively it might be alright if you gave the name of the method in the Hash,

@@@ ruby
class Topic &lt; ActiveRecord::Base
  named_scope :written_before, :scope_name =&gt; :scope_written_before
  def scope_written_before(time=Time.now)
    {:conditions =&gt; [&quot;written_on &lt; ?&quot;, time]}
  end
end
@@@

but it just doesnt feel like it should be the default behaviour...
prefer it like it is now...
default behaviour does nothing, rather than raising an exception

(lighthouse needs a &quot;preview&quot; function, so I can see if my ruby gets formatted proper)</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't know if I quite get the reason for this.
&lt;/p&gt;&lt;p&gt;
and it seems less clear what's going on
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Topic &amp;lt; ActiveRecord::Base
  named_scope :written_before, Proc.new{|time|
    time ||= Time.now
    {:conditions =&amp;gt; [&amp;quot;written_on &amp;lt; ?&amp;quot;, time]}
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
accepts an optional argument, if that's what you're looking for.
&lt;/p&gt;&lt;p&gt;
Alternatively it might be alright if you gave the name of the method in the Hash,
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Topic &amp;lt; ActiveRecord::Base
  named_scope :written_before, :scope_name =&amp;gt; :scope_written_before
  def scope_written_before(time=Time.now)
    {:conditions =&amp;gt; [&amp;quot;written_on &amp;lt; ?&amp;quot;, time]}
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
but it just doesnt feel like it should be the default behaviour...
&lt;/p&gt;&lt;p&gt;
prefer it like it is now...
&lt;/p&gt;&lt;p&gt;
default behaviour does nothing, rather than raising an exception
&lt;/p&gt;&lt;p&gt;
(lighthouse needs a &quot;preview&quot; function, so I can see if my ruby gets formatted proper)
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T00:37:57+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T00:37:57+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">2</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The provided patch allows for providing a method name as the scope using a symbol as the method name. 

@@@ ruby
def Topic &lt; ActiveRecord::Base
  named_scope :written_before, :scope_written_before
end
@@@

Additionally, using Procs this way doesn't allow for mandatory arguments on named scopes.

The primary motivation for this patch though is to ease unit testing of complex named scopes by allowing you to simply call the class method and examine the output hash as opposed to traversing a bunch of associations.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
The provided patch allows for providing a method name as the scope using a symbol as the method name.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def Topic &amp;lt; ActiveRecord::Base
  named_scope :written_before, :scope_written_before
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Additionally, using Procs this way doesn't allow for mandatory arguments on named scopes.
&lt;/p&gt;&lt;p&gt;
The primary motivation for this patch though is to ease unit testing of complex named scopes by allowing you to simply call the class method and examine the output hash as opposed to traversing a bunch of associations.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T00:49:41+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T00:49:41+01:00</updated-at>
      <user-id type="integer">18106</user-id>
      <version type="integer">3</version>
      <user-name>duncanbeevers</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>can't think what the right name for the key to pass

:scope_name doesnt feel right,
as the &quot;scope name&quot; is the name we just gave it...

so maybe :scope_options
but that's no good either.

is there a precedent for such an option?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
can't think what the right name for the key to pass
&lt;/p&gt;&lt;p&gt;
:scope_name doesnt feel right,
&lt;/p&gt;&lt;p&gt;
as the &quot;scope name&quot; is the name we just gave it...
&lt;/p&gt;&lt;p&gt;
so maybe :scope_options
&lt;/p&gt;&lt;p&gt;
but that's no good either.
&lt;/p&gt;&lt;p&gt;
is there a precedent for such an option?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T00:50:08+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T00:50:08+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">4</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Perhaps
@@@ ruby
:scope_method
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Perhaps
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;:scope_method&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T00:52:28+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T00:52:28+01:00</updated-at>
      <user-id type="integer">18106</user-id>
      <version type="integer">5</version>
      <user-name>duncanbeevers</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I agree that the patch allows the (2nd argument == :symbol)
but my feeling is that it isn't intuitive.
(also, shouldn't it accept symbols and strings)


if all you want to do is extract the options being used by the current scope,
wouldn't it be better to add a method to look at the @proxy_options variable inside the Scope.

eg:

@@@ ruby
assert_equal(
  Topic.written_before(time).scope_options,
  {:conditions =&gt; [&quot;written_on &lt; ?&quot;, time}
  )
@@@

think that would work pretty much out of the box (line 200ish named_scope.rb)
although it may want to return a recurse array of all the chained up scopes...</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I agree that the patch allows the (2nd argument == :symbol)
&lt;/p&gt;&lt;p&gt;
but my feeling is that it isn't intuitive.
&lt;/p&gt;&lt;p&gt;
(also, shouldn't it accept symbols and strings)
&lt;/p&gt;&lt;p&gt;
if all you want to do is extract the options being used by the current scope,
&lt;/p&gt;&lt;p&gt;
wouldn't it be better to add a method to look at the @proxy_options variable inside the Scope.
&lt;/p&gt;&lt;p&gt;
eg:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;assert_equal(
  Topic.written_before(time).scope_options,
  {:conditions =&amp;gt; [&amp;quot;written_on &amp;lt; ?&amp;quot;, time}
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
think that would work pretty much out of the box (line 200ish named_scope.rb)
&lt;/p&gt;&lt;p&gt;
although it may want to return a recurse array of all the chained up scopes...
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T00:58:36+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T00:58:36+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">6</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>forgot to point out as well...
Proc.new doesn't enforce the number of arguments,
ends up the same as a lambda, but lambda will raise if it doesnt get its required arguments.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
forgot to point out as well...
&lt;/p&gt;&lt;p&gt;
Proc.new doesn't enforce the number of arguments,
&lt;/p&gt;&lt;p&gt;
ends up the same as a lambda, but lambda will raise if it doesnt get its required arguments.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T00:59:52+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T00:59:52+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">7</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>btw...
apologies if I seem harsh...
I just love &quot;named_scope&quot;

was playing with a similar idea a year ago,
made my day seeing it in edge.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
btw...
&lt;/p&gt;&lt;p&gt;
apologies if I seem harsh...
&lt;/p&gt;&lt;p&gt;
I just love &quot;named_scope&quot;
&lt;/p&gt;&lt;p&gt;
was playing with a similar idea a year ago,
&lt;/p&gt;&lt;p&gt;
made my day seeing it in edge.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T01:00:48+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T01:00:48+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">8</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>No offense taken.

I quite like the idea of having the scope itself emit its options, and I've realy come around on using class methods as scopes.  Could be useful, but having all the behavior in the named_scope declaration is nicer, (though it's a little painful to see these nests of squiggly brackets in Ruby)

I took your suggestion of examining the scope_options on the proxy directly and submitted the patch here.

http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/97-enhancement-add-scope_options-inspection-method-to-named_scope

I think I'll modify this patch to use the :scope_method option instead of a naked symbol name, as I think the ability to have a mix of mandatory and optional arguments on a named scope is still valuable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
No offense taken.
&lt;/p&gt;&lt;p&gt;
I quite like the idea of having the scope itself emit its options, and I've realy come around on using class methods as scopes.  Could be useful, but having all the behavior in the named_scope declaration is nicer, (though it's a little painful to see these nests of squiggly brackets in Ruby)
&lt;/p&gt;&lt;p&gt;
I took your suggestion of examining the scope_options on the proxy directly and submitted the patch here.
&lt;/p&gt;&lt;p&gt;
&lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/97-enhancement-add-scope_options-inspection-method-to-named_scope&quot;&gt;http://rails.lighthouseapp.com/p...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
I think I'll modify this patch to use the :scope_method option instead of a naked symbol name, as I think the ability to have a mix of mandatory and optional arguments on a named scope is still valuable.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-03T02:06:46+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-03T02:06:46+01:00</updated-at>
      <user-id type="integer">18106</user-id>
      <version type="integer">9</version>
      <user-name>duncanbeevers</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I don't like the idea of the patch because the proposed functionality is dependent on return value of a class method, which doesn't feel intuitive for anything other than booleans.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I don't like the idea of the patch because the proposed functionality is dependent on return value of a class method, which doesn't feel intuitive for anything other than booleans.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-11T21:45:43+01:00</created-at>
      <creator-id type="integer">18106</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">90</number>
      <permalink>enhancement-add-support-for-named-scopes-with-optional-arguments</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Enhancement: Add support for named scopes with optional arguments</title>
      <updated-at type="datetime">2008-05-11T21:45:43+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">10</version>
      <user-name>Pratik</user-name>
      <creator-name>duncanbeevers</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/90</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>ff2c234b9fe2fcadc3257f697a4525273b46e0b1</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-01T21:54:30+01:00</created-at>
      <filename>named_scope_with_optional_arguments.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">21117</id>
      <size type="integer">4924</size>
      <uploader-id type="integer">18106</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/21117/named_scope_with_optional_arguments.diff</url>
    </attachment>
  </attachments>
</ticket>
