<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">19965</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-25T12:27:56+00:00</created-at>
  <creator-id type="integer">63543</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3058</number>
  <permalink>patch-sexy-validations</permalink>
  <priority type="integer">1707</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>committed</state>
  <tag nil="true"></tag>
  <title>[PATCH] Sexy Validations</title>
  <updated-at type="datetime">2010-11-25T12:27:56+00:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">49</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Jamie Hill</creator-name>
  <assigned-user-name>Jos&#233; Valim</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
  <priority-name nil="true"></priority-name>
  <original-body>Following on from my previous patch https://rails.lighthouseapp.com/projects/8994/tickets/2936, this patch adds to the validation hooks with a set-up similar to sexy migrations but for validations.

The registration of validators was requested in the comments of http://ryandaigle.com/articles/2009/8/11/what-s-new-in-edge-rails-independent-model-validators.

This patch allows the following:

@@@ ruby
  class EmailValidator &lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &lt;&lt; &quot;is not valid&quot;
        unless record.send(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
    end
  end
  
  # Register the custom validator in an initializer file.
  ActiveModel::Validations.register_validator :email, EmailValidator

  class Person &lt; ActiveModel::Base
    attr_accessor :name, :email

    validates :name, :presence =&gt; true, :uniqueness =&gt; true, :length =&gt; { :maximum =&gt; 100 }
    validates :email, :presence =&gt; true, :email =&gt; true
  end
@@@

As with the previous patch I believe this adds even more flexibility which is what Rails 3 is all about. It also allows validators to be shared more easily.

Rails defaults can now also be overridden e.g.

@@@ ruby
  class RequiredValidator &lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &lt;&lt; &quot;Required&quot; if record.send(field).blank?
    end
  end

  ActiveModel::Validations.register_validator :email, RequiredValidator
@@@


Thanks,

Jamie</original-body>
  <latest-body>Following on from my previous patch https://rails.lighthouseapp.com/projects/8994/tickets/2936, this patch adds to the validation hooks with a set-up similar to sexy migrations but for validations.

The registration of validators was requested in the comments of http://ryandaigle.com/articles/2009/8/11/what-s-new-in-edge-rails-independent-model-validators.

This patch allows the following:

@@@ ruby
  class EmailValidator &lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &lt;&lt; &quot;is not valid&quot;
        unless record.send(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
    end
  end
  
  # Register the custom validator in an initializer file.
  ActiveModel::Validations.register_validator :email, EmailValidator

  class Person &lt; ActiveModel::Base
    attr_accessor :name, :email

    validates :name, :presence =&gt; true, :uniqueness =&gt; true, :length =&gt; { :maximum =&gt; 100 }
    validates :email, :presence =&gt; true, :email =&gt; true
  end
@@@

As with the previous patch I believe this adds even more flexibility which is what Rails 3 is all about. It also allows validators to be shared more easily.

Rails defaults can now also be overridden e.g.

@@@ ruby
  class RequiredValidator &lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &lt;&lt; &quot;Required&quot; if record.send(field).blank?
    end
  end

  ActiveModel::Validations.register_validator :email, RequiredValidator
@@@


Thanks,

Jamie</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Following on from my previous patch &lt;a href=&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2936&quot;&gt;https://rails.lighthouseapp.com/...&lt;/a&gt;,
this patch adds to the validation hooks with a set-up similar to
sexy migrations but for validations.&lt;/p&gt;
&lt;p&gt;The registration of validators was requested in the comments of
&lt;a href=&quot;http://ryandaigle.com/articles/2009/8/11/what-s-new-in-edge-rails-independent-model-validators.%3C/p&quot;&gt;
http://ryandaigle.com/articles/2...&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;This patch allows the following:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  class EmailValidator &amp;lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &amp;lt;&amp;lt; &amp;quot;is not valid&amp;quot;
        unless record.send(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
    end
  end
  
  # Register the custom validator in an initializer file.
  ActiveModel::Validations.register_validator :email, EmailValidator

  class Person &amp;lt; ActiveModel::Base
    attr_accessor :name, :email

    validates :name, :presence =&amp;gt; true, :uniqueness =&amp;gt; true, :length =&amp;gt; { :maximum =&amp;gt; 100 }
    validates :email, :presence =&amp;gt; true, :email =&amp;gt; true
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As with the previous patch I believe this adds even more
flexibility which is what Rails 3 is all about. It also allows
validators to be shared more easily.&lt;/p&gt;
&lt;p&gt;Rails defaults can now also be overridden e.g.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  class RequiredValidator &amp;lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &amp;lt;&amp;lt; &amp;quot;Required&amp;quot; if record.send(field).blank?
    end
  end

  ActiveModel::Validations.register_validator :email, RequiredValidator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Jamie&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Following on from my previous patch https://rails.lighthouseapp.com/projects/8994/tickets/2936, this patch adds to the validation hooks with a set-up similar to sexy migrations but for validations.

The registration of validators was requested in the comments of http://ryandaigle.com/articles/2009/8/11/what-s-new-in-edge-rails-independent-model-validators.

This patch allows the following:

@@@ ruby
  class EmailValidator &lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &lt;&lt; &quot;is not valid&quot;
        unless record.send(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
    end
  end
  
  # Register the custom validator in an initializer file.
  ActiveModel::Validations.register_validator :email, EmailValidator

  class Person &lt; ActiveModel::Base
    attr_accessor :name, :email

    validates :name, :presence =&gt; true, :uniqueness =&gt; true, :length =&gt; { :maximum =&gt; 100 }
    validates :email, :presence =&gt; true, :email =&gt; true
  end
@@@

As with the previous patch I believe this adds even more flexibility which is what Rails 3 is all about. It also allows validators to be shared more easily.

Rails defaults can now also be overridden e.g.

@@@ ruby
  class RequiredValidator &lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &lt;&lt; &quot;Required&quot; if record.send(field).blank?
    end
  end

  ActiveModel::Validations.register_validator :email, RequiredValidator
@@@


Thanks,

Jamie</body>
      <body-html>&lt;div&gt;&lt;p&gt;Following on from my previous patch &lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/2936&quot;&gt;https://rails.lighthouseapp.com/projects/8994/tickets/2936&lt;/a&gt;,
this patch adds to the validation hooks with a set-up similar to
sexy migrations but for validations.&lt;/p&gt;
&lt;p&gt;The registration of validators was requested in the comments of
&lt;a href=
&quot;http://ryandaigle.com/articles/2009/8/11/what-s-new-in-edge-rails-independent-model-validators&quot;&gt;
http://ryandaigle.com/articles/2009/8/11/what-s-new-in-edge-rails-i...&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This patch allows the following:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  class EmailValidator &amp;lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &amp;lt;&amp;lt; &quot;is not valid&quot;
        unless record.send(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
    end
  end
  
  # Register the custom validator in an initializer file.
  ActiveModel::Validations.register_validator :email, EmailValidator

  class Person &amp;lt; ActiveModel::Base
    attr_accessor :name, :email

    validates :name, :presence =&amp;gt; true, :uniqueness =&amp;gt; true, :length =&amp;gt; { :maximum =&amp;gt; 100 }
    validates :email, :presence =&amp;gt; true, :email =&amp;gt; true
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As with the previous patch I believe this adds even more
flexibility which is what Rails 3 is all about. It also allows
validators to be shared more easily.&lt;/p&gt;
&lt;p&gt;Rails defaults can now also be overridden e.g.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  class RequiredValidator &amp;lt; ActiveRecord::Validator
    def validate
      field = options[:attr]
      record.errors[field] &amp;lt;&amp;lt; &quot;Required&quot; if record.send(field).blank?
    end
  end

  ActiveModel::Validations.register_validator :email, RequiredValidator&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Jamie&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-16T01:03:36+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-16T01:03:43+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">1</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Apologies, that last line should have read:

@@@ ruby
ActiveModel::Validations.register_validator :presence, RequiredValidator
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Apologies, that last line should have read:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;ActiveModel::Validations.register_validator :presence, RequiredValidator&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-16T01:05:33+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-16T01:05:39+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">2</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Your patch seems to be missing your 'validates' class method, so your example doesn't actually work.

A rough idea of the top of my head is that you meant to include a method something like this in ActiveModel::Validations::ClassMethods:

def validates(*args)
  validators = args.extract_options!

  args.each do |attribute|
    validators.each do |name, configuration|
      klass = ActiveModel::Validations.validator_for(name)
      send(validation_method(configuration[:on]), configuration) do |record|
        klass.new(record, configuration.merge(:field =&gt; attribute)).validate
      end
    end
  end
end

Without this method or any modifications to existing validation macros, registering classes with friendly names basically does nothing.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Your patch seems to be missing your 'validates' class method, so
your example doesn't actually work.&lt;/p&gt;
&lt;p&gt;A rough idea of the top of my head is that you meant to include
a method something like this in
ActiveModel::Validations::ClassMethods:&lt;/p&gt;
&lt;p&gt;def validates(*args)&lt;br&gt;
validators = args.extract_options!&lt;/p&gt;
&lt;p&gt;args.each do |attribute|&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;validators.each do |name, configuration|
  klass = ActiveModel::Validations.validator_for(name)
  send(validation_method(configuration[:on]), configuration) do |record|
    klass.new(record, configuration.merge(:field =&amp;gt; attribute)).validate
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;Without this method or any modifications to existing validation
macros, registering classes with friendly names basically does
nothing.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T12:17:19+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T12:17:24+01:00</updated-at>
      <user-id type="integer">59916</user-id>
      <version type="integer">3</version>
      <user-name>darkliquid</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Ahh, good spot. It looks like I didn't add the 2 most important files which also include the documentation.

Attached is the ACTUAL patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ahh, good spot. It looks like I didn't add the 2 most important
files which also include the documentation.&lt;/p&gt;
&lt;p&gt;Attached is the ACTUAL patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T12:30:10+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T12:30:18+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">4</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've just noticed that my email example validator was wrong too, should have been.

@@@ ruby
class EmailValidator &lt; ActiveRecord::Validator
  def validate
    field = options[:attr]
    record.errors[field] &lt;&lt; &quot;is not valid&quot; unless record.send(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  end
end

# Register the custom validator in an initializer file.
ActiveModel::Validations.register_validator :email, EmailValidator 
@@@

Sorry guys, must have been having an off day.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've just noticed that my email example validator was wrong too,
should have been.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class EmailValidator &amp;lt; ActiveRecord::Validator
  def validate
    field = options[:attr]
    record.errors[field] &amp;lt;&amp;lt; &quot;is not valid&quot; unless record.send(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  end
end

# Register the custom validator in an initializer file.
ActiveModel::Validations.register_validator :email, EmailValidator&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Sorry guys, must have been having an off day.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T12:51:36+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T12:51:40+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">5</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Can I get thoughts on publicising the new read_attribute_for_validation method as then this could be used in custom validators meaning they would be super-flexible.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can I get thoughts on publicising the new
read_attribute_for_validation method as then this could be used in
custom validators meaning they would be super-flexible.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T12:55:29+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T12:55:31+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">6</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&quot;registration&quot; hooks aren't necessary in Ruby. We have const_get.</body>
      <body-html>&lt;div&gt;&lt;p&gt;&quot;registration&quot; hooks aren't necessary in Ruby. We have
const_get.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T16:06:41+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:milestone: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T16:06:49+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">7</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Rather than using the registration hooks, I take you are proposing a something that takes the validation names and just constantizes them into validator classes, e.g :email becomes EmailValidator automagically?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Rather than using the registration hooks, I take you are
proposing a something that takes the validation names and just
constantizes them into validator classes, e.g :email becomes
EmailValidator automagically?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T16:16:56+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T16:16:58+01:00</updated-at>
      <user-id type="integer">59916</user-id>
      <version type="integer">8</version>
      <user-name>darkliquid</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Josh, are you suggesting I just look for a class in the global namespace?

What are your thoughts on looking for any classes that are called &quot;#{the_symbol.to_s.camelize}Validator&quot; that inherit from ActiveModel::Validator?

Also I'm thinking that ActiveRecord::Validator should be moved to ActiveModel::Validator so that this functionality is available outside of ActiveRecord.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Josh, are you suggesting I just look for a class in the global
namespace?&lt;/p&gt;
&lt;p&gt;What are your thoughts on looking for any classes that are
called &quot;#{the_symbol.to_s.camelize}Validator&quot; that inherit from
ActiveModel::Validator?&lt;/p&gt;
&lt;p&gt;Also I'm thinking that ActiveRecord::Validator should be moved
to ActiveModel::Validator so that this functionality is available
outside of ActiveRecord.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T16:20:22+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T16:20:27+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">9</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Attached is an updated patch to use convention over configuration as suggested by Josh. The following is now possible:

@@@ ruby
class EmailValidator &lt; ActiveModel::Validator
  def validate
    field = options[:attr]
    record.errors[field] &lt;&lt; &quot;is not valid&quot; unless
      record.read_attribute_for_validation(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  end
end

class Person &lt; ActiveModel::Base
  attr_accessor :name, :email

  validates :name, :presence =&gt; true, :uniqueness =&gt; true, :length =&gt; { :maximum =&gt; 100 }
  validates :email, :presence =&gt; true, :email =&gt; true
end

# Validator classes my also exist within the class being validated
# allowing custom modules of validators to be included as needed e.g.
module MyValidators
  class TitleValidator &lt; ActiveModel::Validator
    def validate
      field = options[:attr]
      record.errors[field] &lt;&lt; &quot;must start with 'the'&quot; unless
        record.read_attribute_for_validation(field) =~ /^the/i
    end
  end
end

class Person &lt; ActiveModel::Base
  include MyValidators

  validates :title =&gt; true
end
@@@

I have also made a change to rectify the bug in this ticket: https://rails.lighthouseapp.com/projects/8994/tickets/3077-activerecordvalidator-should-be-activemodelvalidator as logged by darkliquid.

One other modification I have made is to make read_attribute_for_validation public so that it may be used in custom validators.

Ideally I would change validates_with and the Validator class so that it is not necessary to fetch the value for the attribute and instead pass the value in as an argument to the validate method in the Validator class but I didn't want to change the validates_with API. As validates_with is new to edge, what is the policy on changing it's API?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Attached is an updated patch to use convention over
configuration as suggested by Josh. The following is now
possible:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class EmailValidator &amp;lt; ActiveModel::Validator
  def validate
    field = options[:attr]
    record.errors[field] &amp;lt;&amp;lt; &quot;is not valid&quot; unless
      record.read_attribute_for_validation(field) =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  end
end

class Person &amp;lt; ActiveModel::Base
  attr_accessor :name, :email

  validates :name, :presence =&amp;gt; true, :uniqueness =&amp;gt; true, :length =&amp;gt; { :maximum =&amp;gt; 100 }
  validates :email, :presence =&amp;gt; true, :email =&amp;gt; true
end

# Validator classes my also exist within the class being validated
# allowing custom modules of validators to be included as needed e.g.
module MyValidators
  class TitleValidator &amp;lt; ActiveModel::Validator
    def validate
      field = options[:attr]
      record.errors[field] &amp;lt;&amp;lt; &quot;must start with 'the'&quot; unless
        record.read_attribute_for_validation(field) =~ /^the/i
    end
  end
end

class Person &amp;lt; ActiveModel::Base
  include MyValidators

  validates :title =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I have also made a change to rectify the bug in this ticket:
&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/3077-activerecordvalidator-should-be-activemodelvalidator&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/3077-activere...&lt;/a&gt;
as logged by darkliquid.&lt;/p&gt;
&lt;p&gt;One other modification I have made is to make
read_attribute_for_validation public so that it may be used in
custom validators.&lt;/p&gt;
&lt;p&gt;Ideally I would change validates_with and the Validator class so
that it is not necessary to fetch the value for the attribute and
instead pass the value in as an argument to the validate method in
the Validator class but I didn't want to change the validates_with
API. As validates_with is new to edge, what is the policy on
changing it's API?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T22:56:07+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T22:56:10+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">10</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just added a change to the documentation:

@@@ ruby
class Person &lt; ActiveModel::Base
  include MyValidators
 
  validates :name, :title =&gt; true
end 
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just added a change to the documentation:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Person &amp;lt; ActiveModel::Base
  include MyValidators
 
  validates :name, :title =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-19T23:00:26+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-19T23:00:30+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">11</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I know the idea's pretty much accepted already but I just want to say, big +1 from me. The ability to combine validations into one line is worth it alone, and automatically picking up on Validators makes Validators even more awesome than they were. Now if #750 and #401 could be resolved that would solve all the wishes I've had for validations.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I know the idea's pretty much accepted already but I just want
to say, big +1 from me. The ability to combine validations into one
line is worth it alone, and automatically picking up on Validators
makes Validators even more awesome than they were. Now if &lt;a href=
&quot;/projects/8994/tickets/750&quot; title=&quot;Ticket #750&quot;&gt;#750&lt;/a&gt; and
&lt;a href=&quot;/projects/8994/tickets/401&quot; title=&quot;Ticket #401&quot;&gt;#401&lt;/a&gt;
could be resolved that would solve all the wishes I've had for
validations.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-21T15:06:40+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-21T15:06:41+01:00</updated-at>
      <user-id type="integer">34034</user-id>
      <version type="integer">12</version>
      <user-name>Elliot Winkler</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 from me as well.

There is one possible minor issue which I doubt would actually cause any problems. Since a hash is being used to specify validations, those validations will be defined in a random order in ruby 1.8. It's not an issue at all in ruby 1.9 as hashes are ordered I believe. You could get around the ordering issue in 1.8 (from a users perspective) by just calling validates with one key-value pair at a time if ordering is important to you.

Elliot, regarding #750, some way to do full reflection on validations like you can on associations would be even more awesome as you could show all requirements in the view or do stuff like generate client-side validation based on the reflected server-side ones for example.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 from me as well.&lt;/p&gt;
&lt;p&gt;There is one possible minor issue which I doubt would actually
cause any problems. Since a hash is being used to specify
validations, those validations will be defined in a random order in
ruby 1.8. It's not an issue at all in ruby 1.9 as hashes are
ordered I believe. You could get around the ordering issue in 1.8
(from a users perspective) by just calling validates with one
key-value pair at a time if ordering is important to you.&lt;/p&gt;
&lt;p&gt;Elliot, regarding &lt;a href=&quot;/projects/8994/tickets/750&quot; title=
&quot;Ticket #750&quot;&gt;#750&lt;/a&gt;, some way to do full reflection on
validations like you can on associations would be even more awesome
as you could show all requirements in the view or do stuff like
generate client-side validation based on the reflected server-side
ones for example.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-21T15:43:18+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-21T15:43:23+01:00</updated-at>
      <user-id type="integer">59916</user-id>
      <version type="integer">13</version>
      <user-name>darkliquid</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">424</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>I was wondering if anyone has any more feedback on this as I'd like to get it accepted as soon as poss? Cheers.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was wondering if anyone has any more feedback on this as I'd
like to get it accepted as soon as poss? Cheers.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-24T17:14:15+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-24T17:14:20+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">14</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Joshua Peek</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>A bunch guys started discussing completely rewriting the internal validation api to be more like validatable. I'd bring up in a Rails core post. Yehuda, Bryan H, and Jos&#233; V are the guys interested.

(As for me, I think the current api is fine, so I'm removing myself)</body>
      <body-html>&lt;div&gt;&lt;p&gt;A bunch guys started discussing completely rewriting the
internal validation api to be more like validatable. I'd bring up
in a Rails core post. Yehuda, Bryan H, and Jos&amp;eacute; V are the
guys interested.&lt;/p&gt;
&lt;p&gt;(As for me, I think the current api is fine, so I'm removing
myself)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-08-31T19:48:50+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 424
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-08-31T19:48:51+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">15</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Josh,

This implementation currently works without any changes to the current API, I was stating however that ideally the API for validator classes would be changed slightly to make things easier. Could this patch be applied as-is in addition to the discussions for a new API.


Thanks,

Jamie</body>
      <body-html>&lt;div&gt;&lt;p&gt;Josh,&lt;/p&gt;
&lt;p&gt;This implementation currently works without any changes to the
current API, I was stating however that ideally the API for
validator classes would be changed slightly to make things easier.
Could this patch be applied as-is in addition to the discussions
for a new API.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;Jamie&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-02T12:56:05+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-09-02T12:56:08+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">16</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry for the delay to reply. @Jamie, I want to do a quite simple change: instead of giving a proc to validate, we could give the own class to validate:

@@@ ruby
  def validates_with(*args)
    configuration = args.extract_options!

    send(validation_method(configuration[:on]), configuration) do |record|
      args.each do |klass|
        klass.new(record, configuration.except(:on, :if, :unless)).validate
      end
    end
  end
@@@

Could be changed to:

@@@ ruby
  def validates_with(*args)
    configuration = args.extract_options!

    args.each do |klass|
      send(validation_method(configuration[:on], klass.new(configuration), configuration)
    end
  end
@@@

Why? If we do this, we can access all the classes that were given to validates_with. So if we eventually change all Rails validations to use validates_with (creating something like PresenceValidator), we would be able to retrieve those classes and have validations reflection (to generate dynamically javascript, for example).

What would need to be changed? We just need to change Validator to receive the record as argument in the `validate` method, which in my opinion is also a better design (the validator does not need to be attached to any object when created).

I already had a patch for this and it should get merged soon. After that we can continue working on sexy validations ;).

And one other thing is the DSL. Which one do you prefer?

@@@ ruby
  # Hashes
  validates :name, :presence =&gt; true, :uniqueness =&gt; true, :length =&gt; { :maximum =&gt; 100 }

  # Blocks
  validations_for :name do |n|
    n.presence
    n.uniqueness
    n.length :maximum =&gt; 100
  end
@@@

Both are great for me, just want to be sure we discuss it. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry for the delay to reply. @Jamie, I want to do a quite
simple change: instead of giving a proc to validate, we could give
the own class to validate:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def validates_with(*args)
    configuration = args.extract_options!

    send(validation_method(configuration[:on]), configuration) do |record|
      args.each do |klass|
        klass.new(record, configuration.except(:on, :if, :unless)).validate
      end
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Could be changed to:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  def validates_with(*args)
    configuration = args.extract_options!

    args.each do |klass|
      send(validation_method(configuration[:on], klass.new(configuration), configuration)
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Why? If we do this, we can access all the classes that were
given to validates_with. So if we eventually change all Rails
validations to use validates_with (creating something like
PresenceValidator), we would be able to retrieve those classes and
have validations reflection (to generate dynamically javascript,
for example).&lt;/p&gt;
&lt;p&gt;What would need to be changed? We just need to change Validator
to receive the record as argument in the &lt;code&gt;validate&lt;/code&gt;
method, which in my opinion is also a better design (the validator
does not need to be attached to any object when created).&lt;/p&gt;
&lt;p&gt;I already had a patch for this and it should get merged soon.
After that we can continue working on sexy validations ;).&lt;/p&gt;
&lt;p&gt;And one other thing is the DSL. Which one do you prefer?&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;  # Hashes
  validates :name, :presence =&amp;gt; true, :uniqueness =&amp;gt; true, :length =&amp;gt; { :maximum =&amp;gt; 100 }

  # Blocks
  validations_for :name do |n|
    n.presence
    n.uniqueness
    n.length :maximum =&amp;gt; 100
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Both are great for me, just want to be sure we discuss it.
:)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-04T13:27:00+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-09-04T13:27:05+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">17</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Hi Jos&#233;,

Thanks for the reply.

I am 100% agreed on this. With regards the hash vs. block I personally prefer the hash syntax as it is more concise and requires less DSL magic.

Passing in the record to the validator definitely works. I have included a link below to iq-validator that we use at SonicIQ for validating non-activerecord models. Our validator classes have a valid? method that accept the value to validate. I do prefer your solution of giving the record to validators as validators such as a ConfirmValidator then have access to other fields.

Another example of using the standalone validation implementation is in our iq-form gem which takes a different approach to forms so that you can create them in an object orientated manor similar to Django. This could act as a good testbed for the flexibility of Rails validation.

Please note. I ideally want to remove the need for iq-validation, hence my patches to expand the existing functionality of validations in Rails. Also note that these gems are not at a release state, I have just put them up for reference.

http://github.com/iq/validation/tree/master
http://github.com/iq/form/tree/master


Thanks again,

Jamie</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Jos&amp;eacute;,&lt;/p&gt;
&lt;p&gt;Thanks for the reply.&lt;/p&gt;
&lt;p&gt;I am 100% agreed on this. With regards the hash vs. block I
personally prefer the hash syntax as it is more concise and
requires less DSL magic.&lt;/p&gt;
&lt;p&gt;Passing in the record to the validator definitely works. I have
included a link below to iq-validator that we use at SonicIQ for
validating non-activerecord models. Our validator classes have a
valid? method that accept the value to validate. I do prefer your
solution of giving the record to validators as validators such as a
ConfirmValidator then have access to other fields.&lt;/p&gt;
&lt;p&gt;Another example of using the standalone validation
implementation is in our iq-form gem which takes a different
approach to forms so that you can create them in an object
orientated manor similar to Django. This could act as a good
testbed for the flexibility of Rails validation.&lt;/p&gt;
&lt;p&gt;Please note. I ideally want to remove the need for
iq-validation, hence my patches to expand the existing
functionality of validations in Rails. Also note that these gems
are not at a release state, I have just put them up for
reference.&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/iq/validation/tree/master&quot;&gt;http://github.com/iq/validation/tree/master&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/iq/form/tree/master&quot;&gt;http://github.com/iq/form/tree/master&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks again,&lt;/p&gt;
&lt;p&gt;Jamie&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-04T15:51:04+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-09-04T15:51:06+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">18</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Jamie,

Exactly. As I discussed with Jeremy Kemper, besides the Validator, we should implement at least an EachValidator that exposes a less raw API. We could do this:

@@@ ruby
class PresenceValidator &lt; EachValidator
  def for_each(record, attribute, value)
    # logic
  end
end
@@@

So we wouldn't have any problem changing all rails validations to use classes. As soon as the patch gets applied, I will ping you again. :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jamie,&lt;/p&gt;
&lt;p&gt;Exactly. As I discussed with Jeremy Kemper, besides the
Validator, we should implement at least an EachValidator that
exposes a less raw API. We could do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class PresenceValidator &amp;lt; EachValidator
  def for_each(record, attribute, value)
    # logic
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So we wouldn't have any problem changing all rails validations
to use classes. As soon as the patch gets applied, I will ping you
again. :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-04T16:00:05+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-09-04T16:00:07+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">19</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>+1 for this new functionality.

I'm not sure if the following is directly related, but it might be. When you want do some custom validation which would not be generic enough for a validation class, it would be nice if the validation syntax could be shorter. See below:

@@@ ruby 

validates :age, :message =&gt; :something_very_small_but_custom do |record|
   record.age &lt; 18
end

@@@

This would be equivalent to what you would could do now:

@@@ ruby 
   validate_each :age do |record, attr, value|
      record.errors(attr, :something_very_small_but_custom) if age &lt; 18
   end

@@@

As stated before, not sure if this is related, but I can image that the validate method will accept a hash with options and optionally a block with the custom validation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1 for this new functionality.&lt;/p&gt;
&lt;p&gt;I'm not sure if the following is directly related, but it might
be. When you want do some custom validation which would not be
generic enough for a validation class, it would be nice if the
validation syntax could be shorter. See below:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
validates :age, :message =&amp;gt; :something_very_small_but_custom do |record|
   record.age &amp;lt; 18
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This would be equivalent to what you would could do now:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;   validate_each :age do |record, attr, value|
      record.errors(attr, :something_very_small_but_custom) if age &amp;lt; 18
   end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;As stated before, not sure if this is related, but I can image
that the validate method will accept a hash with options and
optionally a block with the custom validation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-07T16:17:20+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-09-07T16:17:24+01:00</updated-at>
      <user-id type="integer">36747</user-id>
      <version type="integer">20</version>
      <user-name>Jeroen van Dijk</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry I made some typos.

The second code example should be:

@@@ ruby

   validates_each :age do |record, attr, value|
      record.errors(attr, :something_very_small_but_custom) if attr &lt; 18
   end

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry I made some typos.&lt;/p&gt;
&lt;p&gt;The second code example should be:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
   validates_each :age do |record, attr, value|
      record.errors(attr, :something_very_small_but_custom) if attr &amp;lt; 18
   end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-09-07T16:22:43+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-09-07T16:22:47+01:00</updated-at>
      <user-id type="integer">36747</user-id>
      <version type="integer">21</version>
      <user-name>Jeroen van Dijk</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-07T05:23:53+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-10-07T05:23:57+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">22</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-09T18:18:37+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 27004
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-10-09T18:18:43+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">23</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title>2.x</milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-09T18:18:51+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-10-09T18:18:53+01:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">24</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Jos&#233; Valim, has the patch you mentioned, been applied yet, if so I will update the patch. Jeroens suggestion for a short block syntax can also be included.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jos&amp;eacute; Valim, has the patch you mentioned, been applied
yet, if so I will update the patch. Jeroens suggestion for a short
block syntax can also be included.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-10T08:23:55+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-10-10T08:24:01+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">25</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Jamie, no, no yet. We've been working one other features that have higher priority. I'm not sure that the patch will be able to make it to Rails 3.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jamie, no, no yet. We've been working one other features that
have higher priority. I'm not sure that the patch will be able to
make it to Rails 3.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-10T12:51:37+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-10-10T13:06:06+01:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">26</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>@Jos&#233;, in that case could the patch be applied as-is as it works with the existing functionality?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Jos&amp;eacute;, in that case could the patch be applied as-is as
it works with the existing functionality?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-11T13:56:39+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-10-11T13:56:42+01:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">27</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Sorry, to bug. Can this be applied?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, to bug. Can this be applied?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-15T11:26:55+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2009-11-15T11:26:59+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">28</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Ok, all validations are now Validators in core. There is just one concern left: I don't like the fact that we have two entry points: one as @_registered_validators and other as validates_presence_of. I think the lookup should be:

1) validates_#{method}_to
2) validates_#{method}
3) raise no validation available

I would also ask you to run this through the rails core list to see people and mainly rails core opinion on it.

And sorry for the time taken to reply.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ok, all validations are now Validators in core. There is just
one concern left: I don't like the fact that we have two entry
points: one as @_registered_validators and other as
validates_presence_of. I think the lookup should be:&lt;/p&gt;
&lt;p&gt;1) validates&lt;em&gt;#{method}&lt;/em&gt;to&lt;br&gt;
2) validates_#{method}&lt;br&gt;
3) raise no validation available&lt;/p&gt;
&lt;p&gt;I would also ask you to run this through the rails core list to
see people and mainly rails core opinion on it.&lt;/p&gt;
&lt;p&gt;And sorry for the time taken to reply.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-02T23:19:04+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-02T23:19:05+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">29</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Great news, thanks for your help on this.

I am attaching a new patch that address your concerns by working by convention as suggested by Josh. I have also publicised the read_attribute_for_validation method as it may be needed when writing custom validators.

Can I suggest that we merge ActiveModel::Validator and ActiveModel::EachValidator as there is no real use for what is currently ActiveModel::Validator (please correct me if I'm wrong). This way usage would be as follows:

@@@ ruby
class EmailValidator &lt; ActiveModel::Validator
  def validate_each(record, attribute, value)
    record.errors[attribute] &lt;&lt; &quot;is not an email&quot; unless value =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  end
end

class MyClass
  include ActiveModel::Validations
  attr_accessor :from
  validates :from, :email =&gt; true
end
@@@

I am happy to update the patch to reflect this if you are in agreement.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Great news, thanks for your help on this.&lt;/p&gt;
&lt;p&gt;I am attaching a new patch that address your concerns by working
by convention as suggested by Josh. I have also publicised the
read_attribute_for_validation method as it may be needed when
writing custom validators.&lt;/p&gt;
&lt;p&gt;Can I suggest that we merge ActiveModel::Validator and
ActiveModel::EachValidator as there is no real use for what is
currently ActiveModel::Validator (please correct me if I'm wrong).
This way usage would be as follows:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class EmailValidator &amp;lt; ActiveModel::Validator
  def validate_each(record, attribute, value)
    record.errors[attribute] &amp;lt;&amp;lt; &quot;is not an email&quot; unless value =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  end
end

class MyClass
  include ActiveModel::Validations
  attr_accessor :from
  validates :from, :email =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I am happy to update the patch to reflect this if you are in
agreement.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-03T04:01:25+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-03T04:01:32+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">30</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Validator it's an abstract and will be handy if someone needs, so I prefer if we keep it.

About your patch, I would prefer if the common entry point was the validates_#{method}_of instead of the validator, if you check validates_associated_of or validates_confirmation_of you will know why. Unless we move that logic inside validators as well.

+1 on publicizing read_attributes_for_validation.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Validator it's an abstract and will be handy if someone needs,
so I prefer if we keep it.&lt;/p&gt;
&lt;p&gt;About your patch, I would prefer if the common entry point was
the validates&lt;em&gt;#{method}&lt;/em&gt;of instead of the validator, if you
check validates_associated_of or validates_confirmation_of you will
know why. Unless we move that logic inside validators as well.&lt;/p&gt;
&lt;p&gt;+1 on publicizing read_attributes_for_validation.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-03T08:43:49+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-03T08:43:53+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">31</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Agreed on the Validator abstract class, I couldn't initially see a use for it but may be useful in some circumstances.

As for the entry point being via the validates_#{method}_of, I don't quite follow. Wouldn't this mean you would need to write custom class methods for validators e.g. validates_email_of etc? I much prefer being able to just create a validator class and use it via:

@@@ ruby
validates :attribute_name, :my_validator =&gt; { :my =&gt; 'options' }
@@@

I don't really see the problem with validates_confirmation_of, this will just become:

@@@ ruby
validates :password, :confirmation =&gt; true
@@@

Am I missing something obvious?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Agreed on the Validator abstract class, I couldn't initially see
a use for it but may be useful in some circumstances.&lt;/p&gt;
&lt;p&gt;As for the entry point being via the
validates&lt;em&gt;#{method}&lt;/em&gt;of, I don't quite follow. Wouldn't this
mean you would need to write custom class methods for validators
e.g. validates_email_of etc? I much prefer being able to just
create a validator class and use it via:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;validates :attribute_name, :my_validator =&amp;gt; { :my =&amp;gt; 'options' }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I don't really see the problem with validates_confirmation_of,
this will just become:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;validates :password, :confirmation =&amp;gt; true&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Am I missing something obvious?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-03T16:06:24+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-03T16:06:27+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">32</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>If you check validates_confirmation_of, you will see that it needs to be in the class scope to set things like attr_accessor. The same for validates_acceptance_of. Unless we send the class to the validator, which would work, but I don't like because the validator should not be attached to a class.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you check validates_confirmation_of, you will see that it
needs to be in the class scope to set things like attr_accessor.
The same for validates_acceptance_of. Unless we send the class to
the validator, which would work, but I don't like because the
validator should not be attached to a class.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-03T16:10:14+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-03T16:10:16+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">33</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I see what you mean about the attr_accessor. I think ideally that validations shouldn't magically add methods to the model and instead you should be expected to add this where required, however this would obviously break backwards compatibility. I believe the validate_#{method}_of methods should simply be proxies to the validators, this could go as far as using the new validates method e.g.

@@@ ruby
  %w(presence length numericality etc).each do |validation|
    define_method &quot;validates_#{validation}_of&quot;, *attr_names do
      options = attr_names.extract_options!
      validates *attr_names, :length =&gt; options
    end
  end

  # or

  %w(presence length numericality etc).each do |validation|
    define_method &quot;validates_#{validation}_of&quot;, *attr_names do
      options = attr_names.extract_options!
      validates_with &quot;#{validation.camelize}Validator&quot;.constantize, options.merge(:attributes =&gt; attr_names)
    end
  end
@@@

I suppose what I am saying is that I envisaged the validators being completely self contained and the validates_??_of just being convenience methods for validates/validates_with. This poses a problem like you say with confirmation so I will have a think on this and see if I can come up with a cleaner solution.

We could always go the (dare I say) Python route an pass in self as the first argument to the Validator initializer :/ but I don't really like this.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I see what you mean about the attr_accessor. I think ideally
that validations shouldn't magically add methods to the model and
instead you should be expected to add this where required, however
this would obviously break backwards compatibility. I believe the
validate&lt;em&gt;#{method}&lt;/em&gt;of methods should simply be proxies to
the validators, this could go as far as using the new validates
method e.g.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  %w(presence length numericality etc).each do |validation|
    define_method &quot;validates_#{validation}_of&quot;, *attr_names do
      options = attr_names.extract_options!
      validates *attr_names, :length =&amp;gt; options
    end
  end

  # or

  %w(presence length numericality etc).each do |validation|
    define_method &quot;validates_#{validation}_of&quot;, *attr_names do
      options = attr_names.extract_options!
      validates_with &quot;#{validation.camelize}Validator&quot;.constantize, options.merge(:attributes =&amp;gt; attr_names)
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I suppose what I am saying is that I envisaged the validators
being completely self contained and the validates&lt;em&gt;??&lt;/em&gt;of just
being convenience methods for validates/validates_with. This poses
a problem like you say with confirmation so I will have a think on
this and see if I can come up with a cleaner solution.&lt;/p&gt;
&lt;p&gt;We could always go the (dare I say) Python route an pass in self
as the first argument to the Validator initializer :/ but I don't
really like this.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-03T17:54:42+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-03T17:54:45+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">34</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>Sorry, that first code snippet was wrong, should be:

@@@ ruby
 %w(presence length numericality etc).each do |validation|
    define_method &quot;validates_#{validation}_of&quot;, *attr_names do
      options = attr_names.extract_options!
      validates *attr_names, validation.to_sym =&gt; options
    end
  end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Sorry, that first code snippet was wrong, should be:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt; %w(presence length numericality etc).each do |validation|
    define_method &quot;validates_#{validation}_of&quot;, *attr_names do
      options = attr_names.extract_options!
      validates *attr_names, validation.to_sym =&amp;gt; options
    end
  end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-03T17:56:42+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-03T17:56:44+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">35</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I am attaching a new diff of what I believe to be an elegant solution to the whole attr_accessor problem.

I have moved the remaining logic into Validator classes and have managed to get around the need to pass in the class to the validators as we were both not happy with that. Basically, there is now a virtual_attributes instance method on validators which simply defines what virtual attributes should exist for the validator to work. With this information, validates_with now adds those accessors as long as they are not columns (check needed for acceptance_of).

By doing things this way we are now able to delegate all validates_?_of calls to validates meaning that if it works with validates_?_of, it works with validates. All validates_?_of methods are just one-line calls to a private method that extracts the options and calls validates with the right arguments. This could be done with define_method as per previous comment but not sure how to get rdoc to behave with that.

I have gone through and fixed some of the documentation as it was still referencing ActiveRecord and fleshed out the Validator documentation a little.

I think this is a nice clean solution but please let me know if there's anything you're not happy with.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I am attaching a new diff of what I believe to be an elegant
solution to the whole attr_accessor problem.&lt;/p&gt;
&lt;p&gt;I have moved the remaining logic into Validator classes and have
managed to get around the need to pass in the class to the
validators as we were both not happy with that. Basically, there is
now a virtual_attributes instance method on validators which simply
defines what virtual attributes should exist for the validator to
work. With this information, validates_with now adds those
accessors as long as they are not columns (check needed for
acceptance_of).&lt;/p&gt;
&lt;p&gt;By doing things this way we are now able to delegate all
validates&lt;em&gt;?&lt;/em&gt;of calls to validates meaning that if it works
with validates&lt;em&gt;?&lt;/em&gt;of, it works with validates. All
validates&lt;em&gt;?&lt;/em&gt;of methods are just one-line calls to a private
method that extracts the options and calls validates with the right
arguments. This could be done with define_method as per previous
comment but not sure how to get rdoc to behave with that.&lt;/p&gt;
&lt;p&gt;I have gone through and fixed some of the documentation as it
was still referencing ActiveRecord and fleshed out the Validator
documentation a little.&lt;/p&gt;
&lt;p&gt;I think this is a nice clean solution but please let me know if
there's anything you're not happy with.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-05T09:49:18+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-05T09:49:22+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">36</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Just noticed an error when running on 1.8.7, attaching new patch file.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just noticed an error when running on 1.8.7, attaching new patch
file.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-05T10:50:50+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-05T10:50:57+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">37</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Moving this logic to validates_with is wrong, mainly because validates_with is in ActiveModel, which knows nothing database columns. So we are not there yet. Besides that, tests and docs looks good.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Moving this logic to validates_with is wrong, mainly because
validates_with is in ActiveModel, which knows nothing database
columns. So we are not there yet. Besides that, tests and docs
looks good.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-05T22:58:09+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-05T22:58:14+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">38</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>All I have done is move that logic from the validates_acceptance_of method which it should really be in either. As mentionned above I don't thing validations should be adding methods to the model on the fly anyway really. I can remove the column check and instead check to see if the model responds to the setter method but I didn't know if whoever had written that column code had done it for a reason.</body>
      <body-html>&lt;div&gt;&lt;p&gt;All I have done is move that logic from the
validates_acceptance_of method which it should really be in either.
As mentionned above I don't thing validations should be adding
methods to the model on the fly anyway really. I can remove the
column check and instead check to see if the model responds to the
setter method but I didn't know if whoever had written that column
code had done it for a reason.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-05T23:57:26+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-05T23:57:29+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">39</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Leave it with me and I'll try a few options.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Leave it with me and I'll try a few options.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-05T23:59:33+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-05T23:59:36+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">40</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Right, think we're there. Attached is new patch which instead of referencing columns, validates_with looks to see if a setter instance method is already available and skips if so.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Right, think we're there. Attached is new patch which instead of
referencing columns, validates_with looks to see if a setter
instance method is already available and skips if so.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-06T20:00:05+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-06T20:00:14+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">41</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>New diff attached which uses setup hook instead of virtual_attributes as well as adding _merge_attributes private method. Also added further documentation for setup hook.</body>
      <body-html>&lt;div&gt;&lt;p&gt;New diff attached which uses setup hook instead of
virtual_attributes as well as adding _merge_attributes private
method. Also added further documentation for setup hook.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T01:06:40+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-07T01:06:47+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">42</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Added some comments, new patch attached.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Added some comments, new patch attached.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T01:13:15+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-07T01:13:19+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">43</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [0a79eb7889e7ac711ff171a453d65f3df57b9237]) Add validates method as shortcut to setup validators for a given set of attributes:

class Person &lt; ActiveRecord::Base
  include MyValidators

  validates :name, :presence =&gt; true, :uniqueness =&gt; true, :length =&gt; { :maximum =&gt; 100 }
  validates :email, :presence =&gt; true, :email =&gt; true
end

[#3058 status:resolved]

Signed-off-by: Jos&#233; Valim &lt;jose.valim@gmail.com&gt;
http://github.com/rails/rails/commit/0a79eb7889e7ac711ff171a453d65f3df57b9237</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/0a79eb7889e7ac711ff171a453d65f3df57b9237&quot;
title=
&quot;Changeset [0a79eb7889e7ac711ff171a453d65f3df57b9237]&quot;&gt;[0a79eb7889e7ac711ff171a453d65f3df57b9237]&lt;/a&gt;)
Add validates method as shortcut to setup validators for a given
set of attributes:&lt;/p&gt;
&lt;p&gt;class Person &amp;lt; ActiveRecord::Base&lt;br&gt;
include MyValidators&lt;/p&gt;
&lt;p&gt;validates :name, :presence =&amp;gt; true, :uniqueness =&amp;gt; true,
:length =&amp;gt; { :maximum =&amp;gt; 100 } validates :email, :presence
=&amp;gt; true, :email =&amp;gt; true end&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;/projects/8994/tickets/3058&quot; title=
&quot;Ticket #3058&quot;&gt;#3058&lt;/a&gt; status:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Jos&amp;eacute; Valim &lt;a href=
&quot;mailto:jose.valim@gmail.com&quot;&gt;jose.valim@gmail.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;http://github.com/rails/rails/commit/0a79eb7889e7ac711ff171a453d65f3df57b9237&quot;&gt;
http://github.com/rails/rails/commit/0a79eb7889e7ac711ff171a453d65f...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-01-07T18:25:29+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-07T18:25:31+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">44</version>
      <user-name>Repository</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-07T18:26:42+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-07T18:26:46+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">45</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Jos&#233;,

I've just noticed a problem in the additional code you added, I am getting:

@@@
NoMethodError: undefined method `slice!' for {:presence=&gt;true}:Hash
        from /Users/jamie/.gem/ruby/1.8/gems/activemodel-3.0.pre/lib/active_model/validations/validates.rb 
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Jos&amp;eacute;,&lt;/p&gt;
&lt;p&gt;I've just noticed a problem in the additional code you added, I
am getting:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;NoMethodError: undefined method `slice!' for {:presence=&amp;gt;true}:Hash
        from /Users/jamie/.gem/ruby/1.8/gems/activemodel-3.0.pre/lib/active_model/validations/validates.rb&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-17T04:25:19+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-17T04:25:22+00:00</updated-at>
      <user-id type="integer">63543</user-id>
      <version type="integer">46</version>
      <user-name>Jamie Hill</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>That was fixed as well, thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;That was fixed as well, thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-01-17T09:09:04+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag>3.0 sexy validation validations</tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-01-17T09:09:08+00:00</updated-at>
      <user-id type="integer">19965</user-id>
      <version type="integer">47</version>
      <user-name>Jos&#233; Valim</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-09T21:52:43+01:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 3.0 sexy validation validations
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">1707</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-10-09T21:52:45+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">49</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were inspired by   baseball glove design and they created discount handbags with similar qualities.&lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come along until years later. The original handbag collection   had twelve designs, and they were made from supple, tan, top-quality leathers,   and showed the same excellent craftsmanship and stitching that we still expect   today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought new looks to   Coach bags. She used many new fabrics and organic materials like jersey and   wool. She created the brass hardware that is symbolic of &lt;strong&gt;&lt;a href=&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;. When   Lew Frankfort came aboard in 1979, he brought Coach to the next level, and they   became a name known the world over. Affordable luxury was not a concept that   many people knew, but now they would. Soon after Frankfort joined Coach, they   came out with a catalog, and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought its brand   relevance and strength. They designed watches starting in 1988, and also   expanded their company to Tokyo. Japan still counts among the leading purchasers   of &lt;strong&gt;&lt;a href=&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach heels. The manufacture of Coach shoes began in the mid   90's, and Reed Krakoff, the lead designer, loaned his talents to help put Coach   heels and &lt;a href=&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as their   handbags, but they are well worth the money invested in their purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that don't have   this height. &lt;strong&gt;&lt;a href=&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to style and   pizzazz. Coach platforms come in many styles, from gold loafers to slingbacks   with open toes. You may be able to find Coach shoes at discount prices online,   but be sure that you are buying genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous, Coach   shoes and &lt;a href=&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will make you   feel sporty, too. When selecting pumps or sandals to wear, you'll be happy to   count on the long-standing quality and service of the Coach company. They have   many styles to choose from, including chic and glamorous Coach boots and Coach   heels. Whether you are looking for sports shoes like Coach sneakers or sexy   shoes like Coach boots, the Coach name will never let you down.&lt;/p&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;When Coach began as Manhattan Leather Bags in 1941, they were
inspired by baseball glove design and they created discount
handbags with similar qualities.&lt;strong&gt;&lt;a href=
&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; didn't come
along until years later. The original handbag collection had twelve
designs, and they were made from supple, tan, top-quality leathers,
and showed the same excellent craftsmanship and stitching that we
still expect today.&lt;/p&gt;
&lt;p&gt;Coach hired a woman named Bonnie Cashin in 1962, and she brought
new looks to Coach bags. She used many new fabrics and organic
materials like jersey and wool. She created the brass hardware that
is symbolic of &lt;strong&gt;&lt;a href=
&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;.
When Lew Frankfort came aboard in 1979, he brought Coach to the
next level, and they became a name known the world over. Affordable
luxury was not a concept that many people knew, but now they would.
Soon after Frankfort joined Coach, they came out with a catalog,
and opened their flagship store in New York City.&lt;/p&gt;
&lt;p&gt;In the 1980's, Coach expanded and made innovations that brought
its brand relevance and strength. They designed watches starting in
1988, and also expanded their company to Tokyo. Japan still counts
among the leading purchasers of &lt;strong&gt;&lt;a href=
&quot;http://www.allofcoach.com&quot;&gt;coach purses&lt;/a&gt;&lt;/strong&gt; and Coach
heels. The manufacture of Coach shoes began in the mid 90's, and
Reed Krakoff, the lead designer, loaned his talents to help put
Coach heels and &lt;a href=
&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bags
outlet&lt;/strong&gt;&lt;/a&gt; on the map. Their shoes aren't as popular as
their handbags, but they are well worth the money invested in their
purchase.&lt;/p&gt;
&lt;p&gt;Women love heels, but at times you may want to wear shoes that
don't have this height. &lt;strong&gt;&lt;a href=
&quot;http://www.truereligionjeans-outlet.com&quot;&gt;true religion jeans
outlet&lt;/a&gt;&lt;/strong&gt; are as dedicated to comfort as they are to
style and pizzazz. Coach platforms come in many styles, from gold
loafers to slingbacks with open toes. You may be able to find Coach
shoes at discount prices online, but be sure that you are buying
genuine Coach products.&lt;/p&gt;
&lt;p&gt;If you're looking for &lt;a href=
&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler
jackets&lt;/strong&gt;&lt;/a&gt; that will make you feel and look glamorous,
Coach shoes and &lt;a href=
&quot;http://www.chanelpursesbags.com&quot;&gt;&lt;strong&gt;chanel
purses&lt;/strong&gt;&lt;/a&gt; can do that well. Coach sneakers and heels will
make you feel sporty, too. When selecting pumps or sandals to wear,
you'll be happy to count on the long-standing quality and service
of the Coach company. They have many styles to choose from,
including chic and glamorous Coach boots and Coach heels. Whether
you are looking for sports shoes like Coach sneakers or sexy shoes
like Coach boots, the Coach name will never let you down.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-08T01:09:56+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">1707</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-11-08T23:12:04+00:00</updated-at>
      <user-id type="integer">123546</user-id>
      <version type="integer">50</version>
      <user-name>jim123456</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">19965</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs the only boot sale&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs for cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap kids uggs&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap classic tall ugg boots 5815 mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uk cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;super cheap ugg classic mini boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots with zips&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg sunburst boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;really cheap ugg classic mini&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for $64&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots for cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;ugg slippers cheap&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap authentic uggs&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for sale in uk&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots mulberry&lt;/a&gt; So You Can Buy It Now!

&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg brand boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots uk&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg australia boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discount ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale authorized&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;us ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;mens ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;australian ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;fur inside ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;kids ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg bailey boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;shopping for ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg mini boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;womens ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;lowest price ugg boots&lt;/a&gt;,&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt; baby ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg style boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;knock off ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots discount&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discounted ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg roseberry boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;purple ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sydney&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots store&lt;/a&gt; SO Cheap With Free Shipping!

&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store Outlet&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UK UGG Store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg factory store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet stores&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet store locations in pa hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg boots store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia sandals kids&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;boot shoes store ugg hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store locater&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia kids&lt;/a&gt; Thats ugg store uk online shop!

&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;tall boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;cardy ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;uggs sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy chocolate&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots cardy&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots cream&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg mosaic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg tall boot sale&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;cheap classic tall ugg boots 5815 mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;sundance tall ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots classic tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg adirondack tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall wool&lt;/a&gt;. Have You Best Choice, Buy It Now!


&lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Classic Short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Short Boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;Short uggs&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Shop online&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;authentic ugg australia women's classic short #5825 - black sheepskin&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg fern suede classic short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg in grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg short boots fushia&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots 8 short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short black&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;eggplant short ugg&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;short classic ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;short ugg boots chestnut womens&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots black short&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short black paisley&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short sku&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg women's classic short&lt;/a&gt;, Buy It Now! 

&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Triplet&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots 5803, UGG Boots 1873&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots USA&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;bailey button ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots at macys&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty- kids grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button crinkle leather&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triplet boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button blackberry wine&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;discount ugg bailey button&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button 5803 grey size 10&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boot grey&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button cheap&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triple&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty&lt;/a&gt;, Buy It Now!</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap uggs the only boot sale&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs for cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap kids uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap classic tall ugg boots 5815
mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uggs cheap&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;uk cheap ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;super cheap ugg classic mini
boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots
with zips&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg
sunburst boots&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;really
cheap ugg classic mini&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for $64&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg boots for cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;ugg slippers cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.cheapuggshop.com&quot;&gt;cheap authentic uggs&lt;/a&gt;,&lt;br&gt;
&lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots for sale in
uk&lt;/a&gt;, &lt;a href=&quot;http://www.cheapuggshop.com&quot;&gt;cheap ugg boots
mulberry&lt;/a&gt; So You Can Buy It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;cheap ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg brand boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots uk&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots sale&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg australia boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;discount ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.ugg-boots-uk.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots on sale
authorized&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;us ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;mens ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;australian ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;fur inside ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;kids ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg bailey
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;adirondack tall
ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;shopping for
ugg boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg mini
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;womens ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;lowest price ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;baby ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg style
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;knock off ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
discount&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg cove boots
sale&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;discounted ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg roseberry
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;purple ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
sydney&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
cheap&lt;/a&gt;, &lt;a href=&quot;http://www.ugg-boots-uk.com&quot;&gt;ugg boots
store&lt;/a&gt; SO Cheap With Free Shipping!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;UGG Store Outlet&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;UK UGG Store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;ugg factory store&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet stores&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;what stores sell ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg outlet store locations
in pa hit bg&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg
store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg boots
store&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg
australia sandals kids&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootseshop.com&quot;&gt;boot shoes store ugg hit bg&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;ugg store locater&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootseshop.com&quot;&gt;shoe stores ugg australia
kids&lt;/a&gt; Thats ugg store uk online shop!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;tall boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;cardy ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;uggs sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots on sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy chocolate&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg boots cardy&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;classic cardy ugg boots cream&lt;/a&gt;,
&lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boot&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg cardy boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;adirondack tall ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall boots&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg mosaic tall&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;ugg tall boot sale&lt;/a&gt;, &lt;a href=
&quot;http://www.auuggboots.com&quot;&gt;cheap classic tall ugg boots 5815
mulberry&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;classic tall ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall
boot&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic cardy
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;sundance tall ugg
boots&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg boots classic
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg adirondack
tall&lt;/a&gt;, &lt;a href=&quot;http://www.auuggboots.com&quot;&gt;ugg classic tall
wool&lt;/a&gt;. Have You Best Choice, Buy It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggshop.net&quot;&gt;UGG Classic Short&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;UGG Short Boots&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;Short uggs&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;UGG Shop online&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;authentic ugg australia women's classic
short&lt;/a&gt; &lt;a href=&quot;/projects/8994/tickets/5825&quot; title=
&quot;Ticket #5825&quot;&gt;#5825&lt;/a&gt; - black sheepskin,&lt;br&gt;
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg fern suede classic short&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;classic short ugg in grey&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg short boots fushia&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots 8 short&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;ugg ultra short black&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;eggplant short ugg&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;short classic ugg boots&lt;/a&gt;, &lt;a href=
&quot;http://www.uggshop.net&quot;&gt;short ugg boots chestnut womens&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg boots black short&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short black
paisley&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg classic short
boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg ultra short sku&lt;/a&gt;,
&lt;a href=&quot;http://www.uggshop.net&quot;&gt;ugg women's classic short&lt;/a&gt;, Buy
It Now!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Triplet&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Bailey Button Bomber&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots 5803, UGG Boots
1873&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;UGG Boots USA&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;bailey button ugg boots&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button boots
bomber&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boots at macys&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots
- bailey button novelty- kids grey&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button crinkle
leather&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
boots on sale&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey
button triplet boot&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg
bailey button blackberry wine&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;discount ugg bailey button&lt;/a&gt;,
&lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg australia bailey button
boots&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button
5803 grey size 10&lt;/a&gt;, &lt;a href=&quot;http://www.uggbootsusa.com&quot;&gt;ugg
bailey button boot grey&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button cheap&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg bailey button triple&lt;/a&gt;, &lt;a href=
&quot;http://www.uggbootsusa.com&quot;&gt;ugg boots - bailey button novelty&lt;/a&gt;,
Buy It Now!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-25T12:13:25+00:00</created-at>
      <creator-id type="integer">63543</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3058</number>
      <permalink>patch-sexy-validations</permalink>
      <priority type="integer">1707</priority>
      <project-id type="integer">8994</project-id>
      <state>committed</state>
      <tag nil="true"></tag>
      <title>[PATCH] Sexy Validations</title>
      <updated-at type="datetime">2010-11-25T12:27:56+00:00</updated-at>
      <user-id type="integer">126682</user-id>
      <version type="integer">51</version>
      <user-name>sunnyabc</user-name>
      <creator-name>Jamie Hill</creator-name>
      <assigned-user-name>Jos&#233; Valim</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3058</url>
      <priority-name nil="true"></priority-name>
      <milestone-title nil="true"></milestone-title>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>95c837335575b98f82ad8a97e18b9d9b91fc808e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-01-07T01:13:15+00:00</created-at>
      <filename>sexy-validations-final.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">368941</id>
      <size type="integer">56747</size>
      <uploader-id type="integer">63543</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/368941/sexy-validations-final.diff</url>
    </attachment>
  </attachments>
</ticket>
