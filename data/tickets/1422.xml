<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-11-20T14:51:32+00:00</created-at>
  <creator-id type="integer">38323</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1422</number>
  <permalink>bug-sql-logging-fails-if-exception-raised</permalink>
  <priority type="integer">809</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>pebkah</title>
  <updated-at type="datetime">2008-12-03T15:43:20+00:00</updated-at>
  <user-id type="integer">424</user-id>
  <version type="integer">2</version>
  <user-name>Joshua Peek</user-name>
  <creator-name>Student</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1422</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>From /activerecord-2.1.2/lib/active_record/connection_adapters/abstract_adapter.rb:

line 129:
def log(sql, name)
 if block_given?
  ...
  log_info(sql, name, seconds)
  result
 else
  log_info(sql, name, 0)
 end
rescue Exception =&gt; e
  ...
  message = &quot;#{e.class.name}: #{e.message}: #{sql}&quot;
  log_info(message, name, 0)
  raise ActiveRecord::StatementInvalid, message
end

So if an exception is raised, we get only the SQL fragment that the database reports, not the full sql statement.  If it works, we get the full statement...

How about the following instead:
message = &quot;#{sql}\n#{e.class.name}: #{e.message}: #{sql}&quot;</original-body>
  <latest-body>From /activerecord-2.1.2/lib/active_record/connection_adapters/abstract_adapter.rb:

line 129:
def log(sql, name)
 if block_given?
  ...
  log_info(sql, name, seconds)
  result
 else
  log_info(sql, name, 0)
 end
rescue Exception =&gt; e
  ...
  message = &quot;#{e.class.name}: #{e.message}: #{sql}&quot;
  log_info(message, name, 0)
  raise ActiveRecord::StatementInvalid, message
end

So if an exception is raised, we get only the SQL fragment that the database reports, not the full sql statement.  If it works, we get the full statement...

How about the following instead:
message = &quot;#{sql}\n#{e.class.name}: #{e.message}: #{sql}&quot;</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;From
/activerecord-2.1.2/lib/active_record/connection_adapters/abstract_adapter.rb:&lt;/p&gt;
&lt;p&gt;line 129: def log(sql, name) if block_given? ... log_info(sql,
name, seconds) result else log_info(sql, name, 0) end rescue
Exception =&amp;gt; e ... message = &quot;#{e.class.name}: #{e.message}:
#{sql}&quot; log_info(message, name, 0) raise
ActiveRecord::StatementInvalid, message end&lt;/p&gt;
&lt;p&gt;So if an exception is raised, we get only the SQL fragment that
the database reports, not the full sql statement. If it works, we
get the full statement...&lt;/p&gt;
&lt;p&gt;How about the following instead: message =
&quot;#{sql}\n#{e.class.name}: #{e.message}: #{sql}&quot;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-20T14:51:33+00:00</created-at>
      <creator-id type="integer">38323</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1422</number>
      <permalink>bug-sql-logging-fails-if-exception-raised</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.1 2.1.2 abstract_adapter activerecord exception logging sql</tag>
      <title>pebkah</title>
      <updated-at type="datetime">2008-11-20T14:57:13+00:00</updated-at>
      <user-id type="integer">38323</user-id>
      <version type="integer">1</version>
      <user-name>Student</user-name>
      <creator-name>Student</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1422</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-12-03T15:43:18+00:00</created-at>
      <creator-id type="integer">38323</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.1 2.1.2 abstract_adapter activerecord exception logging sql
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1422</number>
      <permalink>bug-sql-logging-fails-if-exception-raised</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>pebkah</title>
      <updated-at type="datetime">2008-12-03T15:43:20+00:00</updated-at>
      <user-id type="integer">424</user-id>
      <version type="integer">2</version>
      <user-name>Joshua Peek</user-name>
      <creator-name>Student</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1422</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
