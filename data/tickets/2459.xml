<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-04-08T19:54:11+01:00</created-at>
  <creator-id type="integer">53494</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2459</number>
  <permalink>activesupportdependenciesload_missing_constant-fails-to-load</permalink>
  <priority type="integer">1608</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>2x active_support const_missing dependenciesrb</tag>
  <title>ActiveSupport::Dependencies::load_missing_constant() fails to load</title>
  <updated-at type="datetime">2011-02-02T19:08:40+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">5</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Tatsuya Ono</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2459</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Class autoload would be failed if the class to be loaded was located in the directory whose name is same as the class to load.

**bold** Example
in app/models/sample.rb
@@@ ruby
class Sample &lt; ActiveRecord::Base
  def reproduce_issue
    SampleClass
  end
end
@@@

in app/models/sample/sample_class.rb
@@@ ruby
class SampleClass &lt; ActiveRecord::Base

end
@@@

reproduce_issue() method would be failed even if you added 'app/models/sample' into config.load_paths.

It would rise exception with the following message:
Expected [RAILS_ROOT]/app/models/sample/sample_class.rb to define Sample::SampleClass

**bold** Problem
There is a problem on the following line in ActiveSupport::Dependencies::load_missing_constant()

@@@ ruby
raise LoadError, &quot;Expected #{file_path} to define #{qualified_name}&quot; unless uninherited_const_defined?(from_mod, const_name)
@@@

uninherited_const_defined? checks in the given class but not its super class. In above example, even if SampleClass was loaded, it returns false because it is not Sample::SampleClass.

**bold** Why other classes are OK?
@@@ ruby
file_path = search_for_file(path_suffix)
@@@

This line would return nil for those which doesn't have 'sample' as a stored directory. Therefore it doesn't get affected this problem.

**bold** Solution
Need to check if the class is defined in the context of the super classes (especially in Object).
I attach a patch.</original-body>
  <latest-body>Class autoload would be failed if the class to be loaded was located in the directory whose name is same as the class to load.

**bold** Example
in app/models/sample.rb
@@@ ruby
class Sample &lt; ActiveRecord::Base
  def reproduce_issue
    SampleClass
  end
end
@@@

in app/models/sample/sample_class.rb
@@@ ruby
class SampleClass &lt; ActiveRecord::Base

end
@@@

reproduce_issue() method would be failed even if you added 'app/models/sample' into config.load_paths.

It would rise exception with the following message:
Expected [RAILS_ROOT]/app/models/sample/sample_class.rb to define Sample::SampleClass

**bold** Problem
There is a problem on the following line in ActiveSupport::Dependencies::load_missing_constant()

@@@ ruby
raise LoadError, &quot;Expected #{file_path} to define #{qualified_name}&quot; unless uninherited_const_defined?(from_mod, const_name)
@@@

uninherited_const_defined? checks in the given class but not its super class. In above example, even if SampleClass was loaded, it returns false because it is not Sample::SampleClass.

**bold** Why other classes are OK?
@@@ ruby
file_path = search_for_file(path_suffix)
@@@

This line would return nil for those which doesn't have 'sample' as a stored directory. Therefore it doesn't get affected this problem.

**bold** Solution
Need to check if the class is defined in the context of the super classes (especially in Object).
I attach a patch.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Class autoload would be failed if the class to be loaded was
located in the directory whose name is same as the class to
load.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bold&lt;/strong&gt; Example in app/models/sample.rb&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Sample &amp;lt; ActiveRecord::Base
  def reproduce_issue
    SampleClass
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in app/models/sample/sample_class.rb&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class SampleClass &amp;lt; ActiveRecord::Base

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reproduce_issue() method would be failed even if you added
'app/models/sample' into config.load_paths.&lt;/p&gt;
&lt;p&gt;It would rise exception with the following message: Expected
[RAILS_ROOT]/app/models/sample/sample_class.rb to define
Sample::SampleClass&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bold&lt;/strong&gt; Problem There is a problem on the
following line in
ActiveSupport::Dependencies::load_missing_constant()&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
raise LoadError, &amp;quot;Expected #{file_path} to define #{qualified_name}&amp;quot; unless uninherited_const_defined?(from_mod, const_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;uninherited_const_defined? checks in the given class but not its
super class. In above example, even if SampleClass was loaded, it
returns false because it is not Sample::SampleClass.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bold&lt;/strong&gt; Why other classes are OK?&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
file_path = search_for_file(path_suffix)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This line would return nil for those which doesn't have 'sample'
as a stored directory. Therefore it doesn't get affected this
problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;bold&lt;/strong&gt; Solution Need to check if the class is
defined in the context of the super classes (especially in Object).
I attach a patch.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Class autoload would be failed if the class to be loaded was located in the directory whose name is same as the class to load.

**Example**

in app/models/sample.rb:
@@@ ruby
class Sample &lt; ActiveRecord::Base
  def reproduce_issue
    SampleClass
  end
end
@@@
in app/models/sample/sample_class.rb:
@@@ ruby
class SampleClass &lt; ActiveRecord::Base

end
@@@

reproduce_issue() method would be failed even if you added 'app/models/sample' into config.load_paths.

It would rise exception with the following message:

Expected [RAILS_ROOT]/app/models/sample/sample_class.rb to define Sample::SampleClass

**Problem**

There is a problem on the following line in ActiveSupport::Dependencies::load_missing_constant()
@@@ ruby
raise LoadError, &quot;Expected #{file_path} to define #{qualified_name}&quot; unless uninherited_const_defined?(from_mod, const_name)
@@@
uninherited_const_defined? checks in the given class but not its super class. In above example, even if SampleClass was loaded, it returns false because it is not Sample::SampleClass.

**Why other classes are OK?**
@@@ ruby
file_path = search_for_file(path_suffix)
@@@
This line in ActiveSupport::Dependencies::load_missing_constant() would return nil for those which doesn't have 'sample' as a stored directory. Therefore it doesn't get affected this problem.

**Solution**

Need to check if the class is defined in the context of the super classes (especially in Object).
I attach a patch.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Class autoload would be failed if the class to be loaded was
located in the directory whose name is same as the class to
load.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;in app/models/sample.rb:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Sample &amp;lt; ActiveRecord::Base
  def reproduce_issue
    SampleClass
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in app/models/sample/sample_class.rb:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class SampleClass &amp;lt; ActiveRecord::Base

end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reproduce_issue() method would be failed even if you added
'app/models/sample' into config.load_paths.&lt;/p&gt;
&lt;p&gt;It would rise exception with the following message:&lt;/p&gt;
&lt;p&gt;Expected [RAILS_ROOT]/app/models/sample/sample_class.rb to
define Sample::SampleClass&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There is a problem on the following line in
ActiveSupport::Dependencies::load_missing_constant()&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
raise LoadError, &amp;quot;Expected #{file_path} to define #{qualified_name}&amp;quot; unless uninherited_const_defined?(from_mod, const_name)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;uninherited_const_defined? checks in the given class but not its
super class. In above example, even if SampleClass was loaded, it
returns false because it is not Sample::SampleClass.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why other classes are OK?&lt;/strong&gt;&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
file_path = search_for_file(path_suffix)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This line in
ActiveSupport::Dependencies::load_missing_constant() would return
nil for those which doesn't have 'sample' as a stored directory.
Therefore it doesn't get affected this problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Need to check if the class is defined in the context of the
super classes (especially in Object). I attach a patch.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-08T19:54:11+01:00</created-at>
      <creator-id type="integer">53494</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2459</number>
      <permalink>activesupportdependenciesload_missing_constant-fails-to-load</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.x active_support const_missing dependencies.rb</tag>
      <title>ActiveSupport::Dependencies::load_missing_constant() fails to load</title>
      <updated-at type="datetime">2009-04-08T19:58:57+01:00</updated-at>
      <user-id type="integer">53494</user-id>
      <version type="integer">1</version>
      <user-name>Tatsuya Ono</user-name>
      <creator-name>Tatsuya Ono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2459</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This bit me too. I'm not 100% convinced by the solution. I just renamed my model directories to not clash with any class names (i.e. pluralized them). But that's not really a fix either!</body>
      <body-html>&lt;div&gt;&lt;p&gt;This bit me too. I'm not 100% convinced by the solution. I just
renamed my model directories to not clash with any class names
(i.e. pluralized them). But that's not really a fix either!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-04-17T14:36:05+01:00</created-at>
      <creator-id type="integer">53494</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2459</number>
      <permalink>activesupportdependenciesload_missing_constant-fails-to-load</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.x active_support const_missing dependencies.rb</tag>
      <title>ActiveSupport::Dependencies::load_missing_constant() fails to load</title>
      <updated-at type="datetime">2009-04-17T14:36:09+01:00</updated-at>
      <user-id type="integer">23523</user-id>
      <version type="integer">2</version>
      <user-name>Tom Stuart</user-name>
      <creator-name>Tatsuya Ono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2459</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:46+01:00</created-at>
      <creator-id type="integer">53494</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2459</number>
      <permalink>activesupportdependenciesload_missing_constant-fails-to-load</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.x active_support const_missing dependencies.rb</tag>
      <title>ActiveSupport::Dependencies::load_missing_constant() fails to load</title>
      <updated-at type="datetime">2010-05-04T18:48:46+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Tatsuya Ono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2459</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T17:03:30+00:00</created-at>
      <creator-id type="integer">53494</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 2.x active_support const_missing dependencies.rb
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2459</number>
      <permalink>activesupportdependenciesload_missing_constant-fails-to-load</permalink>
      <priority type="integer">1608</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>2x active_support const_missing dependenciesrb</tag>
      <title>ActiveSupport::Dependencies::load_missing_constant() fails to load</title>
      <updated-at type="datetime">2011-02-02T19:08:40+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Tatsuya Ono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2459</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T17:03:32+00:00</created-at>
      <creator-id type="integer">53494</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2459</number>
      <permalink>activesupportdependenciesload_missing_constant-fails-to-load</permalink>
      <priority type="integer">1608</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>2x active_support const_missing dependenciesrb</tag>
      <title>ActiveSupport::Dependencies::load_missing_constant() fails to load</title>
      <updated-at type="datetime">2011-02-02T19:08:27+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Tatsuya Ono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2459</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>27473a2a54858115ba02e9a20a0d0335e6a05c38</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-04-08T19:54:11+01:00</created-at>
      <filename>inherited_const_defined.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">109533</id>
      <size type="integer">2458</size>
      <uploader-id type="integer">53494</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/109533/inherited_const_defined.diff</url>
    </attachment>
  </attachments>
</ticket>
