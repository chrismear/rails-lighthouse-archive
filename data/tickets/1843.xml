<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-02-02T11:02:59+00:00</created-at>
  <creator-id type="integer">36086</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1843</number>
  <permalink>calling-delete-on-a-has_many-through-association-does-not-call-destroy-on-the-association-object</permalink>
  <priority type="integer">1122</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>associations counter_cache has_many has_many_through</tag>
  <title>Calling delete on a has_many :through association does not call destroy on the association object</title>
  <updated-at type="datetime">2009-03-16T09:54:08+00:00</updated-at>
  <user-id type="integer">8406</user-id>
  <version type="integer">4</version>
  <user-name>Eloy Duran</user-name>
  <creator-name>Martin Andert</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1843</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Here is an example:

@@@ ruby
class GroupContentAssignment &lt; ActiveRecord::Base
  belongs_to :group
  belongs_to :content, :counter_cache =&gt; true
  
  has_many :annotations, :dependent =&gt; :destroy
end

class Group &lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&gt; :destroy
  has_many :assigned_contents, :through =&gt; :group_content_assignments
end

class Content &lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&gt; :destroy
end
@@@

If I do the following...

@@@ ruby
group = Group.first
content = Content.first
group.assigned_contents &lt;&lt; content
@@@

... an instance of GroupContentAssignment is created and saved and the counter_cache field on Content is incremented. But when removing...

@@@ ruby
group.assigned_contents.delete content
@@@

... no call to the destroy method of GroupContentAssignment is made and so destroy is not called for all its annotations and the counter_cache of the belonging Content is not decremented.

See also: #1196, http://railsforum.com/viewtopic.php?id=23048</original-body>
  <latest-body>Here is an example:

@@@ ruby
class GroupContentAssignment &lt; ActiveRecord::Base
  belongs_to :group
  belongs_to :content, :counter_cache =&gt; true
  
  has_many :annotations, :dependent =&gt; :destroy
end

class Group &lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&gt; :destroy
  has_many :assigned_contents, :through =&gt; :group_content_assignments
end

class Content &lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&gt; :destroy
end
@@@

If I do the following...

@@@ ruby
group = Group.first
content = Content.first
group.assigned_contents &lt;&lt; content
@@@

... an instance of GroupContentAssignment is created and saved and the counter_cache field on Content is incremented. But when removing...

@@@ ruby
group.assigned_contents.delete content
@@@

... no call to the destroy method of GroupContentAssignment is made and so destroy is not called for all its annotations and the counter_cache of the belonging Content is not decremented.

See also: #1196, http://railsforum.com/viewtopic.php?id=23048</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Here is an example:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class GroupContentAssignment &amp;lt; ActiveRecord::Base
  belongs_to :group
  belongs_to :content, :counter_cache =&amp;gt; true
  
  has_many :annotations, :dependent =&amp;gt; :destroy
end

class Group &amp;lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&amp;gt; :destroy
  has_many :assigned_contents, :through =&amp;gt; :group_content_assignments
end

class Content &amp;lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&amp;gt; :destroy
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I do the following...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
group = Group.first
content = Content.first
group.assigned_contents &amp;lt;&amp;lt; content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... an instance of GroupContentAssignment is created and saved
and the counter_cache field on Content is incremented. But when
removing...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
group.assigned_contents.delete content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... no call to the destroy method of GroupContentAssignment is
made and so destroy is not called for all its annotations and the
counter_cache of the belonging Content is not decremented.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href=&quot;/projects/8994/tickets/1196&quot; title=&quot;Ticket #1196&quot;&gt;#1196&lt;/a&gt;, &lt;a href=&quot;http://railsforum.com/viewtopic.php?id=23048&quot;&gt;http://railsforum.com/viewtopic....&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is an example:

@@@ ruby
class GroupContentAssignment &lt; ActiveRecord::Base
  belongs_to :group
  belongs_to :content, :counter_cache =&gt; true
  
  has_many :annotations, :dependent =&gt; :destroy
end

class Group &lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&gt; :destroy
  has_many :assigned_contents, :through =&gt; :group_content_assignments
end

class Content &lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&gt; :destroy
end
@@@

If I do the following...

@@@ ruby
group = Group.first
content = Content.first
group.assigned_contents &lt;&lt; content
@@@

... an instance of GroupContentAssignment is created and saved and the counter_cache field on Content is incremented. But when removing...

@@@ ruby
group.assigned_contents.delete content
@@@

... no call to the destroy method of GroupContentAssignment is made and so destroy is not called for all its annotations and the counter_cache of the belonging Content is not decremented.

See also: #1196, http://railsforum.com/viewtopic.php?id=23048</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is an example:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class GroupContentAssignment &amp;lt; ActiveRecord::Base
  belongs_to :group
  belongs_to :content, :counter_cache =&amp;gt; true
  
  has_many :annotations, :dependent =&amp;gt; :destroy
end

class Group &amp;lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&amp;gt; :destroy
  has_many :assigned_contents, :through =&amp;gt; :group_content_assignments
end

class Content &amp;lt; ActiveRecord::Base
  has_many :group_content_assignments, :dependent =&amp;gt; :destroy
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I do the following...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
group = Group.first
content = Content.first
group.assigned_contents &amp;lt;&amp;lt; content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... an instance of GroupContentAssignment is created and saved
and the counter_cache field on Content is incremented. But when
removing...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
group.assigned_contents.delete content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... no call to the destroy method of GroupContentAssignment is
made and so destroy is not called for all its annotations and the
counter_cache of the belonging Content is not decremented.&lt;/p&gt;
&lt;p&gt;See also: &lt;a href=&quot;/projects/8994/tickets/1196&quot; title=&quot;Ticket #1196&quot;&gt;#1196&lt;/a&gt;, &lt;a href=&quot;http://railsforum.com/viewtopic.php?id=23048&quot;&gt;http://railsforum.com/viewtopic....&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-02T11:03:00+00:00</created-at>
      <creator-id type="integer">36086</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1843</number>
      <permalink>calling-delete-on-a-has_many-through-association-does-not-call-destroy-on-the-association-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations counter_cache has_many has_many_through</tag>
      <title>Calling delete on a has_many :through association does not call destroy on the association object</title>
      <updated-at type="datetime">2009-02-02T11:03:05+00:00</updated-at>
      <user-id type="integer">36086</user-id>
      <version type="integer">1</version>
      <user-name>Martin Andert</user-name>
      <creator-name>Martin Andert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1843</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Forgot the Annotation model above:

@@@ ruby
class Annotation &lt; ActiveRecord::Base
  belongs_to :group_content_assignment
end
@@@

To make things clearer...

@@@ ruby
group.assigned_contents.delete content
@@@

... deletes the association record in the db using SQL, but doesn't call destroy on its AR instance, so all annotations aren't destroyed (although declared with dependent =&gt; destroy).</body>
      <body-html>&lt;div&gt;&lt;p&gt;Forgot the Annotation model above:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Annotation &amp;lt; ActiveRecord::Base
  belongs_to :group_content_assignment
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make things clearer...&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
group.assigned_contents.delete content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;... deletes the association record in the db using SQL, but
doesn't call destroy on its AR instance, so all annotations aren't
destroyed (although declared with dependent =&amp;gt; destroy).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-02T11:15:51+00:00</created-at>
      <creator-id type="integer">36086</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1843</number>
      <permalink>calling-delete-on-a-has_many-through-association-does-not-call-destroy-on-the-association-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations counter_cache has_many has_many_through</tag>
      <title>Calling delete on a has_many :through association does not call destroy on the association object</title>
      <updated-at type="datetime">2009-02-02T11:15:53+00:00</updated-at>
      <user-id type="integer">36086</user-id>
      <version type="integer">2</version>
      <user-name>Martin Andert</user-name>
      <creator-name>Martin Andert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1843</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Commit 47bdf3bf40ec17e1f8ca1c0e3d7f697d0c4cd1bf added a `destroy` method to `AssociationCollection`. Now I can call

@@@ ruby
group.assigned_contents.destroy content
@@@

instead of calling

@@@ ruby
group.assigned_contents.delete content
@@@

This should fix it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Commit 47bdf3bf40ec17e1f8ca1c0e3d7f697d0c4cd1bf added a
&lt;code&gt;destroy&lt;/code&gt; method to &lt;code&gt;AssociationCollection&lt;/code&gt;.
Now I can call&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
group.assigned_contents.destroy content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;instead of calling&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
group.assigned_contents.delete content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should fix it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-15T19:52:04+00:00</created-at>
      <creator-id type="integer">36086</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1843</number>
      <permalink>calling-delete-on-a-has_many-through-association-does-not-call-destroy-on-the-association-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations counter_cache has_many has_many_through</tag>
      <title>Calling delete on a has_many :through association does not call destroy on the association object</title>
      <updated-at type="datetime">2009-03-15T19:52:05+00:00</updated-at>
      <user-id type="integer">36086</user-id>
      <version type="integer">3</version>
      <user-name>Martin Andert</user-name>
      <creator-name>Martin Andert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1843</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm closing this, since that's probably what you meant to say, even though you reported a problem with the current behaviour to #2146. As I commented on that ticket, please open a new ticket with for the specific problem for any further discussion.

Thanks</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'm closing this, since that's probably what you meant to say,
even though you reported a problem with the current behaviour to
&lt;a href=&quot;/projects/8994/tickets/2146&quot; title=&quot;Ticket #2146&quot;&gt;#2146&lt;/a&gt;. As I commented on that ticket, please
open a new ticket with for the specific problem for any further
discussion.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-16T09:54:04+00:00</created-at>
      <creator-id type="integer">36086</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1843</number>
      <permalink>calling-delete-on-a-has_many-through-association-does-not-call-destroy-on-the-association-object</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>associations counter_cache has_many has_many_through</tag>
      <title>Calling delete on a has_many :through association does not call destroy on the association object</title>
      <updated-at type="datetime">2009-03-16T09:54:08+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">4</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Martin Andert</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1843</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
