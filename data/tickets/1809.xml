<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">17477</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-28T20:07:28+00:00</created-at>
  <creator-id type="integer">42168</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1809</number>
  <permalink>has-many-non-default-primary-key-loads-incorrect-data</permalink>
  <priority type="integer">1101</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.2.2 activerecord association associations associations_preload association_preload foreign_key habtm has_many primary_key</tag>
  <title>Has Many + non default primary key loads incorrect data</title>
  <updated-at type="datetime">2010-05-18T11:47:20+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">6</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Emma Persky</creator-name>
  <assigned-user-name>Frederick Cheung</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1809</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Has Many + non default primary key loads incorrect data.

I assume this is probably also the case for other has_* relationships, but have not verified.

I have a has_many association from class **Foo** to class **Bar**, where, for this specific relationship, the primary key on **Foo** is not *id*, nor is the foreign key on **Bar** *id*.

@@@ ruby
class Foo
  has_many, :bars, :primary_key =&gt; 'a_non_standard_key_name', :foreign_key =&gt; 'another_non_standard_key_name'
end
@@@

The relationship is one way, I have no need to navigate from **Bar** back to **Foo**, but only call *a_foo.bars*.

This works fine when working with a single object, but breaks down when you want to do eager association preloading to avoid n+1 query problem of loading *bars* for many *foos*.

When performing the following you find that

@@@ ruby
f = Foo.find :all, :include =&gt; :Bar
f.bars = [SOMETHING_UNEXPECTED]
@@@

The reason is that ActiveRecord creates the preloading query based on the default primary key of **Foo** (normally *id*). 

It queries for **Bar**.*another_non_standard_key_name*  matching **Foo**.*id* not **Foo**.*a_non_standard_key_name*

This causes seriously unexpected behaviour, and could easily go unnoticed since no errors are thrown.

I have found the hook in ActiveRecord where this functionality should be included and monkey patched for my system, because I need it now. I can't vouch for it's correctness, but we have many many specs for our product and none of them have broken because of this. 

I'm running frozen rails 2.2.2

vendor/activerecord/lib/active_record/association_preload.rb, line 221

Change 

@@@ ruby
primary_key_name = reflection.through_reflection_primary_key_name
@@@

to

@@@ ruby
primary_key_name = reflection.options[:primary_key] || reflection.through_reflection_primary_key_name
@@@

Hope this helps someone!

Emma</original-body>
  <latest-body>Has Many + non default primary key loads incorrect data.

I assume this is probably also the case for other has_* relationships, but have not verified.

I have a has_many association from class **Foo** to class **Bar**, where, for this specific relationship, the primary key on **Foo** is not *id*, nor is the foreign key on **Bar** *id*.

@@@ ruby
class Foo
  has_many, :bars, :primary_key =&gt; 'a_non_standard_key_name', :foreign_key =&gt; 'another_non_standard_key_name'
end
@@@

The relationship is one way, I have no need to navigate from **Bar** back to **Foo**, but only call *a_foo.bars*.

This works fine when working with a single object, but breaks down when you want to do eager association preloading to avoid n+1 query problem of loading *bars* for many *foos*.

When performing the following you find that

@@@ ruby
f = Foo.find :all, :include =&gt; :Bar
f.bars = [SOMETHING_UNEXPECTED]
@@@

The reason is that ActiveRecord creates the preloading query based on the default primary key of **Foo** (normally *id*). 

It queries for **Bar**.*another_non_standard_key_name*  matching **Foo**.*id* not **Foo**.*a_non_standard_key_name*

This causes seriously unexpected behaviour, and could easily go unnoticed since no errors are thrown.

I have found the hook in ActiveRecord where this functionality should be included and monkey patched for my system, because I need it now. I can't vouch for it's correctness, but we have many many specs for our product and none of them have broken because of this. 

I'm running frozen rails 2.2.2

vendor/activerecord/lib/active_record/association_preload.rb, line 221

Change 

@@@ ruby
primary_key_name = reflection.through_reflection_primary_key_name
@@@

to

@@@ ruby
primary_key_name = reflection.options[:primary_key] || reflection.through_reflection_primary_key_name
@@@

Hope this helps someone!

Emma</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Has Many + non default primary key loads incorrect data.&lt;/p&gt;
&lt;p&gt;I assume this is probably also the case for other has_*
relationships, but have not verified.&lt;/p&gt;
&lt;p&gt;I have a has_many association from class &lt;strong&gt;Foo&lt;/strong&gt; to
class &lt;strong&gt;Bar&lt;/strong&gt;, where, for this specific relationship,
the primary key on &lt;strong&gt;Foo&lt;/strong&gt; is not &lt;em&gt;id&lt;/em&gt;, nor is
the foreign key on &lt;strong&gt;Bar&lt;/strong&gt; &lt;em&gt;id&lt;/em&gt;.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Foo
  has_many, :bars, :primary_key =&amp;gt; 'a_non_standard_key_name', :foreign_key =&amp;gt; 'another_non_standard_key_name'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The relationship is one way, I have no need to navigate from
&lt;strong&gt;Bar&lt;/strong&gt; back to &lt;strong&gt;Foo&lt;/strong&gt;, but only call
&lt;em&gt;a_foo.bars&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This works fine when working with a single object, but breaks
down when you want to do eager association preloading to avoid n+1
query problem of loading &lt;em&gt;bars&lt;/em&gt; for many &lt;em&gt;foos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When performing the following you find that&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
f = Foo.find :all, :include =&amp;gt; :Bar
f.bars = [SOMETHING_UNEXPECTED]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason is that ActiveRecord creates the preloading query
based on the default primary key of &lt;strong&gt;Foo&lt;/strong&gt; (normally
&lt;em&gt;id&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;It queries for
&lt;strong&gt;Bar&lt;/strong&gt;.&lt;em&gt;another_non_standard_key_name&lt;/em&gt;
matching &lt;strong&gt;Foo&lt;/strong&gt;.&lt;em&gt;id&lt;/em&gt; not
&lt;strong&gt;Foo&lt;/strong&gt;.&lt;em&gt;a_non_standard_key_name&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This causes seriously unexpected behaviour, and could easily go
unnoticed since no errors are thrown.&lt;/p&gt;
&lt;p&gt;I have found the hook in ActiveRecord where this functionality
should be included and monkey patched for my system, because I need
it now. I can't vouch for it's correctness, but we have many many
specs for our product and none of them have broken because of
this.&lt;/p&gt;
&lt;p&gt;I'm running frozen rails 2.2.2&lt;/p&gt;
&lt;p&gt;vendor/activerecord/lib/active_record/association_preload.rb,
line 221&lt;/p&gt;
&lt;p&gt;Change&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
primary_key_name = reflection.through_reflection_primary_key_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
primary_key_name = reflection.options[:primary_key] || reflection.through_reflection_primary_key_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this helps someone!&lt;/p&gt;
&lt;p&gt;Emma&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Has Many + non default primary key loads incorrect data.

I assume this is probably also the case for other has_* relationships, but have not verified.

I have a has_many association from class **Foo** to class **Bar**, where, for this specific relationship, the primary key on **Foo** is not *id*, nor is the foreign key on **Bar** *id*.

@@@ ruby
class Foo
  has_many, :bars, :primary_key =&gt; 'a_non_standard_key_name', :foreign_key =&gt; 'another_non_standard_key_name'
end
@@@

The relationship is one way, I have no need to navigate from **Bar** back to **Foo**, but only call *a_foo.bars*.

This works fine when working with a single object, but breaks down when you want to do eager association preloading to avoid n+1 query problem of loading *bars* for many *foos*.

When performing the following you find that

@@@ ruby
f = Foo.find :all, :include =&gt; :Bar
f.bars = [SOMETHING_UNEXPECTED]
@@@

The reason is that ActiveRecord creates the preloading query based on the default primary key of **Foo** (normally *id*). 

It queries for **Bar**.*another_non_standard_key_name*  matching **Foo**.*id* not **Foo**.*a_non_standard_key_name*

This causes seriously unexpected behaviour, and could easily go unnoticed since no errors are thrown.

I have found the hook in ActiveRecord where this functionality should be included and monkey patched for my system, because I need it now. I can't vouch for it's correctness, but we have many many specs for our product and none of them have broken because of this. 

I'm running frozen rails 2.2.2

vendor/activerecord/lib/active_record/association_preload.rb, line 221

Change 

@@@ ruby
primary_key_name = reflection.through_reflection_primary_key_name
@@@

to

@@@ ruby
primary_key_name = reflection.options[:primary_key] || reflection.through_reflection_primary_key_name
@@@

Hope this helps someone!

Emma</body>
      <body-html>&lt;div&gt;&lt;p&gt;Has Many + non default primary key loads incorrect data.&lt;/p&gt;
&lt;p&gt;I assume this is probably also the case for other has_*
relationships, but have not verified.&lt;/p&gt;
&lt;p&gt;I have a has_many association from class &lt;strong&gt;Foo&lt;/strong&gt; to
class &lt;strong&gt;Bar&lt;/strong&gt;, where, for this specific relationship,
the primary key on &lt;strong&gt;Foo&lt;/strong&gt; is not &lt;em&gt;id&lt;/em&gt;, nor is
the foreign key on &lt;strong&gt;Bar&lt;/strong&gt; &lt;em&gt;id&lt;/em&gt;.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Foo
  has_many, :bars, :primary_key =&amp;gt; 'a_non_standard_key_name', :foreign_key =&amp;gt; 'another_non_standard_key_name'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The relationship is one way, I have no need to navigate from
&lt;strong&gt;Bar&lt;/strong&gt; back to &lt;strong&gt;Foo&lt;/strong&gt;, but only call
&lt;em&gt;a_foo.bars&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This works fine when working with a single object, but breaks
down when you want to do eager association preloading to avoid n+1
query problem of loading &lt;em&gt;bars&lt;/em&gt; for many &lt;em&gt;foos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When performing the following you find that&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
f = Foo.find :all, :include =&amp;gt; :Bar
f.bars = [SOMETHING_UNEXPECTED]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason is that ActiveRecord creates the preloading query
based on the default primary key of &lt;strong&gt;Foo&lt;/strong&gt; (normally
&lt;em&gt;id&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;It queries for
&lt;strong&gt;Bar&lt;/strong&gt;.&lt;em&gt;another_non_standard_key_name&lt;/em&gt;
matching &lt;strong&gt;Foo&lt;/strong&gt;.&lt;em&gt;id&lt;/em&gt; not
&lt;strong&gt;Foo&lt;/strong&gt;.&lt;em&gt;a_non_standard_key_name&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This causes seriously unexpected behaviour, and could easily go
unnoticed since no errors are thrown.&lt;/p&gt;
&lt;p&gt;I have found the hook in ActiveRecord where this functionality
should be included and monkey patched for my system, because I need
it now. I can't vouch for it's correctness, but we have many many
specs for our product and none of them have broken because of
this.&lt;/p&gt;
&lt;p&gt;I'm running frozen rails 2.2.2&lt;/p&gt;
&lt;p&gt;vendor/activerecord/lib/active_record/association_preload.rb,
line 221&lt;/p&gt;
&lt;p&gt;Change&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
primary_key_name = reflection.through_reflection_primary_key_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
primary_key_name = reflection.options[:primary_key] || reflection.through_reflection_primary_key_name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hope this helps someone!&lt;/p&gt;
&lt;p&gt;Emma&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-28T20:07:28+00:00</created-at>
      <creator-id type="integer">42168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1809</number>
      <permalink>has-many-non-default-primary-key-loads-incorrect-data</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord association associations associations_preload association_preload foreign_key habtm has_many primary_key</tag>
      <title>Has Many + non default primary key loads incorrect data</title>
      <updated-at type="datetime">2009-01-28T20:07:32+00:00</updated-at>
      <user-id type="integer">42168</user-id>
      <version type="integer">1</version>
      <user-name>Emma Persky</user-name>
      <creator-name>Emma Persky</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-28T20:27:21+00:00</created-at>
      <creator-id type="integer">42168</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1809</number>
      <permalink>has-many-non-default-primary-key-loads-incorrect-data</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord association associations associations_preload association_preload foreign_key habtm has_many primary_key</tag>
      <title>Has Many + non default primary key loads incorrect data</title>
      <updated-at type="datetime">2009-01-28T20:27:23+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Emma Persky</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ah, just checkout the rails git repo, and it looks like this has already been fixed.

Thanks :)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Ah, just checkout the rails git repo, and it looks like this has
already been fixed.&lt;/p&gt;
&lt;p&gt;Thanks :)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-29T11:16:24+00:00</created-at>
      <creator-id type="integer">42168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1809</number>
      <permalink>has-many-non-default-primary-key-loads-incorrect-data</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.2.2 activerecord association associations associations_preload association_preload foreign_key habtm has_many primary_key</tag>
      <title>Has Many + non default primary key loads incorrect data</title>
      <updated-at type="datetime">2009-01-29T11:16:27+00:00</updated-at>
      <user-id type="integer">42168</user-id>
      <version type="integer">3</version>
      <user-name>Emma Persky</user-name>
      <creator-name>Emma Persky</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-05-10T15:53:10+01:00</created-at>
      <creator-id type="integer">42168</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1809</number>
      <permalink>has-many-non-default-primary-key-loads-incorrect-data</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.2.2 activerecord association associations associations_preload association_preload foreign_key habtm has_many primary_key</tag>
      <title>Has Many + non default primary key loads incorrect data</title>
      <updated-at type="datetime">2009-05-10T15:53:12+01:00</updated-at>
      <user-id type="integer">17477</user-id>
      <version type="integer">4</version>
      <user-name>Frederick Cheung</user-name>
      <creator-name>Emma Persky</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Still broken in 2.3.5:
@@@
class Product &lt; ActiveRecord::Base
  ...
  belongs_to :shop, :primary_key =&gt; :user_id, :foreign_key =&gt; :user_id
end

Product.first(:include=&gt;:shop)
@@@
results in:
@@@
SELECT * FROM `products`  LIMIT 1
SELECT * FROM `shops` WHERE (`shops`.`id` = 13008)
@@@

but should be:
@@@
SELECT * FROM `products`  LIMIT 1
SELECT * FROM `shops` WHERE (`shops`.`user_id` = 13008)
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;Still broken in 2.3.5:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Product &amp;lt; ActiveRecord::Base
  ...
  belongs_to :shop, :primary_key =&amp;gt; :user_id, :foreign_key =&amp;gt; :user_id
end&lt;br&gt;
&lt;br&gt;


&lt;br&gt;
Product.first(:include=&amp;gt;:shop)&lt;/code&gt;
&lt;/pre&gt;
results in:&lt;br&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM &lt;/code&gt;products  LIMIT 1
SELECT * FROM &lt;code&gt;shops&lt;/code&gt; WHERE (&lt;code&gt;shops&lt;/code&gt;.&lt;code&gt;id&lt;/code&gt; = 13008)
&lt;/pre&gt;
&lt;p&gt;but should be:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;SELECT * FROM &lt;/code&gt;products  LIMIT 1
SELECT * FROM &lt;code&gt;shops&lt;/code&gt; WHERE (&lt;code&gt;shops&lt;/code&gt;.&lt;code&gt;user_id&lt;/code&gt; = 13008)
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-18T10:30:28+01:00</created-at>
      <creator-id type="integer">42168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1809</number>
      <permalink>has-many-non-default-primary-key-loads-incorrect-data</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.2.2 activerecord association associations associations_preload association_preload foreign_key habtm has_many primary_key</tag>
      <title>Has Many + non default primary key loads incorrect data</title>
      <updated-at type="datetime">2010-05-18T10:30:33+01:00</updated-at>
      <user-id type="integer">42010</user-id>
      <version type="integer">5</version>
      <user-name>grosser</user-name>
      <creator-name>Emma Persky</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">17477</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Just want to add that it is not an issue in rails3 edge.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just want to add that it is not an issue in rails3 edge.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-05-18T11:47:18+01:00</created-at>
      <creator-id type="integer">42168</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1809</number>
      <permalink>has-many-non-default-primary-key-loads-incorrect-data</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>2.2.2 activerecord association associations associations_preload association_preload foreign_key habtm has_many primary_key</tag>
      <title>Has Many + non default primary key loads incorrect data</title>
      <updated-at type="datetime">2010-05-18T11:47:20+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">6</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Emma Persky</creator-name>
      <assigned-user-name>Frederick Cheung</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1809</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
