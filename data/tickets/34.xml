<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-04-22T07:38:08+01:00</created-at>
  <creator-id type="integer">2059</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">34</number>
  <permalink>attr_readonly-not-set-when-counter_cache-set-to-true</permalink>
  <priority type="integer">9698</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord patch</tag>
  <title>attr_readonly not set when counter_cache set to true</title>
  <updated-at type="datetime">2010-10-06T06:47:45+01:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">4</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Herryanto Siatono</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/34</url>
  <priority-name nil="true"></priority-name>
  <original-body>Due to the class loading feature in Rails, a model class with counter_cache could be loaded before its associated class, which may cause attr_readonly for &quot;[model]_count&quot; field not set for its associated class. 

The chances of this occuring in development environment is much higher as codes are reloaded for every request.

A simple test case to trigger this issue:
# class Topic
# end
#
# class Post
#   belongs_to :topic, :counter_cache =&gt; true  
# end
class CounterCacheAttrReadonlyTest &lt; Test::Unit::TestCase
  def test_attr_readonly_not_set
    Post.create :topic_id =&gt; 1
    
    # Does not set attr_readonly for posts_count in Topic
    # Because Topic has not been loaded and defined? returns false
    assert_equal Set.new('posts_count'), Topic.attr_readonly 
  end
end

Attached is the patch. Thanks.</original-body>
  <latest-body>Due to the class loading feature in Rails, a model class with counter_cache could be loaded before its associated class, which may cause attr_readonly for &quot;[model]_count&quot; field not set for its associated class. 

The chances of this occuring in development environment is much higher as codes are reloaded for every request.

A simple test case to trigger this issue:
# class Topic
# end
#
# class Post
#   belongs_to :topic, :counter_cache =&gt; true  
# end
class CounterCacheAttrReadonlyTest &lt; Test::Unit::TestCase
  def test_attr_readonly_not_set
    Post.create :topic_id =&gt; 1
    
    # Does not set attr_readonly for posts_count in Topic
    # Because Topic has not been loaded and defined? returns false
    assert_equal Set.new('posts_count'), Topic.attr_readonly 
  end
end

Attached is the patch. Thanks.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Due to the class loading feature in Rails, a model class with counter_cache could be loaded before its associated class, which may cause attr_readonly for &quot;[model]_count&quot; field not set for its associated class.
&lt;/p&gt;&lt;p&gt;
The chances of this occuring in development environment is much higher as codes are reloaded for every request.
&lt;/p&gt;&lt;p&gt;
A simple test case to trigger this issue:
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
class Topic
&lt;/li&gt;&lt;li&gt;
end
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
#
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
class Post
&lt;/li&gt;&lt;li&gt;
  belongs_to :topic, :counter_cache =&gt; true
&lt;/li&gt;&lt;li&gt;
end
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
class CounterCacheAttrReadonlyTest &amp;lt; Test::Unit::TestCase
&lt;/p&gt;&lt;p&gt;
def test_attr_readonly_not_set
&lt;/p&gt;&lt;p&gt;
Post.create :topic_id =&gt; 1
&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;
Does not set attr_readonly for posts_count in Topic
&lt;/li&gt;&lt;li&gt;
Because Topic has not been loaded and defined? returns false
&lt;/li&gt;&lt;/ol&gt;
&lt;p&gt;
assert_equal Set.new('posts_count'), Topic.attr_readonly
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
Attached is the patch. Thanks.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Due to the class loading feature in Rails, a model class with counter_cache could be loaded before its associated class, which may cause attr_readonly for &quot;[model]_count&quot; field not set for its associated class. 

The chances of this occuring in development environment is much higher as codes are reloaded for every request.

A simple test case to trigger this issue:
@@@ ruby
class Topic
end

class Post
  belongs_to :topic, :counter_cache =&gt; true  
end

class CounterCacheAttrReadonlyTest &lt; Test::Unit::TestCase
  def test_attr_readonly_not_set
    Post.create :topic_id =&gt; 1
    
    # Failed, attr_readonly for posts_count in Topic not set 
    # because Topic has not been loaded and defined? returns false      
    assert_equal Set.new('posts_count'), Topic.attr_readonly 
  end
end
@@@

Attached is the patch. Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Due to the class loading feature in Rails, a model class with counter_cache could be loaded before its associated class, which may cause attr_readonly for &quot;[model]_count&quot; field not set for its associated class.
&lt;/p&gt;&lt;p&gt;
The chances of this occuring in development environment is much higher as codes are reloaded for every request.
&lt;/p&gt;&lt;p&gt;
A simple test case to trigger this issue:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Topic
end

class Post
  belongs_to :topic, :counter_cache =&amp;gt; true  
end

class CounterCacheAttrReadonlyTest &amp;lt; Test::Unit::TestCase
  def test_attr_readonly_not_set
    Post.create :topic_id =&amp;gt; 1
    
    # Failed, attr_readonly for posts_count in Topic not set 
    # because Topic has not been loaded and defined? returns false      
    assert_equal Set.new('posts_count'), Topic.attr_readonly 
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Attached is the patch. Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-23T04:02:00+01:00</created-at>
      <creator-id type="integer">2059</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">34</number>
      <permalink>attr_readonly-not-set-when-counter_cache-set-to-true</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>attr_readonly not set when counter_cache set to true</title>
      <updated-at type="datetime">2008-04-23T04:02:00+01:00</updated-at>
      <user-id type="integer">2059</user-id>
      <version type="integer">1</version>
      <user-name>Herryanto Siatono</user-name>
      <creator-name>Herryanto Siatono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/34</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Could you add the tests to the .patch you've attached please?  Two style issues

@@@ruby 

if (reflection.klass rescue nil) and reflection.klass.respond_to?(:attr_readonly)

@@@

Why do you need the rescue there, and trailing conditionals shouldn't be that long,  rewrite it to if ... end instead.


Cheers!</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Could you add the tests to the .patch you've attached please?  Two style issues
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;uby&quot;&gt;
if (reflection.klass rescue nil) and reflection.klass.respond_to?(:attr_readonly)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Why do you need the rescue there, and trailing conditionals shouldn't be that long,  rewrite it to if ... end instead.
&lt;/p&gt;&lt;p&gt;
Cheers!
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-04-23T09:15:18+01:00</created-at>
      <creator-id type="integer">2059</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">34</number>
      <permalink>attr_readonly-not-set-when-counter_cache-set-to-true</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>attr_readonly not set when counter_cache set to true</title>
      <updated-at type="datetime">2008-04-23T09:15:18+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Herryanto Siatono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/34</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Change ticket status to open when fixed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Change ticket status to open when fixed.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-04-29T23:20:51+01:00</created-at>
      <creator-id type="integer">2059</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">34</number>
      <permalink>attr_readonly-not-set-when-counter_cache-set-to-true</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>attr_readonly not set when counter_cache set to true</title>
      <updated-at type="datetime">2008-04-29T23:20:51+01:00</updated-at>
      <user-id type="integer">83</user-id>
      <version type="integer">3</version>
      <user-name>DHH</user-name>
      <creator-name>Herryanto Siatono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/34</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:47:44+01:00</created-at>
      <creator-id type="integer">2059</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:priority: 0
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">34</number>
      <permalink>attr_readonly-not-set-when-counter_cache-set-to-true</permalink>
      <priority type="integer">9698</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord patch</tag>
      <title>attr_readonly not set when counter_cache set to true</title>
      <updated-at type="datetime">2010-10-06T06:47:45+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Herryanto Siatono</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/34</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>a244ca67717b562f24e012f5c9dc1edd4287939e</code>
      <content-type>application/x-ruby</content-type>
      <created-at type="datetime">2008-04-22T07:39:12+01:00</created-at>
      <filename>counter_cache_attr_readonly_test.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">19621</id>
      <size type="integer">507</size>
      <uploader-id type="integer">2059</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/19621/counter_cache_attr_readonly_test.rb</url>
    </attachment>
    <attachment type="Attachment">
      <code>4c2942d3e82190d290a63f3acc04502c5df7f3b5</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-04-22T09:09:29+01:00</created-at>
      <filename>counter_cache_attr_readonly.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">19624</id>
      <size type="integer">1150</size>
      <uploader-id type="integer">2059</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/19624/counter_cache_attr_readonly.patch</url>
    </attachment>
  </attachments>
</ticket>
