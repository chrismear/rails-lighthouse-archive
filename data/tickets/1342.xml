<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-19T09:02:23+01:00</created-at>
  <creator-id type="integer">36735</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">1342</number>
  <permalink>active-record-associations</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>associations</tag>
  <title>active record associations</title>
  <updated-at type="datetime">2011-02-02T18:23:10+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">6</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Daniel</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1342</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>What's wrong with ruby associations?

Somehow association fields don't have any support for dirty objects
nor optimistic locking.

I would expect dirty objects to work like this:

class Person
  has_many :cars
end

&gt;&gt; person = Person.find_by_name(&quot;Jack&quot;)
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.cars=[Car.find_by_name(&quot;Porsche&quot;), Car.find_by_name(&quot;VW&quot;)]
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 1, name: &quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;,
created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.changed?
=&gt; true
&gt;&gt; person.changes

=&gt; {&quot;cars&quot;=&gt;[[#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04
03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;], [#&lt;Car id: 1, name:
&quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04
03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;, created_at: &quot;2008-11-04
03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]]}

&gt;&gt; person.save  #associations are saved in the database

However ror returns the following

&gt;&gt; person = Person.find_by_name(&quot;Jack&quot;)
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.cars=[Car.find_by_name(&quot;Porsche&quot;), Car.find_by_name(&quot;VW&quot;)]  #associations are saved in the database
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 1, name: &quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;,
created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.changed?
=&gt; false
&gt;&gt; person.changes

=&gt; {}

The same problem happens with optimistic locking

p1 = Person.find_by_name(&quot;Jack&quot;)
p2 = Person.find_by_name(&quot;Jack&quot;)

p1.cars = [Car.find_by_name(&quot;Porsche&quot;)]
p1.save

p2.cars = [Car.find_by_name(&quot;BMW&quot;)]
p2.save

I would expect the object to raise an exception, but it doesn't.

Isn't there a way to unify the behaviour of regular fields and
associations?  Most objects in my app don't represent flat tables, but
tables that associate each other.  Right now I'm forced to having to
wrap many attribute updates into a transaction and write my own object
comparisons.</original-body>
  <latest-body>What's wrong with ruby associations?

Somehow association fields don't have any support for dirty objects
nor optimistic locking.

I would expect dirty objects to work like this:

class Person
  has_many :cars
end

&gt;&gt; person = Person.find_by_name(&quot;Jack&quot;)
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.cars=[Car.find_by_name(&quot;Porsche&quot;), Car.find_by_name(&quot;VW&quot;)]
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 1, name: &quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;,
created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.changed?
=&gt; true
&gt;&gt; person.changes

=&gt; {&quot;cars&quot;=&gt;[[#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04
03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;], [#&lt;Car id: 1, name:
&quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04
03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;, created_at: &quot;2008-11-04
03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]]}

&gt;&gt; person.save  #associations are saved in the database

However ror returns the following

&gt;&gt; person = Person.find_by_name(&quot;Jack&quot;)
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.cars=[Car.find_by_name(&quot;Porsche&quot;), Car.find_by_name(&quot;VW&quot;)]  #associations are saved in the database
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 1, name: &quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;,
created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.changed?
=&gt; false
&gt;&gt; person.changes

=&gt; {}

The same problem happens with optimistic locking

p1 = Person.find_by_name(&quot;Jack&quot;)
p2 = Person.find_by_name(&quot;Jack&quot;)

p1.cars = [Car.find_by_name(&quot;Porsche&quot;)]
p1.save

p2.cars = [Car.find_by_name(&quot;BMW&quot;)]
p2.save

I would expect the object to raise an exception, but it doesn't.

Isn't there a way to unify the behaviour of regular fields and
associations?  Most objects in my app don't represent flat tables, but
tables that associate each other.  Right now I'm forced to having to
wrap many attribute updates into a transaction and write my own object
comparisons.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;What's wrong with ruby associations?&lt;/p&gt;
&lt;p&gt;Somehow association fields don't have any support for dirty
objects nor optimistic locking.&lt;/p&gt;
&lt;p&gt;I would expect dirty objects to work like this:&lt;/p&gt;
&lt;p&gt;class Person has_many :cars end&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person = Person.find_by_name(&quot;Jack&quot;) person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.cars=[Car.find_by_name(&quot;Porsche&quot;),
Car.find_by_name(&quot;VW&quot;)] person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#, #]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.changed? =&amp;gt; true person.changes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; {&quot;cars&quot;=&amp;gt;[[#], [#, #]]}&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.save #associations are saved in the database&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;However ror returns the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person = Person.find_by_name(&quot;Jack&quot;) person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.cars=[Car.find_by_name(&quot;Porsche&quot;),
Car.find_by_name(&quot;VW&quot;)] #associations are saved in the database
person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#, #]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.changed? =&amp;gt; false person.changes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; {}&lt;/p&gt;
&lt;p&gt;The same problem happens with optimistic locking&lt;/p&gt;
&lt;p&gt;p1 = Person.find_by_name(&quot;Jack&quot;) p2 =
Person.find_by_name(&quot;Jack&quot;)&lt;/p&gt;
&lt;p&gt;p1.cars = [Car.find_by_name(&quot;Porsche&quot;)] p1.save&lt;/p&gt;
&lt;p&gt;p2.cars = [Car.find_by_name(&quot;BMW&quot;)] p2.save&lt;/p&gt;
&lt;p&gt;I would expect the object to raise an exception, but it
doesn't.&lt;/p&gt;
&lt;p&gt;Isn't there a way to unify the behaviour of regular fields and
associations? Most objects in my app don't represent flat tables,
but tables that associate each other. Right now I'm forced to
having to wrap many attribute updates into a transaction and write
my own object comparisons.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What's wrong with ruby associations?

Somehow association fields don't have any support for dirty objects
nor optimistic locking.

I would expect dirty objects to work like this:

class Person
  has_many :cars
end

&gt;&gt; person = Person.find_by_name(&quot;Jack&quot;)
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.cars=[Car.find_by_name(&quot;Porsche&quot;), Car.find_by_name(&quot;VW&quot;)]
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 1, name: &quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;,
created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.changed?
=&gt; true
&gt;&gt; person.changes

=&gt; {&quot;cars&quot;=&gt;[[#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04
03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;], [#&lt;Car id: 1, name:
&quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04
03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;, created_at: &quot;2008-11-04
03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]]}

&gt;&gt; person.save  #associations are saved in the database

However ror returns the following

&gt;&gt; person = Person.find_by_name(&quot;Jack&quot;)
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 2, name: &quot;BMW&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.cars=[Car.find_by_name(&quot;Porsche&quot;), Car.find_by_name(&quot;VW&quot;)]  #associations are saved in the database
&gt;&gt; person.cars

=&gt; [#&lt;Car id: 1, name: &quot;Porsche&quot;, created_at: &quot;2008-11-04 03:04:46&quot;,
updated_at: &quot;2008-11-04 03:04:46&quot;&gt;, #&lt;Car id: 3, name: &quot;VW&quot;,
created_at: &quot;2008-11-04 03:04:46&quot;, updated_at: &quot;2008-11-04 03:04:46&quot;&gt;]

&gt;&gt; person.changed?
=&gt; false
&gt;&gt; person.changes

=&gt; {}

The same problem happens with optimistic locking

p1 = Person.find_by_name(&quot;Jack&quot;)
p2 = Person.find_by_name(&quot;Jack&quot;)

p1.cars = [Car.find_by_name(&quot;Porsche&quot;)]
p1.save

p2.cars = [Car.find_by_name(&quot;BMW&quot;)]
p2.save

I would expect the object to raise an exception, but it doesn't.

Isn't there a way to unify the behaviour of regular fields and
associations?  Most objects in my app don't represent flat tables, but
tables that associate each other.  Right now I'm forced to having to
wrap many attribute updates into a transaction and write my own object
comparisons.</body>
      <body-html>&lt;div&gt;&lt;p&gt;What's wrong with ruby associations?&lt;/p&gt;
&lt;p&gt;Somehow association fields don't have any support for dirty
objects nor optimistic locking.&lt;/p&gt;
&lt;p&gt;I would expect dirty objects to work like this:&lt;/p&gt;
&lt;p&gt;class Person has_many :cars end&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person = Person.find_by_name(&quot;Jack&quot;) person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.cars=[Car.find_by_name(&quot;Porsche&quot;),
Car.find_by_name(&quot;VW&quot;)] person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#, #]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.changed? =&amp;gt; true person.changes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; {&quot;cars&quot;=&amp;gt;[[#], [#, #]]}&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.save #associations are saved in the database&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;However ror returns the following&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person = Person.find_by_name(&quot;Jack&quot;) person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.cars=[Car.find_by_name(&quot;Porsche&quot;),
Car.find_by_name(&quot;VW&quot;)] #associations are saved in the database
person.cars&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; [#, #]&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;person.changed? =&amp;gt; false person.changes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;=&amp;gt; {}&lt;/p&gt;
&lt;p&gt;The same problem happens with optimistic locking&lt;/p&gt;
&lt;p&gt;p1 = Person.find_by_name(&quot;Jack&quot;) p2 =
Person.find_by_name(&quot;Jack&quot;)&lt;/p&gt;
&lt;p&gt;p1.cars = [Car.find_by_name(&quot;Porsche&quot;)] p1.save&lt;/p&gt;
&lt;p&gt;p2.cars = [Car.find_by_name(&quot;BMW&quot;)] p2.save&lt;/p&gt;
&lt;p&gt;I would expect the object to raise an exception, but it
doesn't.&lt;/p&gt;
&lt;p&gt;Isn't there a way to unify the behaviour of regular fields and
associations? Most objects in my app don't represent flat tables,
but tables that associate each other. Right now I'm forced to
having to wrap many attribute updates into a transaction and write
my own object comparisons.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-11-07T04:20:18+00:00</created-at>
      <creator-id type="integer">36735</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1342</number>
      <permalink>active-record-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>associations</tag>
      <title>active record associations</title>
      <updated-at type="datetime">2008-11-07T04:20:20+00:00</updated-at>
      <user-id type="integer">36735</user-id>
      <version type="integer">1</version>
      <user-name>Daniel</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1342</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Can we please have a patch with failing tests ? http://guides.rails.info/contrib... should be helpful.

Thanks !</body>
      <body-html>&lt;div&gt;&lt;p&gt;Can we please have a patch with failing tests ? &lt;a href=&quot;http://guides.rails.info/contrib..&quot;&gt;http://guides.rails.info/contrib..&lt;/a&gt;.
should be helpful.&lt;/p&gt;
&lt;p&gt;Thanks !&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-12T16:00:01+00:00</created-at>
      <creator-id type="integer">36735</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1342</number>
      <permalink>active-record-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>associations</tag>
      <title>active record associations</title>
      <updated-at type="datetime">2009-03-12T16:00:03+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1342</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:36+01:00</created-at>
      <creator-id type="integer">36735</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1342</number>
      <permalink>active-record-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>associations</tag>
      <title>active record associations</title>
      <updated-at type="datetime">2010-05-04T18:48:36+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">3</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1342</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>ches. They &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega wathces&lt;/a&gt;&lt;/b&gt; are the ideal items &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega replica watches&lt;/a&gt;&lt;/b&gt; for those fashionistas who &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;replica watches &lt;/a&gt;&lt;/b&gt; want to live in &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/a-lange-sohne-datograph-flyback-mens-watch-1422-2061-1177.html&quot;&gt;Datograph Flyback Mens 1422-2061&lt;/a&gt;&lt;/b&gt; style and catch up &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/raymond-weil-parsifal-ladies-watch-9440-stg00308-3523-2800.html&quot;&gt;fake Parsifal Ladies 9440.STG00308-3523&lt;/a&gt;&lt;/b&gt; with th &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;knockoff omega watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;knockoff watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com/watches/rolex-submariner-automatic-with-blue-bezel-16626-124-269.html&quot;&gt;Submariner Automatic with Blue Bezel 16626-124&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;replica watches on sale&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;knockoff watches&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;ches. They &lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;omega
wathces&lt;/a&gt;&lt;/b&gt; are the ideal items &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;omega replica watches&lt;/a&gt;&lt;/b&gt;
for those fashionistas who &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;replica watches&lt;/a&gt;&lt;/b&gt; want
to live in &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/a-lange-sohne-datograph-flyback-mens-watch-1422-2061-1177.html&quot;&gt;
Datograph Flyback Mens 1422-2061&lt;/a&gt;&lt;/b&gt; style and catch up
&lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/raymond-weil-parsifal-ladies-watch-9440-stg00308-3523-2800.html&quot;&gt;
fake Parsifal Ladies 9440.STG00308-3523&lt;/a&gt;&lt;/b&gt; with th &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;knockoff omega watches&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=&quot;http://www.omegawatchesforsale.com&quot;&gt;knockoff
watches&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com/watches/rolex-submariner-automatic-with-blue-bezel-16626-124-269.html&quot;&gt;
Submariner Automatic with Blue Bezel 16626-124&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;replica watches on
sale&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.omegawatchesforsale.com&quot;&gt;knockoff watches&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-19T08:54:19+01:00</created-at>
      <creator-id type="integer">36735</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1342</number>
      <permalink>active-record-associations</permalink>
      <priority type="integer">744</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>associations</tag>
      <title>active record associations</title>
      <updated-at type="datetime">2010-07-19T09:02:23+01:00</updated-at>
      <user-id type="integer">107771</user-id>
      <version type="integer">4</version>
      <user-name>zhuzhu</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1342</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:51:33+00:00</created-at>
      <creator-id type="integer">36735</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1342</number>
      <permalink>active-record-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>associations</tag>
      <title>active record associations</title>
      <updated-at type="datetime">2011-02-02T18:22:49+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">5</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1342</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:51:35+00:00</created-at>
      <creator-id type="integer">36735</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1342</number>
      <permalink>active-record-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>associations</tag>
      <title>active record associations</title>
      <updated-at type="datetime">2011-02-02T18:23:10+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Daniel</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1342</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
