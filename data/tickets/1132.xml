<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-09-29T08:53:42+01:00</created-at>
  <creator-id type="integer">33287</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1132</number>
  <permalink>migration-up-and-down-inconsistent</permalink>
  <priority type="integer">549</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Migration up and down inconsistent</title>
  <updated-at type="datetime">2009-01-07T08:08:17+00:00</updated-at>
  <user-id type="integer">33287</user-id>
  <version type="integer">3</version>
  <user-name>feldercarb</user-name>
  <creator-name>feldercarb</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1132</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Assume the following sequence of actions:

script/generate model contractor first:string last:string
rake db:migrate
script/generate model company name:string
rake db:migrate
script/generate model company_contractor company_id:integer contractor_id:integer
edit company_contractor.rb, company.rb, and contractor.rb models appropriately to add proper relationships as follows:

  company.rb
    add has_many :company_contractor, :dependent =&gt; :destroy
    add has_many :contractors, :through =&gt; :company_contractor

  contractor.rb
    add has_many :company_contractor, :dependent =&gt; :destroy
  add has_many :companies, :through =&gt; :company_contractor

  company_contractor.rb
    add belongs_to :company, :foreign_key =&gt; :company_id
    add belongs_to :contractor, :foreign_key =&gt; :contractor_id

rake db:migrate


Now at some point during development and testing you decide to migrate back to only having company.

After you've done your work, you try to migrate one step at a time back to the full database.

Raking one migration at a time fails with an error message similar to:

== 20080920075233 CreateCompanies: never migrated, skipping =================

But if you migrate to the complete database everything succeeds and you can then revert back to the point before company_contractor was created.

In other words, you need to migrate the entire database set, then revert your migrations to the point you need instead of being able to just run the one migration.</original-body>
  <latest-body>Assume the following sequence of actions:

script/generate model contractor first:string last:string
rake db:migrate
script/generate model company name:string
rake db:migrate
script/generate model company_contractor company_id:integer contractor_id:integer
edit company_contractor.rb, company.rb, and contractor.rb models appropriately to add proper relationships as follows:

  company.rb
    add has_many :company_contractor, :dependent =&gt; :destroy
    add has_many :contractors, :through =&gt; :company_contractor

  contractor.rb
    add has_many :company_contractor, :dependent =&gt; :destroy
  add has_many :companies, :through =&gt; :company_contractor

  company_contractor.rb
    add belongs_to :company, :foreign_key =&gt; :company_id
    add belongs_to :contractor, :foreign_key =&gt; :contractor_id

rake db:migrate


Now at some point during development and testing you decide to migrate back to only having company.

After you've done your work, you try to migrate one step at a time back to the full database.

Raking one migration at a time fails with an error message similar to:

== 20080920075233 CreateCompanies: never migrated, skipping =================

But if you migrate to the complete database everything succeeds and you can then revert back to the point before company_contractor was created.

In other words, you need to migrate the entire database set, then revert your migrations to the point you need instead of being able to just run the one migration.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Assume the following sequence of actions:&lt;/p&gt;
&lt;p&gt;script/generate model contractor first:string last:string rake
db:migrate script/generate model company name:string rake
db:migrate script/generate model company_contractor
company_id:integer contractor_id:integer edit
company_contractor.rb, company.rb, and contractor.rb models
appropriately to add proper relationships as follows:&lt;/p&gt;
&lt;p&gt;company.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;add has_many :company_contractor, :dependent =&amp;gt; :destroy
add has_many :contractors, :through =&amp;gt; :company_contractor
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;contractor.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;add has_many :company_contractor, :dependent =&amp;gt; :destroy
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;add has_many :companies, :through =&amp;gt; :company_contractor&lt;/p&gt;
&lt;p&gt;company_contractor.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;add belongs_to :company, :foreign_key =&amp;gt; :company_id
add belongs_to :contractor, :foreign_key =&amp;gt; :contractor_id
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rake db:migrate&lt;/p&gt;
&lt;p&gt;Now at some point during development and testing you decide to
migrate back to only having company.&lt;/p&gt;
&lt;p&gt;After you've done your work, you try to migrate one step at a
time back to the full database.&lt;/p&gt;
&lt;p&gt;Raking one migration at a time fails with an error message
similar to:&lt;/p&gt;
&lt;p&gt;== 20080920075233 CreateCompanies: never migrated, skipping
=================&lt;/p&gt;
&lt;p&gt;But if you migrate to the complete database everything succeeds
and you can then revert back to the point before company_contractor
was created.&lt;/p&gt;
&lt;p&gt;In other words, you need to migrate the entire database set,
then revert your migrations to the point you need instead of being
able to just run the one migration.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Assume the following sequence of actions:

script/generate model contractor first:string last:string
rake db:migrate
script/generate model company name:string
rake db:migrate
script/generate model company_contractor company_id:integer contractor_id:integer
edit company_contractor.rb, company.rb, and contractor.rb models appropriately to add proper relationships as follows:

  company.rb
    add has_many :company_contractor, :dependent =&gt; :destroy
    add has_many :contractors, :through =&gt; :company_contractor

  contractor.rb
    add has_many :company_contractor, :dependent =&gt; :destroy
  add has_many :companies, :through =&gt; :company_contractor

  company_contractor.rb
    add belongs_to :company, :foreign_key =&gt; :company_id
    add belongs_to :contractor, :foreign_key =&gt; :contractor_id

rake db:migrate


Now at some point during development and testing you decide to migrate back to only having company.

After you've done your work, you try to migrate one step at a time back to the full database.

Raking one migration at a time fails with an error message similar to:

== 20080920075233 CreateCompanies: never migrated, skipping =================

But if you migrate to the complete database everything succeeds and you can then revert back to the point before company_contractor was created.

In other words, you need to migrate the entire database set, then revert your migrations to the point you need instead of being able to just run the one migration.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Assume the following sequence of actions:&lt;/p&gt;
&lt;p&gt;script/generate model contractor first:string last:string rake
db:migrate script/generate model company name:string rake
db:migrate script/generate model company_contractor
company_id:integer contractor_id:integer edit
company_contractor.rb, company.rb, and contractor.rb models
appropriately to add proper relationships as follows:&lt;/p&gt;
&lt;p&gt;company.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;add has_many :company_contractor, :dependent =&amp;gt; :destroy
add has_many :contractors, :through =&amp;gt; :company_contractor
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;contractor.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;add has_many :company_contractor, :dependent =&amp;gt; :destroy
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;add has_many :companies, :through =&amp;gt; :company_contractor&lt;/p&gt;
&lt;p&gt;company_contractor.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;add belongs_to :company, :foreign_key =&amp;gt; :company_id
add belongs_to :contractor, :foreign_key =&amp;gt; :contractor_id
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;rake db:migrate&lt;/p&gt;
&lt;p&gt;Now at some point during development and testing you decide to
migrate back to only having company.&lt;/p&gt;
&lt;p&gt;After you've done your work, you try to migrate one step at a
time back to the full database.&lt;/p&gt;
&lt;p&gt;Raking one migration at a time fails with an error message
similar to:&lt;/p&gt;
&lt;p&gt;== 20080920075233 CreateCompanies: never migrated, skipping
=================&lt;/p&gt;
&lt;p&gt;But if you migrate to the complete database everything succeeds
and you can then revert back to the point before company_contractor
was created.&lt;/p&gt;
&lt;p&gt;In other words, you need to migrate the entire database set,
then revert your migrations to the point you need instead of being
able to just run the one migration.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-09-29T08:53:42+01:00</created-at>
      <creator-id type="integer">33287</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1132</number>
      <permalink>migration-up-and-down-inconsistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Migration up and down inconsistent</title>
      <updated-at type="datetime">2008-09-29T08:53:44+01:00</updated-at>
      <user-id type="integer">33287</user-id>
      <version type="integer">1</version>
      <user-name>feldercarb</user-name>
      <creator-name>feldercarb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1132</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This is expected behavior. You shouldn't migrate back, but generate a new migration dropping contractor table.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This is expected behavior. You shouldn't migrate back, but
generate a new migration dropping contractor table.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-05T17:06:48+00:00</created-at>
      <creator-id type="integer">33287</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1132</number>
      <permalink>migration-up-and-down-inconsistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Migration up and down inconsistent</title>
      <updated-at type="datetime">2009-01-05T17:06:53+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>feldercarb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1132</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Unfortunately, by your logic, in order to debug a database construction issue you would have to create a migration that resets your database to the test state and add another migration to get back to the point you need to be.  So instead of debugging your problem, you're adding to the issue before you fix the problem.

Look beyond the example that identified the problem and examine the problem instead.

The problem is that if you run one migration at a time and try to revert a migration, the system generates an exception.  But if you migrate the entire database at a single time, reverting migrations works properly.

Another example of this would be when you attempt to move your system to a new machine and need to run the migrations but encounter an exception (assume a name you used is now a reserved word or is already in use).  Now for proper QA in some organizations (like mine) you need to run each step to isolate the bug and duplicate the bug in front of multiple people.  When you do this, the migrations throw exceptions instead of the database throwing the exception which is what you're trying to demonstrate.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Unfortunately, by your logic, in order to debug a database
construction issue you would have to create a migration that resets
your database to the test state and add another migration to get
back to the point you need to be. So instead of debugging your
problem, you're adding to the issue before you fix the problem.&lt;/p&gt;
&lt;p&gt;Look beyond the example that identified the problem and examine
the problem instead.&lt;/p&gt;
&lt;p&gt;The problem is that if you run one migration at a time and try
to revert a migration, the system generates an exception. But if
you migrate the entire database at a single time, reverting
migrations works properly.&lt;/p&gt;
&lt;p&gt;Another example of this would be when you attempt to move your
system to a new machine and need to run the migrations but
encounter an exception (assume a name you used is now a reserved
word or is already in use). Now for proper QA in some organizations
(like mine) you need to run each step to isolate the bug and
duplicate the bug in front of multiple people. When you do this,
the migrations throw exceptions instead of the database throwing
the exception which is what you're trying to demonstrate.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-07T08:08:13+00:00</created-at>
      <creator-id type="integer">33287</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1132</number>
      <permalink>migration-up-and-down-inconsistent</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Migration up and down inconsistent</title>
      <updated-at type="datetime">2009-01-07T08:08:17+00:00</updated-at>
      <user-id type="integer">33287</user-id>
      <version type="integer">3</version>
      <user-name>feldercarb</user-name>
      <creator-name>feldercarb</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1132</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
