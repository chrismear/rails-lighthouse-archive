<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-09T18:14:15+00:00</created-at>
  <creator-id type="integer">15613</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">2183</number>
  <permalink>avoid-recursive-validation-when-validate-true</permalink>
  <priority type="integer">1386</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag nil="true"></tag>
  <title>Avoid infinite recursive validation when validate =&gt; true</title>
  <updated-at type="datetime">2009-03-10T11:35:24+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">4</version>
  <user-name>Pratik</user-name>
  <creator-name>Jacob Burkhart</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2183</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>An outgrowth of #2144.  Since the solution to my problem was apparently &quot;validate =&gt; true&quot;.  This happens to be a problem for my situation.

I happen to be in a situation like this:

@@@ ruby
  def test_do_the_right_thing_on_validate
    Pirate.class_eval do
      belongs_to :parrot, :validate =&gt; true
    end
    Parrot.class_eval do
      has_and_belongs_to_many :pirates, :validate =&gt; true
    end
    
    pirate = Pirate.new(:catchphrase =&gt; &quot;Figure out how to validate me please&quot;)
    pirate.parrot = Parrot.new
    pirate.parrot.pirates &lt;&lt; pirate

    #because the parrot doesn't have a name, this save should fail invalid
    assert_raises(ActiveRecord::RecordInvalid){
      pirate.save!      
    }
  end
@@@

And, as you might have guessed, if you run this test....

@@@
  1) Failure:
test_do_the_right_thing_on_validate(TestStuff)
    [./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run']:
&lt;ActiveRecord::RecordInvalid&gt; exception expected but was
Class: &lt;SystemStackError&gt;
Message: &lt;&quot;stack level too deep&quot;&gt;
---Backtrace---
./test/cases/../../lib/active_record/callbacks.rb:312:in `valid?'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `send'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `method_missing'
./test/cases/../../lib/active_record/autosave_association.rb:249:in `association_valid?'
./test/cases/../../lib/active_record/autosave_association.rb:229:in `validate_single_association'
./test/cases/../../lib/active_record/autosave_association.rb:183:in `validate_associated_records_for_parrot'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `instance_eval'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:166:in `call'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `each'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `send'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:276:in `run_callbacks'
./test/cases/../../lib/active_record/validations.rb:1029:in `valid_without_callbacks?'
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
...
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
./test/cases/../../lib/active_record/validations.rb:1018:in `save_without_dirty!'
./test/cases/../../lib/active_record/dirty.rb:87:in `save_without_transactions!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:182:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/autosave_association_test.rb:884:in `test_do_the_right_thing_on_validate'
./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run'
---------------

@@@</original-body>
  <latest-body>An outgrowth of #2144.  Since the solution to my problem was apparently &quot;validate =&gt; true&quot;.  This happens to be a problem for my situation.

I happen to be in a situation like this:

@@@ ruby
  def test_do_the_right_thing_on_validate
    Pirate.class_eval do
      belongs_to :parrot, :validate =&gt; true
    end
    Parrot.class_eval do
      has_and_belongs_to_many :pirates, :validate =&gt; true
    end
    
    pirate = Pirate.new(:catchphrase =&gt; &quot;Figure out how to validate me please&quot;)
    pirate.parrot = Parrot.new
    pirate.parrot.pirates &lt;&lt; pirate

    #because the parrot doesn't have a name, this save should fail invalid
    assert_raises(ActiveRecord::RecordInvalid){
      pirate.save!      
    }
  end
@@@

And, as you might have guessed, if you run this test....

@@@
  1) Failure:
test_do_the_right_thing_on_validate(TestStuff)
    [./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run']:
&lt;ActiveRecord::RecordInvalid&gt; exception expected but was
Class: &lt;SystemStackError&gt;
Message: &lt;&quot;stack level too deep&quot;&gt;
---Backtrace---
./test/cases/../../lib/active_record/callbacks.rb:312:in `valid?'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `send'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `method_missing'
./test/cases/../../lib/active_record/autosave_association.rb:249:in `association_valid?'
./test/cases/../../lib/active_record/autosave_association.rb:229:in `validate_single_association'
./test/cases/../../lib/active_record/autosave_association.rb:183:in `validate_associated_records_for_parrot'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `instance_eval'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:166:in `call'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `each'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `send'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:276:in `run_callbacks'
./test/cases/../../lib/active_record/validations.rb:1029:in `valid_without_callbacks?'
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
...
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
./test/cases/../../lib/active_record/validations.rb:1018:in `save_without_dirty!'
./test/cases/../../lib/active_record/dirty.rb:87:in `save_without_transactions!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:182:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/autosave_association_test.rb:884:in `test_do_the_right_thing_on_validate'
./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run'
---------------

@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;An outgrowth of &lt;a href=&quot;/projects/8994/tickets/2144&quot; title=&quot;Ticket #2144&quot;&gt;#2144&lt;/a&gt;. Since the solution to my problem was
apparently &quot;validate =&amp;gt; true&quot;. This happens to be a problem for
my situation.&lt;/p&gt;
&lt;p&gt;I happen to be in a situation like this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_do_the_right_thing_on_validate
    Pirate.class_eval do
      belongs_to :parrot, :validate =&amp;gt; true
    end
    Parrot.class_eval do
      has_and_belongs_to_many :pirates, :validate =&amp;gt; true
    end
    
    pirate = Pirate.new(:catchphrase =&amp;gt; &amp;quot;Figure out how to validate me please&amp;quot;)
    pirate.parrot = Parrot.new
    pirate.parrot.pirates &amp;lt;&amp;lt; pirate

    #because the parrot doesn't have a name, this save should fail invalid
    assert_raises(ActiveRecord::RecordInvalid){
      pirate.save!      
    }
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, as you might have guessed, if you run this test....&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  1) Failure:
test_do_the_right_thing_on_validate(TestStuff)
    [./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run']:
&amp;lt;ActiveRecord::RecordInvalid&amp;gt; exception expected but was
Class: &amp;lt;SystemStackError&amp;gt;
Message: &amp;lt;&amp;quot;stack level too deep&amp;quot;&amp;gt;
---Backtrace---
./test/cases/../../lib/active_record/callbacks.rb:312:in `valid?'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `send'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `method_missing'
./test/cases/../../lib/active_record/autosave_association.rb:249:in `association_valid?'
./test/cases/../../lib/active_record/autosave_association.rb:229:in `validate_single_association'
./test/cases/../../lib/active_record/autosave_association.rb:183:in `validate_associated_records_for_parrot'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `instance_eval'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:166:in `call'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `each'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `send'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:276:in `run_callbacks'
./test/cases/../../lib/active_record/validations.rb:1029:in `valid_without_callbacks?'
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
...
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
./test/cases/../../lib/active_record/validations.rb:1018:in `save_without_dirty!'
./test/cases/../../lib/active_record/dirty.rb:87:in `save_without_transactions!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:182:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/autosave_association_test.rb:884:in `test_do_the_right_thing_on_validate'
./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run'
---------------

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>An outgrowth of #2144.  Since the solution to my problem was apparently &quot;validate =&gt; true&quot;.  This happens to be a problem for my situation.

I happen to be in a situation like this:

@@@ ruby
  def test_do_the_right_thing_on_validate
    Pirate.class_eval do
      belongs_to :parrot, :validate =&gt; true
    end
    Parrot.class_eval do
      has_and_belongs_to_many :pirates, :validate =&gt; true
    end
    
    pirate = Pirate.new(:catchphrase =&gt; &quot;Figure out how to validate me please&quot;)
    pirate.parrot = Parrot.new
    pirate.parrot.pirates &lt;&lt; pirate

    #because the parrot doesn't have a name, this save should fail invalid
    assert_raises(ActiveRecord::RecordInvalid){
      pirate.save!      
    }
  end
@@@

And, as you might have guessed, if you run this test....

@@@
  1) Failure:
test_do_the_right_thing_on_validate(TestStuff)
    [./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run']:
&lt;ActiveRecord::RecordInvalid&gt; exception expected but was
Class: &lt;SystemStackError&gt;
Message: &lt;&quot;stack level too deep&quot;&gt;
---Backtrace---
./test/cases/../../lib/active_record/callbacks.rb:312:in `valid?'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `send'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `method_missing'
./test/cases/../../lib/active_record/autosave_association.rb:249:in `association_valid?'
./test/cases/../../lib/active_record/autosave_association.rb:229:in `validate_single_association'
./test/cases/../../lib/active_record/autosave_association.rb:183:in `validate_associated_records_for_parrot'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `instance_eval'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:166:in `call'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `each'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `send'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:276:in `run_callbacks'
./test/cases/../../lib/active_record/validations.rb:1029:in `valid_without_callbacks?'
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
...
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
./test/cases/../../lib/active_record/validations.rb:1018:in `save_without_dirty!'
./test/cases/../../lib/active_record/dirty.rb:87:in `save_without_transactions!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:182:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/autosave_association_test.rb:884:in `test_do_the_right_thing_on_validate'
./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run'
---------------

@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;An outgrowth of &lt;a href=&quot;/projects/8994/tickets/2144&quot; title=&quot;Ticket #2144&quot;&gt;#2144&lt;/a&gt;. Since the solution to my problem was
apparently &quot;validate =&amp;gt; true&quot;. This happens to be a problem for
my situation.&lt;/p&gt;
&lt;p&gt;I happen to be in a situation like this:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
  def test_do_the_right_thing_on_validate
    Pirate.class_eval do
      belongs_to :parrot, :validate =&amp;gt; true
    end
    Parrot.class_eval do
      has_and_belongs_to_many :pirates, :validate =&amp;gt; true
    end
    
    pirate = Pirate.new(:catchphrase =&amp;gt; &amp;quot;Figure out how to validate me please&amp;quot;)
    pirate.parrot = Parrot.new
    pirate.parrot.pirates &amp;lt;&amp;lt; pirate

    #because the parrot doesn't have a name, this save should fail invalid
    assert_raises(ActiveRecord::RecordInvalid){
      pirate.save!      
    }
  end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And, as you might have guessed, if you run this test....&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
  1) Failure:
test_do_the_right_thing_on_validate(TestStuff)
    [./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
     ./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run']:
&amp;lt;ActiveRecord::RecordInvalid&amp;gt; exception expected but was
Class: &amp;lt;SystemStackError&amp;gt;
Message: &amp;lt;&amp;quot;stack level too deep&amp;quot;&amp;gt;
---Backtrace---
./test/cases/../../lib/active_record/callbacks.rb:312:in `valid?'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `send'
./test/cases/../../lib/active_record/associations/association_proxy.rb:221:in `method_missing'
./test/cases/../../lib/active_record/autosave_association.rb:249:in `association_valid?'
./test/cases/../../lib/active_record/autosave_association.rb:229:in `validate_single_association'
./test/cases/../../lib/active_record/autosave_association.rb:183:in `validate_associated_records_for_parrot'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `instance_eval'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:180:in `evaluate_method'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:166:in `call'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `each'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `send'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:90:in `run'
./test/cases/../../../activesupport/lib/active_support/callbacks.rb:276:in `run_callbacks'
./test/cases/../../lib/active_record/validations.rb:1029:in `valid_without_callbacks?'
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
...
./test/cases/../../lib/active_record/callbacks.rb:315:in `valid?'
./test/cases/../../lib/active_record/validations.rb:1018:in `save_without_dirty!'
./test/cases/../../lib/active_record/dirty.rb:87:in `save_without_transactions!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/connection_adapters/abstract/database_statements.rb:136:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:182:in `transaction'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/../../lib/active_record/transactions.rb:208:in `rollback_active_record_state!'
./test/cases/../../lib/active_record/transactions.rb:200:in `save!'
./test/cases/autosave_association_test.rb:884:in `test_do_the_right_thing_on_validate'
./test/cases/autosave_association_test.rb:883:in `test_do_the_right_thing_on_validate'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `__send__'
./test/cases/../../../activesupport/lib/active_support/testing/setup_and_teardown.rb:57:in `run'
---------------

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-09T18:14:15+00:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2183</number>
      <permalink>avoid-recursive-validation-when-validate-true</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Avoid recursive validation when validate =&gt; true</title>
      <updated-at type="datetime">2009-03-09T18:14:16+00:00</updated-at>
      <user-id type="integer">15613</user-id>
      <version type="integer">1</version>
      <user-name>Jacob Burkhart</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2183</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-09T18:15:05+00:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Avoid recursive validation when validate =&gt; true
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2183</number>
      <permalink>avoid-recursive-validation-when-validate-true</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Avoid infinite recursive validation when validate =&gt; true</title>
      <updated-at type="datetime">2009-03-09T18:15:11+00:00</updated-at>
      <user-id type="integer">15613</user-id>
      <version type="integer">2</version>
      <user-name>Jacob Burkhart</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2183</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">8406</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-09T20:10:31+00:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2183</number>
      <permalink>avoid-recursive-validation-when-validate-true</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Avoid infinite recursive validation when validate =&gt; true</title>
      <updated-at type="datetime">2009-03-09T20:10:33+00:00</updated-at>
      <user-id type="integer">8406</user-id>
      <version type="integer">3</version>
      <user-name>Eloy Duran</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name>Eloy Duran</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2183</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'd usually put :validate =&gt; false in one of the models and raise exception from an after_save callback if something didn't validate well and rely on transaction thingy to roll it all back.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I'd usually put :validate =&amp;gt; false in one of the models and
raise exception from an after_save callback if something didn't
validate well and rely on transaction thingy to roll it all
back.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-10T11:35:18+00:00</created-at>
      <creator-id type="integer">15613</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 8406
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2183</number>
      <permalink>avoid-recursive-validation-when-validate-true</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Avoid infinite recursive validation when validate =&gt; true</title>
      <updated-at type="datetime">2009-03-10T11:35:24+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Jacob Burkhart</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2183</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
