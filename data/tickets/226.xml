<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">85</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-19T21:56:49+01:00</created-at>
  <creator-id type="integer">5701</creator-id>
  <milestone-due-on type="datetime">2009-03-18T00:00:00+00:00</milestone-due-on>
  <milestone-id type="integer">9901</milestone-id>
  <number type="integer">226</number>
  <permalink>use-sql-for-first-and-last-on-association-proxy</permalink>
  <priority type="integer">11914</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>activerecord enhancement has_many named_scope patch tested</tag>
  <title>Use SQL for first and last on association proxy</title>
  <updated-at type="datetime">2008-05-20T12:29:50+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">3</version>
  <user-name>Pratik</user-name>
  <creator-name>Ryan Bates</creator-name>
  <assigned-user-name>Jeremy Kemper</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/226</url>
  <milestone-title>2.1.1</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>We have support for first/last methods on a model class:

@@@ ruby
Project.first
Project.last(:order =&gt; 'name')
@@@

Wouldn't it be nice if this worked on association proxies as well? If a category has many products it would work like this:

@@@ ruby
category.products.first
category.products.last(:order =&gt; 'name')
@@@

While we're at it, let's make it work for named_scope too. Say we have a &quot;recent&quot; named scope, we can quickly fetch the first or last recent product like this:

@@@ ruby
Product.recent.first
category.products.recent.last
@@@

The attached patch will add the first/last methods to both the association proxy and scopes. Tests are included.

&gt; Note: I needed to change a couple of existing tests to get this to work because they relied on first/last loading the association target. However this was not the functionality being tested so I think it's acceptable.</original-body>
  <latest-body>We have support for first/last methods on a model class:

@@@ ruby
Project.first
Project.last(:order =&gt; 'name')
@@@

Wouldn't it be nice if this worked on association proxies as well? If a category has many products it would work like this:

@@@ ruby
category.products.first
category.products.last(:order =&gt; 'name')
@@@

While we're at it, let's make it work for named_scope too. Say we have a &quot;recent&quot; named scope, we can quickly fetch the first or last recent product like this:

@@@ ruby
Product.recent.first
category.products.recent.last
@@@

The attached patch will add the first/last methods to both the association proxy and scopes. Tests are included.

&gt; Note: I needed to change a couple of existing tests to get this to work because they relied on first/last loading the association target. However this was not the functionality being tested so I think it's acceptable.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
We have support for first/last methods on a model class:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Project.first
Project.last(:order =&amp;gt; 'name')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Wouldn't it be nice if this worked on association proxies as well? If a category has many products it would work like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;category.products.first
category.products.last(:order =&amp;gt; 'name')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
While we're at it, let's make it work for named_scope too. Say we have a &quot;recent&quot; named scope, we can quickly fetch the first or last recent product like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Product.recent.first
category.products.recent.last&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The attached patch will add the first/last methods to both the association proxy and scopes. Tests are included.
&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
Note: I needed to change a couple of existing tests to get this to work because they relied on first/last loading the association target. However this was not the functionality being tested so I think it's acceptable.
&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We have support for first/last methods on a model class:

@@@ ruby
Project.first
Project.last(:order =&gt; 'name')
@@@

Wouldn't it be nice if this worked on association proxies as well? If a category has many products it would work like this:

@@@ ruby
category.products.first
category.products.last(:order =&gt; 'name')
@@@

While we're at it, let's make it work for named_scope too. Say we have a &quot;recent&quot; named scope, we can quickly fetch the first or last recent product like this:

@@@ ruby
Product.recent.first
category.products.recent.last
@@@

The attached patch will add the first/last methods to both the association proxy and scopes. Tests are included.

Note: I needed to change a couple of existing tests to get this to work because they relied on first/last loading the association target. However this was not the functionality being tested so I think it's acceptable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
We have support for first/last methods on a model class:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Project.first
Project.last(:order =&amp;gt; 'name')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Wouldn't it be nice if this worked on association proxies as well? If a category has many products it would work like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;category.products.first
category.products.last(:order =&amp;gt; 'name')&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
While we're at it, let's make it work for named_scope too. Say we have a &quot;recent&quot; named scope, we can quickly fetch the first or last recent product like this:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Product.recent.first
category.products.recent.last&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The attached patch will add the first/last methods to both the association proxy and scopes. Tests are included.
&lt;/p&gt;&lt;p&gt;
Note: I needed to change a couple of existing tests to get this to work because they relied on first/last loading the association target. However this was not the functionality being tested so I think it's acceptable.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-19T21:57:08+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">226</number>
      <permalink>use-sql-for-first-and-last-on-association-proxy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use SQL for first and last on association proxy</title>
      <updated-at type="datetime">2008-05-19T21:57:08+01:00</updated-at>
      <user-id type="integer">5701</user-id>
      <version type="integer">1</version>
      <user-name>Ryan Bates</user-name>
      <creator-name>Ryan Bates</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/226</url>
      <milestone-title nil="true"></milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey Ryan, looks good but the patch doesn't apply cleanly to latest master. Could you update?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Hey Ryan, looks good but the patch doesn't apply cleanly to latest master. Could you update?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-20T03:24:00+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">226</number>
      <permalink>use-sql-for-first-and-last-on-association-proxy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Use SQL for first and last on association proxy</title>
      <updated-at type="datetime">2008-05-20T03:24:00+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ryan Bates</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/226</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">85</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Resolved in http://github.com/rails/rails/commit/73c59638549686fccc749ffd3ac53cb533c5fd61</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Resolved in &lt;a href=&quot;http://github.com/rails/rails/commit/73c59638549686fccc749ffd3ac53cb533c5fd61&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-20T12:29:50+01:00</created-at>
      <creator-id type="integer">5701</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9901</milestone-id>
      <number type="integer">226</number>
      <permalink>use-sql-for-first-and-last-on-association-proxy</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>Use SQL for first and last on association proxy</title>
      <updated-at type="datetime">2008-05-20T12:29:50+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Ryan Bates</creator-name>
      <assigned-user-name>Jeremy Kemper</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/226</url>
      <milestone-title>2.1.1</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>933bc33e77ca3b84429cc6a8ae5cc54eb32c1c4a</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-19T21:56:50+01:00</created-at>
      <filename>association_proxy_first_last.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">23663</id>
      <size type="integer">17434</size>
      <uploader-id type="integer">5701</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/23663/association_proxy_first_last.diff</url>
    </attachment>
  </attachments>
</ticket>
