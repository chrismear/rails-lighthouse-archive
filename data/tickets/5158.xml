<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-20T11:31:47+01:00</created-at>
  <creator-id type="integer">68885</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5158</number>
  <permalink>new-update_attribute-doesnt-work-with-associations</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>New update_attribute doesn't work with associations</title>
  <updated-at type="datetime">2010-07-20T12:50:05+01:00</updated-at>
  <user-id type="integer">40263</user-id>
  <version type="integer">5</version>
  <user-name>Neeraj Singh</user-name>
  <creator-name>Mateusz Dro&#380;d&#380;y&#324;ski</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5158</url>
  <priority-name>Low</priority-name>
  <original-body>Previous implementation of update_attribute:

@@@
def update_attribute(name, value)
  send(&quot;#{name}=&quot;, value)
  save(false)
end
@@@

worked just fine with associations.

The one present in current master breaks this support:

Consider this call:

@@@
article.update_attribute(:user, user)
@@@

Let's go through the method definition:

@@@
def update_attribute(name, value)     
  changes = record_update_timestamps || {}

  if name
    name = name.to_s
    send(&quot;#{name}=&quot;, value) # this works fine, sets article.user to user
    changes[name] = read_attribute(name) # this doesn't work; read_attribute returns nil for associations.
  end

  @changed_attributes.except!(*changes.keys)
  primary_key = self.class.primary_key
  self.class.update_all(changes, { primary_key =&gt; self[primary_key] }) == 1 # this doesn't work either; tries to update a column (user) which doesn't exist (should be updating user_id instead).
end
@@@

It either needs to be made clear that update_attribute does not work for associations (and preferably raise an exception if you try to do so, complaining that :user is not a database column in this example) or support it by detecting that you're passing an association and updating _id columns instead.</original-body>
  <latest-body>Previous implementation of update_attribute:

@@@
def update_attribute(name, value)
  send(&quot;#{name}=&quot;, value)
  save(false)
end
@@@

worked just fine with associations.

The one present in current master breaks this support:

Consider this call:

@@@
article.update_attribute(:user, user)
@@@

Let's go through the method definition:

@@@
def update_attribute(name, value)     
  changes = record_update_timestamps || {}

  if name
    name = name.to_s
    send(&quot;#{name}=&quot;, value) # this works fine, sets article.user to user
    changes[name] = read_attribute(name) # this doesn't work; read_attribute returns nil for associations.
  end

  @changed_attributes.except!(*changes.keys)
  primary_key = self.class.primary_key
  self.class.update_all(changes, { primary_key =&gt; self[primary_key] }) == 1 # this doesn't work either; tries to update a column (user) which doesn't exist (should be updating user_id instead).
end
@@@

It either needs to be made clear that update_attribute does not work for associations (and preferably raise an exception if you try to do so, complaining that :user is not a database column in this example) or support it by detecting that you're passing an association and updating _id columns instead.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Previous implementation of update_attribute:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def update_attribute(name, value)
  send(&quot;#{name}=&quot;, value)
  save(false)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;worked just fine with associations.&lt;/p&gt;
&lt;p&gt;The one present in current master breaks this support:&lt;/p&gt;
&lt;p&gt;Consider this call:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;article.update_attribute(:user, user)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let's go through the method definition:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def update_attribute(name, value)     
  changes = record_update_timestamps || {}

  if name
    name = name.to_s
    send(&quot;#{name}=&quot;, value) # this works fine, sets article.user to user
    changes[name] = read_attribute(name) # this doesn't work; read_attribute returns nil for associations.
  end

  @changed_attributes.except!(*changes.keys)
  primary_key = self.class.primary_key
  self.class.update_all(changes, { primary_key =&amp;gt; self[primary_key] }) == 1 # this doesn't work either; tries to update a column (user) which doesn't exist (should be updating user_id instead).
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It either needs to be made clear that update_attribute does not
work for associations (and preferably raise an exception if you try
to do so, complaining that :user is not a database column in this
example) or support it by detecting that you're passing an
association and updating _id columns instead.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Previous implementation of update_attribute:

@@@
def update_attribute(name, value)
  send(&quot;#{name}=&quot;, value)
  save(false)
end
@@@

worked just fine with associations.

The one present in current master breaks this support:

Consider this call:

@@@
article.update_attribute(:user, user)
@@@

Let's go through the method definition:

@@@
def update_attribute(name, value)     
  changes = record_update_timestamps || {}

  if name
    name = name.to_s
    send(&quot;#{name}=&quot;, value) # this works fine, sets article.user to user
    changes[name] = read_attribute(name) # this doesn't work; read_attribute returns nil for associations.
  end

  @changed_attributes.except!(*changes.keys)
  primary_key = self.class.primary_key
  self.class.update_all(changes, { primary_key =&gt; self[primary_key] }) == 1 # this doesn't work either; tries to update a column (user) which doesn't exist (should be updating user_id instead).
end
@@@

It either needs to be made clear that update_attribute does not work for associations (and preferably raise an exception if you try to do so, complaining that :user is not a database column in this example) or support it by detecting that you're passing an association and updating _id columns instead.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Previous implementation of update_attribute:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def update_attribute(name, value)
  send(&quot;#{name}=&quot;, value)
  save(false)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;worked just fine with associations.&lt;/p&gt;
&lt;p&gt;The one present in current master breaks this support:&lt;/p&gt;
&lt;p&gt;Consider this call:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;article.update_attribute(:user, user)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Let's go through the method definition:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def update_attribute(name, value)     
  changes = record_update_timestamps || {}

  if name
    name = name.to_s
    send(&quot;#{name}=&quot;, value) # this works fine, sets article.user to user
    changes[name] = read_attribute(name) # this doesn't work; read_attribute returns nil for associations.
  end

  @changed_attributes.except!(*changes.keys)
  primary_key = self.class.primary_key
  self.class.update_all(changes, { primary_key =&amp;gt; self[primary_key] }) == 1 # this doesn't work either; tries to update a column (user) which doesn't exist (should be updating user_id instead).
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;It either needs to be made clear that update_attribute does not
work for associations (and preferably raise an exception if you try
to do so, complaining that :user is not a database column in this
example) or support it by detecting that you're passing an
association and updating _id columns instead.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-20T11:31:47+01:00</created-at>
      <creator-id type="integer">68885</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5158</number>
      <permalink>new-update_attribute-doesnt-work-with-associations</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>New update_attribute doesn't work with associations</title>
      <updated-at type="datetime">2010-07-20T11:31:48+01:00</updated-at>
      <user-id type="integer">68885</user-id>
      <version type="integer">1</version>
      <user-name>Mateusz Dro&#380;d&#380;y&#324;ski</user-name>
      <creator-name>Mateusz Dro&#380;d&#380;y&#324;ski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5158</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>My bad. I should have updated the doc after the refactoring.

Doc has been updated http://github.com/lifo/docrails/commit/767de13ff4a19a53d3fe99edb5554040cb6e5e60


Thanks for the feedback.</body>
      <body-html>&lt;div&gt;&lt;p&gt;My bad. I should have updated the doc after the refactoring.&lt;/p&gt;
&lt;p&gt;Doc has been updated &lt;a href=
&quot;http://github.com/lifo/docrails/commit/767de13ff4a19a53d3fe99edb5554040cb6e5e60&quot;&gt;
http://github.com/lifo/docrails/commit/767de13ff4a19a53d3fe99edb555...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks for the feedback.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-20T11:58:02+01:00</created-at>
      <creator-id type="integer">68885</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5158</number>
      <permalink>new-update_attribute-doesnt-work-with-associations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>New update_attribute doesn't work with associations</title>
      <updated-at type="datetime">2010-07-20T11:58:05+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Mateusz Dro&#380;d&#380;y&#324;ski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5158</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>What was the reason for not supporting associations? Is this a design decision or simply something that is yet to be added?</body>
      <body-html>&lt;div&gt;&lt;p&gt;What was the reason for not supporting associations? Is this a
design decision or simply something that is yet to be added?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-20T12:01:44+01:00</created-at>
      <creator-id type="integer">68885</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5158</number>
      <permalink>new-update_attribute-doesnt-work-with-associations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>New update_attribute doesn't work with associations</title>
      <updated-at type="datetime">2010-07-20T12:01:46+01:00</updated-at>
      <user-id type="integer">68885</user-id>
      <version type="integer">3</version>
      <user-name>Mateusz Dro&#380;d&#380;y&#324;ski</user-name>
      <creator-name>Mateusz Dro&#380;d&#380;y&#324;ski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5158</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Plus, regardless of the rationale behind it, shouldn't it raise an exception when you're trying to do so as opposed to going all the way through with the database query?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Plus, regardless of the rationale behind it, shouldn't it raise
an exception when you're trying to do so as opposed to going all
the way through with the database query?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-20T12:08:08+01:00</created-at>
      <creator-id type="integer">68885</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5158</number>
      <permalink>new-update_attribute-doesnt-work-with-associations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>New update_attribute doesn't work with associations</title>
      <updated-at type="datetime">2010-07-20T12:08:10+01:00</updated-at>
      <user-id type="integer">68885</user-id>
      <version type="integer">4</version>
      <user-name>Mateusz Dro&#380;d&#380;y&#324;ski</user-name>
      <creator-name>Mateusz Dro&#380;d&#380;y&#324;ski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5158</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>update_attribute was meant for sure shot way of updating a column. For example after sending an email to a user you want to mark that email has been sent to user. You don't want any validation or before_save callback to abort the operation. In one case employer sent 3300 emails to same person because before_save operation returned false.

In 2-3 people used update_attribute to update association because update_attribute was using save and that operation was allowed. However that was not how update_attribute was supposed to be used. In rails3 scope of update_attribute has been limited.

Regarding raising the exception I did not think it was that big a deal because it will be caught during development time. I might be wrong on that.</body>
      <body-html>&lt;div&gt;&lt;p&gt;update_attribute was meant for sure shot way of updating a
column. For example after sending an email to a user you want to
mark that email has been sent to user. You don't want any
validation or before_save callback to abort the operation. In one
case employer sent 3300 emails to same person because before_save
operation returned false.&lt;/p&gt;
&lt;p&gt;In 2-3 people used update_attribute to update association
because update_attribute was using save and that operation was
allowed. However that was not how update_attribute was supposed to
be used. In rails3 scope of update_attribute has been limited.&lt;/p&gt;
&lt;p&gt;Regarding raising the exception I did not think it was that big
a deal because it will be caught during development time. I might
be wrong on that.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-20T12:50:02+01:00</created-at>
      <creator-id type="integer">68885</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5158</number>
      <permalink>new-update_attribute-doesnt-work-with-associations</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>New update_attribute doesn't work with associations</title>
      <updated-at type="datetime">2010-07-20T12:50:05+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">5</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Mateusz Dro&#380;d&#380;y&#324;ski</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5158</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
