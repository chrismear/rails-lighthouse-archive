<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">40272</assigned-user-id>
  <attachments-count type="integer">2</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-08-18T10:31:26+01:00</created-at>
  <creator-id type="integer">55948</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5400</number>
  <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag>&quot;json activerecord serialization&quot;</tag>
  <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
  <updated-at type="datetime">2011-04-22T13:28:24+01:00</updated-at>
  <user-id type="integer">97543</user-id>
  <version type="integer">8</version>
  <user-name>Federico Brubacher</user-name>
  <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
  <assigned-user-name>Santiago Pastorino</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
  <priority-name>Low</priority-name>
  <original-body>User (cols: id, name, age) has_many Group (cols: id, name)

The following results is made via console on rails3 edge/ruby1.9.2-rc2.

    User.first.serializable_hash :only =&gt; :name
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;}

    User.first.serializable_hash :include =&gt; :group
    =&gt; {&quot;id&quot;:1, &quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}}

    User.first.serializable_hash :only =&gt; :name, :include =&gt; :group
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{}}

I would expect the last call to return {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}} (because I set up no :only/:except for group). But all attributes of the :group hash is removed because of the &quot;base&quot; :only =&gt; :name options is used for associated models also.

For now, I know I can do this, but I really think it should not be necessary.

    User.first.serializable_hash :only =&gt; :name, :include =&gt; { :group =&gt; { :only =&gt; [:id, :name] } }
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}}

I think the &quot;base :only/:expect&quot; should only apply to the &quot;base object&quot; (in this case user).

If other people feel this needs to be fixed, I'll make a patch. Please share your opinions on this, thanks.</original-body>
  <latest-body>User (cols: id, name, age) has_many Group (cols: id, name)

The following results is made via console on rails3 edge/ruby1.9.2-rc2.

    User.first.serializable_hash :only =&gt; :name
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;}

    User.first.serializable_hash :include =&gt; :group
    =&gt; {&quot;id&quot;:1, &quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}}

    User.first.serializable_hash :only =&gt; :name, :include =&gt; :group
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{}}

I would expect the last call to return {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}} (because I set up no :only/:except for group). But all attributes of the :group hash is removed because of the &quot;base&quot; :only =&gt; :name options is used for associated models also.

For now, I know I can do this, but I really think it should not be necessary.

    User.first.serializable_hash :only =&gt; :name, :include =&gt; { :group =&gt; { :only =&gt; [:id, :name] } }
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}}

I think the &quot;base :only/:expect&quot; should only apply to the &quot;base object&quot; (in this case user).

If other people feel this needs to be fixed, I'll make a patch. Please share your opinions on this, thanks.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;User (cols: id, name, age) has_many Group (cols: id, name)&lt;/p&gt;
&lt;p&gt;The following results is made via console on rails3
edge/ruby1.9.2-rc2.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;User.first.serializable_hash :only =&amp;gt; :name
=&amp;gt; {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;}

User.first.serializable_hash :include =&amp;gt; :group
=&amp;gt; {&quot;id&quot;:1, &quot;name&quot;=&amp;gt;&quot;rasmus&quot;, :group=&amp;gt;{&quot;id&quot;=&amp;gt;1, &quot;name&quot;=&amp;gt;&quot;Testgroup&quot;}}

User.first.serializable_hash :only =&amp;gt; :name, :include =&amp;gt; :group
=&amp;gt; {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;, :group=&amp;gt;{}}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I would expect the last call to return {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;,
:group=&amp;gt;{&quot;id&quot;=&amp;gt;1, &quot;name&quot;=&amp;gt;&quot;Testgroup&quot;}} (because I set up
no :only/:except for group). But all attributes of the :group hash
is removed because of the &quot;base&quot; :only =&amp;gt; :name options is used
for associated models also.&lt;/p&gt;
&lt;p&gt;For now, I know I can do this, but I really think it should not
be necessary.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;User.first.serializable_hash :only =&amp;gt; :name, :include =&amp;gt; { :group =&amp;gt; { :only =&amp;gt; [:id, :name] } }
=&amp;gt; {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;, :group=&amp;gt;{&quot;id&quot;=&amp;gt;1, &quot;name&quot;=&amp;gt;&quot;Testgroup&quot;}}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think the &quot;base :only/:expect&quot; should only apply to the &quot;base
object&quot; (in this case user).&lt;/p&gt;
&lt;p&gt;If other people feel this needs to be fixed, I'll make a patch.
Please share your opinions on this, thanks.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>User (cols: id, name, age) has_many Group (cols: id, name)

The following results is made via console on rails3 edge/ruby1.9.2-rc2.

    User.first.serializable_hash :only =&gt; :name
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;}

    User.first.serializable_hash :include =&gt; :group
    =&gt; {&quot;id&quot;:1, &quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}}

    User.first.serializable_hash :only =&gt; :name, :include =&gt; :group
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{}}

I would expect the last call to return {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}} (because I set up no :only/:except for group). But all attributes of the :group hash is removed because of the &quot;base&quot; :only =&gt; :name options is used for associated models also.

For now, I know I can do this, but I really think it should not be necessary.

    User.first.serializable_hash :only =&gt; :name, :include =&gt; { :group =&gt; { :only =&gt; [:id, :name] } }
    =&gt; {&quot;name&quot;=&gt;&quot;rasmus&quot;, :group=&gt;{&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Testgroup&quot;}}

I think the &quot;base :only/:expect&quot; should only apply to the &quot;base object&quot; (in this case user).

If other people feel this needs to be fixed, I'll make a patch. Please share your opinions on this, thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;User (cols: id, name, age) has_many Group (cols: id, name)&lt;/p&gt;
&lt;p&gt;The following results is made via console on rails3
edge/ruby1.9.2-rc2.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;User.first.serializable_hash :only =&amp;gt; :name
=&amp;gt; {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;}

User.first.serializable_hash :include =&amp;gt; :group
=&amp;gt; {&quot;id&quot;:1, &quot;name&quot;=&amp;gt;&quot;rasmus&quot;, :group=&amp;gt;{&quot;id&quot;=&amp;gt;1, &quot;name&quot;=&amp;gt;&quot;Testgroup&quot;}}

User.first.serializable_hash :only =&amp;gt; :name, :include =&amp;gt; :group
=&amp;gt; {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;, :group=&amp;gt;{}}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I would expect the last call to return {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;,
:group=&amp;gt;{&quot;id&quot;=&amp;gt;1, &quot;name&quot;=&amp;gt;&quot;Testgroup&quot;}} (because I set up
no :only/:except for group). But all attributes of the :group hash
is removed because of the &quot;base&quot; :only =&amp;gt; :name options is used
for associated models also.&lt;/p&gt;
&lt;p&gt;For now, I know I can do this, but I really think it should not
be necessary.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;User.first.serializable_hash :only =&amp;gt; :name, :include =&amp;gt; { :group =&amp;gt; { :only =&amp;gt; [:id, :name] } }
=&amp;gt; {&quot;name&quot;=&amp;gt;&quot;rasmus&quot;, :group=&amp;gt;{&quot;id&quot;=&amp;gt;1, &quot;name&quot;=&amp;gt;&quot;Testgroup&quot;}}&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I think the &quot;base :only/:expect&quot; should only apply to the &quot;base
object&quot; (in this case user).&lt;/p&gt;
&lt;p&gt;If other people feel this needs to be fixed, I'll make a patch.
Please share your opinions on this, thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-18T10:31:26+01:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2010-08-18T10:31:28+01:00</updated-at>
      <user-id type="integer">55948</user-id>
      <version type="integer">1</version>
      <user-name>Rasmus R&#248;nn Nielsen</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>+1</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-18T11:58:30+01:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2010-08-18T11:58:31+01:00</updated-at>
      <user-id type="integer">40263</user-id>
      <version type="integer">2</version>
      <user-name>Neeraj Singh</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I saw this same issue today and decided to try to track it down.  Attached is a fix.  Note the tests verify to_xml, to_json, and serializable_hash all have the same behavior of not passing on :only and :except to includes.

This is the first time I've tried to contribute anything so comments/feedback welcome.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I saw this same issue today and decided to try to track it down.
Attached is a fix. Note the tests verify to_xml, to_json, and
serializable_hash all have the same behavior of not passing on
:only and :except to includes.&lt;/p&gt;
&lt;p&gt;This is the first time I've tried to contribute anything so
comments/feedback welcome.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-24T01:06:51+00:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2011-01-24T01:06:58+00:00</updated-at>
      <user-id type="integer">133843</user-id>
      <version type="integer">3</version>
      <user-name>michael groble</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

Existing behavior is quite surprising.</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;Existing behavior is quite surprising.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-22T07:20:20+00:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2011-02-22T07:20:28+00:00</updated-at>
      <user-id type="integer">72273</user-id>
      <version type="integer">4</version>
      <user-name>John Firebaugh</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>+1

We ran into this today and it blocks us from leveraging any of the built-in JSON serialization mechanisms with nested objects.

The patch no longer applies cleanly. Can we get this into core if the patch is updated?</body>
      <body-html>&lt;div&gt;&lt;p&gt;+1&lt;/p&gt;
&lt;p&gt;We ran into this today and it blocks us from leveraging any of
the built-in JSON serialization mechanisms with nested objects.&lt;/p&gt;
&lt;p&gt;The patch no longer applies cleanly. Can we get this into core
if the patch is updated?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-02T22:56:09+00:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2011-03-02T22:56:19+00:00</updated-at>
      <user-id type="integer">83562</user-id>
      <version type="integer">5</version>
      <user-name>Paul Rosania</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hello, we are adding an smaller patch for the JSON Serialization. 
An additional ticket may be opened for correcting it in XML.
Regards,</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hello, we are adding an smaller patch for the JSON
Serialization.&lt;br&gt;
An additional ticket may be opened for correcting it in XML.&lt;br&gt;
Regards,&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-29T20:15:45+01:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2011-03-29T20:16:05+01:00</updated-at>
      <user-id type="integer">142732</user-id>
      <version type="integer">6</version>
      <user-name>Pablo</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-30T11:23:04+01:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: 
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;json activerecord serialization&quot;</tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2011-03-30T11:23:19+01:00</updated-at>
      <user-id type="integer">97543</user-id>
      <version type="integer">7</version>
      <user-name>Federico Brubacher</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">40272</assigned-user-id>
      <attachments-count type="integer">2</attachments-count>
      <body>Santiago, Jeremy have you guys been able to review this patch ?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Santiago, Jeremy have you guys been able to review this patch
?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-22T13:28:09+01:00</created-at>
      <creator-id type="integer">55948</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5400</number>
      <permalink>activerecordserializationserializable_hash-uses-base-onlyexpect-for-included-models</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;json activerecord serialization&quot;</tag>
      <title>ActiveRecord::Serialization.serializable_hash uses base :only/:expect for included models</title>
      <updated-at type="datetime">2011-04-22T13:28:24+01:00</updated-at>
      <user-id type="integer">97543</user-id>
      <version type="integer">8</version>
      <user-name>Federico Brubacher</user-name>
      <creator-name>Rasmus R&#248;nn Nielsen</creator-name>
      <assigned-user-name>Santiago Pastorino</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5400</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>713633ddd826176da22b9e88a301bc8b779884e7</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-01-24T01:06:51+00:00</created-at>
      <filename>ticket_5400.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">874898</id>
      <size type="integer">5942</size>
      <uploader-id type="integer">133843</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/874898/ticket_5400.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>744f7044a862852d1ef35d3feace55670d4ff1aa</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-29T20:18:22+01:00</created-at>
      <filename>0001-when-serializing-to-json-d.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">984123</id>
      <size type="integer">2110</size>
      <uploader-id type="integer">142732</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/984123/0001-when-serializing-to-json-d.patch</url>
    </attachment>
  </attachments>
</ticket>
