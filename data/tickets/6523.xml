<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-03-04T18:02:16+00:00</created-at>
  <creator-id type="integer">139936</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6523</number>
  <permalink>sqlite3-incorrectly-reports-database-already-exists-on-dbcreate</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>new</state>
  <tag nil="true"></tag>
  <title>SQLite3 incorrectly reports database already exists on db:create </title>
  <updated-at type="datetime">2011-03-04T19:09:28+00:00</updated-at>
  <user-id type="integer">139936</user-id>
  <version type="integer">2</version>
  <user-name>Todd Huss</user-name>
  <creator-name>Todd Huss</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6523</url>
  <priority-name nil="true"></priority-name>
  <original-body>The problem I'm seeing is that rake db:create always reports &quot;database already exists&quot; on sqlite3 regardless of whether it does or not:

@@@ bash
&gt; rails new rails-test
&gt; cd rails-test
&gt; rake db:create
(in /Users/me/src/rails-test)
db/test.sqlite3 already exists
db/development.sqlite3 already exists
&gt; rake db:drop
(in /Users/me/src/rails-test)
&gt; rake db:create
db/test.sqlite3 already exists
db/development.sqlite3 already exists
@@@

The problem lies in databases.rake because all the other database attempt to connect and then actually create the database in the rescue clause thereby skipping the final else clause. Whereas SQLite3 is handled before the rescue clause so even when it successfully creates the database it still drops into the else clause on the last line of the create_databases method which prints database already exists. My suggested fix would be to put an unless on the puts:

@@@ ruby
    else
      $stderr.puts &quot;#{config['database']} already exists&quot; unless config['adapter'] =~ /sqlite/
    end
@@@

I'm on a Mac running Ruby 1.9.2p0.</original-body>
  <latest-body>The problem I'm seeing is that rake db:create always reports &quot;database already exists&quot; on sqlite3 regardless of whether it does or not:

@@@ bash
&gt; rails new rails-test
&gt; cd rails-test
&gt; rake db:create
(in /Users/me/src/rails-test)
db/test.sqlite3 already exists
db/development.sqlite3 already exists
&gt; rake db:drop
(in /Users/me/src/rails-test)
&gt; rake db:create
db/test.sqlite3 already exists
db/development.sqlite3 already exists
@@@

The problem lies in databases.rake because all the other database attempt to connect and then actually create the database in the rescue clause thereby skipping the final else clause. Whereas SQLite3 is handled before the rescue clause so even when it successfully creates the database it still drops into the else clause on the last line of the create_databases method which prints database already exists. My suggested fix would be to put an unless on the puts:

@@@ ruby
    else
      $stderr.puts &quot;#{config['database']} already exists&quot; unless config['adapter'] =~ /sqlite/
    end
@@@

I'm on a Mac running Ruby 1.9.2p0.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The problem I'm seeing is that rake db:create always reports
&quot;database already exists&quot; on sqlite3 regardless of whether it does
or not:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash&quot;&gt;&amp;gt; rails new rails-test
&amp;gt; cd rails-test
&amp;gt; rake db:create
(in /Users/me/src/rails-test)
db/test.sqlite3 already exists
db/development.sqlite3 already exists
&amp;gt; rake db:drop
(in /Users/me/src/rails-test)
&amp;gt; rake db:create
db/test.sqlite3 already exists
db/development.sqlite3 already exists&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem lies in databases.rake because all the other
database attempt to connect and then actually create the database
in the rescue clause thereby skipping the final else clause.
Whereas SQLite3 is handled before the rescue clause so even when it
successfully creates the database it still drops into the else
clause on the last line of the create_databases method which prints
database already exists. My suggested fix would be to put an unless
on the puts:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    else
      $stderr.puts &quot;#{config['database']} already exists&quot; unless config['adapter'] =~ /sqlite/
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm on a Mac running Ruby 1.9.2p0.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The problem I'm seeing is that rake db:create always reports &quot;database already exists&quot; on sqlite3 regardless of whether it does or not:

@@@ bash
&gt; rails new rails-test
&gt; cd rails-test
&gt; rake db:create
(in /Users/me/src/rails-test)
db/test.sqlite3 already exists
db/development.sqlite3 already exists
&gt; rake db:drop
(in /Users/me/src/rails-test)
&gt; rake db:create
db/test.sqlite3 already exists
db/development.sqlite3 already exists
@@@

The problem lies in databases.rake because all the other database attempt to connect and then actually create the database in the rescue clause thereby skipping the final else clause. Whereas SQLite3 is handled before the rescue clause so even when it successfully creates the database it still drops into the else clause on the last line of the create_databases method which prints database already exists. My suggested fix would be to put an unless on the puts:

@@@ ruby
    else
      $stderr.puts &quot;#{config['database']} already exists&quot; unless config['adapter'] =~ /sqlite/
    end
@@@

I'm on a Mac running Ruby 1.9.2p0.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The problem I'm seeing is that rake db:create always reports
&quot;database already exists&quot; on sqlite3 regardless of whether it does
or not:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;bash&quot;&gt;&amp;gt; rails new rails-test
&amp;gt; cd rails-test
&amp;gt; rake db:create
(in /Users/me/src/rails-test)
db/test.sqlite3 already exists
db/development.sqlite3 already exists
&amp;gt; rake db:drop
(in /Users/me/src/rails-test)
&amp;gt; rake db:create
db/test.sqlite3 already exists
db/development.sqlite3 already exists&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem lies in databases.rake because all the other
database attempt to connect and then actually create the database
in the rescue clause thereby skipping the final else clause.
Whereas SQLite3 is handled before the rescue clause so even when it
successfully creates the database it still drops into the else
clause on the last line of the create_databases method which prints
database already exists. My suggested fix would be to put an unless
on the puts:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;    else
      $stderr.puts &quot;#{config['database']} already exists&quot; unless config['adapter'] =~ /sqlite/
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I'm on a Mac running Ruby 1.9.2p0.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-04T18:02:16+00:00</created-at>
      <creator-id type="integer">139936</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6523</number>
      <permalink>sqlite3-incorrectly-reports-database-already-exists-on-dbcreate</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>SQLite3 incorrectly reports database already exists on db:create </title>
      <updated-at type="datetime">2011-03-04T18:03:12+00:00</updated-at>
      <user-id type="integer">139936</user-id>
      <version type="integer">1</version>
      <user-name>Todd Huss</user-name>
      <creator-name>Todd Huss</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6523</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I should add that this issue is specific to all versions of Ruby 1.9.2 that I tested (including the latest 1.9.2p136). To see the problem in action:

@@@ ruby
def return_still_calls_else 
  begin
    return
  rescue
    puts 'rescue'
  else
    puts 'else'
  end
end

return_still_calls_else
@@@

In ruby 1.8 when you call this nothing gets printed but in ruby 1.9.2 it prints 'else' when you run it.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I should add that this issue is specific to all versions of Ruby
1.9.2 that I tested (including the latest 1.9.2p136). To see the
problem in action:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def return_still_calls_else 
  begin
    return
  rescue
    puts 'rescue'
  else
    puts 'else'
  end
end

return_still_calls_else&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;In ruby 1.8 when you call this nothing gets printed but in ruby
1.9.2 it prints 'else' when you run it.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-04T19:09:26+00:00</created-at>
      <creator-id type="integer">139936</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6523</number>
      <permalink>sqlite3-incorrectly-reports-database-already-exists-on-dbcreate</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>SQLite3 incorrectly reports database already exists on db:create </title>
      <updated-at type="datetime">2011-03-04T19:09:28+00:00</updated-at>
      <user-id type="integer">139936</user-id>
      <version type="integer">2</version>
      <user-name>Todd Huss</user-name>
      <creator-name>Todd Huss</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6523</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>065b691386969456560122e57143a618cc1e7ace</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-03-04T18:02:16+00:00</created-at>
      <filename>sqlite3_db_create_database_alre.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">943076</id>
      <size type="integer">921</size>
      <uploader-id type="integer">139936</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/943076/sqlite3_db_create_database_alre.diff</url>
    </attachment>
  </attachments>
</ticket>
