From d673ca6e5f0b531c4900ed8f5e3efa0f8f51e152 Mon Sep 17 00:00:00 2001
From: miloops <miloops@gmail.com>
Date: Tue, 16 Sep 2008 11:20:05 -0300
Subject: [PATCH] validate_length_of should use custom message if given when using in or within.

---
 activerecord/lib/active_record/validations.rb |    4 ++--
 activerecord/test/cases/validations_test.rb   |   13 +++++++++++++
 2 files changed, 15 insertions(+), 2 deletions(-)

diff --git a/activerecord/lib/active_record/validations.rb b/activerecord/lib/active_record/validations.rb
index 1604836..4fafc66 100755
--- a/activerecord/lib/active_record/validations.rb
+++ b/activerecord/lib/active_record/validations.rb
@@ -536,8 +536,8 @@ module ActiveRecord
           when :within, :in
             raise ArgumentError, ":#{option} must be a Range" unless option_value.is_a?(Range)
 
-            too_short = options[:too_short] % option_value.begin
-            too_long  = options[:too_long]  % option_value.end
+            too_short = (options[:message] || options[:too_short]) % option_value.begin
+            too_long  = (options[:message] || options[:too_long])  % option_value.end
 
             validates_each(attrs, options) do |record, attr, value|
               value = options[:tokenizer].call(value) if value.kind_of?(String)
diff --git a/activerecord/test/cases/validations_test.rb b/activerecord/test/cases/validations_test.rb
index 91a0987..a847de5 100755
--- a/activerecord/test/cases/validations_test.rb
+++ b/activerecord/test/cases/validations_test.rb
@@ -955,6 +955,19 @@ class ValidationsTest < ActiveRecord::TestCase
     assert_equal "hoo 5", t.errors["title"]
   end
 
+  def test_validates_length_of_custom_errors_for_in
+    Topic.validates_length_of(:title, :in => 10..20, :message => "hoo %d")
+    t = Topic.create("title" => "uhohuhoh", "content" => "whatever")
+    assert !t.valid?
+    assert t.errors.on(:title)
+    assert_equal "hoo 10", t.errors["title"]
+
+    t = Topic.create("title" => "uhohuhohuhohuhohuhohuhohuhohuhoh", "content" => "whatever")
+    assert !t.valid?
+    assert t.errors.on(:title)
+    assert_equal "hoo 20", t.errors["title"]
+  end
+
   def test_validates_length_of_using_minimum_utf8
     with_kcode('UTF8') do
       Topic.validates_length_of :title, :minimum => 5
-- 
1.5.5.1

