From 3907f9be704786c77aa491bbfdc72a39f58152a3 Mon Sep 17 00:00:00 2001
From: Frederick Cheung <frederick.cheung@gmail.com>
Date: Wed, 7 May 2008 21:35:41 +0100
Subject: [PATCH] Fix association_preload not honouring some reflection options for has_many :through

---
 .../lib/active_record/association_preload.rb       |   11 ++++++-----
 activerecord/test/cases/associations/eager_test.rb |   11 +++++++++++
 activerecord/test/models/author.rb                 |    4 ++++
 3 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/activerecord/lib/active_record/association_preload.rb b/activerecord/lib/active_record/association_preload.rb
index f0a1e88..a3d1f12 100644
--- a/activerecord/lib/active_record/association_preload.rb
+++ b/activerecord/lib/active_record/association_preload.rb
@@ -143,7 +143,8 @@ module ActiveRecord
           through_primary_key = through_reflection.primary_key_name
           unless through_records.empty?
             source = reflection.source_reflection.name
-            through_records.first.class.preload_associations(through_records, source)
+            #add conditions from reflection!
+            through_records.first.class.preload_associations(through_records, source, reflection.options)
             through_records.each do |through_record|
               add_preloaded_records_to_collection(id_to_record_map[through_record[through_primary_key].to_s],
                                                  reflection.name, through_record.send(source))
@@ -251,12 +252,12 @@ module ActiveRecord
         conditions << append_conditions(options, preload_options)
 
         reflection.klass.find(:all,
-                              :select => (options[:select] || "#{table_name}.*"),
-                              :include => options[:include],
+                              :select => (preload_options[:select] || options[:select] || "#{table_name}.*"),
+                              :include => preload_options[:include] || options[:include],
                               :conditions => [conditions, ids],
                               :joins => options[:joins],
-                              :group => options[:group],
-                              :order => options[:order])
+                              :group => preload_options[:group] || options[:group],
+                              :order => preload_options[:order] || options[:order])
       end
 
 
diff --git a/activerecord/test/cases/associations/eager_test.rb b/activerecord/test/cases/associations/eager_test.rb
index f002afd..563d2ef 100644
--- a/activerecord/test/cases/associations/eager_test.rb
+++ b/activerecord/test/cases/associations/eager_test.rb
@@ -274,6 +274,17 @@ class EagerAssociationTest < ActiveRecord::TestCase
                              :order => 'authors.id').hello_post_comments.sort_by(&:id),
                  Author.find(:first, :order => 'authors.id').hello_post_comments.sort_by(&:id)
   end
+ 
+  def test_eager_with_has_many_through_join_model_with_conditions_on_top_level
+    assert_equal comments(:more_greetings), Author.find(authors(:david).id, :include => :comments_with_order_and_conditions).comments_with_order_and_conditions.first
+  end
+
+  def test_eager_with_has_many_through_join_model_with_include
+    author_comments = Author.find(authors(:david).id, :include => :comments_with_include).comments_with_include.to_a
+    assert_no_queries do 
+      author_comments.first.post.title
+    end
+  end
 
   def test_eager_with_has_many_and_limit
     posts = Post.find(:all, :order => 'posts.id asc', :include => [ :author, :comments ], :limit => 2)
diff --git a/activerecord/test/models/author.rb b/activerecord/test/models/author.rb
index 2918139..f63af27 100644
--- a/activerecord/test/models/author.rb
+++ b/activerecord/test/models/author.rb
@@ -17,6 +17,10 @@ class Author < ActiveRecord::Base
   end
   has_many :comments, :through => :posts
   has_many :comments_containing_the_letter_e, :through => :posts, :source => :comments
+  has_many :comments_with_order_and_conditions, :through => :posts, :source => :comments, :order => 'comments.body', :conditions => "comments.body like 'Thank%'"
+  has_many :comments_with_include, :through => :posts, :source => :comments, :include => :post
+
+
   has_many :comments_desc, :through => :posts, :source => :comments, :order => 'comments.id DESC'
   has_many :limited_comments, :through => :posts, :source => :comments, :limit => 1
   has_many :funky_comments, :through => :posts, :source => :comments
-- 
1.5.4.4

