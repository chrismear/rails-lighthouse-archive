From af87d41ba9b4f576f8ed5c17261fc62fb0917256 Mon Sep 17 00:00:00 2001
From: Aaron Quint <aaron@quirkey.com>
Date: Mon, 22 Dec 2008 00:34:57 -0500
Subject: [PATCH] Adding test coverage and better logging to Rails::TemplateRunner
---
 .../generators/applications/app/template_runner.rb |  122 ++++++-------
 .../test/generators/rails_helper_generator_test.rb |    2 +-
 .../test/generators/rails_template_runner_test.rb  |  194 ++++++++++++++++++++
 3 files changed, 250 insertions(+), 68 deletions(-)
 create mode 100644 railties/test/generators/rails_template_runner_test.rb

diff --git a/railties/lib/rails_generator/generators/applications/app/template_runner.rb b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
index c611364..96fd9c0 100644
--- a/railties/lib/rails_generator/generators/applications/app/template_runner.rb
+++ b/railties/lib/rails_generator/generators/applications/app/template_runner.rb
@@ -7,24 +7,26 @@ require 'fileutils'
 
 module Rails
   class TemplateRunner
+    
     attr_reader :root
-
+    attr_writer :logger
+    
     def initialize(template, root = '') # :nodoc:
-      @root = File.join(Dir.pwd, root)
+      @root = File.expand_path(File.directory?(root) ? root : File.join(Dir.pwd, root))
 
-      puts "applying template: #{template}"
+      log 'applying', "template: #{template}"
 
       load_template(template)
 
-      puts "#{template} applied."
+      log 'applied', "#{template}"
     end
 
     def load_template(template)
       begin
         code = open(template).read
         in_root { self.instance_eval(code) }
-      rescue LoadError
-        raise "The template [#{template}] could not be loaded."
+      rescue LoadError, Errno::ENOENT => e
+        raise "The template [#{template}] could not be loaded. Error: #{e}"
       end
     end
 
@@ -41,8 +43,8 @@ module Rails
     #
     #   file("config/apach.conf", "your apache config")
     #
-    def file(filename, data = nil, &block)
-      puts "creating file #{filename}"
+    def file(filename, data = nil, log_action = true, &block)
+      log 'file', filename if log_action
       dir, file = [File.dirname(filename), File.basename(filename)]
 
       inside(dir) do
@@ -66,7 +68,7 @@ module Rails
     #   plugin 'restful-authentication', :svn => 'svn://svnhub.com/technoweenie/restful-authentication/trunk'
     #
     def plugin(name, options)
-      puts "installing plugin #{name}"
+      log 'plugin', name
 
       if options[:git] && options[:submodule]
         in_root do
@@ -74,28 +76,36 @@ module Rails
         end
       elsif options[:git] || options[:svn]
         in_root do
-          `script/plugin install #{options[:svn] || options[:git]}`
+          run("script/plugin install #{options[:svn] || options[:git]}", false)
         end
       else
-        puts "! no git or svn provided for #{name}.  skipping..."
+        log "! no git or svn provided for #{name}.  skipping..."
       end
     end
 
     # Adds an entry into config/environment.rb for the supplied gem :
     def gem(name, options = {})
-      puts "adding gem #{name}"
+      log 'gem', name
 
-      sentinel = 'Rails::Initializer.run do |config|'
       gems_code = "config.gem '#{name}'"
 
       if options.any?
         opts = options.inject([]) {|result, h| result << [":#{h[0]} => '#{h[1]}'"] }.join(", ")
         gems_code << ", #{opts}"
       end
+      
+      environment gems_code
+    end
+    
+    # Adds a line inside the Initializer block for config/environment.rb. Used by #gem
+    def environment(data = nil, &block)
+      sentinel = 'Rails::Initializer.run do |config|'
+      
+      data = block.call if !data && block_given?
 
       in_root do
         gsub_file 'config/environment.rb', /(#{Regexp.escape(sentinel)})/mi do |match|
-          "#{match}\n  #{gems_code}"
+          "#{match}\n " << data
         end
       end
     end
@@ -111,11 +121,11 @@ module Rails
     def git(command = {})
       in_root do
         if command.is_a?(Symbol)
-          puts "running git #{command}"
+          log 'running', "git #{command}"
           Git.run(command.to_s)
         else
           command.each do |command, options|
-            puts "running git #{command} #{options}"
+            log 'running', "git #{command} #{options}"
             Git.run("#{command} #{options}")
           end
         end
@@ -135,16 +145,8 @@ module Rails
     #   vendor("foreign.rb", "# Foreign code is fun")
     #
     def vendor(filename, data = nil, &block)
-      puts "vendoring file #{filename}"
-      inside("vendor") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+      log 'vendoring', filename
+      file("vendor/#{filename}", data, false, &block)
     end
 
     # Create a new file in the lib/ directory. Code can be specified
@@ -158,17 +160,9 @@ module Rails
     #
     #   lib("foreign.rb", "# Foreign code is fun")
     #
-    def lib(filename, data = nil)
-      puts "add lib file #{filename}"
-      inside("lib") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+    def lib(filename, data = nil, &block)
+      log 'lib', filename
+      file("lib/#{filename}", data, false, &block)
     end
 
     # Create a new Rakefile with the provided code (either in a block or a string).
@@ -190,16 +184,8 @@ module Rails
     #   rakefile("seed.rake", "puts 'im plantin ur seedz'")
     #
     def rakefile(filename, data = nil, &block)
-      puts "adding rakefile #{filename}"
-      inside("lib/tasks") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+      log 'rakefile', filename
+      file("lib/tasks/#{filename}", data, false, &block)
     end
 
     # Create a new initializer with the provided code (either in a block or a string).
@@ -219,16 +205,8 @@ module Rails
     #   initializer("api.rb", "API_KEY = '123456'")
     #
     def initializer(filename, data = nil, &block)
-      puts "adding initializer #{filename}"
-      inside("config/initializers") do |folder|
-        File.open("#{folder}/#{filename}", "w") do |f|
-          if block_given?
-            f.write(block.call)
-          else
-            f.write(data)
-          end
-        end
-      end
+      log 'initializer', filename
+      file("config/initializers/#{filename}", data, false, &block)
     end
 
     # Generate something using a generator from Rails or a plugin.
@@ -240,10 +218,10 @@ module Rails
     #   generate(:authenticated, "user session")
     #
     def generate(what, *args)
-      puts "generating #{what}"
+      log 'generating', what
       argument = args.map(&:to_s).flatten.join(" ")
 
-      in_root { `#{root}/script/generate #{what} #{argument}` }
+      in_root { run("script/generate #{what} #{argument}", false) }
     end
 
     # Executes a command
@@ -254,8 +232,8 @@ module Rails
     #     run('ln -s ~/edge rails)
     #   end
     #
-    def run(command)
-      puts "executing #{command} from #{Dir.pwd}"
+    def run(command, log_action = true)
+      log 'executing',  "#{command} from #{Dir.pwd}" if log_action
       `#{command}`
     end
 
@@ -268,10 +246,10 @@ module Rails
     #   rake("gems:install", :sudo => true)
     #
     def rake(command, options = {})
-      puts "running rake task #{command}"
+      log 'rake', command
       env = options[:env] || 'development'
       sudo = options[:sudo] ? 'sudo ' : ''
-      in_root { `#{sudo}rake #{command} RAILS_ENV=#{env}` }
+      in_root { run("#{sudo}rake #{command} RAILS_ENV=#{env}", false) }
     end
 
     # Just run the capify command in root
@@ -281,7 +259,8 @@ module Rails
     #   capify!
     #
     def capify!
-      in_root { `capify .` }
+      log 'capifying'
+      in_root { run('capify .', false) }
     end
 
     # Add Rails to /vendor/rails
@@ -291,8 +270,8 @@ module Rails
     #   freeze!
     #
     def freeze!(args = {})
-      puts "vendoring rails edge"
-      in_root { `rake rails:freeze:edge` }
+      log 'vendor', 'rails edge'
+      in_root { run('rake rails:freeze:edge', false) }
     end
 
     # Make an entry in Rails routing file conifg/routes.rb
@@ -302,6 +281,7 @@ module Rails
     #   route "map.root :controller => :welcome"
     #
     def route(routing_code)
+      log 'route', routing_code
       sentinel = 'ActionController::Routing::Routes.draw do |map|'
 
       in_root do
@@ -321,7 +301,7 @@ module Rails
     #   freeze! if ask("Should I freeze the latest Rails?") == "yes"
     #
     def ask(string)
-      puts string
+      log '', string
       gets.strip
     end
 
@@ -368,5 +348,13 @@ module Rails
     def destination_path(relative_destination)
       File.join(root, relative_destination)
     end
+   
+    def log(action, message = '')
+      logger.log(action, message) 
+    end
+    
+    def logger
+      @logger ||= Rails::Generator::Base.logger
+    end
   end
 end
\ No newline at end of file
diff --git a/railties/test/generators/rails_helper_generator_test.rb b/railties/test/generators/rails_helper_generator_test.rb
index 8d05f55..8ce1703 100644
--- a/railties/test/generators/rails_helper_generator_test.rb
+++ b/railties/test/generators/rails_helper_generator_test.rb
@@ -1,4 +1,4 @@
-require File.dirname(__FILE__) + '/generator_test_helper'
+require 'generators/generator_test_helper'
 
 class RailsHelperGeneratorTest < GeneratorTestCase
   def test_helper_generates_helper
diff --git a/railties/test/generators/rails_template_runner_test.rb b/railties/test/generators/rails_template_runner_test.rb
new file mode 100644
index 0000000..9589d23
--- /dev/null
+++ b/railties/test/generators/rails_template_runner_test.rb
@@ -0,0 +1,194 @@
+require 'abstract_unit'
+require 'generators/generator_test_helper'
+
+uses_mocha 'Template Runner Tests' do
+  class RailsTemplateRunnerTest < GeneratorTestCase
+
+    def setup
+      Rails::Generator::Base.use_application_sources!
+      run_generator('app', [RAILS_ROOT])
+      # generate empty template 
+      @template_path = File.join(RAILS_ROOT, 'template.rb')
+      File.open(File.join(@template_path), 'w') {|f| f << '' }
+
+      @git_plugin_uri = 'git://github.com/technoweenie/restful-authentication.git'
+      @svn_plugin_uri = 'svn://svnhub.com/technoweenie/restful-authentication/trunk'
+    end
+
+    def teardown
+      super
+      rm_rf "#{RAILS_ROOT}/README"
+      rm_rf "#{RAILS_ROOT}/Rakefile"
+      rm_rf "#{RAILS_ROOT}/doc"
+      rm_rf "#{RAILS_ROOT}/lib"
+      rm_rf "#{RAILS_ROOT}/log"
+      rm_rf "#{RAILS_ROOT}/script"
+      rm_rf "#{RAILS_ROOT}/vendor"
+      rm_rf "#{RAILS_ROOT}/tmp"
+      rm_rf "#{RAILS_ROOT}/Capfile"
+      rm_rf @template_path
+    end
+
+    def test_initialize_should_load_template
+      Rails::TemplateRunner.any_instance.expects(:load_template).with(@template_path)
+      silence_generator do
+        Rails::TemplateRunner.new(@template_path, RAILS_ROOT)
+      end
+    end
+
+    def test_initialize_should_raise_error_on_missing_template_file
+      assert_raise(RuntimeError) do
+        silence_generator do
+          Rails::TemplateRunner.new('non/existent/path/to/template.rb', RAILS_ROOT)
+        end
+      end
+    end
+
+    def test_file_should_write_data_to_file_path
+      run_template_method(:file, 'lib/test_file.rb', 'heres test data')
+      assert_generated_file_with_data 'lib/test_file.rb', 'heres test data'
+    end
+
+    def test_file_should_write_block_contents_to_file_path
+      run_template_method(:file, 'lib/test_file.rb') { 'heres block data' }
+      assert_generated_file_with_data 'lib/test_file.rb', 'heres block data'
+    end
+
+    def test_plugin_with_git_option_should_run_plugin_install
+      expects_run_with_command("script/plugin install #{@git_plugin_uri}")
+      run_template_method(:plugin, 'restful-authentication', :git => @git_plugin_uri)
+    end
+
+    def test_plugin_with_svn_option_should_run_plugin_install
+      expects_run_with_command("script/plugin install #{@svn_plugin_uri}")
+      run_template_method(:plugin, 'restful-authentication', :svn => @svn_plugin_uri)
+    end
+
+    def test_plugin_with_git_option_and_submodule_should_use_git_scm
+      Rails::Git.expects(:run).with("submodule add #{@git_plugin_uri} vendor/plugins/rest_auth")
+      run_template_method(:plugin, 'rest_auth', :git => @git_plugin_uri, :submodule => true)
+    end
+
+    def test_plugin_with_no_options_should_skip_method
+      Rails::TemplateRunner.any_instance.expects(:run).never
+      run_template_method(:plugin, 'rest_auth', {})
+    end
+
+    def test_gem_should_put_gem_dependency_in_enviroment
+      run_template_method(:gem, 'will-paginate')
+      assert_rails_initializer_includes("config.gem 'will-paginate'")
+    end
+
+    def test_gem_with_options_should_include_options_in_gem_dependency_in_environment
+      run_template_method(:gem, 'mislav-will-paginate', :lib => 'will-paginate', :source => 'http://gems.github.com')
+      assert_rails_initializer_includes("config.gem 'mislav-will-paginate', :source => 'http://gems.github.com', :lib => 'will-paginate'")
+    end
+
+    def test_environment_should_include_data_in_environment_initializer_block
+      load_paths = 'config.load_paths += %w["#{RAILS_ROOT}/app/extras"]'
+      run_template_method(:environment, load_paths)
+      assert_rails_initializer_includes(load_paths)
+    end
+
+    def test_environment_with_block_should_include_block_contents_in_environment_initializer_block
+      run_template_method(:environment) do
+        '# This wont be added'
+        '# This will be added'
+      end
+      assert_rails_initializer_includes('# This will be added')
+    end
+
+    def test_git_with_symbol_should_run_command_using_git_scm
+      Rails::Git.expects(:run).once.with('init')
+      run_template_method(:git, :init)
+    end
+
+    def test_git_with_hash_should_run_each_command_using_git_scm
+      Rails::Git.expects(:run).times(2)
+      run_template_method(:git, {:init => '', :add => '.'})
+    end
+
+    def test_vendor_should_write_data_to_file_in_vendor
+      run_template_method(:vendor, 'vendor_file.rb', '# vendor data')
+      assert_generated_file_with_data('vendor/vendor_file.rb', '# vendor data')
+    end
+
+    def test_lib_should_write_data_to_file_in_lib
+      run_template_method(:lib, 'my_library.rb', 'class MyLibrary')
+      assert_generated_file_with_data('lib/my_library.rb', 'class MyLibrary')
+    end
+
+    def test_rakefile_should_write_date_to_file_in_lib_tasks
+      run_template_method(:rakefile, 'myapp.rake', 'task :run => [:environment]')
+      assert_generated_file_with_data('lib/tasks/myapp.rake', 'task :run => [:environment]')
+    end
+
+    def test_initializer_should_write_date_to_file_in_config_initializers
+      run_template_method(:initializer, 'constants.rb', 'MY_CONSTANT = 42')
+      assert_generated_file_with_data('config/initializers/constants.rb', 'MY_CONSTANT = 42')
+    end
+
+    def test_generate_should_run_script_generate_with_argument_and_options
+      expects_run_with_command('script/generate model MyModel')
+      run_template_method(:generate, 'model', 'MyModel')
+    end
+
+    def test_rake_should_run_rake_command_with_development_env
+      expects_run_with_command('rake log:clear RAILS_ENV=development')
+      run_template_method(:rake, 'log:clear')
+    end
+
+    def test_rake_with_env_option_should_run_rake_command_in_env
+      expects_run_with_command('rake log:clear RAILS_ENV=production')
+      run_template_method(:rake, 'log:clear', :env => 'production')
+    end
+
+    def test_rake_with_sudo_option_should_run_rake_command_with_sudo
+      expects_run_with_command('sudo rake log:clear RAILS_ENV=development')
+      run_template_method(:rake, 'log:clear', :sudo => true)
+    end
+
+    def test_capify_should_run_the_capify_command
+      expects_run_with_command('capify .')
+      run_template_method(:capify!)
+    end
+
+    def test_freeze_should_freeze_rails_edge
+      expects_run_with_command('rake rails:freeze:edge')
+      run_template_method(:freeze!)
+    end
+
+    def test_route_should_add_data_to_the_routes_block_in_config_routes
+      route_command = "map.route '/login', :controller => 'sessions', :action => 'new'"
+      run_template_method(:route, route_command)
+      assert_generated_file_with_data 'config/routes.rb', route_command
+    end
+
+    protected
+    def run_template_method(method_name, *args, &block)
+      silence_generator do
+        @template_runner = Rails::TemplateRunner.new(@template_path, RAILS_ROOT)
+        @template_runner.send(method_name, *args, &block)
+      end
+    end
+
+    def expects_run_with_command(command)
+      Rails::TemplateRunner.any_instance.stubs(:run).once.with(command, false)
+    end
+
+    def assert_rails_initializer_includes(data, message = nil)
+      message ||= "Rails::Initializer should include #{data}"
+      assert_generated_file 'config/environment.rb' do |body|
+        assert_match(/#{Regexp.escape("Rails::Initializer.run do |config|")}.+#{Regexp.escape(data)}.+end/m, body, message)
+      end
+    end
+    
+    def assert_generated_file_with_data(file, data, message = nil)
+      message ||= "#{file} should include '#{data}'"
+      assert_generated_file(file) do |file|
+        assert_match(/#{Regexp.escape(data)}/,file, message)
+      end
+    end
+    
+  end
+end
\ No newline at end of file
-- 
1.6.0.2

