<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-07-27T17:39:55+01:00</created-at>
  <creator-id type="integer">42376</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2386</number>
  <permalink>adding-sql-anywhere-support-to-activerecord-tests</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag nil="true"></tag>
  <title>Adding SQL Anywhere support to ActiveRecord tests</title>
  <updated-at type="datetime">2011-02-09T00:39:07+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">7</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>efarrar</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2386</url>
  <milestone-title>3.x</milestone-title>
  <priority-name>Low</priority-name>
  <original-body>I have recently been working to create an ActiveRecord gem for Sybase SQL Anywhere (http://www.sybase.com/products/databasemanagement/sqlanywhere). The project is hosted on RubyForge (http://sqlanywhere.rubyforge.org/), and the code is hosted on GitHub (http://github.com/sqlanywhere/activerecord-sqlanywhere-adapter).

While independent ActiveRecord drivers are gems-installable, in order to run ActiveRecord unit tests they must appear in ActiveRecord's Rakefile, and have a directory in the test/connections directory. I have added both of those references for the so that users will not have to manually add them when using SQL Anywhere.

Thanks.</original-body>
  <latest-body>I have recently been working to create an ActiveRecord gem for Sybase SQL Anywhere (http://www.sybase.com/products/databasemanagement/sqlanywhere). The project is hosted on RubyForge (http://sqlanywhere.rubyforge.org/), and the code is hosted on GitHub (http://github.com/sqlanywhere/activerecord-sqlanywhere-adapter).

While independent ActiveRecord drivers are gems-installable, in order to run ActiveRecord unit tests they must appear in ActiveRecord's Rakefile, and have a directory in the test/connections directory. I have added both of those references for the so that users will not have to manually add them when using SQL Anywhere.

Thanks.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have recently been working to create an ActiveRecord gem for
Sybase SQL Anywhere (&lt;a href=&quot;http://www.sybase.com/products/databasemanagement/sqlanywhere)&quot;&gt;http://www.sybase.com/products/d...&lt;/a&gt;.
The project is hosted on RubyForge (&lt;a href=&quot;http://sqlanywhere.rubyforge.org/)&quot;&gt;http://sqlanywhere.rubyforge.org/)&lt;/a&gt;,
and the code is hosted on GitHub (&lt;a href=&quot;http://github.com/sqlanywhere/activerecord-sqlanywhere-adapter).%3C/p&quot;&gt;http://github.com/sqlanywhere/ac...&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;While independent ActiveRecord drivers are gems-installable, in
order to run ActiveRecord unit tests they must appear in
ActiveRecord's Rakefile, and have a directory in the
test/connections directory. I have added both of those references
for the so that users will not have to manually add them when using
SQL Anywhere.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have recently been working to create an ActiveRecord gem for Sybase SQL Anywhere (http://www.sybase.com/products/databasemanagement/sqlanywhere). The project is hosted on RubyForge (http://sqlanywhere.rubyforge.org/), and the code is hosted on GitHub (http://github.com/sqlanywhere/activerecord-sqlanywhere-adapter).

While independent ActiveRecord drivers are gems-installable, in order to run ActiveRecord unit tests they must appear in ActiveRecord's Rakefile, and have a directory in the test/connections directory. I have added both of those references for the so that users will not have to manually add them when using SQL Anywhere.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have recently been working to create an ActiveRecord gem for
Sybase SQL Anywhere (&lt;a href=&quot;http://www.sybase.com/products/databasemanagement/sqlanywhere)&quot;&gt;http://www.sybase.com/products/d...&lt;/a&gt;.
The project is hosted on RubyForge (&lt;a href=&quot;http://sqlanywhere.rubyforge.org/)&quot;&gt;http://sqlanywhere.rubyforge.org/)&lt;/a&gt;,
and the code is hosted on GitHub (&lt;a href=&quot;http://github.com/sqlanywhere/activerecord-sqlanywhere-adapter).%3C/p&quot;&gt;http://github.com/sqlanywhere/ac...&lt;/a&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;While independent ActiveRecord drivers are gems-installable, in
order to run ActiveRecord unit tests they must appear in
ActiveRecord's Rakefile, and have a directory in the
test/connections directory. I have added both of those references
for the so that users will not have to manually add them when using
SQL Anywhere.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-31T19:27:26+01:00</created-at>
      <creator-id type="integer">42376</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2386</number>
      <permalink>adding-sql-anywhere-support-to-activerecord-tests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sqlanywhere</tag>
      <title>Adding SQL Anywhere support to ActiveRecord tests</title>
      <updated-at type="datetime">2009-03-31T19:27:30+01:00</updated-at>
      <user-id type="integer">42376</user-id>
      <version type="integer">1</version>
      <user-name>efarrar</user-name>
      <creator-name>efarrar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2386</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:44+01:00</created-at>
      <creator-id type="integer">42376</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2386</number>
      <permalink>adding-sql-anywhere-support-to-activerecord-tests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sqlanywhere</tag>
      <title>Adding SQL Anywhere support to ActiveRecord tests</title>
      <updated-at type="datetime">2010-05-04T18:48:44+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>efarrar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2386</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The most cool online shoes shop where you can find the most fashion designers shoes, include
&lt;a href='http://www.fashionshoesmart.com'&gt;Manolo Blahnik Shoes&lt;/a&gt;, &lt;a href='http://www.fashionshoesmart.com'&gt;Jimmy Choo Shoes&lt;/a&gt;, Christian Louboutin shoes and more. 
we offer high quality highheels at low price.

Simple ways to love your wardrobe.
An online shop specializing in &lt;a href='http://www.hervelegerbrand.com'&gt;Herve Leger&lt;/a&gt;, Herve Leger Dress, Herve Leger Skirt, 
Herve Leger Sale, Herve Leger Dresses.All new style in our store.

Shop the latest styles &lt;a href='http://www.juicyshoponline.com'&gt;Juicy Couture&lt;/a&gt; handbags, juicy couture tracksuit.
Juicy couture sale, juicy couture outlet,100% quality guarantee.

FashionStyleOnsale offer high quality Moncler Jackets at low price. 
Moncler Jackets on sale, shop more discount Moncler Vest, Moncler Coats at FashionStyleOnsale
&lt;a href='http://www.fashionstyleonsale.com'&gt;moncler&lt;/a&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;The most cool online shoes shop where you can find the most
fashion designers shoes, include&lt;br&gt;
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Manolo Blahnik Shoes&lt;/a&gt;,
&lt;a href=&quot;http://www.fashionshoesmart.com&quot;&gt;Jimmy Choo Shoes&lt;/a&gt;,
Christian Louboutin shoes and more.&lt;br&gt;
we offer high quality highheels at low price.&lt;/p&gt;
&lt;p&gt;Simple ways to love your wardrobe.&lt;br&gt;
An online shop specializing in &lt;a href=
&quot;http://www.hervelegerbrand.com&quot;&gt;Herve Leger&lt;/a&gt;, Herve Leger
Dress, Herve Leger Skirt,&lt;br&gt;
Herve Leger Sale, Herve Leger Dresses.All new style in our
store.&lt;/p&gt;
&lt;p&gt;Shop the latest styles &lt;a href=
&quot;http://www.juicyshoponline.com&quot;&gt;Juicy Couture&lt;/a&gt; handbags, juicy
couture tracksuit.&lt;br&gt;
Juicy couture sale, juicy couture outlet,100% quality
guarantee.&lt;/p&gt;
&lt;p&gt;FashionStyleOnsale offer high quality Moncler Jackets at low
price.&lt;br&gt;
Moncler Jackets on sale, shop more discount Moncler Vest, Moncler
Coats at FashionStyleOnsale&lt;br&gt;
&lt;a href=&quot;http://www.fashionstyleonsale.com&quot;&gt;moncler&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-07-27T15:23:40+01:00</created-at>
      <creator-id type="integer">42376</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2386</number>
      <permalink>adding-sql-anywhere-support-to-activerecord-tests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord sqlanywhere</tag>
      <title>Adding SQL Anywhere support to ActiveRecord tests</title>
      <updated-at type="datetime">2010-07-27T17:39:55+01:00</updated-at>
      <user-id type="integer">109040</user-id>
      <version type="integer">3</version>
      <user-name>matin</user-name>
      <creator-name>efarrar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2386</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-08T08:49:12+00:00</created-at>
      <creator-id type="integer">42376</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: activerecord sqlanywhere
:priority: 0
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2386</number>
      <permalink>adding-sql-anywhere-support-to-activerecord-tests</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Adding SQL Anywhere support to ActiveRecord tests</title>
      <updated-at type="datetime">2010-11-08T08:49:14+00:00</updated-at>
      <user-id type="integer">94458</user-id>
      <version type="integer">5</version>
      <user-name>Jeff Kreeftmeijer</user-name>
      <creator-name>efarrar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2386</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-09T00:31:56+00:00</created-at>
      <creator-id type="integer">42376</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2386</number>
      <permalink>adding-sql-anywhere-support-to-activerecord-tests</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Adding SQL Anywhere support to ActiveRecord tests</title>
      <updated-at type="datetime">2011-02-09T00:39:07+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>efarrar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2386</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-09T00:31:56+00:00</created-at>
      <creator-id type="integer">42376</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2386</number>
      <permalink>adding-sql-anywhere-support-to-activerecord-tests</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Adding SQL Anywhere support to ActiveRecord tests</title>
      <updated-at type="datetime">2011-02-09T00:38:33+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>efarrar</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2386</url>
      <milestone-title>3.x</milestone-title>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7e59bc47214043c3aafde6a8e77b1ca4e898984e</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-31T19:27:26+01:00</created-at>
      <filename>add_sqlanywhere.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">106179</id>
      <size type="integer">2250</size>
      <uploader-id type="integer">42376</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/106179/add_sqlanywhere.diff</url>
    </attachment>
  </attachments>
</ticket>
