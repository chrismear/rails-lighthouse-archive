<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-06-21T19:53:22+01:00</created-at>
  <creator-id type="integer">15459</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">4925</number>
  <permalink>rails-3-to_json-incompatible-with-json-core-library</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>duplicate</state>
  <tag>activemodel activesupport patch &quot;patch json serialization&quot; &quot;rails 3.0.0.beta4&quot;</tag>
  <title>Rails 3 to_json incompatible with JSON core library</title>
  <updated-at type="datetime">2010-07-08T23:18:43+01:00</updated-at>
  <user-id type="integer">15459</user-id>
  <version type="integer">6</version>
  <user-name>Nate Wiger</user-name>
  <creator-name>Nate Wiger</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/4925</url>
  <priority-name>Low</priority-name>
  <original-body>It appears that Rails 3 changes the signature of to_json vs the JSON core lib.  Unfortunately, this breaks ActiveRecord and other components when trying to use them outside of Rails.  I've hit this with Sinatra, Sequel, and a couple other toolsets that rely on the core JSON library.

Here's one example backtrace from Sinatra:

    ArgumentError: wrong number of arguments (2 for 1)
	/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `to_json'
	/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `block in &lt;class:Main&gt;'
	/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `call'
	/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `block in route'

The code that generated that was (AR3):

    class Message &lt; ActiveRecord::Base
      scope :unread, where(:is_read =&gt; false)

      def self.find_and_read_for(user_id)
        m = where(:user_id =&gt; user_id).unread.all
        update_all({:is_read =&gt; true}, ['id IN (?)', m]) unless m.empty?
        m
      end
    end

Then in Sinatra:

    # Return unread messages and mark read
    get '/messages/read.json' do
      @messages = Message.find_and_read_for(current_user_id)
      @messages.to_json
    end

The problem is that the JSON gem supports a *splat as its arg signature, whereas Rails 3 does not:

http://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L133

It seems a simple patch to change that signature to this:

    def to_json(*options)
      ActiveSupport::JSON.encode(self, options)
    end

Would solve the issue.

I'm not sure why AR2 is not affected in the same way, since it appears to override to_json similarly, but I have seen this with a couple test apps now, and only with AR3.

Thanks,
Nate</original-body>
  <latest-body>It appears that Rails 3 changes the signature of to_json vs the JSON core lib.  Unfortunately, this breaks ActiveRecord and other components when trying to use them outside of Rails.  I've hit this with Sinatra, Sequel, and a couple other toolsets that rely on the core JSON library.

Here's one example backtrace from Sinatra:

    ArgumentError: wrong number of arguments (2 for 1)
	/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `to_json'
	/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `block in &lt;class:Main&gt;'
	/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `call'
	/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `block in route'

The code that generated that was (AR3):

    class Message &lt; ActiveRecord::Base
      scope :unread, where(:is_read =&gt; false)

      def self.find_and_read_for(user_id)
        m = where(:user_id =&gt; user_id).unread.all
        update_all({:is_read =&gt; true}, ['id IN (?)', m]) unless m.empty?
        m
      end
    end

Then in Sinatra:

    # Return unread messages and mark read
    get '/messages/read.json' do
      @messages = Message.find_and_read_for(current_user_id)
      @messages.to_json
    end

The problem is that the JSON gem supports a *splat as its arg signature, whereas Rails 3 does not:

http://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L133

It seems a simple patch to change that signature to this:

    def to_json(*options)
      ActiveSupport::JSON.encode(self, options)
    end

Would solve the issue.

I'm not sure why AR2 is not affected in the same way, since it appears to override to_json similarly, but I have seen this with a couple test apps now, and only with AR3.

Thanks,
Nate</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;It appears that Rails 3 changes the signature of to_json vs the
JSON core lib. Unfortunately, this breaks ActiveRecord and other
components when trying to use them outside of Rails. I've hit this
with Sinatra, Sequel, and a couple other toolsets that rely on the
core JSON library.&lt;/p&gt;
&lt;p&gt;Here's one example backtrace from Sinatra:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ArgumentError: wrong number of arguments (2 for 1)
/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `to_json'
/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `block in &amp;lt;class:Main&amp;gt;'
/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `call'
/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `block in route'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The code that generated that was (AR3):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Message &amp;lt; ActiveRecord::Base
  scope :unread, where(:is_read =&amp;gt; false)

  def self.find_and_read_for(user_id)
    m = where(:user_id =&amp;gt; user_id).unread.all
    update_all({:is_read =&amp;gt; true}, ['id IN (?)', m]) unless m.empty?
    m
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then in Sinatra:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Return unread messages and mark read
get '/messages/read.json' do
  @messages = Message.find_and_read_for(current_user_id)
  @messages.to_json
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is that the JSON gem supports a *splat as its arg
signature, whereas Rails 3 does not:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L133&quot;&gt;
http://github.com/rails/rails/blob/master/activesupport/lib/active_...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It seems a simple patch to change that signature to this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def to_json(*options)
  ActiveSupport::JSON.encode(self, options)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Would solve the issue.&lt;/p&gt;
&lt;p&gt;I'm not sure why AR2 is not affected in the same way, since it
appears to override to_json similarly, but I have seen this with a
couple test apps now, and only with AR3.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Nate&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It appears that Rails 3 changes the signature of to_json vs the JSON core lib.  Unfortunately, this breaks ActiveRecord and other components when trying to use them outside of Rails.  I've hit this with Sinatra, Sequel, and a couple other toolsets that rely on the core JSON library.

Here's one example backtrace from Sinatra:

    ArgumentError: wrong number of arguments (2 for 1)
	/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `to_json'
	/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `block in &lt;class:Main&gt;'
	/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `call'
	/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `block in route'

The code that generated that was (AR3):

    class Message &lt; ActiveRecord::Base
      scope :unread, where(:is_read =&gt; false)

      def self.find_and_read_for(user_id)
        m = where(:user_id =&gt; user_id).unread.all
        update_all({:is_read =&gt; true}, ['id IN (?)', m]) unless m.empty?
        m
      end
    end

Then in Sinatra:

    # Return unread messages and mark read
    get '/messages/read.json' do
      @messages = Message.find_and_read_for(current_user_id)
      @messages.to_json
    end

The problem is that the JSON gem supports a *splat as its arg signature, whereas Rails 3 does not:

http://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L133

It seems a simple patch to change that signature to this:

    def to_json(*options)
      ActiveSupport::JSON.encode(self, options)
    end

Would solve the issue.

I'm not sure why AR2 is not affected in the same way, since it appears to override to_json similarly, but I have seen this with a couple test apps now, and only with AR3.

Thanks,
Nate</body>
      <body-html>&lt;div&gt;&lt;p&gt;It appears that Rails 3 changes the signature of to_json vs the
JSON core lib. Unfortunately, this breaks ActiveRecord and other
components when trying to use them outside of Rails. I've hit this
with Sinatra, Sequel, and a couple other toolsets that rely on the
core JSON library.&lt;/p&gt;
&lt;p&gt;Here's one example backtrace from Sinatra:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ArgumentError: wrong number of arguments (2 for 1)
/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `to_json'
/Users/nwiger/Workspace/server/app/routes/message_routes.rb:6:in `block in &amp;lt;class:Main&amp;gt;'
/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `call'
/Users/nwiger/.rvm/gems/ruby-1.9.2-head/gems/sinatra-1.0/lib/sinatra/base.rb:865:in `block in route'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The code that generated that was (AR3):&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Message &amp;lt; ActiveRecord::Base
  scope :unread, where(:is_read =&amp;gt; false)

  def self.find_and_read_for(user_id)
    m = where(:user_id =&amp;gt; user_id).unread.all
    update_all({:is_read =&amp;gt; true}, ['id IN (?)', m]) unless m.empty?
    m
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then in Sinatra:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;# Return unread messages and mark read
get '/messages/read.json' do
  @messages = Message.find_and_read_for(current_user_id)
  @messages.to_json
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is that the JSON gem supports a *splat as its arg
signature, whereas Rails 3 does not:&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://github.com/rails/rails/blob/master/activesupport/lib/active_support/json/encoding.rb#L133&quot;&gt;
http://github.com/rails/rails/blob/master/activesupport/lib/active_...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It seems a simple patch to change that signature to this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;def to_json(*options)
  ActiveSupport::JSON.encode(self, options)
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Would solve the issue.&lt;/p&gt;
&lt;p&gt;I'm not sure why AR2 is not affected in the same way, since it
appears to override to_json similarly, but I have seen this with a
couple test apps now, and only with AR3.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Nate&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-21T19:53:22+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4925</number>
      <permalink>rails-3-to_json-incompatible-with-json-core-library</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel activesupport patch &quot;patch json serialization&quot; &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Rails 3 to_json incompatible with JSON core library</title>
      <updated-at type="datetime">2010-06-21T19:53:25+01:00</updated-at>
      <user-id type="integer">15459</user-id>
      <version type="integer">1</version>
      <user-name>Nate Wiger</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4925</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We're running in to this inside of Rails3 beta4 as well:

@@@
Loading development environment (Rails 3.0.0.beta4)
irb(main):001:0&gt; Rails.version
=&gt; &quot;3.0.0.beta4&quot;
irb(main):002:0&gt; {1=&gt;2}.to_json
=&gt; &quot;{\&quot;1\&quot;:2}&quot;
irb(main):003:0&gt; {1=&gt;:a}.to_json
ArgumentError: wrong number of arguments (2 for 1)
	from (irb):3:in `to_json'
	from (irb):3
irb(main):004:0&gt; {1=&gt;{2=&gt;:a}}.to_json
ArgumentError: wrong number of arguments (2 for 1)
	from (irb):4:in `to_json'
	from (irb):4
irb(main):006:0&gt; {1=&gt;{2=&gt;1}}.to_json
=&gt; &quot;{\&quot;1\&quot;:{\&quot;2\&quot;:1}}&quot;
@@@@

In particular, it seems to only happen when the value of a hash is a symbol.</body>
      <body-html>&lt;div&gt;&lt;p&gt;We're running in to this inside of Rails3 beta4 as well:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Loading development environment (Rails 3.0.0.beta4)
irb(main):001:0&amp;gt; Rails.version
=&amp;gt; &quot;3.0.0.beta4&quot;
irb(main):002:0&amp;gt; {1=&amp;gt;2}.to_json
=&amp;gt; &quot;{\&quot;1\&quot;:2}&quot;
irb(main):003:0&amp;gt; {1=&amp;gt;:a}.to_json
ArgumentError: wrong number of arguments (2 for 1)
    from (irb):3:in `to_json'
    from (irb):3
irb(main):004:0&amp;gt; {1=&amp;gt;{2=&amp;gt;:a}}.to_json
ArgumentError: wrong number of arguments (2 for 1)
    from (irb):4:in `to_json'
    from (irb):4
irb(main):006:0&amp;gt; {1=&amp;gt;{2=&amp;gt;1}}.to_json
=&amp;gt; &quot;{\&quot;1\&quot;:{\&quot;2\&quot;:1}}&quot;
@@@@

In particular, it seems to only happen when the value of a hash is a symbol.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-26T00:00:00+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4925</number>
      <permalink>rails-3-to_json-incompatible-with-json-core-library</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel activesupport patch &quot;patch json serialization&quot; &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Rails 3 to_json incompatible with JSON core library</title>
      <updated-at type="datetime">2010-06-26T00:00:06+01:00</updated-at>
      <user-id type="integer">20319</user-id>
      <version type="integer">2</version>
      <user-name>Fluxx</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4925</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think this is a duplicate of:
https://rails.lighthouseapp.com/projects/8994/tickets/4494-ruby-192-heads-json-support-breaks-to_json-for-arrays-of-records</body>
      <body-html>&lt;div&gt;&lt;p&gt;I think this is a duplicate of:&lt;br&gt;
&lt;a href=
&quot;https://rails.lighthouseapp.com/projects/8994/tickets/4494-ruby-192-heads-json-support-breaks-to_json-for-arrays-of-records&quot;&gt;
https://rails.lighthouseapp.com/projects/8994/tickets/4494-ruby-192...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-28T10:26:09+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4925</number>
      <permalink>rails-3-to_json-incompatible-with-json-core-library</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel activesupport patch &quot;patch json serialization&quot; &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Rails 3 to_json incompatible with JSON core library</title>
      <updated-at type="datetime">2010-06-28T10:26:17+01:00</updated-at>
      <user-id type="integer">55948</user-id>
      <version type="integer">3</version>
      <user-name>Rasmus R&#248;nn Nielsen</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4925</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>We are running into the same problem</body>
      <body-html>&lt;div&gt;&lt;p&gt;We are running into the same problem&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-28T11:17:13+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4925</number>
      <permalink>rails-3-to_json-incompatible-with-json-core-library</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activemodel activesupport patch &quot;patch json serialization&quot; &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Rails 3 to_json incompatible with JSON core library</title>
      <updated-at type="datetime">2010-06-28T11:17:18+01:00</updated-at>
      <user-id type="integer">104221</user-id>
      <version type="integer">4</version>
      <user-name>iuri matias</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4925</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>JSON gem overloads `to_json` with its own private encoding API so we'll continue to run into these issues until that lib changes its approach.</body>
      <body-html>&lt;div&gt;&lt;p&gt;JSON gem overloads &lt;code&gt;to_json&lt;/code&gt; with its own private
encoding API so we'll continue to run into these issues until that
lib changes its approach.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-28T17:27:07+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4925</number>
      <permalink>rails-3-to_json-incompatible-with-json-core-library</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activemodel activesupport patch &quot;patch json serialization&quot; &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Rails 3 to_json incompatible with JSON core library</title>
      <updated-at type="datetime">2010-06-28T17:27:19+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">5</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4925</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>For others wondering, the only way I've found to workaround this is to put this in environment.rb, after the initializer block

    class Array
      def to_json(*a)
        ActiveSupport::JSON.encode(self)
      end
    end

This also works for Sinatra/etc if you put it in the main application.rb file (or whatever yours is called).

-Nate</body>
      <body-html>&lt;div&gt;&lt;p&gt;For others wondering, the only way I've found to workaround this
is to put this in environment.rb, after the initializer block&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Array
  def to_json(*a)
    ActiveSupport::JSON.encode(self)
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This also works for Sinatra/etc if you put it in the main
application.rb file (or whatever yours is called).&lt;/p&gt;
&lt;p&gt;-Nate&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-08T23:18:41+01:00</created-at>
      <creator-id type="integer">15459</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">4925</number>
      <permalink>rails-3-to_json-incompatible-with-json-core-library</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>duplicate</state>
      <tag>activemodel activesupport patch &quot;patch json serialization&quot; &quot;rails 3.0.0.beta4&quot;</tag>
      <title>Rails 3 to_json incompatible with JSON core library</title>
      <updated-at type="datetime">2010-07-08T23:18:43+01:00</updated-at>
      <user-id type="integer">15459</user-id>
      <version type="integer">6</version>
      <user-name>Nate Wiger</user-name>
      <creator-name>Nate Wiger</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/4925</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
