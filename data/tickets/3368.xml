<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-02-17T06:48:10+00:00</created-at>
  <creator-id type="integer">39170</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3368</number>
  <permalink>allow-activeresource-to-use-integrationtests-for-requests</permalink>
  <priority type="integer">161188</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activeresource active_resource integration_test patch</tag>
  <title>Allow ActiveResource to use IntegrationTests for requests</title>
  <updated-at type="datetime">2011-02-17T06:48:10+00:00</updated-at>
  <user-id type="integer">89656</user-id>
  <version type="integer">4</version>
  <user-name>Rohit Arondekar</user-name>
  <creator-name>Steffen Bartsch</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3368</url>
  <priority-name nil="true"></priority-name>
  <original-body>HttpMock is great to test the client side of a REST API.  But if you're responsible for client and server side, it makes sense to do full end-to-end tests from your application's controllers to the client app.  Up to now, you'd need to set up a local server to end-to-end-test the ActiveResource requests from the client app against.  The supplied patch allows to use the integration test infrastructure to route the ActiveResource requests to the app's controllers.

Here is how you would use it
@@@ruby
require 'active_resource/integration_test_support'
class APIIntegrationTest &lt; ActionController::IntegrationTest
 test &quot;API requests work end-to-end&quot; do
   ActiveResource::Connection.with_integration_test_session(open_session) do
     result = APIClient.some_method_that_requires_api_access
     assert result
   end
 end
end
@@@

The patch is only a few lines and against 2-3-stable atm.</original-body>
  <latest-body>HttpMock is great to test the client side of a REST API.  But if you're responsible for client and server side, it makes sense to do full end-to-end tests from your application's controllers to the client app.  Up to now, you'd need to set up a local server to end-to-end-test the ActiveResource requests from the client app against.  The supplied patch allows to use the integration test infrastructure to route the ActiveResource requests to the app's controllers.

Here is how you would use it
@@@ruby
require 'active_resource/integration_test_support'
class APIIntegrationTest &lt; ActionController::IntegrationTest
 test &quot;API requests work end-to-end&quot; do
   ActiveResource::Connection.with_integration_test_session(open_session) do
     result = APIClient.some_method_that_requires_api_access
     assert result
   end
 end
end
@@@

The patch is only a few lines and against 2-3-stable atm.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;HttpMock is great to test the client side of a REST API. But if
you're responsible for client and server side, it makes sense to do
full end-to-end tests from your application's controllers to the
client app. Up to now, you'd need to set up a local server to
end-to-end-test the ActiveResource requests from the client app
against. The supplied patch allows to use the integration test
infrastructure to route the ActiveResource requests to the app's
controllers.&lt;/p&gt;
&lt;p&gt;Here is how you would use it&lt;br&gt;
@@@ruby require 'active_resource/integration_test_support'&lt;br&gt;
class APIIntegrationTest &amp;lt; ActionController::IntegrationTest&lt;br&gt;
test &quot;API requests work end-to-end&quot; do
ActiveResource::Connection.with_integration_test_session(open_session)
do&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt; result = APIClient.some_method_that_requires_api_access
 assert result&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end end&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;
The patch is only a few lines and against 2-3-stable atm.&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>HttpMock is great to test the client side of a REST API.  But if you're responsible for client and server side, it makes sense to do full end-to-end tests from your application's controllers to the client app.  Up to now, you'd need to set up a local server to end-to-end-test the ActiveResource requests from the client app against.  The supplied patch allows to use the integration test infrastructure to route the ActiveResource requests to the app's controllers.

Here is how you would use it

@@@ ruby
  require 'active_resource/integration_test_support'

  class APIIntegrationTest &lt; ActionController::IntegrationTest
    test &quot;API requests work end-to-end&quot; do
      ActiveResource::Connection.with_integration_test_session(open_session) do
        result = APIClient.some_method_that_requires_api_access
        assert result
      end
    end
  end
@@@

The patch is only a few lines and against 2-3-stable atm.</body>
      <body-html>&lt;div&gt;&lt;p&gt;HttpMock is great to test the client side of a REST API. But if
you're responsible for client and server side, it makes sense to do
full end-to-end tests from your application's controllers to the
client app. Up to now, you'd need to set up a local server to
end-to-end-test the ActiveResource requests from the client app
against. The supplied patch allows to use the integration test
infrastructure to route the ActiveResource requests to the app's
controllers.&lt;/p&gt;
&lt;p&gt;Here is how you would use it&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;  require 'active_resource/integration_test_support'

  class APIIntegrationTest &amp;lt; ActionController::IntegrationTest
    test &quot;API requests work end-to-end&quot; do
      ActiveResource::Connection.with_integration_test_session(open_session) do
        result = APIClient.some_method_that_requires_api_access
        assert result
      end
    end
  end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The patch is only a few lines and against 2-3-stable atm.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-12T14:52:37+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3368</number>
      <permalink>allow-activeresource-to-use-integrationtests-for-requests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activeresource active_resource integration_test patch</tag>
      <title>Allow ActiveResource to use IntegrationTests for requests</title>
      <updated-at type="datetime">2009-10-12T14:56:48+01:00</updated-at>
      <user-id type="integer">39170</user-id>
      <version type="integer">1</version>
      <user-name>Steffen Bartsch</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This looks pretty promising and would be extremely useful not to have to rely on HttpMock (which is limited).

But I'm not sure what the abilities/limitations of the above approach are.

Can you give some realistic examples of use?

Cheers and thanks,
Taryn
[who eventually figured out how to signup*]

* Hint: don't click 'sign-up' at top-right...</body>
      <body-html>&lt;div&gt;&lt;p&gt;This looks pretty promising and would be extremely useful not to
have to rely on HttpMock (which is limited).&lt;/p&gt;
&lt;p&gt;But I'm not sure what the abilities/limitations of the above
approach are.&lt;/p&gt;
&lt;p&gt;Can you give some realistic examples of use?&lt;/p&gt;
&lt;p&gt;Cheers and thanks,&lt;br&gt;
Taryn&lt;br&gt;
[who eventually figured out how to signup*]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hint: don't click 'sign-up' at top-right...&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-13T15:27:28+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3368</number>
      <permalink>allow-activeresource-to-use-integrationtests-for-requests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activeresource active_resource integration_test patch</tag>
      <title>Allow ActiveResource to use IntegrationTests for requests</title>
      <updated-at type="datetime">2009-10-13T15:27:30+01:00</updated-at>
      <user-id type="integer">72994</user-id>
      <version type="integer">2</version>
      <user-name>Taryn</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Taryn, I suppose that you are asking for limitations compared to full stack tests with ActiveResource querying a server instance.  I haven't stumbled over any, yet, so I can only think areas where issues might come from.  All that is abstracted away is Net::HTTP, so you won't test any HTTP-specific stuff, e.g. doing SSL-related requests.  Everything else depends on the IntegrationTest implementation of Rails: if a specific HTTP feature was missing there, you won't be able to use it in this approach.

For me it helped a lot in testing a synchronization client and server.  I'm not sure, how more relevant usage examples would look like.  My tests aren't doing more then the above example: setting up the environment on the server, calling client APIs inside the with_integration_test_session block and asserting the results.  What kind of example were you thinking of?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Taryn, I suppose that you are asking for limitations compared to
full stack tests with ActiveResource querying a server instance. I
haven't stumbled over any, yet, so I can only think areas where
issues might come from. All that is abstracted away is Net::HTTP,
so you won't test any HTTP-specific stuff, e.g. doing SSL-related
requests. Everything else depends on the IntegrationTest
implementation of Rails: if a specific HTTP feature was missing
there, you won't be able to use it in this approach.&lt;/p&gt;
&lt;p&gt;For me it helped a lot in testing a synchronization client and
server. I'm not sure, how more relevant usage examples would look
like. My tests aren't doing more then the above example: setting up
the environment on the server, calling client APIs inside the
with_integration_test_session block and asserting the results. What
kind of example were you thinking of?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-10-13T15:53:46+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3368</number>
      <permalink>allow-activeresource-to-use-integrationtests-for-requests</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activeresource active_resource integration_test patch</tag>
      <title>Allow ActiveResource to use IntegrationTests for requests</title>
      <updated-at type="datetime">2009-10-13T15:53:49+01:00</updated-at>
      <user-id type="integer">39170</user-id>
      <version type="integer">3</version>
      <user-name>Steffen Bartsch</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Marking ticket as stale. If this is still an issue please leave a comment with suggested changes, creating a patch with tests, rebasing an existing patch or just confirming the issue on a latest release or master/branches.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Marking ticket as stale. If this is still an issue please leave
a comment with suggested changes, creating a patch with tests,
rebasing an existing patch or just confirming the issue on a latest
release or master/branches.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-06T06:40:08+01:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3368</number>
      <permalink>allow-activeresource-to-use-integrationtests-for-requests</permalink>
      <priority type="integer">161188</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activeresource active_resource integration_test patch</tag>
      <title>Allow ActiveResource to use IntegrationTests for requests</title>
      <updated-at type="datetime">2010-10-06T06:40:11+01:00</updated-at>
      <user-id type="integer">89656</user-id>
      <version type="integer">4</version>
      <user-name>Rohit Arondekar</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3368</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Good &lt;a href=http://www.sale-puma.com&gt;Puma shoes sale&lt;/a&gt; information for &lt;a href=http://www.sale-puma.com&gt;Puma shoes&lt;/a&gt; fans: Yesterday, German sportswear maker Cheap Running Shoes purchased effectively lot of money Brands. The transaction entails the Cobra brand, too as linked inventory, intellectual house and endorsement contracts. It also helps make &lt;a href=http://www.sale-puma.com&gt;puma speed cat&lt;/a&gt; Shoes . They provide you with the utmost game and support all through the feet.You can happen around several types of basketball sneakers such as high-top,low-top and mid-top.The &lt;a href=http://www.sale-puma.com&gt;Puma shoes online&lt;/a&gt; and boots give you best ankle support will support want you to obtain steadiness.
As we konw,Trail &lt;a href=http://www.sale-puma.com&gt;Puma Drift Cat&lt;/a&gt; Shoes black, Trail &lt;a href=http://www.sale-puma.com&gt;Puma future cat&lt;/a&gt; ShoesWhite Black? 50 many years backshore are actually released within a great accomplishment. Trail Running Shoes speed cat shoes?go in add-on to King Pele into planet tournament finals, bottom tennis discs matchrs within pasture inhabit an vital area in hold out in Wimbledon Dun; Its working firms have premier manufacturers and major marketplace positions in distilled spirits, residence and security, and golf products. The reply go all through the &lt;a href=http://www.sale-puma.com&gt;Cheap puma shoes&lt;/a&gt; on sale-here you are able to happen around several distcoun.&lt;a href=http://www.sale-puma.com&gt;puma shoes on sale &lt;/a&gt;.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Good &lt;a href=&quot;http:&quot;&gt;Puma shoes sale information for &lt;a href=
&quot;http:&quot;&gt;Puma shoes fans: Yesterday, German sportswear maker Cheap
Running Shoes purchased effectively lot of money Brands. The
transaction entails the Cobra brand, too as linked inventory,
intellectual house and endorsement contracts. It also helps make
&lt;a href=&quot;http:&quot;&gt;puma speed cat Shoes . They provide you with the
utmost game and support all through the feet.You can happen around
several types of basketball sneakers such as high-top,low-top and
mid-top.The &lt;a href=&quot;http:&quot;&gt;Puma shoes online and boots give you
best ankle support will support want you to obtain steadiness.&lt;br&gt;
As we konw,Trail &lt;a href=&quot;http:&quot;&gt;Puma Drift Cat Shoes black, Trail
&lt;a href=&quot;http:&quot;&gt;Puma future cat ShoesWhite Black? 50 many years
backshore are actually released within a great accomplishment.
Trail Running Shoes speed cat shoes?go in add-on to King Pele into
planet tournament finals, bottom tennis discs matchrs within
pasture inhabit an vital area in hold out in Wimbledon Dun; Its
working firms have premier manufacturers and major marketplace
positions in distilled spirits, residence and security, and golf
products. The reply go all through the &lt;a href=&quot;http:&quot;&gt;Cheap puma
shoes on sale-here you are able to happen around several
distcoun.&lt;a href=&quot;http:&quot;&gt;puma shoes on sale .&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-17T06:03:44+00:00</created-at>
      <creator-id type="integer">39170</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3368</number>
      <permalink>allow-activeresource-to-use-integrationtests-for-requests</permalink>
      <priority type="integer">161188</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activeresource active_resource integration_test patch</tag>
      <title>Allow ActiveResource to use IntegrationTests for requests</title>
      <updated-at type="datetime">2011-02-17T06:48:10+00:00</updated-at>
      <user-id type="integer">137442</user-id>
      <version type="integer">5</version>
      <user-name>gfh</user-name>
      <creator-name>Steffen Bartsch</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3368</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>9eb0297e6f3ec91970780a0fd442f8a0f1887dcb</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-10-12T14:52:39+01:00</created-at>
      <filename>active_resource_integation_test_support.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">292842</id>
      <size type="integer">2849</size>
      <uploader-id type="integer">39170</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/292842/active_resource_integation_test_support.diff</url>
    </attachment>
  </attachments>
</ticket>
