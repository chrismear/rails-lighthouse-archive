<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15316</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-06-29T11:55:53+01:00</created-at>
  <creator-id type="integer">87326</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5002</number>
  <permalink>nested-objects-dont-deserialized-completely-rails-3-beta-4</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>&quot;activerecord rails3&quot; serialize yaml</tag>
  <title>Nested objects don't deserialize completely (Rails 3 beta 4)</title>
  <updated-at type="datetime">2010-07-01T09:46:02+01:00</updated-at>
  <user-id type="integer">87326</user-id>
  <version type="integer">6</version>
  <user-name>Stefan Siebel</user-name>
  <creator-name>Stefan Siebel</creator-name>
  <assigned-user-name>Aaron Patterson</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5002</url>
  <priority-name>Low</priority-name>
  <original-body>I tried to save a nested object structure with the ActiveRecord serialize method. These are the classes:

@@@ ruby
class PhotoStyle
  attr_accessor :image
 
  def initialize
    @image = StyleElement.new
  end
end
 
class StyleElement
  attr_accessor :selector, :style
 
  def initialize
    @selector = '*'
    @style = {}
  end
end

@@@

The model:
@@@ ruby
class Photo &lt; ActiveRecord::Base
  serialize :style, PhotoStyle
end
@@@
When I save a Photo instance, and load it again, the style looks like this:
@@@ ruby
p = Photo.last
p.style
=&gt; #&lt;photostyle :0xb70a906c @image=#&lt;YAML::Object:0xb72079a4 @ivars={&quot;selector&quot;=&gt;&quot;#theimage&quot;, &quot;style&quot;=&gt;{&quot;border&quot;=&gt;&quot;0&quot;, &quot;box-shadow&quot;=&gt;&quot;1px 3px 15px #555&quot;}}, @class=&quot;StyleElement&quot;&gt;}, @class=&quot;PhotoStyle&quot;&gt;&gt;
@@@
The StyleElement doesn't get deserialized.

I'm not sure if that's by design or a bug.

I was able to &quot;fix&quot; this by adding below code to an initializer of my rails3 beta 4 app:

@@@ ruby

YAML::Syck::Resolver.class_eval do
  def transfer_with_autoload(type, val)
    match = type.match(/object:(\w+(?:::\w+)*)/)
    match &amp;&amp; match[1].constantize
    transfer_without_autoload(type, val)
  end
  alias_method_chain :transfer, :autoload
end

@@@
After restarting the app deserialization works fine:
@@@ ruby
#&lt;PhotoStyle :0xb73dcb08 @image=#&lt;StyleElement:0xb73dd058 @selector=&quot;#theimage&quot;, @style={&quot;border&quot;=&gt;&quot;0&quot;, &quot;box-shadow&quot;=&gt;&quot;1px 3px 15px #555&quot;}&gt;&gt;
@@@</original-body>
  <latest-body>I tried to save a nested object structure with the ActiveRecord serialize method. These are the classes:

@@@ ruby
class PhotoStyle
  attr_accessor :image
 
  def initialize
    @image = StyleElement.new
  end
end
 
class StyleElement
  attr_accessor :selector, :style
 
  def initialize
    @selector = '*'
    @style = {}
  end
end

@@@

The model:
@@@ ruby
class Photo &lt; ActiveRecord::Base
  serialize :style, PhotoStyle
end
@@@
When I save a Photo instance, and load it again, the style looks like this:
@@@ ruby
p = Photo.last
p.style
=&gt; #&lt;photostyle :0xb70a906c @image=#&lt;YAML::Object:0xb72079a4 @ivars={&quot;selector&quot;=&gt;&quot;#theimage&quot;, &quot;style&quot;=&gt;{&quot;border&quot;=&gt;&quot;0&quot;, &quot;box-shadow&quot;=&gt;&quot;1px 3px 15px #555&quot;}}, @class=&quot;StyleElement&quot;&gt;}, @class=&quot;PhotoStyle&quot;&gt;&gt;
@@@
The StyleElement doesn't get deserialized.

I'm not sure if that's by design or a bug.

I was able to &quot;fix&quot; this by adding below code to an initializer of my rails3 beta 4 app:

@@@ ruby

YAML::Syck::Resolver.class_eval do
  def transfer_with_autoload(type, val)
    match = type.match(/object:(\w+(?:::\w+)*)/)
    match &amp;&amp; match[1].constantize
    transfer_without_autoload(type, val)
  end
  alias_method_chain :transfer, :autoload
end

@@@
After restarting the app deserialization works fine:
@@@ ruby
#&lt;PhotoStyle :0xb73dcb08 @image=#&lt;StyleElement:0xb73dd058 @selector=&quot;#theimage&quot;, @style={&quot;border&quot;=&gt;&quot;0&quot;, &quot;box-shadow&quot;=&gt;&quot;1px 3px 15px #555&quot;}&gt;&gt;
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I tried to save a nested object structure with the ActiveRecord
serialize method. These are the classes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class PhotoStyle
  attr_accessor :image
 
  def initialize
    @image = StyleElement.new
  end
end
 
class StyleElement
  attr_accessor :selector, :style
 
  def initialize
    @selector = '*'
    @style = {}
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The model:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Photo &amp;lt; ActiveRecord::Base
  serialize :style, PhotoStyle
end&lt;/code&gt;
&lt;/pre&gt;
When I save a Photo instance, and load it again, the style looks
like this:&lt;br&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;p = Photo.last
p.style
=&amp;gt; #&amp;lt;photostyle :0xb70a906c @image=#&amp;lt;YAML::Object:0xb72079a4 @ivars={&quot;selector&quot;=&amp;gt;&quot;#theimage&quot;, &quot;style&quot;=&amp;gt;{&quot;border&quot;=&amp;gt;&quot;0&quot;, &quot;box-shadow&quot;=&amp;gt;&quot;1px 3px 15px #555&quot;}}, @class=&quot;StyleElement&quot;&amp;gt;}, @class=&quot;PhotoStyle&quot;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
The StyleElement doesn't get deserialized.
&lt;p&gt;I'm not sure if that's by design or a bug.&lt;/p&gt;
&lt;p&gt;I was able to &quot;fix&quot; this by adding below code to an initializer
of my rails3 beta 4 app:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
YAML::Syck::Resolver.class_eval do
  def transfer_with_autoload(type, val)
    match = type.match(/object:(\w+(?:::\w+)*)/)
    match &amp;amp;&amp;amp; match[1].constantize
    transfer_without_autoload(type, val)
  end
  alias_method_chain :transfer, :autoload
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After restarting the app deserialization works fine:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;#&amp;lt;PhotoStyle :0xb73dcb08 @image=#&amp;lt;StyleElement:0xb73dd058 @selector=&quot;#theimage&quot;, @style={&quot;border&quot;=&amp;gt;&quot;0&quot;, &quot;box-shadow&quot;=&amp;gt;&quot;1px 3px 15px #555&quot;}&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I tried to save a nested object structure with the ActiveRecord serialize method. These are the classes:

@@@ ruby
class PhotoStyle
  attr_accessor :image
 
  def initialize
    @image = StyleElement.new
  end
end
 
class StyleElement
  attr_accessor :selector, :style
 
  def initialize
    @selector = '*'
    @style = {}
  end
end

@@@

The model:
@@@ ruby
class Photo &lt; ActiveRecord::Base
  serialize :style, PhotoStyle
end
@@@
When I save a Photo instance, and load it again, the style looks like this:
@@@ ruby
p = Photo.last
p.style
=&gt; #&lt;photostyle :0xb70a906c @image=#&lt;YAML::Object:0xb72079a4 @ivars={&quot;selector&quot;=&gt;&quot;#theimage&quot;, &quot;style&quot;=&gt;{&quot;border&quot;=&gt;&quot;0&quot;, &quot;box-shadow&quot;=&gt;&quot;1px 3px 15px #555&quot;}}, @class=&quot;StyleElement&quot;&gt;}, @class=&quot;PhotoStyle&quot;&gt;&gt;
@@@
The StyleElement doesn't get deserialized.

I'm not sure if that's by design or a bug.

I was able to &quot;fix&quot; this by adding below code to an initializer of my rails3 beta 4 app:

@@@ ruby

YAML::Syck::Resolver.class_eval do
  def transfer_with_autoload(type, val)
    match = type.match(/object:(\w+(?:::\w+)*)/)
    match &amp;&amp; match[1].constantize
    transfer_without_autoload(type, val)
  end
  alias_method_chain :transfer, :autoload
end

@@@
After restarting the app deserialization works fine:
@@@ ruby
#&lt;PhotoStyle :0xb73dcb08 @image=#&lt;StyleElement:0xb73dd058 @selector=&quot;#theimage&quot;, @style={&quot;border&quot;=&gt;&quot;0&quot;, &quot;box-shadow&quot;=&gt;&quot;1px 3px 15px #555&quot;}&gt;&gt;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;I tried to save a nested object structure with the ActiveRecord
serialize method. These are the classes:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class PhotoStyle
  attr_accessor :image
 
  def initialize
    @image = StyleElement.new
  end
end
 
class StyleElement
  attr_accessor :selector, :style
 
  def initialize
    @selector = '*'
    @style = {}
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The model:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Photo &amp;lt; ActiveRecord::Base
  serialize :style, PhotoStyle
end&lt;/code&gt;
&lt;/pre&gt;
When I save a Photo instance, and load it again, the style looks
like this:&lt;br&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;p = Photo.last
p.style
=&amp;gt; #&amp;lt;photostyle :0xb70a906c @image=#&amp;lt;YAML::Object:0xb72079a4 @ivars={&quot;selector&quot;=&amp;gt;&quot;#theimage&quot;, &quot;style&quot;=&amp;gt;{&quot;border&quot;=&amp;gt;&quot;0&quot;, &quot;box-shadow&quot;=&amp;gt;&quot;1px 3px 15px #555&quot;}}, @class=&quot;StyleElement&quot;&amp;gt;}, @class=&quot;PhotoStyle&quot;&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
The StyleElement doesn't get deserialized.
&lt;p&gt;I'm not sure if that's by design or a bug.&lt;/p&gt;
&lt;p&gt;I was able to &quot;fix&quot; this by adding below code to an initializer
of my rails3 beta 4 app:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
YAML::Syck::Resolver.class_eval do
  def transfer_with_autoload(type, val)
    match = type.match(/object:(\w+(?:::\w+)*)/)
    match &amp;amp;&amp;amp; match[1].constantize
    transfer_without_autoload(type, val)
  end
  alias_method_chain :transfer, :autoload
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;After restarting the app deserialization works fine:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;#&amp;lt;PhotoStyle :0xb73dcb08 @image=#&amp;lt;StyleElement:0xb73dd058 @selector=&quot;#theimage&quot;, @style={&quot;border&quot;=&amp;gt;&quot;0&quot;, &quot;box-shadow&quot;=&amp;gt;&quot;1px 3px 15px #555&quot;}&amp;gt;&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-29T11:55:53+01:00</created-at>
      <creator-id type="integer">87326</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5002</number>
      <permalink>nested-objects-dont-deserialized-completely-rails-3-beta-4</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; serialize</tag>
      <title>Nested objects don't deserialized completely (Rails 3 beta 4)</title>
      <updated-at type="datetime">2010-06-29T11:58:46+01:00</updated-at>
      <user-id type="integer">87326</user-id>
      <version type="integer">1</version>
      <user-name>Stefan Siebel</user-name>
      <creator-name>Stefan Siebel</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5002</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-29T12:00:52+01:00</created-at>
      <creator-id type="integer">87326</creator-id>
      <diffable-attributes type="yaml">--- 
:title: Nested objects don't deserialized completely (Rails 3 beta 4)
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5002</number>
      <permalink>nested-objects-dont-deserialized-completely-rails-3-beta-4</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; serialize</tag>
      <title>Nested objects don't deserialize completely (Rails 3 beta 4)</title>
      <updated-at type="datetime">2010-06-29T12:05:05+01:00</updated-at>
      <user-id type="integer">87326</user-id>
      <version type="integer">2</version>
      <user-name>Stefan Siebel</user-name>
      <creator-name>Stefan Siebel</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5002</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Could you possibly upload an app that has this error (and a test)?  I'd like to take a look.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Could you possibly upload an app that has this error (and a
test)? I'd like to take a look.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-30T00:45:38+01:00</created-at>
      <creator-id type="integer">87326</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5002</number>
      <permalink>nested-objects-dont-deserialized-completely-rails-3-beta-4</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; serialize</tag>
      <title>Nested objects don't deserialize completely (Rails 3 beta 4)</title>
      <updated-at type="datetime">2010-06-30T00:45:45+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">3</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Stefan Siebel</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5002</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hi Aaron,

cool, thank you! Please see attached file. It looks like the issue is a little bit weird. I tried to reproduce it with a test, but apparently the test works fine.

That's how you can reproduce the issue:

1) Create a new user object through the UI (localhost:3000/users)
2) load the rails console, type in:

@@@ ruby
u = User.last
u.preferences.test.kind_of? Something
=&gt; false
@@@

Another to reproduce it, only with rails console, without web UI:

@@@ ruby

a = User.new
a.save

b = User.last
b.preferences.test.kind_of? Something
=&gt; true

reload!

b = User.last
b.preferences.test.kind_of? Something
=&gt; false
@@@

Does that help?

-Stefan</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hi Aaron,&lt;/p&gt;
&lt;p&gt;cool, thank you! Please see attached file. It looks like the
issue is a little bit weird. I tried to reproduce it with a test,
but apparently the test works fine.&lt;/p&gt;
&lt;p&gt;That's how you can reproduce the issue:&lt;/p&gt;
&lt;p&gt;1) Create a new user object through the UI
(localhost:3000/users)&lt;br&gt;
2) load the rails console, type in:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;u = User.last
u.preferences.test.kind_of? Something
=&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Another to reproduce it, only with rails console, without web
UI:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
a = User.new
a.save

b = User.last
b.preferences.test.kind_of? Something
=&amp;gt; true

reload!

b = User.last
b.preferences.test.kind_of? Something
=&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Does that help?&lt;/p&gt;
&lt;p&gt;-Stefan&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-06-30T21:01:05+01:00</created-at>
      <creator-id type="integer">87326</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5002</number>
      <permalink>nested-objects-dont-deserialized-completely-rails-3-beta-4</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3&quot; serialize</tag>
      <title>Nested objects don't deserialize completely (Rails 3 beta 4)</title>
      <updated-at type="datetime">2010-06-30T21:01:27+01:00</updated-at>
      <user-id type="integer">87326</user-id>
      <version type="integer">4</version>
      <user-name>Stefan Siebel</user-name>
      <creator-name>Stefan Siebel</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5002</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Hey Stefan!

Thanks for the sample application!  I was indeed able to reproduce the problem, but unfortunately the problem isn't from Rails.  I'll show you the fix for your code, then go in to detail about the problem.

Just add this to the top of your photo_style.rb file:

@@@ ruby
require 'style_element'
@@@

The problem is that your class isn't defined at the time the YAML gets deserialized.  You've taught Rails how to load the top level constant when you made the `serialize :preferences, UserPreferences` call.  Unfortunately, it doesn't know how to load the other class.  We can reproduce this behavior with a Ruby program like this:

@@@ ruby
require 'yaml'

class UserPreferences
end

p YAML.load DATA.read

__END__
--- !ruby/object:UserPreferences 
test: !ruby/object:Something 
  a: 1
  b: 2
  c: 3
@@@

You'll note that the output of this shows the same problem that the rails code is experiencing.  If you were using Marshal to serialize and deserialize these objects, this case would actually result in an exception being raised.  The reason an exception is raised with marshal is because it doesn't know the definition of that object, so it can't properly deserialize it.

I believe this difference between Marshal and YAML to be a bug.  The newer YAML parser in ruby 1.9 (psych) will raise an exception in this case, matching the behavior of Marshal.  For example:

@@@ ruby
require 'yaml'

YAML::ENGINE.yamler = 'psych'

class UserPreferences
end

p YAML.load DATA.read

__END__
--- !ruby/object:UserPreferences 
test: !ruby/object:Something 
  a: 1
  b: 2
  c: 3
@@@

If you run the above code using Ruby 1.9.2 you'll see the exception raised.  That exception can give rails a chance to load the missing constant.

I hope this explanation helps!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Stefan!&lt;/p&gt;
&lt;p&gt;Thanks for the sample application! I was indeed able to
reproduce the problem, but unfortunately the problem isn't from
Rails. I'll show you the fix for your code, then go in to detail
about the problem.&lt;/p&gt;
&lt;p&gt;Just add this to the top of your photo_style.rb file:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'style_element'&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The problem is that your class isn't defined at the time the
YAML gets deserialized. You've taught Rails how to load the top
level constant when you made the &lt;code&gt;serialize :preferences,
UserPreferences&lt;/code&gt; call. Unfortunately, it doesn't know how to
load the other class. We can reproduce this behavior with a Ruby
program like this:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'yaml'

class UserPreferences
end

p YAML.load DATA.read

__END__
--- !ruby/object:UserPreferences 
test: !ruby/object:Something 
  a: 1
  b: 2
  c: 3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You'll note that the output of this shows the same problem that
the rails code is experiencing. If you were using Marshal to
serialize and deserialize these objects, this case would actually
result in an exception being raised. The reason an exception is
raised with marshal is because it doesn't know the definition of
that object, so it can't properly deserialize it.&lt;/p&gt;
&lt;p&gt;I believe this difference between Marshal and YAML to be a bug.
The newer YAML parser in ruby 1.9 (psych) will raise an exception
in this case, matching the behavior of Marshal. For example:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;require 'yaml'

YAML::ENGINE.yamler = 'psych'

class UserPreferences
end

p YAML.load DATA.read

__END__
--- !ruby/object:UserPreferences 
test: !ruby/object:Something 
  a: 1
  b: 2
  c: 3&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If you run the above code using Ruby 1.9.2 you'll see the
exception raised. That exception can give rails a chance to load
the missing constant.&lt;/p&gt;
&lt;p&gt;I hope this explanation helps!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-06-30T23:50:16+01:00</created-at>
      <creator-id type="integer">87326</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord rails3\&quot; serialize&quot;
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5002</number>
      <permalink>nested-objects-dont-deserialized-completely-rails-3-beta-4</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;activerecord rails3&quot; serialize yaml</tag>
      <title>Nested objects don't deserialize completely (Rails 3 beta 4)</title>
      <updated-at type="datetime">2010-06-30T23:50:21+01:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">5</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Stefan Siebel</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5002</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15316</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Excellent Aaron! Thank you!

I already sort of expected it's something I'm doing wrong since I'm still pretty new to Ruby / Rails :-)

Thanks again, I really appreciate!

-Stefan.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Excellent Aaron! Thank you!&lt;/p&gt;
&lt;p&gt;I already sort of expected it's something I'm doing wrong since
I'm still pretty new to Ruby / Rails :-)&lt;/p&gt;
&lt;p&gt;Thanks again, I really appreciate!&lt;/p&gt;
&lt;p&gt;-Stefan.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-01T09:45:55+01:00</created-at>
      <creator-id type="integer">87326</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5002</number>
      <permalink>nested-objects-dont-deserialized-completely-rails-3-beta-4</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>&quot;activerecord rails3&quot; serialize yaml</tag>
      <title>Nested objects don't deserialize completely (Rails 3 beta 4)</title>
      <updated-at type="datetime">2010-07-01T09:46:02+01:00</updated-at>
      <user-id type="integer">87326</user-id>
      <version type="integer">6</version>
      <user-name>Stefan Siebel</user-name>
      <creator-name>Stefan Siebel</creator-name>
      <assigned-user-name>Aaron Patterson</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5002</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>5cc72a042e9e9391e8da6ca168e8bb5ee3b4aa5d</code>
      <content-type>application/x-gzip</content-type>
      <created-at type="datetime">2010-06-30T21:01:06+01:00</created-at>
      <filename>exampleapptar.gz</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">582409</id>
      <size type="integer">88126</size>
      <uploader-id type="integer">87326</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/582409/exampleapptar.gz</url>
    </attachment>
  </attachments>
</ticket>
