diff --git a/activesupport/lib/active_support/cache.rb b/activesupport/lib/active_support/cache.rb
index e62cec6..63836d1 100644
--- a/activesupport/lib/active_support/cache.rb
+++ b/activesupport/lib/active_support/cache.rb
@@ -115,8 +115,8 @@ module ActiveSupport
       #
       # For example, MemCacheStore's #write method supports the +:expires_in+
       # option, which tells the memcached server to automatically expire the
-      # cache item after a certain period. We can use this option with #fetch
-      # too:
+      # cache item after a certain period. This options is also supported by
+      # FileStore's #read method. We can use this option with #fetch too:
       #
       #   cache = ActiveSupport::Cache::MemCacheStore.new
       #   cache.fetch("foo", :force => true, :expires_in => 5.seconds) do
@@ -155,6 +155,10 @@ module ActiveSupport
       # You may also specify additional options via the +options+ argument.
       # The specific cache store implementation will decide what to do with
       # +options+.
+      #
+      # For example, FileStore supports the +:expires_in+ option, which
+      # makes the method return nil for cache items older than the specified
+      # period.
       def read(key, options = nil)
         log("read", key, options)
       end
@@ -209,6 +213,10 @@ module ActiveSupport
       end
 
       private
+        def expires_in(options)
+          (options && options[:expires_in]) || 0
+        end
+
         def log(operation, key, options)
           logger.debug("Cache #{operation}: #{key}#{options ? " (#{options.inspect})" : ""}") if logger && !@silence && !@logger_off
         end
diff --git a/activesupport/lib/active_support/cache/file_store.rb b/activesupport/lib/active_support/cache/file_store.rb
index 7f34cb5..8d0d1ac 100644
--- a/activesupport/lib/active_support/cache/file_store.rb
+++ b/activesupport/lib/active_support/cache/file_store.rb
@@ -8,11 +8,25 @@ module ActiveSupport
         @cache_path = cache_path
       end
 
+      # Reads a value from the cache.
+      #
+      # Possible options:
+      # - +:expires_in+ - the number of seconds that this value may stay in
+      #   the cache.
       def read(name, options = nil)
         super
-        File.open(real_file_path(name), 'rb') { |f| Marshal.load(f) } rescue nil
+        file_name = real_file_path(name)
+        # It is much faster than using begin/rescue with File.mtime
+        # with the current MRI (factor of 9)
+        return nil unless File.exist?(file_name)
+        if (expires = expires_in(options)) > 0 and
+            (Time.now - File.mtime(file_name)) > expires
+          return nil
+        end
+        File.open(file_name, 'rb') { |f| Marshal.load(f) } rescue nil
       end
 
+      # Writes a value to the cache.
       def write(name, value, options = nil)
         super
         ensure_cache_path(File.dirname(real_file_path(name)))
diff --git a/activesupport/lib/active_support/cache/mem_cache_store.rb b/activesupport/lib/active_support/cache/mem_cache_store.rb
index f9a7fb1..95b1606 100644
--- a/activesupport/lib/active_support/cache/mem_cache_store.rb
+++ b/activesupport/lib/active_support/cache/mem_cache_store.rb
@@ -115,10 +115,6 @@ module ActiveSupport
       end
 
       private
-        def expires_in(options)
-          (options && options[:expires_in]) || 0
-        end
-
         def raw?(options)
           options && options[:raw]
         end
diff --git a/activesupport/test/caching_test.rb b/activesupport/test/caching_test.rb
index e7dac4c..aa388ae 100644
--- a/activesupport/test/caching_test.rb
+++ b/activesupport/test/caching_test.rb
@@ -130,6 +130,16 @@ class FileStoreTest < Test::Unit::TestCase
   end
 
   include CacheStoreBehavior
+
+  def test_expires_in
+    @cache.write('foo', 'bar')
+    cache_read = lambda { @cache.read('foo', :expires_in => 2) }
+    assert_equal 'bar', cache_read.call
+    sleep(1)
+    assert_equal 'bar', cache_read.call
+    sleep(1)
+    assert_nil cache_read.call
+  end
 end
 
 class MemoryStoreTest < Test::Unit::TestCase
