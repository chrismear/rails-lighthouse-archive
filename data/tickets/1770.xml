<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-16T06:58:59+00:00</created-at>
  <creator-id type="integer">41751</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">1770</number>
  <permalink>backtracking-association-proxy-chained-methods</permalink>
  <priority type="integer">1074</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord associations association_proxy</tag>
  <title>Backtracking association proxy chained methods</title>
  <updated-at type="datetime">2011-02-02T17:46:40+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">8</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Jonathan Garvin</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Bear with me, this is hard to explain, but I have a failing test case attached that demonstrates the problem (hopefully clearly enough)

When chaining association proxy methods together in such a way that you scope to a has_many, then follow a different belongs_to, and they turn around and come back on the has_many on the other side, you'll get different results depending on if you wrap part of of the query in a class method.

So, in the attached test, I start at authors(:david).  David has_many categorizations. Each categorization belongs_to a category. And each category has many categorizations, some of which do not belong to David. I'm trying to find which of David's categorizations have siblings that may not belong to David.

The first way I check is to call...
count_without_class_method = authors(:david).categorizations.find(:all).select {|cz| cz.category.categorizations.size &gt; 1 }.size
 (The find(:all) is unnecessary, but included to make both samples as identical as possible)


For the second sample, I put everything everthing from find(:all) up to .size into a class method on Categorization, so that I can call...
count_with_class_method = authors(:david).categorizations.that_have_siblings_with_common_category_parent.size

In theory, these two lines are both doing the exact same thing and should return the same result.  However, the last line in the test fails because count_without_class_method != count_with_class_method</original-body>
  <latest-body>Bear with me, this is hard to explain, but I have a failing test case attached that demonstrates the problem (hopefully clearly enough)

When chaining association proxy methods together in such a way that you scope to a has_many, then follow a different belongs_to, and they turn around and come back on the has_many on the other side, you'll get different results depending on if you wrap part of of the query in a class method.

So, in the attached test, I start at authors(:david).  David has_many categorizations. Each categorization belongs_to a category. And each category has many categorizations, some of which do not belong to David. I'm trying to find which of David's categorizations have siblings that may not belong to David.

The first way I check is to call...
count_without_class_method = authors(:david).categorizations.find(:all).select {|cz| cz.category.categorizations.size &gt; 1 }.size
 (The find(:all) is unnecessary, but included to make both samples as identical as possible)


For the second sample, I put everything everthing from find(:all) up to .size into a class method on Categorization, so that I can call...
count_with_class_method = authors(:david).categorizations.that_have_siblings_with_common_category_parent.size

In theory, these two lines are both doing the exact same thing and should return the same result.  However, the last line in the test fails because count_without_class_method != count_with_class_method</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Bear with me, this is hard to explain, but I have a failing test
case attached that demonstrates the problem (hopefully clearly
enough)&lt;/p&gt;
&lt;p&gt;When chaining association proxy methods together in such a way
that you scope to a has_many, then follow a different belongs_to,
and they turn around and come back on the has_many on the other
side, you'll get different results depending on if you wrap part of
of the query in a class method.&lt;/p&gt;
&lt;p&gt;So, in the attached test, I start at authors(:david). David
has_many categorizations. Each categorization belongs_to a
category. And each category has many categorizations, some of which
do not belong to David. I'm trying to find which of David's
categorizations have siblings that may not belong to David.&lt;/p&gt;
&lt;p&gt;The first way I check is to call... count_without_class_method =
authors(:david).categorizations.find(:all).select {|cz|
cz.category.categorizations.size &amp;gt; 1 }.size (The find(:all) is
unnecessary, but included to make both samples as identical as
possible)&lt;/p&gt;
&lt;p&gt;For the second sample, I put everything everthing from
find(:all) up to .size into a class method on Categorization, so
that I can call... count_with_class_method =
authors(:david).categorizations.that_have_siblings_with_common_category_parent.size&lt;/p&gt;
&lt;p&gt;In theory, these two lines are both doing the exact same thing
and should return the same result. However, the last line in the
test fails because count_without_class_method !=
count_with_class_method&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Bear with me, this is hard to explain, but I have a failing test case attached that demonstrates the problem (hopefully clearly enough)

When chaining association proxy methods together in such a way that you scope to a has_many, then follow a different belongs_to, and they turn around and come back on the has_many on the other side, you'll get different results depending on if you wrap part of of the query in a class method.

So, in the attached test, I start at authors(:david).  David has_many categorizations. Each categorization belongs_to a category. And each category has many categorizations, some of which do not belong to David. I'm trying to find which of David's categorizations have siblings that may not belong to David.

The first way I check is to call...
count_without_class_method = authors(:david).categorizations.find(:all).select {|cz| cz.category.categorizations.size &gt; 1 }.size
 (The find(:all) is unnecessary, but included to make both samples as identical as possible)


For the second sample, I put everything everthing from find(:all) up to .size into a class method on Categorization, so that I can call...
count_with_class_method = authors(:david).categorizations.that_have_siblings_with_common_category_parent.size

In theory, these two lines are both doing the exact same thing and should return the same result.  However, the last line in the test fails because count_without_class_method != count_with_class_method</body>
      <body-html>&lt;div&gt;&lt;p&gt;Bear with me, this is hard to explain, but I have a failing test
case attached that demonstrates the problem (hopefully clearly
enough)&lt;/p&gt;
&lt;p&gt;When chaining association proxy methods together in such a way
that you scope to a has_many, then follow a different belongs_to,
and they turn around and come back on the has_many on the other
side, you'll get different results depending on if you wrap part of
of the query in a class method.&lt;/p&gt;
&lt;p&gt;So, in the attached test, I start at authors(:david). David
has_many categorizations. Each categorization belongs_to a
category. And each category has many categorizations, some of which
do not belong to David. I'm trying to find which of David's
categorizations have siblings that may not belong to David.&lt;/p&gt;
&lt;p&gt;The first way I check is to call... count_without_class_method =
authors(:david).categorizations.find(:all).select {|cz|
cz.category.categorizations.size &amp;gt; 1 }.size (The find(:all) is
unnecessary, but included to make both samples as identical as
possible)&lt;/p&gt;
&lt;p&gt;For the second sample, I put everything everthing from
find(:all) up to .size into a class method on Categorization, so
that I can call... count_with_class_method =
authors(:david).categorizations.that_have_siblings_with_common_category_parent.size&lt;/p&gt;
&lt;p&gt;In theory, these two lines are both doing the exact same thing
and should return the same result. However, the last line in the
test fails because count_without_class_method !=
count_with_class_method&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-16T06:58:59+00:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2009-01-16T06:59:02+00:00</updated-at>
      <user-id type="integer">41751</user-id>
      <version type="integer">1</version>
      <user-name>Jonathan Garvin</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Maybe you'd like to test if the patch in #1960 fixes this problem?
Haven't had the time to test your diff there.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Maybe you'd like to test if the patch in &lt;a href=&quot;/projects/8994/tickets/1960&quot; title=&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt; fixes
this problem? Haven't had the time to test your diff there.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-17T18:37:46+00:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2009-02-17T18:37:50+00:00</updated-at>
      <user-id type="integer">9698</user-id>
      <version type="integer">2</version>
      <user-name>Diego Algorta</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks for the suggestion Diego, but when I apply your patch, my test attached above still fails, and a new test fails ( test_named_scope(DefaultScopingTest) ).

I don't think the issue I'm dealing with has is specific to named scopes but instead to associations proxies in general.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks for the suggestion Diego, but when I apply your patch, my
test attached above still fails, and a new test fails (
test_named_scope(DefaultScopingTest) ).&lt;/p&gt;
&lt;p&gt;I don't think the issue I'm dealing with has is specific to
named scopes but instead to associations proxies in general.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-18T02:30:12+00:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2009-02-18T02:30:14+00:00</updated-at>
      <user-id type="integer">41751</user-id>
      <version type="integer">3</version>
      <user-name>Jonathan Garvin</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>In fact, the same problem occurs with named scopes and class methods, but it's the basically the inverse of #1960 (I thought they were dups at first, sorry for the confusion). Class methods called through association proxies and named scopes are both evaluated within the context of a with_scope. Adding

@@@ ruby
named_scope :having_author_id, lambda { |author_id| {:conditions =&gt; ['`categorizations`.author_id = ?', author_id]} }
@@@

to Categorization and then doing 

@@@ ruby
count_without_class_method = authors(:david).categorizations.find(:all).select {|cz| cz.category.categorizations.size &gt; 1 }.size
    count_with_class_method = Categorization.having_author_id(authors(:david).id).that_have_siblings_with_common_category_parent.size
    assert_equal(count_without_class_method,count_with_class_method)
@@@

gives the same result as accessing it through the association_collection.

Either way, to get the result you want, just put the `cz.category.categorizations.size` within an exclusive scope:

@@@ ruby
def that_have_siblings_with_common_category_parent
  find(:all).select {|cz| with_exclusive_scope {cz.category.categorizations.size &gt; 1} }
end

With this, the test passes.</body>
      <body-html>&lt;div&gt;&lt;p&gt;In fact, the same problem occurs with named scopes and class
methods, but it's the basically the inverse of &lt;a href=&quot;/projects/8994/tickets/1960&quot; title=&quot;Ticket #1960&quot;&gt;#1960&lt;/a&gt; (I
thought they were dups at first, sorry for the confusion). Class
methods called through association proxies and named scopes are
both evaluated within the context of a with_scope. Adding&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
named_scope :having_author_id, lambda { |author_id| {:conditions =&amp;gt; ['`categorizations`.author_id = ?', author_id]} }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to Categorization and then doing&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
count_without_class_method = authors(:david).categorizations.find(:all).select {|cz| cz.category.categorizations.size &amp;gt; 1 }.size
    count_with_class_method = Categorization.having_author_id(authors(:david).id).that_have_siblings_with_common_category_parent.size
    assert_equal(count_without_class_method,count_with_class_method)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;gives the same result as accessing it through the
association_collection.&lt;/p&gt;
&lt;p&gt;Either way, to get the result you want, just put the
&lt;code&gt;cz.category.categorizations.size&lt;/code&gt; within an exclusive
scope:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
def that_have_siblings_with_common_category_parent
  find(:all).select {|cz| with_exclusive_scope {cz.category.categorizations.size &amp;gt; 1} }
end

With this, the test passes.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-18T07:00:18+00:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2009-02-18T07:00:21+00:00</updated-at>
      <user-id type="integer">23602</user-id>
      <version type="integer">4</version>
      <user-name>Ryan Berdeen</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Thanks Ryan, that's good to know.  But I wonder if that should be considered the &quot;correct&quot; way to do that, or is that a hack/workaround/band-aid?  I'm inclined to think it's a hack and we'd be better off solving the underlying problem (though, I don't know what that would be, yet). However, I'd rather be proven wrong before I waste any time trying to &quot;fix&quot; something that nobody else wants fixed. ;-)</body>
      <body-html>&lt;div&gt;&lt;p&gt;Thanks Ryan, that's good to know. But I wonder if that should be
considered the &quot;correct&quot; way to do that, or is that a
hack/workaround/band-aid? I'm inclined to think it's a hack and
we'd be better off solving the underlying problem (though, I don't
know what that would be, yet). However, I'd rather be proven wrong
before I waste any time trying to &quot;fix&quot; something that nobody else
wants fixed. ;-)&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-02-18T07:46:41+00:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2009-02-18T07:46:44+00:00</updated-at>
      <user-id type="integer">41751</user-id>
      <version type="integer">5</version>
      <user-name>Jonathan Garvin</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:38+01:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2010-05-04T18:48:38+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">6</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:42:26+00:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">1074</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2011-02-02T17:46:40+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">7</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:42:28+00:00</created-at>
      <creator-id type="integer">41751</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">1770</number>
      <permalink>backtracking-association-proxy-chained-methods</permalink>
      <priority type="integer">1074</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord associations association_proxy</tag>
      <title>Backtracking association proxy chained methods</title>
      <updated-at type="datetime">2011-02-02T17:45:28+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jonathan Garvin</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1770</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>7dd76466a87e9acc7dc099591d86ae37428468b7</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-16T06:58:59+00:00</created-at>
      <filename>backtracking.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">79011</id>
      <size type="integer">1617</size>
      <uploader-id type="integer">41751</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/79011/backtracking.diff</url>
    </attachment>
  </attachments>
</ticket>
