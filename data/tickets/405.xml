<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">15783</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-06-13T11:10:40+01:00</created-at>
  <creator-id type="integer">23283</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">405</number>
  <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
  <priority type="integer">18645</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>2.0-stable activesupport</tag>
  <title>next_week does not go to next week</title>
  <updated-at type="datetime">2008-06-16T11:41:30+01:00</updated-at>
  <user-id type="integer">23283</user-id>
  <version type="integer">7</version>
  <user-name>Laurent Farcy</user-name>
  <creator-name>Laurent Farcy</creator-name>
  <assigned-user-name>Geoff Buesing</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
  <priority-name nil="true"></priority-name>
  <original-body>Migrating from Rails 1.2.6 to 2.0.2, I found out an issue in a method that uses date calculations to start 3 months ago from now and stop today passing over every week. With 2.0.2, it never ended while it was running fine with 1.2.6.

After debugging the code, I realized next_week helper method does not go to next week on certain circumstances. Here's an example of the bug.

@@@ ruby
&gt;&gt; d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt; d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
@@@

If you do not calculate the date to start from with other helper methods, the bug is gone as illustrated below

@@@ ruby
&gt;&gt; d = DateTime.parse(&quot;Mon Mar 10 00:00:00 +0100 2008&quot;)
=&gt; Mon, 10 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 17 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 24 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 31 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 07 Apr 2008 00:00:00 +0100
@@@

I was able to get the bug in another form by using tomorrow helper.

@@@ ruby
&gt;&gt;  d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt; d.tomorrow
=&gt; Tue Mar 11 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 11 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 12 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 13 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 14 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 15 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 16 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 18 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 19 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 20 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 21 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 22 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 23 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 25 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 26 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 27 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 28 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 29 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 30 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 30 23:00:00 +0200 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 31 23:00:00 +0200 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Apr 01 23:00:00 +0200 2008
@@@

From these logs, I understand the root cause of all this is how date calculations (badly) handle savings time (transition from winter time to summer time). I had a look in the code but was unable to determine how to correctly patch it.

I was only able to reproduce this bug on Mac OS X 10.4, not Linux (Ubuntu) despite the fact that both computers were configured with the CEST timezone.</original-body>
  <latest-body>Migrating from Rails 1.2.6 to 2.0.2, I found out an issue in a method that uses date calculations to start 3 months ago from now and stop today passing over every week. With 2.0.2, it never ended while it was running fine with 1.2.6.

After debugging the code, I realized next_week helper method does not go to next week on certain circumstances. Here's an example of the bug.

@@@ ruby
&gt;&gt; d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt; d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
@@@

If you do not calculate the date to start from with other helper methods, the bug is gone as illustrated below

@@@ ruby
&gt;&gt; d = DateTime.parse(&quot;Mon Mar 10 00:00:00 +0100 2008&quot;)
=&gt; Mon, 10 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 17 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 24 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 31 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 07 Apr 2008 00:00:00 +0100
@@@

I was able to get the bug in another form by using tomorrow helper.

@@@ ruby
&gt;&gt;  d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt; d.tomorrow
=&gt; Tue Mar 11 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 11 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 12 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 13 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 14 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 15 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 16 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 18 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 19 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 20 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 21 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 22 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 23 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 25 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 26 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 27 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 28 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 29 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 30 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 30 23:00:00 +0200 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 31 23:00:00 +0200 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Apr 01 23:00:00 +0200 2008
@@@

From these logs, I understand the root cause of all this is how date calculations (badly) handle savings time (transition from winter time to summer time). I had a look in the code but was unable to determine how to correctly patch it.

I was only able to reproduce this bug on Mac OS X 10.4, not Linux (Ubuntu) despite the fact that both computers were configured with the CEST timezone.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
Migrating from Rails 1.2.6 to 2.0.2, I found out an issue in a method that uses date calculations to start 3 months ago from now and stop today passing over every week. With 2.0.2, it never ended while it was running fine with 1.2.6.
&lt;/p&gt;&lt;p&gt;
After debugging the code, I realized next_week helper method does not go to next week on certain circumstances. Here's an example of the bug.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; d = 3.months.ago.monday
=&amp;gt; Mon Mar 10 00:00:00 +0100 2008
&amp;gt;&amp;gt; d.next_week
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d.next_week
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
If you do not calculate the date to start from with other helper methods, the bug is gone as illustrated below
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; d = DateTime.parse(&amp;quot;Mon Mar 10 00:00:00 +0100 2008&amp;quot;)
=&amp;gt; Mon, 10 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 17 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 24 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 31 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 07 Apr 2008 00:00:00 +0100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I was able to get the bug in another form by using tomorrow helper.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt;  d = 3.months.ago.monday
=&amp;gt; Mon Mar 10 00:00:00 +0100 2008
&amp;gt;&amp;gt; d.tomorrow
=&amp;gt; Tue Mar 11 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Mar 11 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Wed Mar 12 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Thu Mar 13 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Fri Mar 14 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sat Mar 15 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 16 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Mar 18 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Wed Mar 19 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Thu Mar 20 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Fri Mar 21 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sat Mar 22 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 23 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Mar 25 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Wed Mar 26 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Thu Mar 27 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Fri Mar 28 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sat Mar 29 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 30 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 30 23:00:00 +0200 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Mon Mar 31 23:00:00 +0200 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Apr 01 23:00:00 +0200 2008&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
From these logs, I understand the root cause of all this is how date calculations (badly) handle savings time (transition from winter time to summer time). I had a look in the code but was unable to determine how to correctly patch it.
&lt;/p&gt;&lt;p&gt;
I was only able to reproduce this bug on Mac OS X 10.4, not Linux (Ubuntu) despite the fact that both computers were configured with the CEST timezone.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Migrating from Rails 1.2.6 to 2.0.2, I found out an issue in a method that uses date calculations to start 3 months ago from now and stop today passing over every week. With 2.0.2, it never ended while it was running fine with 1.2.6.

After debugging the code, I realized next_week helper method does not go to next week on certain circumstances. Here's an example of the bug.

@@@ ruby
&gt;&gt; d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt; d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
@@@

If you do not calculate the date to start from with other helper methods, the bug is gone as illustrated below

@@@ ruby
&gt;&gt; d = DateTime.parse(&quot;Mon Mar 10 00:00:00 +0100 2008&quot;)
=&gt; Mon, 10 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 17 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 24 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 31 Mar 2008 00:00:00 +0100
&gt;&gt; d = d.next_week
=&gt; Mon, 07 Apr 2008 00:00:00 +0100
@@@

I was able to get the bug in another form by using tomorrow helper.

@@@ ruby
&gt;&gt;  d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt; d.tomorrow
=&gt; Tue Mar 11 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 11 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 12 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 13 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 14 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 15 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 16 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 18 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 19 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 20 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 21 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 22 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 23 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Mar 25 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Wed Mar 26 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Thu Mar 27 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Fri Mar 28 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sat Mar 29 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 30 00:00:00 +0100 2008
&gt;&gt; d = d.tomorrow
=&gt; Sun Mar 30 23:00:00 +0200 2008
&gt;&gt; d = d.tomorrow
=&gt; Mon Mar 31 23:00:00 +0200 2008
&gt;&gt; d = d.tomorrow
=&gt; Tue Apr 01 23:00:00 +0200 2008
@@@

From these logs, I understand the root cause of all this is how date calculations (badly) handle savings time (transition from winter time to summer time). I had a look in the code but was unable to determine how to correctly patch it.

I was only able to reproduce this bug on Mac OS X 10.4, not Linux (Ubuntu) despite the fact that both computers were configured with the CEST timezone.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Migrating from Rails 1.2.6 to 2.0.2, I found out an issue in a method that uses date calculations to start 3 months ago from now and stop today passing over every week. With 2.0.2, it never ended while it was running fine with 1.2.6.
&lt;/p&gt;&lt;p&gt;
After debugging the code, I realized next_week helper method does not go to next week on certain circumstances. Here's an example of the bug.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; d = 3.months.ago.monday
=&amp;gt; Mon Mar 10 00:00:00 +0100 2008
&amp;gt;&amp;gt; d.next_week
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d.next_week
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
If you do not calculate the date to start from with other helper methods, the bug is gone as illustrated below
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; d = DateTime.parse(&amp;quot;Mon Mar 10 00:00:00 +0100 2008&amp;quot;)
=&amp;gt; Mon, 10 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 17 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 24 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 31 Mar 2008 00:00:00 +0100
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 07 Apr 2008 00:00:00 +0100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
I was able to get the bug in another form by using tomorrow helper.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt;  d = 3.months.ago.monday
=&amp;gt; Mon Mar 10 00:00:00 +0100 2008
&amp;gt;&amp;gt; d.tomorrow
=&amp;gt; Tue Mar 11 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Mar 11 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Wed Mar 12 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Thu Mar 13 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Fri Mar 14 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sat Mar 15 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 16 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Mar 18 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Wed Mar 19 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Thu Mar 20 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Fri Mar 21 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sat Mar 22 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 23 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Mar 25 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Wed Mar 26 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Thu Mar 27 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Fri Mar 28 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sat Mar 29 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 30 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Sun Mar 30 23:00:00 +0200 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Mon Mar 31 23:00:00 +0200 2008
&amp;gt;&amp;gt; d = d.tomorrow
=&amp;gt; Tue Apr 01 23:00:00 +0200 2008&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
From these logs, I understand the root cause of all this is how date calculations (badly) handle savings time (transition from winter time to summer time). I had a look in the code but was unable to determine how to correctly patch it.
&lt;/p&gt;&lt;p&gt;
I was only able to reproduce this bug on Mac OS X 10.4, not Linux (Ubuntu) despite the fact that both computers were configured with the CEST timezone.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T11:10:40+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">405</number>
      <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>next_week does not go to next week on os x</title>
      <updated-at type="datetime">2008-06-13T11:10:40+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">1</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Actually, I was not able to reproduce the bug on Linux because I was trying with Rails 1.2.6 on this platform. I need to confirm the bug also exists there.

Hopefully, there's a workaround for this bug. Add 2 hours evrytime you pass to next week.

@@@ ruby
Loading development environment (Rails 2.0.2)
&gt;&gt;  d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt;  d = d.next_week + 2.hours
=&gt; Mon Mar 17 02:00:00 +0100 2008
&gt;&gt;  d = d.next_week + 2.hours
=&gt; Mon Mar 24 02:00:00 +0100 2008
&gt;&gt;  d = d.next_week + 2.hours
=&gt; Mon Mar 31 02:00:00 +0200 2008
&gt;&gt;  d = d.next_week + 2.hours
=&gt; Mon Apr 07 02:00:00 +0200 2008
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Actually, I was not able to reproduce the bug on Linux because I was trying with Rails 1.2.6 on this platform. I need to confirm the bug also exists there.
&lt;/p&gt;&lt;p&gt;
Hopefully, there's a workaround for this bug. Add 2 hours evrytime you pass to next week.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Loading development environment (Rails 2.0.2)
&amp;gt;&amp;gt;  d = 3.months.ago.monday
=&amp;gt; Mon Mar 10 00:00:00 +0100 2008
&amp;gt;&amp;gt;  d = d.next_week + 2.hours
=&amp;gt; Mon Mar 17 02:00:00 +0100 2008
&amp;gt;&amp;gt;  d = d.next_week + 2.hours
=&amp;gt; Mon Mar 24 02:00:00 +0100 2008
&amp;gt;&amp;gt;  d = d.next_week + 2.hours
=&amp;gt; Mon Mar 31 02:00:00 +0200 2008
&amp;gt;&amp;gt;  d = d.next_week + 2.hours
=&amp;gt; Mon Apr 07 02:00:00 +0200 2008&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-06-13T11:38:53+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- 
:title: next_week does not go to next week on os x
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">405</number>
      <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>next_week does not go to next week</title>
      <updated-at type="datetime">2008-06-13T11:38:53+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">2</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I wasn't able to replicate this in the console with Rails 2.1. 

Would you be able to provide a failing test case for this?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I wasn't able to replicate this in the console with Rails 2.1.
&lt;/p&gt;&lt;p&gt;
Would you be able to provide a failing test case for this?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-13T16:22:09+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">405</number>
      <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>next_week does not go to next week</title>
      <updated-at type="datetime">2008-06-13T16:22:09+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">3</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Geoff,

Thanks for your reply. I was not able to reproduce the bug with 2.1.0. 

@@@
$ script/console
Loading development environment (Rails 2.1.0)
&gt;&gt; d = 3.months.ago.monday
=&gt; Mon, 10 Mar 2008 00:00:00 UTC +00:00
&gt;&gt; d = d.next_week
=&gt; Mon, 17 Mar 2008 00:00:00 UTC +00:00
&gt;&gt; d = d.next_week
=&gt; Mon, 24 Mar 2008 00:00:00 UTC +00:00
&gt;&gt; d = d.next_week
=&gt; Mon, 31 Mar 2008 00:00:00 UTC +00:00
&gt;&gt; d = d.next_week
=&gt; Mon, 07 Apr 2008 00:00:00 UTC +00:00
@@@

but can still confirm the bug with 2.0.2

@@@
$ script/console
Loading development environment (Rails 2.0.2)
&gt;&gt; d = 3.months.ago.monday
=&gt; Mon Mar 10 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 17 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
&gt;&gt; d = d.next_week
=&gt; Mon Mar 24 00:00:00 +0100 2008
@@@

The reason is date(time)s in 2.1.0 are timezone-agnostic (UTC) while they depend on the timezone defined for the local system in 2.0.x (+0100 which corresponds to CEST hereby).

I don't know which timezone you live in but pretend you live in Paris, configure the timezone of your system accordingly and you should be able to reproduce the bug with 2.0.2.

Like I previously mentioned, I strongly believed this defect is due to the daylight savings time which happened on 2008/03/30 in Central Europe. We 'lost' one hour in the night b/w 29th and 30th.

Back to your request, giving you a failing and automated test case is not trivial since 

  * the bug is system timezone dependent,
  * it seems to require that you first move to a date prior to the one when daylight savings time change happened by using time calculations primitives offered by ActiveSupport.

I wish the manual test case described above is enough for you.

Bottom line is this bug only exists under 2.0.x given that the local system is configured with a timezone that includes daylight savings time management.

Surely not a show-stopper.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Geoff,
&lt;/p&gt;&lt;p&gt;
Thanks for your reply. I was not able to reproduce the bug with 2.1.0.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;$ script/console
Loading development environment (Rails 2.1.0)
&amp;gt;&amp;gt; d = 3.months.ago.monday
=&amp;gt; Mon, 10 Mar 2008 00:00:00 UTC +00:00
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 17 Mar 2008 00:00:00 UTC +00:00
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 24 Mar 2008 00:00:00 UTC +00:00
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 31 Mar 2008 00:00:00 UTC +00:00
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon, 07 Apr 2008 00:00:00 UTC +00:00&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
but can still confirm the bug with 2.0.2
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;$ script/console
Loading development environment (Rails 2.0.2)
&amp;gt;&amp;gt; d = 3.months.ago.monday
=&amp;gt; Mon Mar 10 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 17 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008
&amp;gt;&amp;gt; d = d.next_week
=&amp;gt; Mon Mar 24 00:00:00 +0100 2008&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The reason is date(time)s in 2.1.0 are timezone-agnostic (UTC) while they depend on the timezone defined for the local system in 2.0.x (+0100 which corresponds to CEST hereby).
&lt;/p&gt;&lt;p&gt;
I don't know which timezone you live in but pretend you live in Paris, configure the timezone of your system accordingly and you should be able to reproduce the bug with 2.0.2.
&lt;/p&gt;&lt;p&gt;
Like I previously mentioned, I strongly believed this defect is due to the daylight savings time which happened on 2008/03/30 in Central Europe. We 'lost' one hour in the night b/w 29th and 30th.
&lt;/p&gt;&lt;p&gt;
Back to your request, giving you a failing and automated test case is not trivial since
&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;
the bug is system timezone dependent,
&lt;/li&gt;&lt;li&gt;
it seems to require that you first move to a date prior to the one when daylight savings time change happened by using time calculations primitives offered by ActiveSupport.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
I wish the manual test case described above is enough for you.
&lt;/p&gt;&lt;p&gt;
Bottom line is this bug only exists under 2.0.x given that the local system is configured with a timezone that includes daylight savings time management.
&lt;/p&gt;&lt;p&gt;
Surely not a show-stopper.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-14T10:02:06+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">405</number>
      <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag nil="true"></tag>
      <title>next_week does not go to next week</title>
      <updated-at type="datetime">2008-06-14T10:02:06+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">4</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Ok, I've looked into this a little more -- this is not an issue with 2.1 (irrespective of whether you're using config.time_zone or the system time zone), but it is indeed an issue with 2.0.x.

The reason for the problem in 2.0.x is, Time#next_week calls Time#since with a Duration, which in 2.0.x doesn't behave properly when crossing a DST boundary.

The fix for this issue was in: http://github.com/rails/rails/commit/9620372a6dc7eeebdb04f1fdb7f150d29e60fc00

I'm hesitant to backport this fix to the 2.0 stable branch, given that Time#since is a lower-level method called by several other ActiveSupport methods.

If you're not able to upgrade your app to 2.1, you could easily write your own version of Time#next_week that used Time#+ with a Duration, instead of Time#since, to work around this bug:

@@@ ruby
def next_week(day = :monday)
          days_into_week = { :monday =&gt; 0, :tuesday =&gt; 1, :wednesday =&gt; 2, :thursday =&gt; 3, :friday =&gt; 4, :saturday =&gt; 5, :sunday =&gt; 6}
          ((self + 1.week).beginning_of_week + days_into_week[day].day).change(:hour =&gt; 0)
        end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Ok, I've looked into this a little more -- this is not an issue with 2.1 (irrespective of whether you're using config.time_zone or the system time zone), but it is indeed an issue with 2.0.x.
&lt;/p&gt;&lt;p&gt;
The reason for the problem in 2.0.x is, Time#next_week calls Time#since with a Duration, which in 2.0.x doesn't behave properly when crossing a DST boundary.
&lt;/p&gt;&lt;p&gt;
The fix for this issue was in: &lt;a href=&quot;http://github.com/rails/rails/commit/9620372a6dc7eeebdb04f1fdb7f150d29e60fc00&quot;&gt;http://github.com/rails/rails/co...&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;
I'm hesitant to backport this fix to the 2.0 stable branch, given that Time#since is a lower-level method called by several other ActiveSupport methods.
&lt;/p&gt;&lt;p&gt;
If you're not able to upgrade your app to 2.1, you could easily write your own version of Time#next_week that used Time#+ with a Duration, instead of Time#since, to work around this bug:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def next_week(day = :monday)
          days_into_week = { :monday =&amp;gt; 0, :tuesday =&amp;gt; 1, :wednesday =&amp;gt; 2, :thursday =&amp;gt; 3, :friday =&amp;gt; 4, :saturday =&amp;gt; 5, :sunday =&amp;gt; 6}
          ((self + 1.week).beginning_of_week + days_into_week[day].day).change(:hour =&amp;gt; 0)
        end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-14T18:26:14+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">405</number>
      <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>next_week does not go to next week</title>
      <updated-at type="datetime">2008-06-14T18:26:14+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">5</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>...also, just for reference: if you want to write a test for a specific system time zone, you can set ENV['TZ'] for that test -- see the with_env_tz helper in ActiveSupport time_ext_test.rb.

And if you need to test with a method that varies output depending upon system time (like 3.days.ago), you can always stub out Time.now -- we're doing this in several places in ActiveSupport time tests.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
...also, just for reference: if you want to write a test for a specific system time zone, you can set ENV['TZ'] for that test -- see the with_env_tz helper in ActiveSupport time_ext_test.rb.
&lt;/p&gt;&lt;p&gt;
And if you need to test with a method that varies output depending upon system time (like 3.days.ago), you can always stub out Time.now -- we're doing this in several places in ActiveSupport time tests.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-14T18:32:03+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">405</number>
      <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>next_week does not go to next week</title>
      <updated-at type="datetime">2008-06-14T18:32:03+01:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">6</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">15783</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Geoff,

I'm fine with not backporting the fix for the reason you mention and due to the fact I already found a workaround that works for me.

Thanks for suggesting a fix I can setup in my project.

For the test helpers around time calculations, now I know. I don't feel like it's useful that I contribute a test case now since the bug is already known, fixed and has already been added to next release.

But I promess I'll come with an automated test next time I'll find something.

Thanks for your help.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Geoff,
&lt;/p&gt;&lt;p&gt;
I'm fine with not backporting the fix for the reason you mention and due to the fact I already found a workaround that works for me.
&lt;/p&gt;&lt;p&gt;
Thanks for suggesting a fix I can setup in my project.
&lt;/p&gt;&lt;p&gt;
For the test helpers around time calculations, now I know. I don't feel like it's useful that I contribute a test case now since the bug is already known, fixed and has already been added to next release.
&lt;/p&gt;&lt;p&gt;
But I promess I'll come with an automated test next time I'll find something.
&lt;/p&gt;&lt;p&gt;
Thanks for your help.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-06-16T11:41:30+01:00</created-at>
      <creator-id type="integer">23283</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">405</number>
      <permalink>next_week-does-not-go-to-next-week-on-os-x</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>next_week does not go to next week</title>
      <updated-at type="datetime">2008-06-16T11:41:30+01:00</updated-at>
      <user-id type="integer">23283</user-id>
      <version type="integer">7</version>
      <user-name>Laurent Farcy</user-name>
      <creator-name>Laurent Farcy</creator-name>
      <assigned-user-name>Geoff Buesing</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/405</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
