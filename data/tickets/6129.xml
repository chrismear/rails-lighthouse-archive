<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">4</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2011-04-14T11:17:34+01:00</created-at>
  <creator-id type="integer">26148</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6129</number>
  <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
  <priority type="integer">2</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>open</state>
  <tag nil="true"></tag>
  <title>Reduce memory bloat in ActiveRecord transactions</title>
  <updated-at type="datetime">2011-04-14T11:17:34+01:00</updated-at>
  <user-id type="integer">26148</user-id>
  <version type="integer">15</version>
  <user-name>Brian Durand</user-name>
  <creator-name>Brian Durand</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
  <priority-name>Medium</priority-name>
  <original-body>This patch reduces memory bloat in ActiveRecord transactions. With the introduction after_commit and after_rollback callbacks references are kept to all records updated in a transaction until the transaction completes. This can lead to memory bloat with large transactions.

The code change replaces the references to weak references unless the objects implement these callbacks. This allows the garbage collector to reclaim objects that won't be executing a callback.</original-body>
  <latest-body>This patch reduces memory bloat in ActiveRecord transactions. With the introduction after_commit and after_rollback callbacks references are kept to all records updated in a transaction until the transaction completes. This can lead to memory bloat with large transactions.

The code change replaces the references to weak references unless the objects implement these callbacks. This allows the garbage collector to reclaim objects that won't be executing a callback.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch reduces memory bloat in ActiveRecord transactions.
With the introduction after_commit and after_rollback callbacks
references are kept to all records updated in a transaction until
the transaction completes. This can lead to memory bloat with large
transactions.&lt;/p&gt;
&lt;p&gt;The code change replaces the references to weak references
unless the objects implement these callbacks. This allows the
garbage collector to reclaim objects that won't be executing a
callback.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch reduces memory bloat in ActiveRecord transactions. With the introduction after_commit and after_rollback callbacks references are kept to all records updated in a transaction until the transaction completes. This can lead to memory bloat with large transactions.

The code change replaces the references to weak references unless the objects implement these callbacks. This allows the garbage collector to reclaim objects that won't be executing a callback.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch reduces memory bloat in ActiveRecord transactions.
With the introduction after_commit and after_rollback callbacks
references are kept to all records updated in a transaction until
the transaction completes. This can lead to memory bloat with large
transactions.&lt;/p&gt;
&lt;p&gt;The code change replaces the references to weak references
unless the objects implement these callbacks. This allows the
garbage collector to reclaim objects that won't be executing a
callback.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-07T23:52:57+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-07T23:52:59+00:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">1</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I can't remember correctly what was wrong with WeakRef, but during development of IdentitiyMap, something new was implemented (ActiveSupport::WeakHash) and Weakling was used for JRuby: https://github.com/miloops/rails/commit/ada014929b01af5ce8ca5e6fdd13401bc3c392f5

Also you might want to talk to Emilio Tagua, he probably has some more details on that.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I can't remember correctly what was wrong with WeakRef, but
during development of IdentitiyMap, something new was implemented
(ActiveSupport::WeakHash) and Weakling was used for JRuby: &lt;a href=
&quot;https://github.com/miloops/rails/commit/ada014929b01af5ce8ca5e6fdd13401bc3c392f5&quot;&gt;
https://github.com/miloops/rails/commit/ada014929b01af5ce8ca5e6fdd1...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also you might want to talk to Emilio Tagua, he probably has
some more details on that.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-11T10:47:18+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-11T10:47:27+00:00</updated-at>
      <user-id type="integer">7341</user-id>
      <version type="integer">2</version>
      <user-name>Piotr Sarnacki</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Just to be clear about IM stuff - it hasn't been merged into master yet, here is the pull request for that: https://github.com/rails/rails/pull/76</body>
      <body-html>&lt;div&gt;&lt;p&gt;Just to be clear about IM stuff - it hasn't been merged into
master yet, here is the pull request for that: &lt;a href=
&quot;https://github.com/rails/rails/pull/76&quot;&gt;https://github.com/rails/rails/pull/76&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-11T10:53:02+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-11T10:53:11+00:00</updated-at>
      <user-id type="integer">7341</user-id>
      <version type="integer">3</version>
      <user-name>Piotr Sarnacki</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I like the WeakRef solution very much - works for me(tm) but I don't use anything other than MRI. +1.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I like the WeakRef solution very much - works for me(tm) but I
don't use anything other than MRI. +1.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-11T11:30:12+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-11T11:30:24+00:00</updated-at>
      <user-id type="integer">867</user-id>
      <version type="integer">4</version>
      <user-name>Jacek Becela</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>It looks to me like the identity map stuff is implementing a weak HashMap and in the jruby case utilizing the existing Java weak reference libraries. I don't see anything in the ActiveSupport::WeakHashMap or the Weakling code that would indicate there was a problem with how WeakRef itself is implemented. They both seem to be doing the same thing internally the WeakRef is doing.

This patch doesn't need a weak hash map or a reference queue so I think it should be fine with WeakRef. The weak reference exist only to support the callbacks that reset the state of new or deleted objects if the transaction fails. If the objects have been garbage collected because there are no hard references to them, then there is no need to invoke these callbacks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;It looks to me like the identity map stuff is implementing a
weak HashMap and in the jruby case utilizing the existing Java weak
reference libraries. I don't see anything in the
ActiveSupport::WeakHashMap or the Weakling code that would indicate
there was a problem with how WeakRef itself is implemented. They
both seem to be doing the same thing internally the WeakRef is
doing.&lt;/p&gt;
&lt;p&gt;This patch doesn't need a weak hash map or a reference queue so
I think it should be fine with WeakRef. The weak reference exist
only to support the callbacks that reset the state of new or
deleted objects if the transaction fails. If the objects have been
garbage collected because there are no hard references to them,
then there is no need to invoke these callbacks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-13T16:48:13+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-13T16:48:27+00:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">5</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>The problem is that WeakRef uses `_id2ref` to look up an object.  `_id2ref` takes an object id, and returns the object corresponding with that id.  The problem is that object ids are not unique in MRI, the get reused.  That means that you could get back an object that isn't the object you were actually looking for.

We can easily demonstrate id reuse like so:


    class Foo; end
    class Bar; end
    
    id_to_class = {}
    
    loop do
      obj = [Foo, Bar].sort_by { rand }.first.new
    
      if id_to_class.key? obj.object_id
        puts &quot;obj id: #{obj.object_id} was reused&quot;
    
        if id_to_class[obj.object_id] != obj.class
          puts &quot;omg! they aren't even the same class!&quot;
        end
      end
    
      id_to_class[obj.object_id] = obj.class
    end

Now imagine that two AR objects had object_ids that collided.

I hesitate to apply this patch because of this problem.  Maybe we can find a different way?</body>
      <body-html>&lt;div&gt;&lt;p&gt;The problem is that WeakRef uses &lt;code&gt;_id2ref&lt;/code&gt; to look up
an object. &lt;code&gt;_id2ref&lt;/code&gt; takes an object id, and returns the
object corresponding with that id. The problem is that object ids
are not unique in MRI, the get reused. That means that you could
get back an object that isn't the object you were actually looking
for.&lt;/p&gt;
&lt;p&gt;We can easily demonstrate id reuse like so:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Foo; end
class Bar; end

id_to_class = {}

loop do
  obj = [Foo, Bar].sort_by { rand }.first.new

  if id_to_class.key? obj.object_id
    puts &quot;obj id: #{obj.object_id} was reused&quot;

    if id_to_class[obj.object_id] != obj.class
      puts &quot;omg! they aren't even the same class!&quot;
    end
  end

  id_to_class[obj.object_id] = obj.class
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now imagine that two AR objects had object_ids that
collided.&lt;/p&gt;
&lt;p&gt;I hesitate to apply this patch because of this problem. Maybe we
can find a different way?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-13T18:43:27+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-13T18:43:40+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">6</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I've thoroughly looked into the WeakRef implementation and how it works across the various Ruby runtimes and this is what I've found: it sucks.

1. Object ids are not reused in Jruby, Rubinius, or IronRuby so WeakRefs do work properly (makes sense since these all run on a VM).
2. Object ids are reused in MRI 1.8.7 and REE 1.8.7 do reuse object ids, but the WeakRef implementation handles that case properly because of the single system thread the process is running on.
3. Object ids are reused in MRI 1.9.2 but the WeakRef implementation does not handle this properly since the garbage collector can run concurrently with threads allocating new objects. This messes up cleanup logic since finalizers attached to an object id can be run after that object id has been assigned to a new object.
4. The WeakRef implementation does not scale on most runtimes. Performance on MRI 1.8.7, REE 1.8.7, and IronRuby is especially bad (performance on Rubinius is actually good, though). For some reason it extends Delegator which redefines all of the wrapped object's methods on initialization. This is both expensive on the CPU and can take up a lot of memory. On MRI 1.8.7 creating an array of 50,000 WeakRefs that wrap Object.new will balloon the heap to well over 1GB and creating each WeakRef takes 15-100 times longer to do. I have no idea why you would want to use a Delegator on a WeakRef unless you want your code to randomly break when the garbage collector kicks in, but it just doesn't seem worth it.
5. The weakling gem provides a better WeakRef implementation for Jruby that uses the native Java weak references.

Since WeakRef is either broken or performs horribly on 5 of the 6 Ruby runtimes I tested, and it is a really useful feature to have, I think it makes sense to add it to ActiveSupport so we can have a consistent working interface for weak references. Unfortunately, easier said than done. I started out simply reimplementing WeakRef to make it not extend Delegator and fix the bugs with 1.9. However, Jruby has it's own better implementation and since Rubinius has a very efficient implementation of WeakRef, but doesn't perform at all well with finalizers. Thus, I ended up with three different implementations of WeakReference and the runtime picks the best choice:

1. Jruby uses one backed by Weakling if it is available otherwise it uses one backed by WeakRef
2. Rubinius uses the implementation backed by WeakRef
3. All other runtimes use my reimplementation of WeakRef

The interface is very simple:

    obj = Object.new
    ref = ActiveSupport::WeakReference.new(obj)
    ref.object                # obj or nil if the reference has been reclaimed
    ref.referenced_object_id  # obj.object_id

Further, I used this implementation to create a WeakHash class where the values are weak references. This could be used to replace the WeakHash shown in the commit linked to above for the identity map stuff.

Attached is a new patch with the original ActiveRecord changes along with the WeakReference implementations. Also attached is my test script in case anyone wants to verify the bizarre weak reference hell I've stumbled into. To run the test script, simply run it with your favorite flavor of ruby and pass one of object, weakref, or weakreference as the argument:

    ruby weakref_test.rb object         # baseline object creation without weak references
    ruby weakref_test.rb weakref        # uses WeakRef
    ruby weakref_test.rb weakreference  # uses new ActiveSupport::WeakReference

Each test will report on how long it takes to create 1000 instances of the specified class and then will run 100,000 iterations trying to find reused object id's. Be careful if you run the weakref tests under MRI, REE, or IronRuby because your process heap will grow to 2+GB and your computer may become severely unresponsive.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I've thoroughly looked into the WeakRef implementation and how
it works across the various Ruby runtimes and this is what I've
found: it sucks.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Object ids are not reused in Jruby, Rubinius, or IronRuby so
WeakRefs do work properly (makes sense since these all run on a
VM).&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Object ids are reused in MRI 1.8.7 and REE 1.8.7 do reuse
object ids, but the WeakRef implementation handles that case
properly because of the single system thread the process is running
on.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Object ids are reused in MRI 1.9.2 but the WeakRef
implementation does not handle this properly since the garbage
collector can run concurrently with threads allocating new objects.
This messes up cleanup logic since finalizers attached to an object
id can be run after that object id has been assigned to a new
object.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The WeakRef implementation does not scale on most runtimes.
Performance on MRI 1.8.7, REE 1.8.7, and IronRuby is especially bad
(performance on Rubinius is actually good, though). For some reason
it extends Delegator which redefines all of the wrapped object's
methods on initialization. This is both expensive on the CPU and
can take up a lot of memory. On MRI 1.8.7 creating an array of
50,000 WeakRefs that wrap Object.new will balloon the heap to well
over 1GB and creating each WeakRef takes 15-100 times longer to do.
I have no idea why you would want to use a Delegator on a WeakRef
unless you want your code to randomly break when the garbage
collector kicks in, but it just doesn't seem worth it.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The weakling gem provides a better WeakRef implementation for
Jruby that uses the native Java weak references.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since WeakRef is either broken or performs horribly on 5 of the
6 Ruby runtimes I tested, and it is a really useful feature to
have, I think it makes sense to add it to ActiveSupport so we can
have a consistent working interface for weak references.
Unfortunately, easier said than done. I started out simply
reimplementing WeakRef to make it not extend Delegator and fix the
bugs with 1.9. However, Jruby has it's own better implementation
and since Rubinius has a very efficient implementation of WeakRef,
but doesn't perform at all well with finalizers. Thus, I ended up
with three different implementations of WeakReference and the
runtime picks the best choice:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Jruby uses one backed by Weakling if it is available otherwise
it uses one backed by WeakRef&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Rubinius uses the implementation backed by WeakRef&lt;br&gt;&lt;/li&gt;
&lt;li&gt;All other runtimes use my reimplementation of WeakRef&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The interface is very simple:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;obj = Object.new
ref = ActiveSupport::WeakReference.new(obj)
ref.object                # obj or nil if the reference has been reclaimed
ref.referenced_object_id  # obj.object_id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Further, I used this implementation to create a WeakHash class
where the values are weak references. This could be used to replace
the WeakHash shown in the commit linked to above for the identity
map stuff.&lt;/p&gt;
&lt;p&gt;Attached is a new patch with the original ActiveRecord changes
along with the WeakReference implementations. Also attached is my
test script in case anyone wants to verify the bizarre weak
reference hell I've stumbled into. To run the test script, simply
run it with your favorite flavor of ruby and pass one of object,
weakref, or weakreference as the argument:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby weakref_test.rb object         # baseline object creation without weak references
ruby weakref_test.rb weakref        # uses WeakRef
ruby weakref_test.rb weakreference  # uses new ActiveSupport::WeakReference&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Each test will report on how long it takes to create 1000
instances of the specified class and then will run 100,000
iterations trying to find reused object id's. Be careful if you run
the weakref tests under MRI, REE, or IronRuby because your process
heap will grow to 2+GB and your computer may become severely
unresponsive.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T03:16:22+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-16T03:16:36+00:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">7</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@Brian Excellent work! The implementation looks great.  Is there a reason this should be in ActiveSupport?  IMO, a weakref / weakhash library would be useful outside rails.

Also, if you create a gem outside rails, you can create JRuby specific versions that depend on weakling, which guarantees that weakling is available.

Finally, shouldn't we be filing bug reports / patches against MRI?

What do you think?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Brian Excellent work! The implementation looks great. Is there
a reason this should be in ActiveSupport? IMO, a weakref / weakhash
library would be useful outside rails.&lt;/p&gt;
&lt;p&gt;Also, if you create a gem outside rails, you can create JRuby
specific versions that depend on weakling, which guarantees that
weakling is available.&lt;/p&gt;
&lt;p&gt;Finally, shouldn't we be filing bug reports / patches against
MRI?&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T03:43:52+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-16T03:44:07+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">8</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@Aaron Totally agree that WeakRef needs to be fixed in Ruby 1.9 branch and  I will submit a patch for MRI. As for usefulness outside of Rails I also totally concur.

My original thought on adding it to ActiveSupport is that it fits in as some generally useful functionality that is either missing from core Ruby or not universally available like Base64, Gzip, OrderedHash, TimeWithZone, etc. I do, however, agree that the best method for sharing code like this in this day in age that has nothing to do with Rails (other than I need it to fix the ActiveRecord transaction issue) is as a separate gem. I can work on turning the patch code gem into a gem.

Before I do that, though, what are the thoughts on adding another gem dependency to Rails for this purpose? Is that the preferred direction for adding new generic functionality vs. updating ActiveSupport with new features?</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Aaron Totally agree that WeakRef needs to be fixed in Ruby 1.9
branch and I will submit a patch for MRI. As for usefulness outside
of Rails I also totally concur.&lt;/p&gt;
&lt;p&gt;My original thought on adding it to ActiveSupport is that it
fits in as some generally useful functionality that is either
missing from core Ruby or not universally available like Base64,
Gzip, OrderedHash, TimeWithZone, etc. I do, however, agree that the
best method for sharing code like this in this day in age that has
nothing to do with Rails (other than I need it to fix the
ActiveRecord transaction issue) is as a separate gem. I can work on
turning the patch code gem into a gem.&lt;/p&gt;
&lt;p&gt;Before I do that, though, what are the thoughts on adding
another gem dependency to Rails for this purpose? Is that the
preferred direction for adding new generic functionality vs.
updating ActiveSupport with new features?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T15:47:26+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-16T15:47:47+00:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">9</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@Brian Excellent. Ping me when you submit the patch to MRI and I will help convince the other ruby-core members.

I prefer that this library would be in a gem, and I think I can convince the rails-core people that it is necessary.  Releasing the weakref code as a gem would be beneficial because we can release the gem out of band with rails.  Also, we can change dependencies depending on the target platform (like make this gem depend on weakling if the gem is installing on jruby).

Have you thought about folding this code in to weakling?

If you need any help, let me know.  I think weakrefs are the correct way to fix this issue, so I'm happy to help.</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Brian Excellent. Ping me when you submit the patch to MRI and I
will help convince the other ruby-core members.&lt;/p&gt;
&lt;p&gt;I prefer that this library would be in a gem, and I think I can
convince the rails-core people that it is necessary. Releasing the
weakref code as a gem would be beneficial because we can release
the gem out of band with rails. Also, we can change dependencies
depending on the target platform (like make this gem depend on
weakling if the gem is installing on jruby).&lt;/p&gt;
&lt;p&gt;Have you thought about folding this code in to weakling?&lt;/p&gt;
&lt;p&gt;If you need any help, let me know. I think weakrefs are the
correct way to fix this issue, so I'm happy to help.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-16T19:34:11+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-16T19:34:27+00:00</updated-at>
      <user-id type="integer">15316</user-id>
      <version type="integer">10</version>
      <user-name>Aaron Patterson</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>@Aaron I've submitted a patch for Ruby 1.9

http://redmine.ruby-lang.org/issues/show/4168</body>
      <body-html>&lt;div&gt;&lt;p&gt;@Aaron I've submitted a patch for Ruby 1.9&lt;/p&gt;
&lt;p&gt;&lt;a href=
&quot;http://redmine.ruby-lang.org/issues/show/4168&quot;&gt;http://redmine.ruby-lang.org/issues/show/4168&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-17T16:59:27+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2010-12-17T16:59:39+00:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">11</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">3</attachments-count>
      <body>I have released a new &quot;ref&quot; gem (http://rubygems.org/gems/ref) that provides working weak references for all the major ruby implementations. I have tested it on MRI, REE, YARV, Rubinius, Jruby, and IronRuby.

I improved and expanded on my previous code to provide support for soft references, reference queues, and four different kinds of reference maps. Since someone previously mentioned that work going on to implement an identity map looked at weak references, they might find this code useful.

Attached is an updated ActiveRecord patch that uses the new gem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have released a new &quot;ref&quot; gem (&lt;a href=
&quot;http://rubygems.org/gems/ref&quot;&gt;http://rubygems.org/gems/ref&lt;/a&gt;)
that provides working weak references for all the major ruby
implementations. I have tested it on MRI, REE, YARV, Rubinius,
Jruby, and IronRuby.&lt;/p&gt;
&lt;p&gt;I improved and expanded on my previous code to provide support
for soft references, reference queues, and four different kinds of
reference maps. Since someone previously mentioned that work going
on to implement an identity map looked at weak references, they
might find this code useful.&lt;/p&gt;
&lt;p&gt;Attached is an updated ActiveRecord patch that uses the new
gem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-01-11T16:41:20+00:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2011-01-11T16:45:50+00:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">12</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-12T01:00:08+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2011-04-12T01:00:49+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">13</version>
      <user-name>rails</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-12T01:00:09+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2011-04-12T01:00:34+01:00</updated-at>
      <user-id type="integer">136779</user-id>
      <version type="integer">14</version>
      <user-name>rails</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>Still an issue. This can be a serious issue where many records are updated or deleted within a transaction since the ActiveRecord objects tend to have large memory footprints and can quickly bloat the memory beyond what is available.

[state:open]</body>
      <body-html>&lt;div&gt;&lt;p&gt;Still an issue. This can be a serious issue where many records
are updated or deleted within a transaction since the ActiveRecord
objects tend to have large memory footprints and can quickly bloat
the memory beyond what is available.&lt;/p&gt;
&lt;p&gt;[state:open]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-13T17:32:33+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- 
:state: stale
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2011-04-13T17:32:44+01:00</updated-at>
      <user-id type="integer">26148</user-id>
      <version type="integer">15</version>
      <user-name>Brian Durand</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">4</attachments-count>
      <body>thanx
&lt;a href=&quot;http://www.liderserver.com&quot; title=&quot;ucuz hosting, kaliteli hosting,&quot; target=&quot;_blank&quot;&gt;ucuz hosting&lt;/a&gt;
thanx
&lt;a href=&quot;http://www.bilgibaz.net&quot; title=&quot;Bilgibaz, g&#252;ncel payla&#351;&#305;m platformu, bilgi payla&#351;&#305;m, program, oyun, film, mp3&quot; target=&quot;_blank&quot;&gt;bilgi payla&#351;&#305;m&lt;/a&gt;

&lt;a href=&quot;http://www.fixizle.net&quot; title=&quot;fix izle film, dizi izle, g&#252;ncel film, g&#252;ncel dizi&quot; target=&quot;_blank&quot;&gt;film, dizi izle&lt;/a&gt;
thanx
&lt;a href=&quot;http://www.teknopaylasim.net&quot; title=&quot;g&#252;ncel payla&#351;&#305;m sitesi, Program, Film, Oyun, Driver, wireless &#351;ifre k&#305;rma program&#305;&quot; target=&quot;_blank&quot;&gt;Teknopaylasim.net&lt;/a&gt;
thanx</body>
      <body-html>&lt;div&gt;&lt;p&gt;thanx&lt;br&gt;
&lt;a href=&quot;http://www.liderserver.com&quot; title=
&quot;ucuz hosting, kaliteli hosting,&quot;&gt;ucuz hosting&lt;/a&gt;&lt;br&gt;
thanx&lt;br&gt;
&lt;a href=&quot;http://www.bilgibaz.net&quot; title=
&quot;Bilgibaz, g&amp;uuml;ncel payla&amp;#351;&amp;#305;m platformu, bilgi payla&amp;#351;&amp;#305;m, program, oyun, film, mp3&quot;&gt;
bilgi payla&amp;#351;&amp;#305;m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.fixizle.net&quot; title=
&quot;fix izle film, dizi izle, g&amp;uuml;ncel film, g&amp;uuml;ncel dizi&quot;&gt;film,
dizi izle&lt;/a&gt;&lt;br&gt;
thanx&lt;br&gt;
&lt;a href=&quot;http://www.teknopaylasim.net&quot; title=
&quot;g&amp;uuml;ncel payla&amp;#351;&amp;#305;m sitesi, Program, Film, Oyun, Driver, wireless &amp;#351;ifre k&amp;#305;rma program&amp;#305;&quot;&gt;
Teknopaylasim.net&lt;/a&gt;&lt;br&gt;
thanx&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-04-14T01:34:15+01:00</created-at>
      <creator-id type="integer">26148</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6129</number>
      <permalink>reduce-memory-bloat-in-activerecord-transactions</permalink>
      <priority type="integer">2</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag nil="true"></tag>
      <title>Reduce memory bloat in ActiveRecord transactions</title>
      <updated-at type="datetime">2011-04-14T11:17:34+01:00</updated-at>
      <user-id type="integer">145562</user-id>
      <version type="integer">16</version>
      <user-name>engincik</user-name>
      <creator-name>Brian Durand</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6129</url>
      <priority-name>Medium</priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>19761b8dc8985dbd0ee6513613281f3c0a230343</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-12-07T23:52:57+00:00</created-at>
      <filename>active_record_transaction_bloat.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">807717</id>
      <size type="integer">6217</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/807717/active_record_transaction_bloat.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>509ddc0354a642526783b27e9203cb11dd4e6998</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-12-16T03:16:22+00:00</created-at>
      <filename>active_record_transaction_bloat.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">821857</id>
      <size type="integer">25735</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/821857/active_record_transaction_bloat.diff</url>
    </attachment>
    <attachment type="Attachment">
      <code>69cc73b3a411a3f46ebaeb7ec65564c65a3d9205</code>
      <content-type>text/x-ruby-script</content-type>
      <created-at type="datetime">2010-12-16T03:16:22+00:00</created-at>
      <filename>weakref_test.rb</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">821858</id>
      <size type="integer">11264</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/821858/weakref_test.rb</url>
    </attachment>
    <attachment type="Attachment">
      <code>4d7fdce6a1f504b598dc9659f6e5932608d76157</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-01-11T16:41:20+00:00</created-at>
      <filename>active_record_memory_bloat_patch_3.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">855491</id>
      <size type="integer">6654</size>
      <uploader-id type="integer">26148</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/855491/active_record_memory_bloat_patch_3.diff</url>
    </attachment>
  </attachments>
</ticket>
