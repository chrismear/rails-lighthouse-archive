<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-02-17T18:08:58+00:00</created-at>
  <creator-id type="integer">86918</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3982</number>
  <permalink>patch-solved-a-bug-that-prevented-xml-serialization-when-activerecord-attributes-contains-more-than-column-values</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>activerecord patch to_xml</tag>
  <title>[PATCH] Solved a bug that prevented xml serialization when ActiveRecord attributes contains more than column values</title>
  <updated-at type="datetime">2011-02-02T18:38:52+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Jose Fern&#225;ndez</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3982</url>
  <priority-name nil="true"></priority-name>
  <original-body>When ActiveRecord serializes its attributes in xml it computes the type by means of the columns instead of the attributes themselves. 

Given that when has_and_belongs_to_many association is used in ActiveRecord, the &quot;join keys&quot; are added to the attributes array of the ActiveRecord object it raises and exception when calling to_xml because ActiveRecord has no idea of the type of these &quot;ghost&quot; attributes.

Different approaches can be used to solve this issue. One could be not to use these keys inside the attributes array. Another approach could be not to rely on the attributes when serializing but on the columns directly, this has the drawback that this part of the code is in ActiveModel so no column assumption can be made. 

My approach was to fallback in the same implementation used in MethodAttribute#compute_type so a mapping is taken directly from the class of the object (patch provided).</original-body>
  <latest-body>When ActiveRecord serializes its attributes in xml it computes the type by means of the columns instead of the attributes themselves. 

Given that when has_and_belongs_to_many association is used in ActiveRecord, the &quot;join keys&quot; are added to the attributes array of the ActiveRecord object it raises and exception when calling to_xml because ActiveRecord has no idea of the type of these &quot;ghost&quot; attributes.

Different approaches can be used to solve this issue. One could be not to use these keys inside the attributes array. Another approach could be not to rely on the attributes when serializing but on the columns directly, this has the drawback that this part of the code is in ActiveModel so no column assumption can be made. 

My approach was to fallback in the same implementation used in MethodAttribute#compute_type so a mapping is taken directly from the class of the object (patch provided).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;When ActiveRecord serializes its attributes in xml it computes
the type by means of the columns instead of the attributes
themselves.&lt;/p&gt;
&lt;p&gt;Given that when has_and_belongs_to_many association is used in
ActiveRecord, the &quot;join keys&quot; are added to the attributes array of
the ActiveRecord object it raises and exception when calling to_xml
because ActiveRecord has no idea of the type of these &quot;ghost&quot;
attributes.&lt;/p&gt;
&lt;p&gt;Different approaches can be used to solve this issue. One could
be not to use these keys inside the attributes array. Another
approach could be not to rely on the attributes when serializing
but on the columns directly, this has the drawback that this part
of the code is in ActiveModel so no column assumption can be
made.&lt;/p&gt;
&lt;p&gt;My approach was to fallback in the same implementation used in
MethodAttribute#compute_type so a mapping is taken directly from
the class of the object (patch provided).&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>When ActiveRecord serializes its attributes in xml it computes the type by means of the columns instead of the attributes themselves. 

Given that when has_and_belongs_to_many association is used in ActiveRecord, the &quot;join keys&quot; are added to the attributes array of the ActiveRecord object it raises and exception when calling to_xml because ActiveRecord has no idea of the type of these &quot;ghost&quot; attributes.

Different approaches can be used to solve this issue. One could be not to use these keys inside the attributes array. Another approach could be not to rely on the attributes when serializing but on the columns directly, this has the drawback that this part of the code is in ActiveModel so no column assumption can be made. 

My approach was to fallback in the same implementation used in MethodAttribute#compute_type so a mapping is taken directly from the class of the object (patch provided).</body>
      <body-html>&lt;div&gt;&lt;p&gt;When ActiveRecord serializes its attributes in xml it computes
the type by means of the columns instead of the attributes
themselves.&lt;/p&gt;
&lt;p&gt;Given that when has_and_belongs_to_many association is used in
ActiveRecord, the &quot;join keys&quot; are added to the attributes array of
the ActiveRecord object it raises and exception when calling to_xml
because ActiveRecord has no idea of the type of these &quot;ghost&quot;
attributes.&lt;/p&gt;
&lt;p&gt;Different approaches can be used to solve this issue. One could
be not to use these keys inside the attributes array. Another
approach could be not to rely on the attributes when serializing
but on the columns directly, this has the drawback that this part
of the code is in ActiveModel so no column assumption can be
made.&lt;/p&gt;
&lt;p&gt;My approach was to fallback in the same implementation used in
MethodAttribute#compute_type so a mapping is taken directly from
the class of the object (patch provided).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-02-17T18:08:58+00:00</created-at>
      <creator-id type="integer">86918</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3982</number>
      <permalink>patch-solved-a-bug-that-prevented-xml-serialization-when-activerecord-attributes-contains-more-than-column-values</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord patch to_xml</tag>
      <title>[PATCH] Solved a bug that prevented xml serialization when ActiveRecord attributes contains more than column values</title>
      <updated-at type="datetime">2010-02-17T18:09:04+00:00</updated-at>
      <user-id type="integer">86918</user-id>
      <version type="integer">1</version>
      <user-name>Jose Fern&#225;ndez</user-name>
      <creator-name>Jose Fern&#225;ndez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3982</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:54:54+00:00</created-at>
      <creator-id type="integer">86918</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3982</number>
      <permalink>patch-solved-a-bug-that-prevented-xml-serialization-when-activerecord-attributes-contains-more-than-column-values</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>activerecord patch to_xml</tag>
      <title>[PATCH] Solved a bug that prevented xml serialization when ActiveRecord attributes contains more than column values</title>
      <updated-at type="datetime">2011-02-02T18:38:13+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jose Fern&#225;ndez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3982</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:54:55+00:00</created-at>
      <creator-id type="integer">86918</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3982</number>
      <permalink>patch-solved-a-bug-that-prevented-xml-serialization-when-activerecord-attributes-contains-more-than-column-values</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>activerecord patch to_xml</tag>
      <title>[PATCH] Solved a bug that prevented xml serialization when ActiveRecord attributes contains more than column values</title>
      <updated-at type="datetime">2011-02-02T18:38:52+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Jose Fern&#225;ndez</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3982</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2fc36780e7eca7618f34f95cf2e84595d0ee66c7</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2010-02-17T18:08:59+00:00</created-at>
      <filename>to_xml_serialization_non_column.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">414156</id>
      <size type="integer">2251</size>
      <uploader-id type="integer">86918</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/414156/to_xml_serialization_non_column.diff</url>
    </attachment>
  </attachments>
</ticket>
