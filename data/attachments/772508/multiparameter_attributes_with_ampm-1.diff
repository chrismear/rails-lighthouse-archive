From c69f3979230ddf86057af13a57d5d80077a40888 Mon Sep 17 00:00:00 2001
From: Matt Todd <chiology@gmail.com>
Date: Tue, 16 Nov 2010 04:54:04 -0500
Subject: [PATCH] Support 12 hour input for multiparameter attributes input [#1004 state:resolved]

---
 activerecord/lib/active_record/base.rb |   10 +++++++++
 activerecord/test/cases/base_test.rb   |   33 ++++++++++++++++++++++++++++++++
 2 files changed, 43 insertions(+), 0 deletions(-)

diff --git a/activerecord/lib/active_record/base.rb b/activerecord/lib/active_record/base.rb
index f588475..e67b8a4 100644
--- a/activerecord/lib/active_record/base.rb
+++ b/activerecord/lib/active_record/base.rb
@@ -1719,11 +1719,21 @@ MSG
       end
 
       def instantiate_time_object(name, values)
+        ampm = values.pop if values[6].present?
+        
+        time =
         if self.class.send(:create_time_zone_conversion_attribute?, name, column_for_attribute(name))
           Time.zone.local(*values)
         else
           Time.time_with_datetime_fallback(@@default_timezone, *values)
         end
+        
+        # conditionally increase by 12 hours to support 12-hour input
+        time += 12.hours if ampm.present? and
+                            ((time.hour == 12 and ampm == "am") or
+                             (ampm == "pm" and time.hour != 12))
+        
+        time
       end
 
       def execute_callstack_for_multiparameter_attributes(callstack)
diff --git a/activerecord/test/cases/base_test.rb b/activerecord/test/cases/base_test.rb
index 9f2b0c9..3ae1a4c 100644
--- a/activerecord/test/cases/base_test.rb
+++ b/activerecord/test/cases/base_test.rb
@@ -603,6 +603,39 @@ class BasicsTest < ActiveRecord::TestCase
     assert_equal Time.local(2004, 6, 24, 16, 24, 0), topic.written_on
   end
 
+  def test_multiparameter_attributes_on_time_with_ampm
+    attributes = {
+      "written_on(1i)" => "2004", "written_on(2i)" => "6", "written_on(3i)" => "24",
+      "written_on(4i)" => "4", "written_on(5i)" => "24", "written_on(6i)" => "24",
+      "written_on(7s)" => "pm"
+    }
+    topic = Topic.find(1)
+    topic.attributes = attributes
+    assert_equal Time.local(2004, 6, 24, 16, 24, 24), topic.written_on
+  end
+
+  def test_multiparameter_attributes_on_time_with_ampm_and_noon
+    attributes = {
+      "written_on(1i)" => "2004", "written_on(2i)" => "6", "written_on(3i)" => "24",
+      "written_on(4i)" => "12", "written_on(5i)" => "24", "written_on(6i)" => "24",
+      "written_on(7s)" => "pm"
+    }
+    topic = Topic.find(1)
+    topic.attributes = attributes
+    assert_equal Time.local(2004, 6, 24, 12, 24, 24), topic.written_on
+  end
+
+  def test_multiparameter_attributes_on_time_with_ampm_and_midnight
+    attributes = {
+      "written_on(1i)" => "2004", "written_on(2i)" => "6", "written_on(3i)" => "24",
+      "written_on(4i)" => "12", "written_on(5i)" => "24", "written_on(6i)" => "24",
+      "written_on(7s)" => "am"
+    }
+    topic = Topic.find(1)
+    topic.attributes = attributes
+    assert_equal Time.local(2004, 6, 25, 0, 24, 24), topic.written_on
+  end
+
   def test_multiparameter_assignment_of_aggregation
     customer = Customer.new
     address = Address.new("The Street", "The City", "The Country")
-- 
1.7.2.2


********************************************************************************
                            Git Achievement Unlocked!                            

                         Apprentice Archivist (Level 1)                         
 Prepare each commit with its patch in one file per commit with git format-patch 
********************************************************************************

Adding new achievements and publishing to origin.
