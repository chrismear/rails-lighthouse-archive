<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">false</closed>
  <created-at type="datetime">2010-12-15T08:42:49+00:00</created-at>
  <creator-id type="integer">64518</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6167</number>
  <permalink>strange-behaviour-of-assert_redirected_to</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>needs-more-info</state>
  <tag>assert_redirected_to ruby1.9.2 testing</tag>
  <title>Strange behaviour of assert_redirected_to</title>
  <updated-at type="datetime">2011-02-14T12:26:54+00:00</updated-at>
  <user-id type="integer">7697</user-id>
  <version type="integer">2</version>
  <user-name>Andrew White</user-name>
  <creator-name>petRUShka</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6167</url>
  <priority-name>Low</priority-name>
  <original-body>I have such lines in routes.rb:

    resource :order
    match '/' =&gt; 'orders#new', :constraints =&gt; { :subdomain =&gt; /.+/ }

And in controller I have:
  
    redirect_to new_order_path(:subdomain =&gt; current_subdomain)

And I write such test: 
  
    @request.host = &quot;subdomain.&quot; + @request.host
    get :test
    assert_redirected_to(:action =&gt; :new)

So I get an error:

    Expected response to be a redirect to &lt;http://subdomain.test.host/&gt; but was a redirect to &lt;http://subdomain.test.host/order/new&gt;

If I delete `match '/'` from routes it is ok. 

I think that new_order_path can recognize that it is / but redirect_to can't.

Rails 3, Ruby 1.9.

subdomain realisation from railscast: http://railscasts.com/episodes/221-subdomains-in-rails-3</original-body>
  <latest-body>I have such lines in routes.rb:

    resource :order
    match '/' =&gt; 'orders#new', :constraints =&gt; { :subdomain =&gt; /.+/ }

And in controller I have:
  
    redirect_to new_order_path(:subdomain =&gt; current_subdomain)

And I write such test: 
  
    @request.host = &quot;subdomain.&quot; + @request.host
    get :test
    assert_redirected_to(:action =&gt; :new)

So I get an error:

    Expected response to be a redirect to &lt;http://subdomain.test.host/&gt; but was a redirect to &lt;http://subdomain.test.host/order/new&gt;

If I delete `match '/'` from routes it is ok. 

I think that new_order_path can recognize that it is / but redirect_to can't.

Rails 3, Ruby 1.9.

subdomain realisation from railscast: http://railscasts.com/episodes/221-subdomains-in-rails-3</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;I have such lines in routes.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resource :order
match '/' =&amp;gt; 'orders#new', :constraints =&amp;gt; { :subdomain =&amp;gt; /.+/ }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in controller I have:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;redirect_to new_order_path(:subdomain =&amp;gt; current_subdomain)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And I write such test:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@request.host = &quot;subdomain.&quot; + @request.host
get :test
assert_redirected_to(:action =&amp;gt; :new)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So I get an error:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Expected response to be a redirect to &amp;lt;http://subdomain.test.host/&amp;gt; but was a redirect to &amp;lt;http://subdomain.test.host/order/new&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I delete &lt;code&gt;match '/'&lt;/code&gt; from routes it is ok.&lt;/p&gt;
&lt;p&gt;I think that new_order_path can recognize that it is / but
redirect_to can't.&lt;/p&gt;
&lt;p&gt;Rails 3, Ruby 1.9.&lt;/p&gt;
&lt;p&gt;subdomain realisation from railscast: &lt;a href=
&quot;http://railscasts.com/episodes/221-subdomains-in-rails-3&quot;&gt;http://railscasts.com/episodes/221-subdomains-in-rails-3&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I have such lines in routes.rb:

    resource :order
    match '/' =&gt; 'orders#new', :constraints =&gt; { :subdomain =&gt; /.+/ }

And in controller I have:
  
    redirect_to new_order_path(:subdomain =&gt; current_subdomain)

And I write such test: 
  
    @request.host = &quot;subdomain.&quot; + @request.host
    get :test
    assert_redirected_to(:action =&gt; :new)

So I get an error:

    Expected response to be a redirect to &lt;http://subdomain.test.host/&gt; but was a redirect to &lt;http://subdomain.test.host/order/new&gt;

If I delete `match '/'` from routes it is ok. 

I think that new_order_path can recognize that it is / but redirect_to can't.

Rails 3, Ruby 1.9.

subdomain realisation from railscast: http://railscasts.com/episodes/221-subdomains-in-rails-3</body>
      <body-html>&lt;div&gt;&lt;p&gt;I have such lines in routes.rb:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;resource :order
match '/' =&amp;gt; 'orders#new', :constraints =&amp;gt; { :subdomain =&amp;gt; /.+/ }&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And in controller I have:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;redirect_to new_order_path(:subdomain =&amp;gt; current_subdomain)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;And I write such test:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;@request.host = &quot;subdomain.&quot; + @request.host
get :test
assert_redirected_to(:action =&amp;gt; :new)&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So I get an error:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;Expected response to be a redirect to &amp;lt;http://subdomain.test.host/&amp;gt; but was a redirect to &amp;lt;http://subdomain.test.host/order/new&amp;gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If I delete &lt;code&gt;match '/'&lt;/code&gt; from routes it is ok.&lt;/p&gt;
&lt;p&gt;I think that new_order_path can recognize that it is / but
redirect_to can't.&lt;/p&gt;
&lt;p&gt;Rails 3, Ruby 1.9.&lt;/p&gt;
&lt;p&gt;subdomain realisation from railscast: &lt;a href=
&quot;http://railscasts.com/episodes/221-subdomains-in-rails-3&quot;&gt;http://railscasts.com/episodes/221-subdomains-in-rails-3&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-15T08:42:49+00:00</created-at>
      <creator-id type="integer">64518</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6167</number>
      <permalink>strange-behaviour-of-assert_redirected_to</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>assert_redirected_to ruby1.9.2 testing</tag>
      <title>Strange behaviour of assert_redirected_to</title>
      <updated-at type="datetime">2010-12-15T08:42:51+00:00</updated-at>
      <user-id type="integer">64518</user-id>
      <version type="integer">1</version>
      <user-name>petRUShka</user-name>
      <creator-name>petRUShka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6167</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Not quite sure what you're trying to achieve here - the examples you've posted are quite different to the railscast. The named url helper new_order_path will always generate the full path '/order/new' and won't match the assert_redirected_to.

Are you trying to redirect a request from a default url to a subdomain url or the other way around</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not quite sure what you're trying to achieve here - the examples
you've posted are quite different to the railscast. The named url
helper new_order_path will always generate the full path
'/order/new' and won't match the assert_redirected_to.&lt;/p&gt;
&lt;p&gt;Are you trying to redirect a request from a default url to a
subdomain url or the other way around&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-14T12:26:46+00:00</created-at>
      <creator-id type="integer">64518</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6167</number>
      <permalink>strange-behaviour-of-assert_redirected_to</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>needs-more-info</state>
      <tag>assert_redirected_to ruby1.9.2 testing</tag>
      <title>Strange behaviour of assert_redirected_to</title>
      <updated-at type="datetime">2011-02-14T12:26:54+00:00</updated-at>
      <user-id type="integer">7697</user-id>
      <version type="integer">2</version>
      <user-name>Andrew White</user-name>
      <creator-name>petRUShka</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6167</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
