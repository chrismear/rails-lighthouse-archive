<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">22242</assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-09T21:15:59+00:00</created-at>
  <creator-id type="integer">24689</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6552</number>
  <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag>attr_accessible has_many_through_association rails3</tag>
  <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
  <updated-at type="datetime">2011-04-07T14:57:13+01:00</updated-at>
  <user-id type="integer">39101</user-id>
  <version type="integer">7</version>
  <user-name>dmitry zhelnin</user-name>
  <creator-name>Pawel</creator-name>
  <assigned-user-name>Dan Pickett</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
  <priority-name>Low</priority-name>
  <original-body>In the classic Group &lt;-&gt; Membership &lt;-&gt;  User scenario:

@@@ ruby
class Group
  has_many :memberships
  has_many :users, :through =&gt; :memberships
end

class Membership
  belongs_to :user
  belongs_to :group
end

class User
  has_many :memberships
end
@@@

If Membership has:
@@@ ruby
attr_protected :user_id, :group_id
@@@

Then executing:

@@@ ruby
group = Group.create!
user = User.create!

group.users &lt;&lt; user
group.users.include? user # =&gt; true
group.users.reload.include? user # =&gt; false
@@@

Causes membership creation to fail.

From my research, it appears this is due to new way of creating &quot;through&quot; models in Rails 3.
Through models are now created using mass-assignment.

The problem lies in ActiveRecord::Associations::HasManyThroughAssociation#insert_record method defined in lib/active_record/associations/has_many_through_association.rb file.

Here is a quick monkey patch which resolves the issue (put it in config/initializers/fix_has_many.rb):

@@@ ruby
class ActiveRecord::Associations::HasManyThroughAssociation
  protected

  def insert_record(record, force = true, validate = true)
    if record.new_record?
      if force
        record.save!
      else
        return false unless record.save(:validate =&gt; validate)
      end
    end

    through_association = @owner.send(@reflection.through_reflection.name)

    through_association.create! do |r|
      construct_join_attributes(record).each { |k, v| r.send &quot;#{k}=&quot;, v }
    end
  end
end
@@@</original-body>
  <latest-body>In the classic Group &lt;-&gt; Membership &lt;-&gt;  User scenario:

@@@ ruby
class Group
  has_many :memberships
  has_many :users, :through =&gt; :memberships
end

class Membership
  belongs_to :user
  belongs_to :group
end

class User
  has_many :memberships
end
@@@

If Membership has:
@@@ ruby
attr_protected :user_id, :group_id
@@@

Then executing:

@@@ ruby
group = Group.create!
user = User.create!

group.users &lt;&lt; user
group.users.include? user # =&gt; true
group.users.reload.include? user # =&gt; false
@@@

Causes membership creation to fail.

From my research, it appears this is due to new way of creating &quot;through&quot; models in Rails 3.
Through models are now created using mass-assignment.

The problem lies in ActiveRecord::Associations::HasManyThroughAssociation#insert_record method defined in lib/active_record/associations/has_many_through_association.rb file.

Here is a quick monkey patch which resolves the issue (put it in config/initializers/fix_has_many.rb):

@@@ ruby
class ActiveRecord::Associations::HasManyThroughAssociation
  protected

  def insert_record(record, force = true, validate = true)
    if record.new_record?
      if force
        record.save!
      else
        return false unless record.save(:validate =&gt; validate)
      end
    end

    through_association = @owner.send(@reflection.through_reflection.name)

    through_association.create! do |r|
      construct_join_attributes(record).each { |k, v| r.send &quot;#{k}=&quot;, v }
    end
  end
end
@@@</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;In the classic Group &amp;lt;-&amp;gt; Membership &amp;lt;-&amp;gt; User
scenario:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Group
  has_many :memberships
  has_many :users, :through =&amp;gt; :memberships
end

class Membership
  belongs_to :user
  belongs_to :group
end

class User
  has_many :memberships
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If Membership has:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;attr_protected :user_id, :group_id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then executing:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;group = Group.create!
user = User.create!

group.users &amp;lt;&amp;lt; user
group.users.include? user # =&amp;gt; true
group.users.reload.include? user # =&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Causes membership creation to fail.&lt;/p&gt;
&lt;p&gt;From my research, it appears this is due to new way of creating
&quot;through&quot; models in Rails 3.&lt;br&gt;
Through models are now created using mass-assignment.&lt;/p&gt;
&lt;p&gt;The problem lies in
ActiveRecord::Associations::HasManyThroughAssociation#insert_record
method defined in
lib/active_record/associations/has_many_through_association.rb
file.&lt;/p&gt;
&lt;p&gt;Here is a quick monkey patch which resolves the issue (put it in
config/initializers/fix_has_many.rb):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ActiveRecord::Associations::HasManyThroughAssociation
  protected

  def insert_record(record, force = true, validate = true)
    if record.new_record?
      if force
        record.save!
      else
        return false unless record.save(:validate =&amp;gt; validate)
      end
    end

    through_association = @owner.send(@reflection.through_reflection.name)

    through_association.create! do |r|
      construct_join_attributes(record).each { |k, v| r.send &quot;#{k}=&quot;, v }
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>In the classic Group &lt;-&gt; Membership &lt;-&gt;  User scenario:

@@@ ruby
class Group
  has_many :memberships
  has_many :users, :through =&gt; :memberships
end

class Membership
  belongs_to :user
  belongs_to :group
end

class User
  has_many :memberships
end
@@@

If Membership has:
@@@ ruby
attr_protected :user_id, :group_id
@@@

Then executing:

@@@ ruby
group = Group.create!
user = User.create!

group.users &lt;&lt; user
group.users.include? user # =&gt; true
group.users.reload.include? user # =&gt; false
@@@

Causes membership creation to fail.

From my research, it appears this is due to new way of creating &quot;through&quot; models in Rails 3.
Through models are now created using mass-assignment.

The problem lies in ActiveRecord::Associations::HasManyThroughAssociation#insert_record method defined in lib/active_record/associations/has_many_through_association.rb file.

Here is a quick monkey patch which resolves the issue (put it in config/initializers/fix_has_many.rb):

@@@ ruby
class ActiveRecord::Associations::HasManyThroughAssociation
  protected

  def insert_record(record, force = true, validate = true)
    if record.new_record?
      if force
        record.save!
      else
        return false unless record.save(:validate =&gt; validate)
      end
    end

    through_association = @owner.send(@reflection.through_reflection.name)

    through_association.create! do |r|
      construct_join_attributes(record).each { |k, v| r.send &quot;#{k}=&quot;, v }
    end
  end
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;In the classic Group &amp;lt;-&amp;gt; Membership &amp;lt;-&amp;gt; User
scenario:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Group
  has_many :memberships
  has_many :users, :through =&amp;gt; :memberships
end

class Membership
  belongs_to :user
  belongs_to :group
end

class User
  has_many :memberships
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;If Membership has:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;attr_protected :user_id, :group_id&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Then executing:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;group = Group.create!
user = User.create!

group.users &amp;lt;&amp;lt; user
group.users.include? user # =&amp;gt; true
group.users.reload.include? user # =&amp;gt; false&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Causes membership creation to fail.&lt;/p&gt;
&lt;p&gt;From my research, it appears this is due to new way of creating
&quot;through&quot; models in Rails 3.&lt;br&gt;
Through models are now created using mass-assignment.&lt;/p&gt;
&lt;p&gt;The problem lies in
ActiveRecord::Associations::HasManyThroughAssociation#insert_record
method defined in
lib/active_record/associations/has_many_through_association.rb
file.&lt;/p&gt;
&lt;p&gt;Here is a quick monkey patch which resolves the issue (put it in
config/initializers/fix_has_many.rb):&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;class ActiveRecord::Associations::HasManyThroughAssociation
  protected

  def insert_record(record, force = true, validate = true)
    if record.new_record?
      if force
        record.save!
      else
        return false unless record.save(:validate =&amp;gt; validate)
      end
    end

    through_association = @owner.send(@reflection.through_reflection.name)

    through_association.create! do |r|
      construct_join_attributes(record).each { |k, v| r.send &quot;#{k}=&quot;, v }
    end
  end
end&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-09T21:15:59+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6552</number>
      <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord rails3 has_many through mass-assignment security attr_accessible&quot;</tag>
      <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
      <updated-at type="datetime">2011-03-09T21:16:01+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">1</version>
      <user-name>Pawel</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22242</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>based on my reading of the code on edge in has_many_through association it is performing a direct assignment on both ends of the relationship and the assignment should be unaffected by attr security.

Can you provide a failing test case for this, Pawel?</body>
      <body-html>&lt;div&gt;&lt;p&gt;based on my reading of the code on edge in has_many_through
association it is performing a direct assignment on both ends of
the relationship and the assignment should be unaffected by attr
security.&lt;/p&gt;
&lt;p&gt;Can you provide a failing test case for this, Pawel?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-12T17:41:43+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
:tag: &quot;\&quot;activerecord rails3 has_many through mass-assignment security attr_accessible\&quot;&quot;
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6552</number>
      <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>attr_accessible has_many_through_association rails3</tag>
      <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
      <updated-at type="datetime">2011-03-12T17:41:51+00:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">2</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Dan Pickett</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22242</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I was testing this only on 3.0.5.
From reading the edge source code it appears to be fixed, so the bug could be closed now.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I was testing this only on 3.0.5.&lt;br&gt;
From reading the edge source code it appears to be fixed, so the
bug could be closed now.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-03-15T12:53:38+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6552</number>
      <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>attr_accessible has_many_through_association rails3</tag>
      <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
      <updated-at type="datetime">2011-03-15T12:53:48+00:00</updated-at>
      <user-id type="integer">24689</user-id>
      <version type="integer">3</version>
      <user-name>Pawel</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Dan Pickett</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22242</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-15T12:57:56+00:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6552</number>
      <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>attr_accessible has_many_through_association rails3</tag>
      <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
      <updated-at type="datetime">2011-03-15T12:58:04+00:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">4</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Dan Pickett</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22242</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The issue is still unresolved in 3.0.6</body>
      <body-html>&lt;div&gt;&lt;p&gt;The issue is still unresolved in 3.0.6&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-06T09:17:38+01:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6552</number>
      <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>attr_accessible has_many_through_association rails3</tag>
      <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
      <updated-at type="datetime">2011-04-06T09:17:47+01:00</updated-at>
      <user-id type="integer">39101</user-id>
      <version type="integer">5</version>
      <user-name>dmitry zhelnin</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Dan Pickett</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22242</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Dmitry,

Could you provide a failing test case? I'd be happy to look into it.

Thanks,
Dan</body>
      <body-html>&lt;div&gt;&lt;p&gt;Dmitry,&lt;/p&gt;
&lt;p&gt;Could you provide a failing test case? I'd be happy to look into
it.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;br&gt;
Dan&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-06T11:16:34+01:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6552</number>
      <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>attr_accessible has_many_through_association rails3</tag>
      <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
      <updated-at type="datetime">2011-04-06T11:16:44+01:00</updated-at>
      <user-id type="integer">22242</user-id>
      <version type="integer">6</version>
      <user-name>Dan Pickett</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Dan Pickett</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">22242</assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Yes, this test case fails for me:
https://github.com/whitered/mass_assignment_protection/blob/master/spec/models/group_spec.rb</body>
      <body-html>&lt;div&gt;&lt;p&gt;Yes, this test case fails for me:&lt;br&gt;
&lt;a href=
&quot;https://github.com/whitered/mass_assignment_protection/blob/master/spec/models/group_spec.rb&quot;&gt;
https://github.com/whitered/mass_assignment_protection/blob/master/...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-04-07T14:57:00+01:00</created-at>
      <creator-id type="integer">24689</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6552</number>
      <permalink>rails-3-has_many-through-forces-developer-to-make-_id-attributes-unprotected</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag>attr_accessible has_many_through_association rails3</tag>
      <title>Rails 3 has_many through forces developer to make *_id attributes unprotected</title>
      <updated-at type="datetime">2011-04-07T14:57:13+01:00</updated-at>
      <user-id type="integer">39101</user-id>
      <version type="integer">7</version>
      <user-name>dmitry zhelnin</user-name>
      <creator-name>Pawel</creator-name>
      <assigned-user-name>Dan Pickett</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6552</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
