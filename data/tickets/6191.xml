<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2011-03-03T09:20:22+00:00</created-at>
  <creator-id type="integer">129516</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">6191</number>
  <permalink>habtm-association-is-being-destroyed-before-the-before_destory-callbacks-are-executed</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>resolved</state>
  <tag nil="true"></tag>
  <title>HABTM association is being destroyed before the before_destory callbacks are executed</title>
  <updated-at type="datetime">2011-03-03T09:20:23+00:00</updated-at>
  <user-id type="integer">17393</user-id>
  <version type="integer">4</version>
  <user-name>Repository</user-name>
  <creator-name>Golly</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/6191</url>
  <priority-name nil="true"></priority-name>
  <original-body>Here is some example code.
Two models with a unique HABTM ass. on each other. One model has a before_destroy callback.

@@@ ruby
class AudioTag &lt; ActiveRecord::Base
  has_and_belongs_to_many :tracks, :uniq =&gt; true

  before_destroy do |r|
    logger.info &quot;[AudioTag] Before destroy&quot;
  end
end

class Track &lt; ActiveRecord::Base
  has_and_belongs_to_many :audio_tags, :uniq =&gt; true
end
@@@

Now the problem: from a unit test I run this: `audio_tag.destroy`
As you can see from the following logging, the association is destroyed before the callbacks are called.

@@@ txt
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (0.1ms)  select count(*) from audio_tags_tracks
  AudioTag Load (0.4ms)  SELECT `audio_tags`.* FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211) LIMIT 1
  Track Load (0.4ms)  SELECT * FROM `tracks` INNER JOIN `audio_tags_tracks` ON `tracks`.id = `audio_tags_tracks`.track_id WHERE (`audio_tags_tracks`.audio_tag_id = 235380211 )
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.1ms)  SAVEPOINT active_record_1
[AudioTag] Before destroy
  AREL (0.2ms)  DELETE FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (18.4ms)  ROLLBACK
@@@

So to be extra clear, the two lines that matter here are:
@@@ txt
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)

[AudioTag] Before destroy
@@@

The before_destroy callbacks should be called before any modifications are made to the model.

Most likely related to #4386.</original-body>
  <latest-body>Here is some example code.
Two models with a unique HABTM ass. on each other. One model has a before_destroy callback.

@@@ ruby
class AudioTag &lt; ActiveRecord::Base
  has_and_belongs_to_many :tracks, :uniq =&gt; true

  before_destroy do |r|
    logger.info &quot;[AudioTag] Before destroy&quot;
  end
end

class Track &lt; ActiveRecord::Base
  has_and_belongs_to_many :audio_tags, :uniq =&gt; true
end
@@@

Now the problem: from a unit test I run this: `audio_tag.destroy`
As you can see from the following logging, the association is destroyed before the callbacks are called.

@@@ txt
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (0.1ms)  select count(*) from audio_tags_tracks
  AudioTag Load (0.4ms)  SELECT `audio_tags`.* FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211) LIMIT 1
  Track Load (0.4ms)  SELECT * FROM `tracks` INNER JOIN `audio_tags_tracks` ON `tracks`.id = `audio_tags_tracks`.track_id WHERE (`audio_tags_tracks`.audio_tag_id = 235380211 )
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.1ms)  SAVEPOINT active_record_1
[AudioTag] Before destroy
  AREL (0.2ms)  DELETE FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (18.4ms)  ROLLBACK
@@@

So to be extra clear, the two lines that matter here are:
@@@ txt
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)

[AudioTag] Before destroy
@@@

The before_destroy callbacks should be called before any modifications are made to the model.

Most likely related to #4386.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Here is some example code.&lt;br&gt;
Two models with a unique HABTM ass. on each other. One model has a
before_destroy callback.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class AudioTag &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :tracks, :uniq =&amp;gt; true

  before_destroy do |r|
    logger.info &quot;[AudioTag] Before destroy&quot;
  end
end

class Track &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :audio_tags, :uniq =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now the problem: from a unit test I run this:
&lt;code&gt;audio_tag.destroy&lt;/code&gt;&lt;br&gt;
As you can see from the following logging, the association is
destroyed before the callbacks are called.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;txt&quot;&gt;  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (0.1ms)  select count(*) from audio_tags_tracks
  AudioTag Load (0.4ms)  SELECT `audio_tags`.* FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211) LIMIT 1
  Track Load (0.4ms)  SELECT * FROM `tracks` INNER JOIN `audio_tags_tracks` ON `tracks`.id = `audio_tags_tracks`.track_id WHERE (`audio_tags_tracks`.audio_tag_id = 235380211 )
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.1ms)  SAVEPOINT active_record_1
[AudioTag] Before destroy
  AREL (0.2ms)  DELETE FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (18.4ms)  ROLLBACK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So to be extra clear, the two lines that matter here
are:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;txt&quot;&gt;  AREL (0.2ms)  DELETE FROM &lt;/code&gt;audio_tags_tracks WHERE &lt;code&gt;audio_tags_tracks&lt;/code&gt;.&lt;code&gt;audio_tag_id&lt;/code&gt; = 235380211 AND &lt;code&gt;audio_tags_tracks&lt;/code&gt;.&lt;code&gt;track_id&lt;/code&gt; IN (761148351)

&lt;br&gt;
[AudioTag] Before destroy
&lt;/pre&gt;
&lt;p&gt;The before_destroy callbacks should be called before any
modifications are made to the model.&lt;/p&gt;
&lt;p&gt;Most likely related to &lt;a href=&quot;/projects/8994/tickets/4386&quot;
title=&quot;Ticket #4386&quot;&gt;#4386&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is some example code.
Two models with a unique HABTM ass. on each other. One model has a before_destroy callback.

@@@ ruby
class AudioTag &lt; ActiveRecord::Base
  has_and_belongs_to_many :tracks, :uniq =&gt; true

  before_destroy do |r|
    logger.info &quot;[AudioTag] Before destroy&quot;
  end
end

class Track &lt; ActiveRecord::Base
  has_and_belongs_to_many :audio_tags, :uniq =&gt; true
end
@@@

Now the problem: from a unit test I run this: `audio_tag.destroy`
As you can see from the following logging, the association is destroyed before the callbacks are called.

@@@ txt
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (0.1ms)  select count(*) from audio_tags_tracks
  AudioTag Load (0.4ms)  SELECT `audio_tags`.* FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211) LIMIT 1
  Track Load (0.4ms)  SELECT * FROM `tracks` INNER JOIN `audio_tags_tracks` ON `tracks`.id = `audio_tags_tracks`.track_id WHERE (`audio_tags_tracks`.audio_tag_id = 235380211 )
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.1ms)  SAVEPOINT active_record_1
[AudioTag] Before destroy
  AREL (0.2ms)  DELETE FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (18.4ms)  ROLLBACK
@@@

So to be extra clear, the two lines that matter here are:
@@@ txt
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)

[AudioTag] Before destroy
@@@

The before_destroy callbacks should be called before any modifications are made to the model.

Most likely related to #4386.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is some example code.&lt;br&gt;
Two models with a unique HABTM ass. on each other. One model has a
before_destroy callback.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class AudioTag &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :tracks, :uniq =&amp;gt; true

  before_destroy do |r|
    logger.info &quot;[AudioTag] Before destroy&quot;
  end
end

class Track &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :audio_tags, :uniq =&amp;gt; true
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now the problem: from a unit test I run this:
&lt;code&gt;audio_tag.destroy&lt;/code&gt;&lt;br&gt;
As you can see from the following logging, the association is
destroyed before the callbacks are called.&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;txt&quot;&gt;  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (0.1ms)  select count(*) from audio_tags_tracks
  AudioTag Load (0.4ms)  SELECT `audio_tags`.* FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211) LIMIT 1
  Track Load (0.4ms)  SELECT * FROM `tracks` INNER JOIN `audio_tags_tracks` ON `tracks`.id = `audio_tags_tracks`.track_id WHERE (`audio_tags_tracks`.audio_tag_id = 235380211 )
  SQL (0.1ms)  SAVEPOINT active_record_1
  AREL (0.2ms)  DELETE FROM `audio_tags_tracks` WHERE `audio_tags_tracks`.`audio_tag_id` = 235380211 AND `audio_tags_tracks`.`track_id` IN (761148351)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.1ms)  SAVEPOINT active_record_1
[AudioTag] Before destroy
  AREL (0.2ms)  DELETE FROM `audio_tags` WHERE (`audio_tags`.`id` = 235380211)
  SQL (0.1ms)  RELEASE SAVEPOINT active_record_1
  SQL (0.2ms)  SELECT COUNT(*) FROM `audio_tags`
  SQL (0.1ms)  SELECT COUNT(*) FROM `tracks`
  SQL (18.4ms)  ROLLBACK&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;So to be extra clear, the two lines that matter here
are:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;txt&quot;&gt;  AREL (0.2ms)  DELETE FROM &lt;/code&gt;audio_tags_tracks WHERE &lt;code&gt;audio_tags_tracks&lt;/code&gt;.&lt;code&gt;audio_tag_id&lt;/code&gt; = 235380211 AND &lt;code&gt;audio_tags_tracks&lt;/code&gt;.&lt;code&gt;track_id&lt;/code&gt; IN (761148351)

&lt;br&gt;
[AudioTag] Before destroy
&lt;/pre&gt;
&lt;p&gt;The before_destroy callbacks should be called before any
modifications are made to the model.&lt;/p&gt;
&lt;p&gt;Most likely related to &lt;a href=&quot;/projects/8994/tickets/4386&quot;
title=&quot;Ticket #4386&quot;&gt;#4386&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-12-19T08:17:05+00:00</created-at>
      <creator-id type="integer">129516</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6191</number>
      <permalink>habtm-association-is-being-destroyed-before-the-before_destory-callbacks-are-executed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>HABTM association is being destroyed before the before_destory callbacks are executed</title>
      <updated-at type="datetime">2010-12-19T08:18:05+00:00</updated-at>
      <user-id type="integer">129516</user-id>
      <version type="integer">1</version>
      <user-name>Golly</user-name>
      <creator-name>Golly</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6191</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This looks to me like a serious issue, because it's no longer possible to use a before_destroy callback to check for the existence of associated HABTM records.  In the following example, the callback never sees any associated lessons:

@@@ ruby
class Student &lt; ActiveRecord::Base
  has_and_belongs_to_many :lessons
  before_destroy {|s| s.lessons.empty? }    
end
@@@

This worked in Rails 2.x, and broke when I tried to upgrade to Rails 3.  

I tried defining the callback before the association to tweak their order, but it doesn't solve the problem.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This looks to me like a serious issue, because it's no longer
possible to use a before_destroy callback to check for the
existence of associated HABTM records. In the following example,
the callback never sees any associated lessons:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class Student &amp;lt; ActiveRecord::Base
  has_and_belongs_to_many :lessons
  before_destroy {|s| s.lessons.empty? }    
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This worked in Rails 2.x, and broke when I tried to upgrade to
Rails 3.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;I tried defining the callback before the association to tweak
their order, but it doesn't solve the problem.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-04T17:52:41+00:00</created-at>
      <creator-id type="integer">129516</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6191</number>
      <permalink>habtm-association-is-being-destroyed-before-the-before_destory-callbacks-are-executed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>HABTM association is being destroyed before the before_destory callbacks are executed</title>
      <updated-at type="datetime">2011-02-04T17:52:46+00:00</updated-at>
      <user-id type="integer">135698</user-id>
      <version type="integer">2</version>
      <user-name>Ed4</user-name>
      <creator-name>Golly</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6191</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Here is a patch to fix this, including a new unit test.  There was an existing unit test that actually tests for the wrong behavior (it forces the deletion of association records *before* entering the before_destroy callback), so I updated it as well.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Here is a patch to fix this, including a new unit test. There
was an existing unit test that actually tests for the wrong
behavior (it forces the deletion of association records
&lt;em&gt;before&lt;/em&gt; entering the before_destroy callback), so I updated
it as well.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-04T21:09:20+00:00</created-at>
      <creator-id type="integer">129516</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6191</number>
      <permalink>habtm-association-is-being-destroyed-before-the-before_destory-callbacks-are-executed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>HABTM association is being destroyed before the before_destory callbacks are executed</title>
      <updated-at type="datetime">2011-02-04T21:09:27+00:00</updated-at>
      <user-id type="integer">135698</user-id>
      <version type="integer">3</version>
      <user-name>Ed4</user-name>
      <creator-name>Golly</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6191</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>(from [909588d964bf27f20142a0b4d57890114a8d4a7a]) Fixing ordering of HABTM association deletion [#6191 state:resolved]

Signed-off-by: Santiago Pastorino &lt;santiago@wyeworks.com&gt;
https://github.com/rails/rails/commit/909588d964bf27f20142a0b4d57890114a8d4a7a</body>
      <body-html>&lt;div&gt;&lt;p&gt;(from &lt;a href=
&quot;/projects/8994/changesets/909588d964bf27f20142a0b4d57890114a8d4a7a&quot;
title=
&quot;Changeset [909588d964bf27f20142a0b4d57890114a8d4a7a]&quot;&gt;[909588d964bf27f20142a0b4d57890114a8d4a7a]&lt;/a&gt;)
Fixing ordering of HABTM association deletion [&lt;a href=
&quot;/projects/8994/tickets/6191&quot; title=&quot;Ticket #6191&quot;&gt;#6191&lt;/a&gt;
state:resolved]&lt;/p&gt;
&lt;p&gt;Signed-off-by: Santiago Pastorino
&lt;a&gt;santiago@wyeworks.com&lt;/a&gt;&lt;br&gt;
&lt;a href=
&quot;https://github.com/rails/rails/commit/909588d964bf27f20142a0b4d57890114a8d4a7a&quot;&gt;
https://github.com/rails/rails/commit/909588d964bf27f20142a0b4d5789...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-04T21:40:59+00:00</created-at>
      <creator-id type="integer">129516</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6191</number>
      <permalink>habtm-association-is-being-destroyed-before-the-before_destory-callbacks-are-executed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>HABTM association is being destroyed before the before_destory callbacks are executed</title>
      <updated-at type="datetime">2011-02-04T21:41:07+00:00</updated-at>
      <user-id type="integer">17393</user-id>
      <version type="integer">4</version>
      <user-name>Repository</user-name>
      <creator-name>Golly</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6191</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci sneakers&lt;/a&gt; gucci sneakers
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes&lt;/a&gt; gucci shoes
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci outlet&lt;/a&gt; gucci outlet&lt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes for sale&lt;/a&gt; gucci shoes for sale</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci sneakers&lt;/a&gt;
gucci sneakers&lt;br&gt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes&lt;/a&gt; gucci
shoes&lt;br&gt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci outlet&lt;/a&gt; gucci
outlet&amp;lt;&lt;br&gt;
&lt;a href=&quot;http://www.guccioutletkey.com/&quot;&gt;gucci shoes for sale&lt;/a&gt;
gucci shoes for sale&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-03-03T08:07:42+00:00</created-at>
      <creator-id type="integer">129516</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">6191</number>
      <permalink>habtm-association-is-being-destroyed-before-the-before_destory-callbacks-are-executed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>resolved</state>
      <tag nil="true"></tag>
      <title>HABTM association is being destroyed before the before_destory callbacks are executed</title>
      <updated-at type="datetime">2011-03-03T09:20:22+00:00</updated-at>
      <user-id type="integer">139624</user-id>
      <version type="integer">5</version>
      <user-name>cheap coach bags</user-name>
      <creator-name>Golly</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/6191</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>2d75779fbf466760533cfa1865cbb5c2324fa8a8</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2011-02-04T21:09:20+00:00</created-at>
      <filename>patch.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">896969</id>
      <size type="integer">4760</size>
      <uploader-id type="integer">135698</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/896969/patch.diff</url>
    </attachment>
  </attachments>
</ticket>
