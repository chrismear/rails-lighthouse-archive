<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-03-24T00:39:48+00:00</created-at>
  <creator-id type="integer">1272</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">71472</milestone-id>
  <number type="integer">2320</number>
  <permalink>double-destroy-should-only-decrement-counters-once</permalink>
  <priority type="integer">1488</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>active_record bug patch</tag>
  <title>double destroy should only decrement counters once</title>
  <updated-at type="datetime">2011-02-02T17:36:54+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">4</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Ben Tucker</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2320</url>
  <milestone-title>3.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>1. call destroy on an object with a belongs_to association with counter_cache turned on
2. call destroy a second time on same object

Expected behavior: counter_cache is decremented once since a total of one object was removed
Actual behavior: counter_cache is decremented twice

Proposed patch solves this but in a non-ideal way since it adds a call to AR::B#exists? prior to every destroy.  Presently when AR::B#destroy is called it freezes the object.  We could check AR::B#frozen? instead, but this would also catch cases of frozen objects which have not yet been deleted.

The ideal solution would be an AR::B#destroyed? methods which could tell us if AR::B#destroy had been successfully called on the object.</original-body>
  <latest-body>1. call destroy on an object with a belongs_to association with counter_cache turned on
2. call destroy a second time on same object

Expected behavior: counter_cache is decremented once since a total of one object was removed
Actual behavior: counter_cache is decremented twice

Proposed patch solves this but in a non-ideal way since it adds a call to AR::B#exists? prior to every destroy.  Presently when AR::B#destroy is called it freezes the object.  We could check AR::B#frozen? instead, but this would also catch cases of frozen objects which have not yet been deleted.

The ideal solution would be an AR::B#destroyed? methods which could tell us if AR::B#destroy had been successfully called on the object.</latest-body>
  <original-body-html>&lt;div&gt;&lt;ol&gt;
&lt;li&gt;call destroy on an object with a belongs_to association with
counter_cache turned on&lt;/li&gt;
&lt;li&gt;call destroy a second time on same object&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Expected behavior: counter_cache is decremented once since a
total of one object was removed Actual behavior: counter_cache is
decremented twice&lt;/p&gt;
&lt;p&gt;Proposed patch solves this but in a non-ideal way since it adds
a call to AR::B#exists? prior to every destroy. Presently when
AR::B#destroy is called it freezes the object. We could check
AR::B#frozen? instead, but this would also catch cases of frozen
objects which have not yet been deleted.&lt;/p&gt;
&lt;p&gt;The ideal solution would be an AR::B#destroyed? methods which
could tell us if AR::B#destroy had been successfully called on the
object.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>1. call destroy on an object with a belongs_to association with counter_cache turned on
2. call destroy a second time on same object

Expected behavior: counter_cache is decremented once since a total of one object was removed
Actual behavior: counter_cache is decremented twice

Proposed patch solves this but in a non-ideal way since it adds a call to AR::B#exists? prior to every destroy.  Presently when AR::B#destroy is called it freezes the object.  We could check AR::B#frozen? instead, but this would also catch cases of frozen objects which have not yet been deleted.

The ideal solution would be an AR::B#destroyed? methods which could tell us if AR::B#destroy had been successfully called on the object.</body>
      <body-html>&lt;div&gt;&lt;ol&gt;
&lt;li&gt;call destroy on an object with a belongs_to association with
counter_cache turned on&lt;/li&gt;
&lt;li&gt;call destroy a second time on same object&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Expected behavior: counter_cache is decremented once since a
total of one object was removed Actual behavior: counter_cache is
decremented twice&lt;/p&gt;
&lt;p&gt;Proposed patch solves this but in a non-ideal way since it adds
a call to AR::B#exists? prior to every destroy. Presently when
AR::B#destroy is called it freezes the object. We could check
AR::B#frozen? instead, but this would also catch cases of frozen
objects which have not yet been deleted.&lt;/p&gt;
&lt;p&gt;The ideal solution would be an AR::B#destroyed? methods which
could tell us if AR::B#destroy had been successfully called on the
object.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-03-24T00:39:48+00:00</created-at>
      <creator-id type="integer">1272</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">2320</number>
      <permalink>double-destroy-should-only-decrement-counters-once</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bug patch</tag>
      <title>double destroy should only decrement counters once</title>
      <updated-at type="datetime">2009-03-24T00:39:50+00:00</updated-at>
      <user-id type="integer">1272</user-id>
      <version type="integer">1</version>
      <user-name>Ben Tucker</user-name>
      <creator-name>Ben Tucker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2320</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>[[bulk edit](/projects/8994/bulk_edits/19097)]</body>
      <body-html>&lt;div&gt;&lt;p&gt;[&lt;a href=&quot;/projects/8994/bulk_edits/19097&quot;&gt;bulk edit&lt;/a&gt;]&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-05-04T18:48:43+01:00</created-at>
      <creator-id type="integer">1272</creator-id>
      <diffable-attributes type="yaml">--- 
:milestone: 9903
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2320</number>
      <permalink>double-destroy-should-only-decrement-counters-once</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>active_record bug patch</tag>
      <title>double destroy should only decrement counters once</title>
      <updated-at type="datetime">2010-05-04T18:48:43+01:00</updated-at>
      <user-id type="integer">85</user-id>
      <version type="integer">2</version>
      <user-name>Jeremy Kemper</user-name>
      <creator-name>Ben Tucker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2320</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:40:52+00:00</created-at>
      <creator-id type="integer">1272</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
:state: new
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2320</number>
      <permalink>double-destroy-should-only-decrement-counters-once</permalink>
      <priority type="integer">1488</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>active_record bug patch</tag>
      <title>double destroy should only decrement counters once</title>
      <updated-at type="datetime">2011-02-02T17:36:08+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Ben Tucker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2320</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:40:54+00:00</created-at>
      <creator-id type="integer">1272</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer">71472</milestone-id>
      <number type="integer">2320</number>
      <permalink>double-destroy-should-only-decrement-counters-once</permalink>
      <priority type="integer">1488</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>active_record bug patch</tag>
      <title>double destroy should only decrement counters once</title>
      <updated-at type="datetime">2011-02-02T17:36:54+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Ben Tucker</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2320</url>
      <milestone-title>3.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>f70d296b119558defa9e63e32bd147f41371ac06</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-03-24T20:45:37+00:00</created-at>
      <filename>btucker-counter-cache-double-destroy.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">103595</id>
      <size type="integer">2416</size>
      <uploader-id type="integer">1272</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/103595/btucker-counter-cache-double-destroy.diff</url>
    </attachment>
  </attachments>
</ticket>
