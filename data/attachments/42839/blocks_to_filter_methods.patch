From ed09dd62e06ed5642bf0728e83ee4a8ebbf33467 Mon Sep 17 00:00:00 2001
From: Brennan Dunn <me@brennandunn.com>
Date: Sun, 31 Aug 2008 17:44:32 -0400
Subject: [PATCH] Support for passing blocks of code to before/after_filter methods using :with option

---
 actionpack/lib/action_controller/filters.rb |   21 +++++++++++++++++++--
 actionpack/test/controller/filters_test.rb  |   16 ++++++++++++++++
 2 files changed, 35 insertions(+), 2 deletions(-)

diff --git a/actionpack/lib/action_controller/filters.rb b/actionpack/lib/action_controller/filters.rb
index 9022b8b..5370654 100644
--- a/actionpack/lib/action_controller/filters.rb
+++ b/actionpack/lib/action_controller/filters.rb
@@ -443,6 +443,23 @@ module ActionController #:nodoc:
     #       end
     #   end
     #
+    # == Filter options
+    #
+    # Filters method may accept arbitrary blocks of code to execute specific logic
+    # exterior to the original method. Accepts a Proc object with the current controller
+    # instance as an argument (<tt>:with => proc { |c| c.redirect_to other_login_path }</tt>).
+    #
+    #   class ApplicationController < ActionController::Base
+    #     protected
+    #       def redirect_unless_logged_in
+    #         block_given? ? yield(self) : redirect_to(login_path)
+    #       end
+    #   end
+    #
+    #   class SpecialController < ApplicationController
+    #     before_filter :redirect_unless_logged_in, :with => proc { |c| c.redirect_to special_login_path 
+    #   end
+    #
     # == Filter Chain Halting
     #
     # <tt>before_filter</tt> and <tt>around_filter</tt> may halt the request
@@ -626,7 +643,7 @@ module ActionController #:nodoc:
 
             case filter
             when BeforeFilter
-              filter.call(self)  # invoke before filter
+              filter.call(self, &filter.options[:with])  # invoke before filter
               index = index.next
               break if @before_filter_chain_aborted
             when AroundFilter
@@ -659,7 +676,7 @@ module ActionController #:nodoc:
             case filter
             when AfterFilter
               seen_after_filter = true
-              filter.call(self)  # invoke after filter
+              filter.call(self, &filter.options[:with])  # invoke after filter
             else
               # implementation error or someone has mucked with the filter chain
               raise ActionControllerError, "filter #{filter.inspect} was in the wrong place!" if seen_after_filter
diff --git a/actionpack/test/controller/filters_test.rb b/actionpack/test/controller/filters_test.rb
index dafa344..1b58d20 100644
--- a/actionpack/test/controller/filters_test.rb
+++ b/actionpack/test/controller/filters_test.rb
@@ -133,6 +133,16 @@ class FilterTest < Test::Unit::TestCase
   class AnomolousYetValidConditionController < ConditionalFilterController
     before_filter(ConditionalClassFilter, :ensure_login, Proc.new {|c| c.instance_variable_set(:"@ran_proc_filter1", true)}, :except => :show_without_filter) { |c| c.instance_variable_set(:"@ran_proc_filter2", true)}
   end
+  
+  class FilterMethodTakingBlockController < ConditionalFilterController
+    before_filter :run_before, :with => Proc.new { |c| c.instance_variable_set(:"@ran_from_with_before", true) }
+    after_filter :run_after, :with => Proc.new { |c| c.instance_variable_set(:"@ran_from_with_after", true)}
+    private
+      def run_before
+        yield(self)
+      end
+      alias :run_after :run_before
+  end
 
   class ConditionalOptionsFilter < ConditionalFilterController
     before_filter :ensure_login, :if => Proc.new { |c| true }
@@ -494,6 +504,12 @@ class FilterTest < Test::Unit::TestCase
     assert !response.template.assigns["ran_proc_filter1"]
     assert !response.template.assigns["ran_proc_filter2"]
   end
+  
+  def test_filter_method_taking_block
+    response = test_process(FilterMethodTakingBlockController)
+    assert response.template.assigns["ran_from_with_before"]
+    assert response.template.assigns["ran_from_with_after"]
+  end
 
   def test_running_conditional_options
     response = test_process(ConditionalOptionsFilter)
-- 
1.5.6.4

