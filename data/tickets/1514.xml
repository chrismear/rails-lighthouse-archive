<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-12-03T16:27:31+00:00</created-at>
  <creator-id type="integer">39664</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1514</number>
  <permalink>activerecordbase-minimum-and-maximum-methods-do-not-return-datetimes-in-local-timezone</permalink>
  <priority type="integer">877</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>ActiveRecord::Base minimum and maximum methods do not return datetimes in local timezone</title>
  <updated-at type="datetime">2009-02-11T17:01:01+00:00</updated-at>
  <user-id type="integer">22887</user-id>
  <version type="integer">3</version>
  <user-name>Sean Kirby</user-name>
  <creator-name>James Ho</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1514</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>Whenever you do a minimum or maximum call on a datetime field of a has-many collection of ActiveRecord objects, the resulting datetime is not converted into the local timezone.

This is not consistent behaviour since ActiveRecord will always convert the datetime fields into the local timezone otherwise.  (even if you use find_by_sql)

Example:
 * Database is set to store datetimes in UTC
 * Local timezone is set to EST
 * Milestone model has many Ticket objects
 * Ticket model has a created_at datetime field
 * milestone.tickets.minimum(:datetime) will return a datetime in UTC zone</original-body>
  <latest-body>Whenever you do a minimum or maximum call on a datetime field of a has-many collection of ActiveRecord objects, the resulting datetime is not converted into the local timezone.

This is not consistent behaviour since ActiveRecord will always convert the datetime fields into the local timezone otherwise.  (even if you use find_by_sql)

Example:
 * Database is set to store datetimes in UTC
 * Local timezone is set to EST
 * Milestone model has many Ticket objects
 * Ticket model has a created_at datetime field
 * milestone.tickets.minimum(:datetime) will return a datetime in UTC zone</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Whenever you do a minimum or maximum call on a datetime field of
a has-many collection of ActiveRecord objects, the resulting
datetime is not converted into the local timezone.&lt;/p&gt;
&lt;p&gt;This is not consistent behaviour since ActiveRecord will always
convert the datetime fields into the local timezone otherwise.
(even if you use find_by_sql)&lt;/p&gt;
&lt;p&gt;Example: * Database is set to store datetimes in UTC * Local
timezone is set to EST * Milestone model has many Ticket objects *
Ticket model has a created_at datetime field *
milestone.tickets.minimum(:datetime) will return a datetime in UTC
zone&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Whenever you do a minimum or maximum call on a datetime field of a has-many collection of ActiveRecord objects, the resulting datetime is not converted into the local timezone.

This is not consistent behaviour since ActiveRecord will always convert the datetime fields into the local timezone otherwise.  (even if you use find_by_sql)

Example:

Database is set to store datetimes in UTC

Local timezone is set to EST

Milestone model has many Ticket objects

Ticket model has a created_at datetime field

milestone.tickets.minimum(:created_at) will return a datetime in UTC zone</body>
      <body-html>&lt;div&gt;&lt;p&gt;Whenever you do a minimum or maximum call on a datetime field of
a has-many collection of ActiveRecord objects, the resulting
datetime is not converted into the local timezone.&lt;/p&gt;
&lt;p&gt;This is not consistent behaviour since ActiveRecord will always
convert the datetime fields into the local timezone otherwise.
(even if you use find_by_sql)&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Database is set to store datetimes in UTC&lt;/p&gt;
&lt;p&gt;Local timezone is set to EST&lt;/p&gt;
&lt;p&gt;Milestone model has many Ticket objects&lt;/p&gt;
&lt;p&gt;Ticket model has a created_at datetime field&lt;/p&gt;
&lt;p&gt;milestone.tickets.minimum(:created_at) will return a datetime in
UTC zone&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-12-03T16:27:31+00:00</created-at>
      <creator-id type="integer">39664</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1514</number>
      <permalink>activerecordbase-minimum-and-maximum-methods-do-not-return-datetimes-in-local-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Base minimum and maximum methods do not return datetimes in local timezone</title>
      <updated-at type="datetime">2008-12-03T16:29:28+00:00</updated-at>
      <user-id type="integer">39664</user-id>
      <version type="integer">1</version>
      <user-name>James Ho</user-name>
      <creator-name>James Ho</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1514</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hmm I think the current behavior actually makes sense here -- the time zone conversions are done with custom attribute reader and writer methods; i.e., they read and write values to the attributes hash. A calculation doesn't involve the attributes hash at all.

Similarly, if you created a custom reader method for, say, a length method, that read_attribute(:length) and converted from meters to feet or whatever, this conversion wouldn't be invoked for a :minimum calculation, either -- you'd get back the minimum value in whatever scale the db stored it in.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hmm I think the current behavior actually makes sense here --
the time zone conversions are done with custom attribute reader and
writer methods; i.e., they read and write values to the attributes
hash. A calculation doesn't involve the attributes hash at all.&lt;/p&gt;
&lt;p&gt;Similarly, if you created a custom reader method for, say, a
length method, that read_attribute(:length) and converted from
meters to feet or whatever, this conversion wouldn't be invoked for
a :minimum calculation, either -- you'd get back the minimum value
in whatever scale the db stored it in.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-08T18:08:58+00:00</created-at>
      <creator-id type="integer">39664</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1514</number>
      <permalink>activerecordbase-minimum-and-maximum-methods-do-not-return-datetimes-in-local-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Base minimum and maximum methods do not return datetimes in local timezone</title>
      <updated-at type="datetime">2009-02-08T18:09:03+00:00</updated-at>
      <user-id type="integer">15783</user-id>
      <version type="integer">2</version>
      <user-name>Geoff Buesing</user-name>
      <creator-name>James Ho</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1514</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If the behaviour isn't going to get changed, how about a clarification in the docs that this method is going directly to the db?  That would at least make this behaviour more obvious.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If the behaviour isn't going to get changed, how about a
clarification in the docs that this method is going directly to the
db? That would at least make this behaviour more obvious.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-02-11T17:00:56+00:00</created-at>
      <creator-id type="integer">39664</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1514</number>
      <permalink>activerecordbase-minimum-and-maximum-methods-do-not-return-datetimes-in-local-timezone</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>ActiveRecord::Base minimum and maximum methods do not return datetimes in local timezone</title>
      <updated-at type="datetime">2009-02-11T17:01:01+00:00</updated-at>
      <user-id type="integer">22887</user-id>
      <version type="integer">3</version>
      <user-name>Sean Kirby</user-name>
      <creator-name>James Ho</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1514</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
