<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-08-19T21:35:38+01:00</created-at>
  <creator-id type="integer">34876</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5414</number>
  <permalink>cannot-rescue-from-actioncontrollerunknownhttpmethod</permalink>
  <priority type="integer">0</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>rails</tag>
  <title>Cannot rescue from ActionController::UnknownHttpMethod</title>
  <updated-at type="datetime">2011-02-02T20:05:56+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">3</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Bill Kirtley</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5414</url>
  <priority-name nil="true"></priority-name>
  <original-body>Requests that come in with unknown HTTP verbs ring alarms and I'd like to send them away with a 405 method_not_allowed for their trouble.

The approach I would think would work:

rescue_from ActionController::UnknownHttpMethod, :with =&gt; proc { head :method_not_allowed }

... doesn't work, as an exception is raised trying to interpret the request *to log it*.  Alarms ring, client sees 500 instead of 405.

The fix seems to be reasonably well contained in 2-3-stable, but gets really fuzzy in the stack of middlewares and gems in 3-0-stable.

In 3-0-stable the exception is raised in the ActionDispatch::Request#request_method, which is documented to &quot;return the HTTP method that the application should see&quot;, with no mention of restricting to &quot;valid&quot; methods, or raising exceptions.  So it seems reasonable to just remove the check there.

But *somebody* ought to be checking, maybe in the dispatcher?  Have a separate check for valid methods there?</original-body>
  <latest-body>Requests that come in with unknown HTTP verbs ring alarms and I'd like to send them away with a 405 method_not_allowed for their trouble.

The approach I would think would work:

rescue_from ActionController::UnknownHttpMethod, :with =&gt; proc { head :method_not_allowed }

... doesn't work, as an exception is raised trying to interpret the request *to log it*.  Alarms ring, client sees 500 instead of 405.

The fix seems to be reasonably well contained in 2-3-stable, but gets really fuzzy in the stack of middlewares and gems in 3-0-stable.

In 3-0-stable the exception is raised in the ActionDispatch::Request#request_method, which is documented to &quot;return the HTTP method that the application should see&quot;, with no mention of restricting to &quot;valid&quot; methods, or raising exceptions.  So it seems reasonable to just remove the check there.

But *somebody* ought to be checking, maybe in the dispatcher?  Have a separate check for valid methods there?</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;Requests that come in with unknown HTTP verbs ring alarms and
I'd like to send them away with a 405 method_not_allowed for their
trouble.&lt;/p&gt;
&lt;p&gt;The approach I would think would work:&lt;/p&gt;
&lt;p&gt;rescue_from ActionController::UnknownHttpMethod, :with =&amp;gt;
proc { head :method_not_allowed }&lt;/p&gt;
&lt;p&gt;... doesn't work, as an exception is raised trying to interpret
the request &lt;em&gt;to log it&lt;/em&gt;. Alarms ring, client sees 500
instead of 405.&lt;/p&gt;
&lt;p&gt;The fix seems to be reasonably well contained in 2-3-stable, but
gets really fuzzy in the stack of middlewares and gems in
3-0-stable.&lt;/p&gt;
&lt;p&gt;In 3-0-stable the exception is raised in the
ActionDispatch::Request#request_method, which is documented to
&quot;return the HTTP method that the application should see&quot;, with no
mention of restricting to &quot;valid&quot; methods, or raising exceptions.
So it seems reasonable to just remove the check there.&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;somebody&lt;/em&gt; ought to be checking, maybe in the
dispatcher? Have a separate check for valid methods there?&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Requests that come in with unknown HTTP verbs ring alarms and I'd like to send them away with a 405 method_not_allowed for their trouble.

The approach I would think would work:

rescue_from ActionController::UnknownHttpMethod, :with =&gt; proc { head :method_not_allowed }

... doesn't work, as an exception is raised trying to interpret the request *to log it*.  Alarms ring, client sees 500 instead of 405.

The fix seems to be reasonably well contained in 2-3-stable, but gets really fuzzy in the stack of middlewares and gems in 3-0-stable.

In 3-0-stable the exception is raised in the ActionDispatch::Request#request_method, which is documented to &quot;return the HTTP method that the application should see&quot;, with no mention of restricting to &quot;valid&quot; methods, or raising exceptions.  So it seems reasonable to just remove the check there.

But *somebody* ought to be checking, maybe in the dispatcher?  Have a separate check for valid methods there?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Requests that come in with unknown HTTP verbs ring alarms and
I'd like to send them away with a 405 method_not_allowed for their
trouble.&lt;/p&gt;
&lt;p&gt;The approach I would think would work:&lt;/p&gt;
&lt;p&gt;rescue_from ActionController::UnknownHttpMethod, :with =&amp;gt;
proc { head :method_not_allowed }&lt;/p&gt;
&lt;p&gt;... doesn't work, as an exception is raised trying to interpret
the request &lt;em&gt;to log it&lt;/em&gt;. Alarms ring, client sees 500
instead of 405.&lt;/p&gt;
&lt;p&gt;The fix seems to be reasonably well contained in 2-3-stable, but
gets really fuzzy in the stack of middlewares and gems in
3-0-stable.&lt;/p&gt;
&lt;p&gt;In 3-0-stable the exception is raised in the
ActionDispatch::Request#request_method, which is documented to
&quot;return the HTTP method that the application should see&quot;, with no
mention of restricting to &quot;valid&quot; methods, or raising exceptions.
So it seems reasonable to just remove the check there.&lt;/p&gt;
&lt;p&gt;But &lt;em&gt;somebody&lt;/em&gt; ought to be checking, maybe in the
dispatcher? Have a separate check for valid methods there?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-08-19T21:35:38+01:00</created-at>
      <creator-id type="integer">34876</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5414</number>
      <permalink>cannot-rescue-from-actioncontrollerunknownhttpmethod</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>rails</tag>
      <title>Cannot rescue from ActionController::UnknownHttpMethod</title>
      <updated-at type="datetime">2010-08-19T21:35:42+01:00</updated-at>
      <user-id type="integer">34876</user-id>
      <version type="integer">1</version>
      <user-name>Bill Kirtley</user-name>
      <creator-name>Bill Kirtley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5414</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-02T16:59:46+00:00</created-at>
      <creator-id type="integer">34876</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5414</number>
      <permalink>cannot-rescue-from-actioncontrollerunknownhttpmethod</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>rails</tag>
      <title>Cannot rescue from ActionController::UnknownHttpMethod</title>
      <updated-at type="datetime">2011-02-02T18:50:52+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">2</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Bill Kirtley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5414</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-02T16:59:47+00:00</created-at>
      <creator-id type="integer">34876</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5414</number>
      <permalink>cannot-rescue-from-actioncontrollerunknownhttpmethod</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>rails</tag>
      <title>Cannot rescue from ActionController::UnknownHttpMethod</title>
      <updated-at type="datetime">2011-02-02T20:05:56+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">3</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Bill Kirtley</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5414</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
