<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-02T20:53:09+00:00</created-at>
  <creator-id type="integer">23839</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">5909</number>
  <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>stale</state>
  <tag>&quot;activerecord relation&quot; arel rails301 unscoped</tag>
  <title>unscoped on a relation removes where clause for relation from scope</title>
  <updated-at type="datetime">2011-02-05T20:57:51+00:00</updated-at>
  <user-id type="integer">40272</user-id>
  <version type="integer">9</version>
  <user-name>Santiago Pastorino</user-name>
  <creator-name>Zachery Hostens</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
  <priority-name>Low</priority-name>
  <original-body>If you do `model.relation.unscoped.all` the where clause limiting the `relations` results gets removed by the unscoped call.  I noticed this method isnt documented much so maybe this is how its suppose to work?

in this example Facility has `default_scope order('name ASC')` which i didn't want (need to order by something else in this one place)  I did this reverse with `Facility.unscoped.joins(:entity).where(...).order(...)` and get the proper result i want.  but this should be fixed, or documented on.

&lt;pre&gt;
ruby-1.9.2-p0 &gt; puts Corporation.first.facilities.scoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;  WHERE     (&quot;facilities&quot;.entity_id = 2) ORDER BY  name ASC

ruby-1.9.2-p0 &gt; puts Corporation.first.facilities.unscoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;
&lt;/pre&gt;</original-body>
  <latest-body>If you do `model.relation.unscoped.all` the where clause limiting the `relations` results gets removed by the unscoped call.  I noticed this method isnt documented much so maybe this is how its suppose to work?

in this example Facility has `default_scope order('name ASC')` which i didn't want (need to order by something else in this one place)  I did this reverse with `Facility.unscoped.joins(:entity).where(...).order(...)` and get the proper result i want.  but this should be fixed, or documented on.

&lt;pre&gt;
ruby-1.9.2-p0 &gt; puts Corporation.first.facilities.scoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;  WHERE     (&quot;facilities&quot;.entity_id = 2) ORDER BY  name ASC

ruby-1.9.2-p0 &gt; puts Corporation.first.facilities.unscoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;
&lt;/pre&gt;</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;If you do &lt;code&gt;model.relation.unscoped.all&lt;/code&gt; the where
clause limiting the &lt;code&gt;relations&lt;/code&gt; results gets removed by
the unscoped call. I noticed this method isnt documented much so
maybe this is how its suppose to work?&lt;/p&gt;
&lt;p&gt;in this example Facility has &lt;code&gt;default_scope order('name
ASC')&lt;/code&gt; which i didn't want (need to order by something else
in this one place) I did this reverse with
&lt;code&gt;Facility.unscoped.joins(:entity).where(...).order(...)&lt;/code&gt;
and get the proper result i want. but this should be fixed, or
documented on.&lt;/p&gt;
&lt;pre&gt;
ruby-1.9.2-p0 &amp;gt; puts Corporation.first.facilities.scoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;  WHERE     (&quot;facilities&quot;.entity_id = 2) ORDER BY  name ASC

ruby-1.9.2-p0 &amp;gt; puts Corporation.first.facilities.unscoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;
&lt;/pre&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>If you do `model.relation.unscoped.all` the where clause limiting the `relations` results gets removed by the unscoped call.  I noticed this method isnt documented much so maybe this is how its suppose to work?

in this example Facility has `default_scope order('name ASC')` which i didn't want (need to order by something else in this one place)  I did this reverse with `Facility.unscoped.joins(:entity).where(...).order(...)` and get the proper result i want.  but this should be fixed, or documented on.

&lt;pre&gt;
ruby-1.9.2-p0 &gt; puts Corporation.first.facilities.scoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;  WHERE     (&quot;facilities&quot;.entity_id = 2) ORDER BY  name ASC

ruby-1.9.2-p0 &gt; puts Corporation.first.facilities.unscoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;
&lt;/pre&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you do &lt;code&gt;model.relation.unscoped.all&lt;/code&gt; the where
clause limiting the &lt;code&gt;relations&lt;/code&gt; results gets removed by
the unscoped call. I noticed this method isnt documented much so
maybe this is how its suppose to work?&lt;/p&gt;
&lt;p&gt;in this example Facility has &lt;code&gt;default_scope order('name
ASC')&lt;/code&gt; which i didn't want (need to order by something else
in this one place) I did this reverse with
&lt;code&gt;Facility.unscoped.joins(:entity).where(...).order(...)&lt;/code&gt;
and get the proper result i want. but this should be fixed, or
documented on.&lt;/p&gt;
&lt;pre&gt;
ruby-1.9.2-p0 &amp;gt; puts Corporation.first.facilities.scoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;  WHERE     (&quot;facilities&quot;.entity_id = 2) ORDER BY  name ASC

ruby-1.9.2-p0 &amp;gt; puts Corporation.first.facilities.unscoped.to_sql
SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-02T20:53:09+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord relation&quot; arel unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2010-11-02T20:53:12+00:00</updated-at>
      <user-id type="integer">23839</user-id>
      <version type="integer">1</version>
      <user-name>Zachery Hostens</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The best behaviour would be: Corporation.first.facilities.without_default_scope.to_sql =&gt; SELECT     &quot;facilities&quot;.* FROM       &quot;facilities&quot;  WHERE     (&quot;facilities&quot;.entity_id = 2)

That would make this ticket a feature request.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The best behaviour would be:
Corporation.first.facilities.without_default_scope.to_sql =&amp;gt;
SELECT &quot;facilities&quot;.* FROM &quot;facilities&quot; WHERE
(&quot;facilities&quot;.entity_id = 2)&lt;/p&gt;
&lt;p&gt;That would make this ticket a feature request.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-03T14:39:36+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord relation&quot; arel unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2010-11-03T14:39:39+00:00</updated-at>
      <user-id type="integer">60523</user-id>
      <version type="integer">2</version>
      <user-name>bterkuile</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>this would be fine and dandy. except for that method does not exist.  Note this is `Rails 3.0.1`

@@@
ruby-1.9.2-p0 &gt; Corporation.first.facilities.without_default_scope.to_sql
NoMethodError: undefined method `without_default_scope' for #&lt;Class:0x00000102a87980&gt;

ruby-1.9.2-p0 &gt; Corporation.first.facilities.scoped.without_default_scope.to_sql
NoMethodError: undefined method `without_default_scope' for #&lt;ActiveRecord::Relation:0x000001014fbd00&gt;
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;this would be fine and dandy. except for that method does not
exist. Note this is &lt;code&gt;Rails 3.0.1&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ruby-1.9.2-p0 &amp;gt; Corporation.first.facilities.without_default_scope.to_sql
NoMethodError: undefined method `without_default_scope' for #&amp;lt;Class:0x00000102a87980&amp;gt;

ruby-1.9.2-p0 &amp;gt; Corporation.first.facilities.scoped.without_default_scope.to_sql
NoMethodError: undefined method `without_default_scope' for #&amp;lt;ActiveRecord::Relation:0x000001014fbd00&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T17:07:13+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord relation\&quot; arel unscoped&quot;
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord relation&quot; arel rails3.0.1 unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2010-11-04T17:07:39+00:00</updated-at>
      <user-id type="integer">23839</user-id>
      <version type="integer">3</version>
      <user-name>Zachery Hostens</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Zanchery, can you provide a patch or a failing test case?</body>
      <body-html>&lt;div&gt;&lt;p&gt;Zanchery, can you provide a patch or a failing test case?&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T22:09:42+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord relation&quot; arel rails3.0.1 unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2010-11-04T22:09:44+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">4</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I will look at writing a test case or two and possibly a patch, though it might be a couple days.  Im going out of town this weekend, but will try to get to it as soon as possible.</body>
      <body-html>&lt;div&gt;&lt;p&gt;I will look at writing a test case or two and possibly a patch,
though it might be a couple days. Im going out of town this
weekend, but will try to get to it as soon as possible.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T22:14:34+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord relation&quot; arel rails3.0.1 unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2010-11-04T22:14:37+00:00</updated-at>
      <user-id type="integer">23839</user-id>
      <version type="integer">5</version>
      <user-name>Zachery Hostens</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Zachery: great!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Zachery: great!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-04T23:29:35+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord relation&quot; arel rails3.0.1 unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2010-11-04T23:29:37+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">6</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I created a fix for an issue specific to my problem where i manually removed scopes and add them later again when the rest of the query was build. This is not a nice solution, but it works. This method can be used to construct a without_default scope storing the default scopes and removing them from where_values, etc. The code for this is at:
https://github.com/bterkuile/delete_softly/blob/master/lib/class_methods.rb</body>
      <body-html>&lt;div&gt;&lt;p&gt;I created a fix for an issue specific to my problem where i
manually removed scopes and add them later again when the rest of
the query was build. This is not a nice solution, but it works.
This method can be used to construct a without_default scope
storing the default scopes and removing them from where_values,
etc. The code for this is at:&lt;br&gt;
&lt;a href=
&quot;https://github.com/bterkuile/delete_softly/blob/master/lib/class_methods.rb&quot;&gt;
https://github.com/bterkuile/delete_softly/blob/master/lib/class_me...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2010-11-05T00:16:47+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>&quot;activerecord relation&quot; arel rails3.0.1 unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2010-11-05T00:16:50+00:00</updated-at>
      <user-id type="integer">60523</user-id>
      <version type="integer">7</version>
      <user-name>bterkuile</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This issue has been automatically marked as stale because it has not been commented on for at least three months.

The resources of the Rails core team are limited, and so we are asking for your help. If you can still reproduce this error on the 3-0-stable branch or on master, please reply with all of the information you have about it and add &quot;[state:open]&quot; to your comment. This will reopen the ticket for review. Likewise, if you feel that this is a very important feature for Rails to include, please reply with your explanation so we can consider it.

Thank you for all your contributions, and we hope you will understand this step to focus our efforts where they are most helpful.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This issue has been automatically marked as stale because it has
not been commented on for at least three months.&lt;/p&gt;
&lt;p&gt;The resources of the Rails core team are limited, and so we are
asking for your help. If you can still reproduce this error on the
3-0-stable branch or on master, please reply with all of the
information you have about it and add &quot;[state:open]&quot; to your
comment. This will reopen the ticket for review. Likewise, if you
feel that this is a very important feature for Rails to include,
please reply with your explanation so we can consider it.&lt;/p&gt;
&lt;p&gt;Thank you for all your contributions, and we hope you will
understand this step to focus our efforts where they are most
helpful.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2011-02-05T20:56:36+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;\&quot;activerecord relation\&quot; arel rails3.0.1 unscoped&quot;
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>open</state>
      <tag>&quot;activerecord relation&quot; arel rails301 unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2011-02-05T20:57:02+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">8</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body nil="true"></body>
      <body-html nil="true"></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2011-02-05T20:56:37+00:00</created-at>
      <creator-id type="integer">23839</creator-id>
      <diffable-attributes type="yaml">--- 
:state: open
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">5909</number>
      <permalink>unscoped-on-a-relation-removes-where-clause-for-relation-from-scope</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>stale</state>
      <tag>&quot;activerecord relation&quot; arel rails301 unscoped</tag>
      <title>unscoped on a relation removes where clause for relation from scope</title>
      <updated-at type="datetime">2011-02-05T20:57:51+00:00</updated-at>
      <user-id type="integer">40272</user-id>
      <version type="integer">9</version>
      <user-name>Santiago Pastorino</user-name>
      <creator-name>Zachery Hostens</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/5909</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
