<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-11-11T08:26:10+00:00</created-at>
  <creator-id type="integer">74919</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">3481</number>
  <permalink>ar-association-proxy-prevents-calling-methods-defined-using-method_missing-on-the-target-of-the-association</permalink>
  <priority type="integer">176619</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>2.3.4 active_record association_proxy method_missing patch</tag>
  <title>AR Association Proxy prevents calling methods defined using method_missing on the target of the association</title>
  <updated-at type="datetime">2009-11-19T03:24:19+00:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">2</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>Karl Varga</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/3481</url>
  <priority-name nil="true"></priority-name>
  <original-body>From the commit:

Don't raise a NoMethodError if the target does not respond_to? method.  This excludes methods on target that are implemented using method_missing.  And if the method really doesn't exist, target.send(method, args) will raise a NoMethodError itself...so let it do that.

Description:

If I have a model like this:

class User &lt; ActiveRecord::Base
  # Provide is_admin?, is_guest? account type discovery methods
  def method_missing(method_id, *arguments)
    if match = /^is_(\w+)\?$/.match(method_id.to_s)
      self.account_type == match[1]
    else
      super
    end
  end
end

class Activity &lt; ActiveRecord::Base
  belongs_to :user
end

I can't do Activity.first.user.is_guest? because it raises a NoMethodError.  The problem is that the Association Proxy only allows calling methods on the target that respond_to?(method).  It doesn't need to do this check, because if the method *really* doesn't exist, the call to target.send(method, args) will raise NoMethodError itself, so nothing is gained by doing that check in the proxy.</original-body>
  <latest-body>From the commit:

Don't raise a NoMethodError if the target does not respond_to? method.  This excludes methods on target that are implemented using method_missing.  And if the method really doesn't exist, target.send(method, args) will raise a NoMethodError itself...so let it do that.

Description:

If I have a model like this:

class User &lt; ActiveRecord::Base
  # Provide is_admin?, is_guest? account type discovery methods
  def method_missing(method_id, *arguments)
    if match = /^is_(\w+)\?$/.match(method_id.to_s)
      self.account_type == match[1]
    else
      super
    end
  end
end

class Activity &lt; ActiveRecord::Base
  belongs_to :user
end

I can't do Activity.first.user.is_guest? because it raises a NoMethodError.  The problem is that the Association Proxy only allows calling methods on the target that respond_to?(method).  It doesn't need to do this check, because if the method *really* doesn't exist, the call to target.send(method, args) will raise NoMethodError itself, so nothing is gained by doing that check in the proxy.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;From the commit:&lt;/p&gt;
&lt;p&gt;Don't raise a NoMethodError if the target does not respond_to?
method. This excludes methods on target that are implemented using
method_missing. And if the method really doesn't exist,
target.send(method, args) will raise a NoMethodError itself...so
let it do that.&lt;/p&gt;
&lt;p&gt;Description:&lt;/p&gt;
&lt;p&gt;If I have a model like this:&lt;/p&gt;
&lt;p&gt;class User &amp;lt; ActiveRecord::Base&lt;br&gt;
# Provide is_admin?, is_guest? account type discovery methods def
method_missing(method_id, *arguments)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if match = /^is_(\w+)\?$/.match(method_id.to_s)
  self.account_type == match[1]
else
  super
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Activity &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :user end&lt;/p&gt;
&lt;p&gt;I can't do Activity.first.user.is_guest? because it raises a
NoMethodError. The problem is that the Association Proxy only
allows calling methods on the target that respond_to?(method). It
doesn't need to do this check, because if the method
&lt;em&gt;really&lt;/em&gt; doesn't exist, the call to target.send(method,
args) will raise NoMethodError itself, so nothing is gained by
doing that check in the proxy.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>From the commit:

Don't raise a NoMethodError if the target does not respond_to? method.  This excludes methods on target that are implemented using method_missing.  And if the method really doesn't exist, target.send(method, args) will raise a NoMethodError itself...so let it do that.

Description:

If I have a model like this:

class User &lt; ActiveRecord::Base
  # Provide is_admin?, is_guest? account type discovery methods
  def method_missing(method_id, *arguments)
    if match = /^is_(\w+)\?$/.match(method_id.to_s)
      self.account_type == match[1]
    else
      super
    end
  end
end

class Activity &lt; ActiveRecord::Base
  belongs_to :user
end

I can't do Activity.first.user.is_guest? because it raises a NoMethodError.  The problem is that the Association Proxy only allows calling methods on the target that respond_to?(method).  It doesn't need to do this check, because if the method *really* doesn't exist, the call to target.send(method, args) will raise NoMethodError itself, so nothing is gained by doing that check in the proxy.</body>
      <body-html>&lt;div&gt;&lt;p&gt;From the commit:&lt;/p&gt;
&lt;p&gt;Don't raise a NoMethodError if the target does not respond_to?
method. This excludes methods on target that are implemented using
method_missing. And if the method really doesn't exist,
target.send(method, args) will raise a NoMethodError itself...so
let it do that.&lt;/p&gt;
&lt;p&gt;Description:&lt;/p&gt;
&lt;p&gt;If I have a model like this:&lt;/p&gt;
&lt;p&gt;class User &amp;lt; ActiveRecord::Base&lt;br&gt;
# Provide is_admin?, is_guest? account type discovery methods def
method_missing(method_id, *arguments)&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;if match = /^is_(\w+)\?$/.match(method_id.to_s)
  self.account_type == match[1]
else
  super
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;end end&lt;/p&gt;
&lt;p&gt;class Activity &amp;lt; ActiveRecord::Base&lt;br&gt;
belongs_to :user end&lt;/p&gt;
&lt;p&gt;I can't do Activity.first.user.is_guest? because it raises a
NoMethodError. The problem is that the Association Proxy only
allows calling methods on the target that respond_to?(method). It
doesn't need to do this check, because if the method
&lt;em&gt;really&lt;/em&gt; doesn't exist, the call to target.send(method,
args) will raise NoMethodError itself, so nothing is gained by
doing that check in the proxy.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-11-11T08:26:10+00:00</created-at>
      <creator-id type="integer">74919</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3481</number>
      <permalink>ar-association-proxy-prevents-calling-methods-defined-using-method_missing-on-the-target-of-the-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>2.3.4 active_record association_proxy method_missing patch</tag>
      <title>AR Association Proxy prevents calling methods defined using method_missing on the target of the association</title>
      <updated-at type="datetime">2009-11-11T08:26:16+00:00</updated-at>
      <user-id type="integer">74919</user-id>
      <version type="integer">1</version>
      <user-name>Karl Varga</user-name>
      <creator-name>Karl Varga</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3481</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>If you override method_missing you must also override respond_to?

The check is there to prevent calling private methods.</body>
      <body-html>&lt;div&gt;&lt;p&gt;If you override method_missing you must also override
respond_to?&lt;/p&gt;
&lt;p&gt;The check is there to prevent calling private methods.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-11-19T03:24:18+00:00</created-at>
      <creator-id type="integer">74919</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">3481</number>
      <permalink>ar-association-proxy-prevents-calling-methods-defined-using-method_missing-on-the-target-of-the-association</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag>2.3.4 active_record association_proxy method_missing patch</tag>
      <title>AR Association Proxy prevents calling methods defined using method_missing on the target of the association</title>
      <updated-at type="datetime">2009-11-19T03:24:19+00:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Karl Varga</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/3481</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>29dcf8281d7424819d506c12f655658c5c02d6e2</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-11-11T08:26:12+00:00</created-at>
      <filename>active_record_assoc_proxy_method_missing.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">317733</id>
      <size type="integer">1394</size>
      <uploader-id type="integer">74919</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/317733/active_record_assoc_proxy_method_missing.patch</url>
    </attachment>
  </attachments>
</ticket>
