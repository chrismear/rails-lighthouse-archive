<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-01T17:28:57+01:00</created-at>
  <creator-id type="integer">18786</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">82</number>
  <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
  <priority type="integer">10545</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>activerecord has_many patch tested through</tag>
  <title>Iterate over :has_many array with the join (:through) model</title>
  <updated-at type="datetime">2008-05-04T01:25:39+01:00</updated-at>
  <user-id type="integer">141</user-id>
  <version type="integer">7</version>
  <user-name>Michael Koziarski</user-name>
  <creator-name>Daniel Lunde</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
  <priority-name nil="true"></priority-name>
  <original-body>It is often the case when I iterate over an array of objects in a has_many_through association that I want access to both the :has_many objects and the :through objects.  This patch makes that easier.

Example:
@@@ ruby
class User &lt; ActiveRecord::Base
   has_many :memberships
   has_many :groups, :through =&gt; :memberships
 end

user.groups.each_with_join do |group, membership|
  puts &quot;#{group.name}, #{membership.status}&quot;
end
@@@

This also works regardless of whether the :through association is joined by a :has_many or :belongs_to.</original-body>
  <latest-body>It is often the case when I iterate over an array of objects in a has_many_through association that I want access to both the :has_many objects and the :through objects.  This patch makes that easier.

Example:
@@@ ruby
class User &lt; ActiveRecord::Base
   has_many :memberships
   has_many :groups, :through =&gt; :memberships
 end

user.groups.each_with_join do |group, membership|
  puts &quot;#{group.name}, #{membership.status}&quot;
end
@@@

This also works regardless of whether the :through association is joined by a :has_many or :belongs_to.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
It is often the case when I iterate over an array of objects in a has_many_through association that I want access to both the :has_many objects and the :through objects.  This patch makes that easier.
&lt;/p&gt;&lt;p&gt;
Example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
   has_many :memberships
   has_many :groups, :through =&amp;gt; :memberships
 end

user.groups.each_with_join do |group, membership|
  puts &amp;quot;#{group.name}, #{membership.status}&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This also works regardless of whether the :through association is joined by a :has_many or :belongs_to.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>It is often the case when I iterate over an array of objects in a has_many_through association that I want access to both the :has_many objects and the :through objects.  This patch makes that easier.

Example:
@@@ ruby
class User &lt; ActiveRecord::Base
   has_many :memberships
   has_many :groups, :through =&gt; :memberships
 end

user.groups.each_with_join do |group, membership|
  puts &quot;#{group.name}, #{membership.status}&quot;
end
@@@

This also works regardless of whether the :through association is joined by a :has_many or :belongs_to.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
It is often the case when I iterate over an array of objects in a has_many_through association that I want access to both the :has_many objects and the :through objects.  This patch makes that easier.
&lt;/p&gt;&lt;p&gt;
Example:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
   has_many :memberships
   has_many :groups, :through =&amp;gt; :memberships
 end

user.groups.each_with_join do |group, membership|
  puts &amp;quot;#{group.name}, #{membership.status}&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This also works regardless of whether the :through association is joined by a :has_many or :belongs_to.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-01T17:28:57+01:00</created-at>
      <creator-id type="integer">18786</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">82</number>
      <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>Iterate over :has_many array with the join (:through) model</title>
      <updated-at type="datetime">2008-05-01T17:28:57+01:00</updated-at>
      <user-id type="integer">18786</user-id>
      <version type="integer">1</version>
      <user-name>Daniel Lunde</user-name>
      <creator-name>Daniel Lunde</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>This should really just be:

user.memberships.each do |membership|
  puts membership.status, membership.group.name
end

So I can't the need for this feature.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
This should really just be:
&lt;/p&gt;&lt;p&gt;
user.memberships.each do |membership|
&lt;/p&gt;&lt;p&gt;
puts membership.status, membership.group.name
&lt;/p&gt;&lt;p&gt;
end
&lt;/p&gt;&lt;p&gt;
So I can't the need for this feature.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T21:10:30+01:00</created-at>
      <creator-id type="integer">18786</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">82</number>
      <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Iterate over :has_many array with the join (:through) model</title>
      <updated-at type="datetime">2008-05-01T21:10:30+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">2</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Daniel Lunde</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>What about the cases where you are sorting by groups

@@@ ruby
class User &lt; ActiveRecord::Base
   has_many :memberships
   has_many :groups, :through =&gt; :memberships, :order =&gt; &quot;groups.name&quot;
 end

user.groups.each_with_join do |group, membership|
  puts &quot;#{group.name}, #{membership.status}&quot;
end
@@@

By only doing user.memberships, there's no knowledge of the groups to order it correctly.

There's other instances where it makes sense to iterate over the groups rather then the memberships.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
What about the cases where you are sorting by groups
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class User &amp;lt; ActiveRecord::Base
   has_many :memberships
   has_many :groups, :through =&amp;gt; :memberships, :order =&amp;gt; &amp;quot;groups.name&amp;quot;
 end

user.groups.each_with_join do |group, membership|
  puts &amp;quot;#{group.name}, #{membership.status}&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
By only doing user.memberships, there's no knowledge of the groups to order it correctly.
&lt;/p&gt;&lt;p&gt;
There's other instances where it makes sense to iterate over the groups rather then the memberships.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T21:22:12+01:00</created-at>
      <creator-id type="integer">18786</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">82</number>
      <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Iterate over :has_many array with the join (:through) model</title>
      <updated-at type="datetime">2008-05-01T21:22:12+01:00</updated-at>
      <user-id type="integer">18786</user-id>
      <version type="integer">3</version>
      <user-name>Daniel Lunde</user-name>
      <creator-name>Daniel Lunde</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Why can't you just do the following ?

@@@ ruby
user = User.find(:first, :include =&gt; { :groups =&gt; :membership })
user.groups.each do |group|
  puts &quot;#{group.name}, #{group.membership.status}&quot;
end
@@@</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Why can't you just do the following ?
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;user = User.find(:first, :include =&amp;gt; { :groups =&amp;gt; :membership })
user.groups.each do |group|
  puts &amp;quot;#{group.name}, #{group.membership.status}&amp;quot;
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-01T22:33:56+01:00</created-at>
      <creator-id type="integer">18786</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">82</number>
      <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Iterate over :has_many array with the join (:through) model</title>
      <updated-at type="datetime">2008-05-01T22:33:56+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Daniel Lunde</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Pratik:

It seems like the obvious thing to do, but there's a problem with it.  Let me give a more complete example.

@@@ ruby
&gt;&gt; pp frank.groups
[#&lt;Group id: 2, name: &quot;Swim Team&quot;&gt;]
&gt;&gt; pp frank.memberships
[#&lt;Membership id: 4, user_id: 2, group_id: 2, status: &quot;Starter&quot;&gt;]

&gt;&gt; pp john.groups
[#&lt;Group id: 2, name: &quot;Swim Team&quot;&gt;]
&gt;&gt; pp john.memberships
[#&lt;Membership id: 6, user_id: 3, group_id: 2, status: &quot;Finisher&quot;&gt;]

# Note, I'm using memberships instead of membership since the Group class declares &quot;has_many :memberships&quot;
&gt;&gt; frank = User.find(2, :include =&gt; { :groups =&gt; :memberships })
&gt;&gt; frank.groups.each do |group|
?&gt; pp group
&gt;&gt; pp group.memberships
&gt;&gt; end
#&lt;Group id: 2, name: &quot;Swim Team&quot;&gt;
[#&lt;Membership id: 4, user_id: 2, group_id: 2, status: &quot;Starter&quot;&gt;, #&lt;Membership id: 6, user_id: 3, group_id: 2, status: &quot;Finisher&quot;&gt;]
@@@

So when iterating over frank's groups, it returned not only frank's membership, but all memberships from that group.  Which is incorrect.

With my patch, you only get the correct membership record that matches both the user and the group, plus you get it as a record that's not wrapped in an array.

And in those instances where someone might have multiple memberships to a single group, it does give it back as an array of just those memberships.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Pratik:
&lt;/p&gt;&lt;p&gt;
It seems like the obvious thing to do, but there's a problem with it.  Let me give a more complete example.
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&amp;gt;&amp;gt; pp frank.groups
[#&amp;lt;Group id: 2, name: &amp;quot;Swim Team&amp;quot;&amp;gt;]
&amp;gt;&amp;gt; pp frank.memberships
[#&amp;lt;Membership id: 4, user_id: 2, group_id: 2, status: &amp;quot;Starter&amp;quot;&amp;gt;]

&amp;gt;&amp;gt; pp john.groups
[#&amp;lt;Group id: 2, name: &amp;quot;Swim Team&amp;quot;&amp;gt;]
&amp;gt;&amp;gt; pp john.memberships
[#&amp;lt;Membership id: 6, user_id: 3, group_id: 2, status: &amp;quot;Finisher&amp;quot;&amp;gt;]

# Note, I'm using memberships instead of membership since the Group class declares &amp;quot;has_many :memberships&amp;quot;
&amp;gt;&amp;gt; frank = User.find(2, :include =&amp;gt; { :groups =&amp;gt; :memberships })
&amp;gt;&amp;gt; frank.groups.each do |group|
?&amp;gt; pp group
&amp;gt;&amp;gt; pp group.memberships
&amp;gt;&amp;gt; end
#&amp;lt;Group id: 2, name: &amp;quot;Swim Team&amp;quot;&amp;gt;
[#&amp;lt;Membership id: 4, user_id: 2, group_id: 2, status: &amp;quot;Starter&amp;quot;&amp;gt;, #&amp;lt;Membership id: 6, user_id: 3, group_id: 2, status: &amp;quot;Finisher&amp;quot;&amp;gt;]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So when iterating over frank's groups, it returned not only frank's membership, but all memberships from that group.  Which is incorrect.
&lt;/p&gt;&lt;p&gt;
With my patch, you only get the correct membership record that matches both the user and the group, plus you get it as a record that's not wrapped in an array.
&lt;/p&gt;&lt;p&gt;
And in those instances where someone might have multiple memberships to a single group, it does give it back as an array of just those memberships.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-02T16:14:23+01:00</created-at>
      <creator-id type="integer">18786</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">82</number>
      <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Iterate over :has_many array with the join (:through) model</title>
      <updated-at type="datetime">2008-05-02T16:14:23+01:00</updated-at>
      <user-id type="integer">18786</user-id>
      <version type="integer">5</version>
      <user-name>Daniel Lunde</user-name>
      <creator-name>Daniel Lunde</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Here's a real world example where I've needed to use each_with_join:

@@@ ruby
class Feature &lt; ActiveRecord::Base
  has_many :featured_items, :dependent =&gt; :destroy, :order =&gt; 'featured_items.position'

  has_many :featured_users,
           :source =&gt; :featureable,
           :through =&gt; :featured_items,
           :source_type =&gt; 'User',
           :order =&gt; 'featured_items.position'

  has_many :featured_media,
           :source =&gt; :featureable,
           :through =&gt; :featured_items, 
           :source_type =&gt; 'Medium',
           :order =&gt; 'featured_items.position'
end

# in view
&lt;% feature = Feature.find_by_group(&quot;users&quot;, :include =&gt; :featured_users, :order =&gt; 'featured_items.position') %&gt;
&lt;% feature.featured_users.each_with_join do |user, featured_item| %&gt;
  &lt;%= image_tag(featured_item.photo.public_filename) %&gt;&lt;br/&gt;
  &lt;%= user.name %&gt;
&lt;% end %&gt;
@@@

In this case I couldn't do:
@@@ ruby
feature.featured_items do |featured_item|
  featured_item.featured_user.name # featured_user is not a valid method
end
@@@

Wouldn't you say that using each_with_join in this example would be easier then alternative methods?</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Here's a real world example where I've needed to use each_with_join:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Feature &amp;lt; ActiveRecord::Base
  has_many :featured_items, :dependent =&amp;gt; :destroy, :order =&amp;gt; 'featured_items.position'

  has_many :featured_users,
           :source =&amp;gt; :featureable,
           :through =&amp;gt; :featured_items,
           :source_type =&amp;gt; 'User',
           :order =&amp;gt; 'featured_items.position'

  has_many :featured_media,
           :source =&amp;gt; :featureable,
           :through =&amp;gt; :featured_items, 
           :source_type =&amp;gt; 'Medium',
           :order =&amp;gt; 'featured_items.position'
end

# in view
&amp;lt;% feature = Feature.find_by_group(&amp;quot;users&amp;quot;, :include =&amp;gt; :featured_users, :order =&amp;gt; 'featured_items.position') %&amp;gt;
&amp;lt;% feature.featured_users.each_with_join do |user, featured_item| %&amp;gt;
  &amp;lt;%= image_tag(featured_item.photo.public_filename) %&amp;gt;&amp;lt;br/&amp;gt;
  &amp;lt;%= user.name %&amp;gt;
&amp;lt;% end %&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In this case I couldn't do:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;feature.featured_items do |featured_item|
  featured_item.featured_user.name # featured_user is not a valid method
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Wouldn't you say that using each_with_join in this example would be easier then alternative methods?
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-02T16:42:44+01:00</created-at>
      <creator-id type="integer">18786</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">82</number>
      <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Iterate over :has_many array with the join (:through) model</title>
      <updated-at type="datetime">2008-05-02T16:42:44+01:00</updated-at>
      <user-id type="integer">18786</user-id>
      <version type="integer">6</version>
      <user-name>Daniel Lunde</user-name>
      <creator-name>Daniel Lunde</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>I certainly can see cases where this is required, but I'm just not convinced that it justifies a new method for us to have to maintain on an ongoing basis.

If there's a join model, it should be exposed.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I certainly can see cases where this is required, but I'm just not convinced that it justifies a new method for us to have to maintain on an ongoing basis.
&lt;/p&gt;&lt;p&gt;
If there's a join model, it should be exposed.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-04T01:25:39+01:00</created-at>
      <creator-id type="integer">18786</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">82</number>
      <permalink>iterate-over-has_many-array-with-the-join-through-model</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>Iterate over :has_many array with the join (:through) model</title>
      <updated-at type="datetime">2008-05-04T01:25:39+01:00</updated-at>
      <user-id type="integer">141</user-id>
      <version type="integer">7</version>
      <user-name>Michael Koziarski</user-name>
      <creator-name>Daniel Lunde</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/82</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>b76a8ab5af8d0258437033c8d4f4a39e0b2b7f35</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2008-05-01T17:28:57+01:00</created-at>
      <filename>iterate_over_has_many_and_through_together.diff</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">21060</id>
      <size type="integer">4786</size>
      <uploader-id type="integer">18786</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/21060/iterate_over_has_many_and_through_together.diff</url>
    </attachment>
  </attachments>
</ticket>
