<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer">1366</assigned-user-id>
  <attachments-count type="integer">1</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2009-01-09T18:14:50+00:00</created-at>
  <creator-id type="integer">17949</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1720</number>
  <permalink>allow-overriding-a-delegation</permalink>
  <priority type="integer">1031</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activesupport patch</tag>
  <title>Allow overriding a delegation</title>
  <updated-at type="datetime">2009-03-08T13:43:37+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Daniel Schierbeck</creator-name>
  <assigned-user-name>Pratik</assigned-user-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1720</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This patch allows you to override the delegation, providing your own value.

    class Name &lt; Struct.new(:first, :last)
      def display_name
        &quot;#{first} #{last}&quot;
      end
    end
    
    class Person &lt; Struct.new(:name)
      delegate :display_name, :to =&gt; :name, :allow_override =&gt; true
    end
      
    david = Person.new(:name =&gt; Name.new(&quot;David&quot;, &quot;Hansson&quot;))
    david.display_name  #=&gt; &quot;David Hansson&quot;
    david.display_name = &quot;DHH&quot;
    david.display_name  #=&gt; &quot;DHH&quot;

I've found uses for this in my own applications:

    class Residentship &lt; ActiveRecord::Base
      belongs_to :resident
      validates_presence_of :room_number, :moved_out_at
    end

    class Resident &lt; ActiveRecord::Base
      has_many :residentships
      has_one :current_residentship,
        :class_name =&gt; &quot;Residentship&quot;,
        :conditions =&gt; &quot;moved_out_at IS NULL&quot;
      
      delegate :room_number, :to =&gt; :current_residentship, :allow_nil =&gt; true, :allow_override =&gt; true
    end

I can then use a `room_number` field in the creation form, and an `after_create` method to create the residentship with the supplied room number.</original-body>
  <latest-body>This patch allows you to override the delegation, providing your own value.

    class Name &lt; Struct.new(:first, :last)
      def display_name
        &quot;#{first} #{last}&quot;
      end
    end
    
    class Person &lt; Struct.new(:name)
      delegate :display_name, :to =&gt; :name, :allow_override =&gt; true
    end
      
    david = Person.new(:name =&gt; Name.new(&quot;David&quot;, &quot;Hansson&quot;))
    david.display_name  #=&gt; &quot;David Hansson&quot;
    david.display_name = &quot;DHH&quot;
    david.display_name  #=&gt; &quot;DHH&quot;

I've found uses for this in my own applications:

    class Residentship &lt; ActiveRecord::Base
      belongs_to :resident
      validates_presence_of :room_number, :moved_out_at
    end

    class Resident &lt; ActiveRecord::Base
      has_many :residentships
      has_one :current_residentship,
        :class_name =&gt; &quot;Residentship&quot;,
        :conditions =&gt; &quot;moved_out_at IS NULL&quot;
      
      delegate :room_number, :to =&gt; :current_residentship, :allow_nil =&gt; true, :allow_override =&gt; true
    end

I can then use a `room_number` field in the creation form, and an `after_create` method to create the residentship with the supplied room number.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This patch allows you to override the delegation, providing your
own value.&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Name &amp;lt; Struct.new(:first, :last)
  def display_name
    &quot;#{first} #{last}&quot;
  end
end

class Person &amp;lt; Struct.new(:name)
  delegate :display_name, :to =&amp;gt; :name, :allow_override =&amp;gt; true
end

david = Person.new(:name =&amp;gt; Name.new(&quot;David&quot;, &quot;Hansson&quot;))
david.display_name  #=&amp;gt; &quot;David Hansson&quot;
david.display_name = &quot;DHH&quot;
david.display_name  #=&amp;gt; &quot;DHH&quot;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I've found uses for this in my own applications:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Residentship &amp;lt; ActiveRecord::Base
  belongs_to :resident
  validates_presence_of :room_number, :moved_out_at
end

class Resident &amp;lt; ActiveRecord::Base
  has_many :residentships
  has_one :current_residentship,
    :class_name =&amp;gt; &quot;Residentship&quot;,
    :conditions =&amp;gt; &quot;moved_out_at IS NULL&quot;

  delegate :room_number, :to =&amp;gt; :current_residentship, :allow_nil =&amp;gt; true, :allow_override =&amp;gt; true
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;I can then use a &lt;code&gt;room_number&lt;/code&gt; field in the creation
form, and an &lt;code&gt;after_create&lt;/code&gt; method to create the
residentship with the supplied room number.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This patch allows you to override the delegation, providing your own value.
@@@ ruby
class Name &lt; Struct.new(:first, :last)
  def display_name
    &quot;#{first} #{last}&quot;
  end
end

class Person &lt; Struct.new(:name)
  delegate :display_name, :to =&gt; :name, :allow_override =&gt; true
end
  
david = Person.new(:name =&gt; Name.new(&quot;David&quot;, &quot;Hansson&quot;))
david.display_name  #=&gt; &quot;David Hansson&quot;
david.display_name = &quot;DHH&quot;
david.display_name  #=&gt; &quot;DHH&quot;
@@@

I've found uses for this in my own applications:
@@@ ruby
class Residentship &lt; ActiveRecord::Base
  belongs_to :resident
  validates_presence_of :room_number, :moved_out_at
end

class Resident &lt; ActiveRecord::Base
  has_many :residentships
  has_one :current_residentship,
    :class_name =&gt; &quot;Residentship&quot;,
    :conditions =&gt; &quot;moved_out_at IS NULL&quot;
  
  delegate :room_number,
    :to =&gt; :current_residentship,
    :allow_nil =&gt; true,
    :allow_override =&gt; true
end
@@@
I can then use a `room_number` field in the creation form, and an `after_create` method to create the residentship with the supplied room number.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This patch allows you to override the delegation, providing your
own value.&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Name &amp;lt; Struct.new(:first, :last)
  def display_name
    &amp;quot;#{first} #{last}&amp;quot;
  end
end

class Person &amp;lt; Struct.new(:name)
  delegate :display_name, :to =&amp;gt; :name, :allow_override =&amp;gt; true
end
  
david = Person.new(:name =&amp;gt; Name.new(&amp;quot;David&amp;quot;, &amp;quot;Hansson&amp;quot;))
david.display_name  #=&amp;gt; &amp;quot;David Hansson&amp;quot;
david.display_name = &amp;quot;DHH&amp;quot;
david.display_name  #=&amp;gt; &amp;quot;DHH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've found uses for this in my own applications:&lt;/p&gt;


&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;
class Residentship &amp;lt; ActiveRecord::Base
  belongs_to :resident
  validates_presence_of :room_number, :moved_out_at
end

class Resident &amp;lt; ActiveRecord::Base
  has_many :residentships
  has_one :current_residentship,
    :class_name =&amp;gt; &amp;quot;Residentship&amp;quot;,
    :conditions =&amp;gt; &amp;quot;moved_out_at IS NULL&amp;quot;
  
  delegate :room_number,
    :to =&amp;gt; :current_residentship,
    :allow_nil =&amp;gt; true,
    :allow_override =&amp;gt; true
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can then use a &lt;code&gt;room_number&lt;/code&gt; field in the creation
form, and an &lt;code&gt;after_create&lt;/code&gt; method to create the
residentship with the supplied room number.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-01-09T18:14:51+00:00</created-at>
      <creator-id type="integer">17949</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1720</number>
      <permalink>allow-overriding-a-delegation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activesupport patch</tag>
      <title>Allow overriding a delegation</title>
      <updated-at type="datetime">2009-01-09T22:22:50+00:00</updated-at>
      <user-id type="integer">17949</user-id>
      <version type="integer">1</version>
      <user-name>Daniel Schierbeck</user-name>
      <creator-name>Daniel Schierbeck</creator-name>
      <assigned-user-name nil="true"></assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1720</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer">1366</assigned-user-id>
      <attachments-count type="integer">1</attachments-count>
      <body>Not sure I like the idea of making delegate API more complex. Also, using @method_name ivar looks like a hardcoded convention. Stuff like this shouldn't really be using delegate()

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Not sure I like the idea of making delegate API more complex.
Also, using @method_name ivar looks like a hardcoded convention.
Stuff like this shouldn't really be using delegate()&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-03-08T13:43:32+00:00</created-at>
      <creator-id type="integer">17949</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
:assigned_user: 
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1720</number>
      <permalink>allow-overriding-a-delegation</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activesupport patch</tag>
      <title>Allow overriding a delegation</title>
      <updated-at type="datetime">2009-03-08T13:43:37+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Daniel Schierbeck</creator-name>
      <assigned-user-name>Pratik</assigned-user-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1720</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
  <attachments type="array">
    <attachment type="Attachment">
      <code>05c4bc2e53fe592cefb684899ad477b16f494c1d</code>
      <content-type>text/plain</content-type>
      <created-at type="datetime">2009-01-09T18:14:51+00:00</created-at>
      <filename>0001-Add-allow_override-option-to-Module-delegate.patch</filename>
      <height type="integer" nil="true"></height>
      <id type="integer">76910</id>
      <size type="integer">3310</size>
      <uploader-id type="integer">17949</uploader-id>
      <width type="integer" nil="true"></width>
      <url>http://rails.lighthouseapp.com/attachments/76910/0001-Add-allow_override-option-to-Module-delegate.patch</url>
    </attachment>
  </attachments>
</ticket>
