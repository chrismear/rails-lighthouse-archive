From 46ebf5adc1c1f9484e5fc139cf432ab4516aa8eb Mon Sep 17 00:00:00 2001
From: Tim Assmann <tassmann@jovoto.com>
Date: Mon, 27 Oct 2008 13:26:55 +0100
Subject: [PATCH] calculation of a standard deviation will always return a float value, plus same documenation added for stddev option

---
 activerecord/lib/active_record/calculations.rb |    3 +++
 activerecord/test/cases/calculations_test.rb   |    4 ++++
 2 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/activerecord/lib/active_record/calculations.rb b/activerecord/lib/active_record/calculations.rb
index 5e33cf1..d59abe6 100644
--- a/activerecord/lib/active_record/calculations.rb
+++ b/activerecord/lib/active_record/calculations.rb
@@ -114,6 +114,7 @@ module ActiveRecord
       #   Person.minimum(:age, :conditions => ['last_name != ?', 'Drake']) # Selects the minimum age for everyone with a last name other than 'Drake'
       #   Person.minimum(:age, :having => 'min(age) > 17', :group => :last_name) # Selects the minimum age for any family without any minors
       #   Person.sum("2 * age")
+      #   Person.caluclate(:stddev,:age) # give Standard Deviation for field age, stddev_samp gives standard deviation for only a sample and calculates for the the whole collection
       def calculate(operation, column_name, options = {})
         validate_calculation_options(operation, options)
         column_name     = options[:select] if options[:select]
@@ -287,6 +288,8 @@ module ActiveRecord
             when 'count' then value.to_i
             when 'sum'   then type_cast_using_column(value || '0', column)
             when 'avg'   then value && value.to_d
+	          when /stddev[.]*/   then value.to_f
             else type_cast_using_column(value, column)
           end
         end
diff --git a/activerecord/test/cases/calculations_test.rb b/activerecord/test/cases/calculations_test.rb
index 0fa6150..8daf026 100644
--- a/activerecord/test/cases/calculations_test.rb
+++ b/activerecord/test/cases/calculations_test.rb
@@ -276,6 +276,10 @@ class CalculationsTest < ActiveRecord::TestCase
     assert_equal '636', Account.sum("2 * credit_limit")
   end
 
+  def test_stddev
+    assert_equal 3.6515, Account.calculate(:stddev,:credit_limit)
+  end
+
   def test_count_with_from_option
     assert_equal Company.count(:all), Company.count(:all, :from => 'companies')
     assert_equal Account.count(:all, :conditions => "credit_limit = 50"),
1.5.5

