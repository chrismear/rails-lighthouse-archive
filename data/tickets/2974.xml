<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2010-11-08T23:11:56+00:00</created-at>
  <creator-id type="integer">64547</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">2974</number>
  <permalink>add-find-unique-to-activerecord</permalink>
  <priority type="integer">3</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag nil="true"></tag>
  <title>Add find :unique to ActiveRecord</title>
  <updated-at type="datetime">2010-11-08T23:11:56+00:00</updated-at>
  <user-id type="integer">14998</user-id>
  <version type="integer">11</version>
  <user-name>Ryan Bigg</user-name>
  <creator-name>Joris</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
  <priority-name>Low</priority-name>
  <original-body>The current method of getting the result of a query is find :fisrt.
This will essentially do a query with max 1 row.

However, sometimes a developer creates a query that doesn't work the way he thought it would.

My suggestion is to add a new find :unique

This should do the basically same as find :first, except that it should not limit the number of records.
If more than 1 was found, it should raise an exception stating that there are too many records (and also the number of records found, just to inform the dev)

find :first should be deprecated for the use of getting a unique row from a query.

:first and :last have the same type of use. Finding the first or last in a list.


For example:

Person.find :unique, :conditions =&gt; { :ssid =&gt; ssid }
vs
Person.find :first, :conditions =&gt; { :ssid =&gt; ssid }


Also, the method_missing way of finding should use the unique.</original-body>
  <latest-body>The current method of getting the result of a query is find :fisrt.
This will essentially do a query with max 1 row.

However, sometimes a developer creates a query that doesn't work the way he thought it would.

My suggestion is to add a new find :unique

This should do the basically same as find :first, except that it should not limit the number of records.
If more than 1 was found, it should raise an exception stating that there are too many records (and also the number of records found, just to inform the dev)

find :first should be deprecated for the use of getting a unique row from a query.

:first and :last have the same type of use. Finding the first or last in a list.


For example:

Person.find :unique, :conditions =&gt; { :ssid =&gt; ssid }
vs
Person.find :first, :conditions =&gt; { :ssid =&gt; ssid }


Also, the method_missing way of finding should use the unique.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;The current method of getting the result of a query is find
:fisrt. This will essentially do a query with max 1 row.&lt;/p&gt;
&lt;p&gt;However, sometimes a developer creates a query that doesn't work
the way he thought it would.&lt;/p&gt;
&lt;p&gt;My suggestion is to add a new find :unique&lt;/p&gt;
&lt;p&gt;This should do the basically same as find :first, except that it
should not limit the number of records. If more than 1 was found,
it should raise an exception stating that there are too many
records (and also the number of records found, just to inform the
dev)&lt;/p&gt;
&lt;p&gt;find :first should be deprecated for the use of getting a unique
row from a query.&lt;/p&gt;
&lt;p&gt;:first and :last have the same type of use. Finding the first or
last in a list.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Person.find :unique, :conditions =&amp;gt; { :ssid =&amp;gt; ssid } vs
Person.find :first, :conditions =&amp;gt; { :ssid =&amp;gt; ssid }&lt;/p&gt;
&lt;p&gt;Also, the method_missing way of finding should use the
unique.&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>The current method of getting the result of a query is find :fisrt.
This will essentially do a query with max 1 row.

However, sometimes a developer creates a query that doesn't work the way he thought it would.

My suggestion is to add a new find :unique

This should do the basically same as find :first, except that it should not limit the number of records.
If more than 1 was found, it should raise an exception stating that there are too many records (and also the number of records found, just to inform the dev)

find :first should be deprecated for the use of getting a unique row from a query.

:first and :last have the same type of use. Finding the first or last in a list.


For example:

Person.find :unique, :conditions =&gt; { :ssid =&gt; ssid }
vs
Person.find :first, :conditions =&gt; { :ssid =&gt; ssid }


Also, the method_missing way of finding should use the unique.</body>
      <body-html>&lt;div&gt;&lt;p&gt;The current method of getting the result of a query is find
:fisrt.&lt;br&gt;
This will essentially do a query with max 1 row.&lt;/p&gt;
&lt;p&gt;However, sometimes a developer creates a query that doesn't work
the way he thought it would.&lt;/p&gt;
&lt;p&gt;My suggestion is to add a new find :unique&lt;/p&gt;
&lt;p&gt;This should do the basically same as find :first, except that it
should not limit the number of records.&lt;br&gt;
If more than 1 was found, it should raise an exception stating that
there are too many records (and also the number of records found,
just to inform the dev)&lt;/p&gt;
&lt;p&gt;find :first should be deprecated for the use of getting a unique
row from a query.&lt;/p&gt;
&lt;p&gt;:first and :last have the same type of use. Finding the first or
last in a list.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Person.find :unique, :conditions =&amp;gt; { :ssid =&amp;gt; ssid }&lt;br&gt;
vs&lt;br&gt;
Person.find :first, :conditions =&amp;gt; { :ssid =&amp;gt; ssid }&lt;/p&gt;
&lt;p&gt;Also, the method_missing way of finding should use the
unique.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T15:46:06+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-30T15:46:12+01:00</updated-at>
      <user-id type="integer">64547</user-id>
      <version type="integer">1</version>
      <user-name>Joris</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So, I read the bar at the right :)
So, I didn't test this, I just typed it here, so I'm not sure if my manual diff is ok. anyway.. here's the code:

In base.rb from activerecord:

in find(*args):
        case args.first
          when :first  then find_initial(options)
          when :all    then find_every(options)
+         when :unique then find_unique(options)

add method:
        def find_initial(options)
          options.update(:limit =&gt; 1) unless options[:include]
          find_every(options).first
        end

+        def find_unique(options)
+          records = find_every(options)
+          if records.size &gt; 0 then
+            raise ActiveRecordError, &quot;Too many records found: #{records.size}&quot;
+          end
+          records.first
+        end



Also, some calls to find_initial should be replaced by find_unique, but I can imagine that would break some existing apps. So that might be for later.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So, I read the bar at the right :)&lt;br&gt;
So, I didn't test this, I just typed it here, so I'm not sure if my
manual diff is ok. anyway.. here's the code:&lt;/p&gt;
&lt;p&gt;In base.rb from activerecord:&lt;/p&gt;
&lt;p&gt;in find(*args):&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    case args.first
      when :first  then find_initial(options)
      when :all    then find_every(options)&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;  when :unique then find_unique(options)&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;add method:&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;    def find_initial(options)
      options.update(:limit =&amp;gt; 1) unless options[:include]
      find_every(options).first
    end&lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; def find_unique(options)&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   records = find_every(options)&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   if records.size &amp;gt; 0 then&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;     raise ActiveRecordError, &quot;Too many records found: #{records.size}&quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   end&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   records.first&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; end&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, some calls to find_initial should be replaced by
find_unique, but I can imagine that would break some existing apps.
So that might be for later.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T15:57:04+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-30T15:57:06+01:00</updated-at>
      <user-id type="integer">64547</user-id>
      <version type="integer">2</version>
      <user-name>Joris</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>So, I read the bar at the right :)
So, I didn't test this, I just typed it here, so I'm not sure if my manual diff is ok. anyway.. here's the code:

In base.rb from activerecord:

in find(*args):
@@@
        case args.first
          when :first  then find_initial(options)
          when :all    then find_every(options)
+         when :unique then find_unique(options)
@@@

add method:
@@@
        def find_initial(options)
          options.update(:limit =&gt; 1) unless options[:include]
          find_every(options).first
        end

+        def find_unique(options)
+          records = find_every(options)
+          if records.size &gt; 0 then
+            raise ActiveRecordError, &quot;Too many records found: #{records.size}&quot;
+          end
+          records.first
+        end
@@@


Also, some calls to find_initial should be replaced by find_unique, but I can imagine that would break some existing apps. So that might be for later.</body>
      <body-html>&lt;div&gt;&lt;p&gt;So, I read the bar at the right :)&lt;br&gt;
So, I didn't test this, I just typed it here, so I'm not sure if my
manual diff is ok. anyway.. here's the code:&lt;/p&gt;
&lt;p&gt;In base.rb from activerecord:&lt;/p&gt;
&lt;p&gt;in find(*args):&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;        case args.first&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;      when :first  then find_initial(options)
      when :all    then find_every(options)&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;  when :unique then find_unique(options)&amp;lt;/code&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;



&lt;br&gt;
add method:&lt;br&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;        def find_initial(options)&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code&gt;&lt;code&gt;      options.update(:limit =&amp;amp;gt; 1) unless options[:include]
      find_every(options).first
    end&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; def find_unique(options)&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   records = find_every(options)&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   if records.size &amp;amp;gt; 0 then&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;     raise ActiveRecordError, &amp;amp;quot;Too many records found: #{records.size}&amp;amp;quot;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   end&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt;   records.first&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;
&lt;code&gt; end&amp;lt;/code&amp;gt;&lt;/code&gt;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;



&lt;br&gt;
Also, some calls to find_initial should be replaced by find_unique, but I can imagine that would break some existing apps. So that might be for later.
&lt;/pre&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T16:01:09+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-30T16:01:12+01:00</updated-at>
      <user-id type="integer">64547</user-id>
      <version type="integer">3</version>
      <user-name>Joris</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Hey Joris,

I think you should discuss this change in the ML first. Also, your patch should have tests. Check http://guides.rubyonrails.org/contributing_to_rails.html for more details.

Thanks!</body>
      <body-html>&lt;div&gt;&lt;p&gt;Hey Joris,&lt;/p&gt;
&lt;p&gt;I think you should discuss this change in the ML first. Also,
your patch should have tests. Check &lt;a href=
&quot;http://guides.rubyonrails.org/contributing_to_rails.html&quot;&gt;http://guides.rubyonrails.org/contributing_to_rails.html&lt;/a&gt;
for more details.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2009-07-30T16:58:09+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-30T16:58:12+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">4</version>
      <user-name>Pratik</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body></body>
      <body-html></body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-30T17:01:40+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-30T17:01:45+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">5</version>
      <user-name>Pratik</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>is this really the proposed implementation?
@@@ ruby
def find_unique(options)
  records = find_every(options)
  if records.size &gt; 0 then
    raise ActiveRecordError, &quot;Too many records found: #{records.size}&quot;
  end
  records.first
end
@@@
Seems a bit crazy,
I'd rather have the two db calls (count, and find_first)

Also, I don't get the use-case.
Joris, do you have some examples of how you are using this feature?

The only reason I've needed something similar is this case;

@@@ ruby
class SomeSortOfSettings &lt; ActiveRecord::Base
  def self.instance
    self.first || self.new
  end
end
@@@

namely a &quot;Singleton&quot; ActiveRecord,
but I think there's a better way to deal with this
(an ActiveRecord::Singleton class, perhaps)

@@@ ruby
User.find(:unique, :conditions =&gt; {:username =&gt; &quot;ralph&quot;})
@@@
is silly,
you should just have a unique key on :username</body>
      <body-html>&lt;div&gt;&lt;p&gt;is this really the proposed implementation?&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;def find_unique(options)
  records = find_every(options)
  if records.size &amp;gt; 0 then&lt;br&gt;
&lt;br&gt;


&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;&lt;code&gt;raise ActiveRecordError, &amp;amp;quot;Too many records found: #{records.size}&amp;amp;quot;&lt;/code&gt;&lt;/code&gt;
&lt;/pre&gt;
&lt;pre&gt;


&lt;br&gt;
  end
  records.first
end
&lt;/pre&gt;
Seems a bit crazy,&lt;br&gt;
I'd rather have the two db calls (count, and find_first)
&lt;p&gt;Also, I don't get the use-case.&lt;br&gt;
Joris, do you have some examples of how you are using this
feature?&lt;/p&gt;
&lt;p&gt;The only reason I've needed something similar is this case;&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;class SomeSortOfSettings &amp;lt; ActiveRecord::Base
  def self.instance
    self.first || self.new
  end
end&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;namely a &quot;Singleton&quot; ActiveRecord,&lt;br&gt;
but I think there's a better way to deal with this&lt;br&gt;
(an ActiveRecord::Singleton class, perhaps)&lt;/p&gt;
&lt;pre&gt;
&lt;code class=
&quot;ruby&quot;&gt;User.find(:unique, :conditions =&amp;gt; {:username =&amp;gt; &quot;ralph&quot;})&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;is silly,&lt;br&gt;
you should just have a unique key on :username&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-31T11:53:55+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-31T11:54:00+01:00</updated-at>
      <user-id type="integer">18469</user-id>
      <version type="integer">6</version>
      <user-name>MatthewRudy</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Having 2 queries would be a waste of db calls. If you expect 1 row, there's no need to do a count.

All queries for something with a unique index / natural key is where I'd do this. Just because it's contextual more correct, and it has no performance drawbacks except for a single check if there's another row in the resultset.

The implementation was just something I typed. I can imagine that there would be some other things that would need to happen, but basically that's how about what I had in mind.

Hibernate has a similar feature: query.uniqueResult</body>
      <body-html>&lt;div&gt;&lt;p&gt;Having 2 queries would be a waste of db calls. If you expect 1
row, there's no need to do a count.&lt;/p&gt;
&lt;p&gt;All queries for something with a unique index / natural key is
where I'd do this. Just because it's contextual more correct, and
it has no performance drawbacks except for a single check if
there's another row in the resultset.&lt;/p&gt;
&lt;p&gt;The implementation was just something I typed. I can imagine
that there would be some other things that would need to happen,
but basically that's how about what I had in mind.&lt;/p&gt;
&lt;p&gt;Hibernate has a similar feature: query.uniqueResult&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-31T12:00:22+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>incomplete</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-31T12:00:27+01:00</updated-at>
      <user-id type="integer">64547</user-id>
      <version type="integer">7</version>
      <user-name>Joris</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>While I don't think this is gonna make it to the core, but the best implementation would probably be the one using :limit =&gt; 2.

This seem very project specific, hence you should just keep it in /lib or maybe make a plugin and see if many people find it useful or not. We can always reconsider the feature if more people are using it.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;While I don't think this is gonna make it to the core, but the
best implementation would probably be the one using :limit =&amp;gt;
2.&lt;/p&gt;
&lt;p&gt;This seem very project specific, hence you should just keep it
in /lib or maybe make a plugin and see if many people find it
useful or not. We can always reconsider the feature if more people
are using it.&lt;/p&gt;
&lt;p&gt;Thanks.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-07-31T12:01:48+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- 
:state: incomplete
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2009-07-31T12:01:54+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">8</version>
      <user-name>Pratik</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>oo late! &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com&quot;&gt;rolex watches&lt;/a&gt;&lt;/b&gt; Brazilian Wax Be mindful &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com/watches/rolex-oyster-perpetual-cosmograph-daytona-mens-watch-116518-wal-549.html&quot;&gt;replica Rolex Oyster Perpetual Cosmograph Daytona Mens 116518-WAL&lt;/a&gt;&lt;/b&gt; that when applying stain &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com/watches/omega-constellation-ladies-watch-1277-15-4633.html&quot;&gt;Omega Omega Constellation Ladies 1277.15,&lt;/a&gt;&lt;/b&gt; to plywood, sheets with &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com/watches/gucci-1500-series-ladies-bangle-watch-21540-6021.html&quot;&gt;Gucci Gucci 1500 Series Ladies Bangle 21540&lt;/a&gt;&lt;/b&gt; wood patches or s &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com/collection/raymond-weil-rw-sport.html&quot;&gt;Raymond Weil RW Sport&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com&quot;&gt;high rolex watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com&quot;&gt;rolex watches&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com/watches/vacheron-constantin-asymmetrique-ladies-watch-25010000g-9119-1597.html&quot;&gt;Vacheron Constantin Asymmetrique Ladies 25010000G.9119&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com/watches/movado-gentry-ladies-watch-0605071-5456.html&quot;&gt;Movado Movado Gentry Ladies 0605071&lt;/a&gt;&lt;/b&gt;  &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com/watches/cartier-tank-francaise-18kt-rose-gold-and-steel-pink-mother-of-pearl-ladies-watch-w51027q4-6354.html&quot;&gt;Cartier Tank Francaise 18kt Rose Gold and Steel Pink Mother-of-Pearl Ladies W51027Q4&lt;/a&gt;&lt;/b&gt;</body>
      <body-html>&lt;div&gt;&lt;p&gt;oo late! &lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com&quot;&gt;rolex
watches&lt;/a&gt;&lt;/b&gt; Brazilian Wax Be mindful &lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com/watches/rolex-oyster-perpetual-cosmograph-daytona-mens-watch-116518-wal-549.html&quot;&gt;
replica Rolex Oyster Perpetual Cosmograph Daytona Mens
116518-WAL&lt;/a&gt;&lt;/b&gt; that when applying stain &lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com/watches/omega-constellation-ladies-watch-1277-15-4633.html&quot;&gt;
Omega Omega Constellation Ladies 1277.15,&lt;/a&gt;&lt;/b&gt; to plywood,
sheets with &lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com/watches/gucci-1500-series-ladies-bangle-watch-21540-6021.html&quot;&gt;
Gucci Gucci 1500 Series Ladies Bangle 21540&lt;/a&gt;&lt;/b&gt; wood patches or
s &lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com/collection/raymond-weil-rw-sport.html&quot;&gt;
Raymond Weil RW Sport&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com&quot;&gt;high rolex watches&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=&quot;http://www.watchesreplication.com&quot;&gt;rolex
watches&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com/watches/vacheron-constantin-asymmetrique-ladies-watch-25010000g-9119-1597.html&quot;&gt;
Vacheron Constantin Asymmetrique Ladies 25010000G.9119&lt;/a&gt;&lt;/b&gt;
&lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com/watches/movado-gentry-ladies-watch-0605071-5456.html&quot;&gt;
Movado Movado Gentry Ladies 0605071&lt;/a&gt;&lt;/b&gt; &lt;b&gt;&lt;a href=
&quot;http://www.watchesreplication.com/watches/cartier-tank-francaise-18kt-rose-gold-and-steel-pink-mother-of-pearl-ladies-watch-w51027q4-6354.html&quot;&gt;
Cartier Tank Francaise 18kt Rose Gold and Steel Pink
Mother-of-Pearl Ladies W51027Q4&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-07-19T05:47:54+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- 
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">128954</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>:first :unique activerecord find</tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2010-07-19T07:05:20+01:00</updated-at>
      <user-id type="integer">107771</user-id>
      <version type="integer">9</version>
      <user-name>zhuzhu</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Automatic cleanup of spam.</body>
      <body-html>&lt;div&gt;&lt;p&gt;Automatic cleanup of spam.&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-10-11T10:55:06+01:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- 
:tag: &quot;:first :unique activerecord find&quot;
:priority: 0
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2010-10-11T10:55:08+01:00</updated-at>
      <user-id type="integer">14998</user-id>
      <version type="integer">11</version>
      <user-name>Ryan Bigg</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name>Low</priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This &lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra footwear&lt;/a&gt;&lt;/strong&gt; is called a modern vintage and has been since their   introduction in 2003 where they began in Europe. Every &lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt; has some type of   ornament, adornment or hardware and is comprised of aged leather that is bought   from around the world. These &lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra uk&lt;/a&gt;&lt;/strong&gt; are culturally engaging and allow for the woman   wearing them to be enveloped in luxury.With new cuts and styles and hand stitched shoes, these &lt;strong&gt;&lt;a href=&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;, heels or flats will make every foot look like it stepped out of vintage Hollywood. This   &lt;strong&gt;&lt;a href=&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland shoes&lt;/a&gt;&lt;/strong&gt; have been worn and coveted by many of the most famous females in   recent history. One such &lt;strong&gt;&lt;a href=&quot;http://www.allofcoach.com&quot;&gt;coach outlet&lt;/a&gt;&lt;/strong&gt;, Jennifer Aniston, wears them in public and at   home.This company makes many different unique styles of &lt;strong&gt;&lt;strong&gt;&lt;a href=&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;bags outlet&lt;/strong&gt;&lt;/a&gt; from ankle booties   to sandals, pumps, &lt;strong&gt;&lt;a href=&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets online&lt;/strong&gt;&lt;/a&gt;, platforms and wedges. One &lt;strong&gt;&lt;a href=&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton bag&lt;/strong&gt;&lt;/a&gt; in particular is ideal   for the gothic style sense; it is patent leather and laces up the front of the   shaft. There are also zippers on each side, and this shoe offers a flat heel of   a half inch.Another great &lt;a href=&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets sale&lt;/strong&gt;&lt;/a&gt; is featured in People's Style Watch and is called a   platform bootie. This &lt;strong&gt;&lt;a href=&quot;http://www.truereligionjeans-outlet.com&quot;&gt;&lt;strong&gt;ture religion jeans&lt;/strong&gt;&lt;/a&gt; has a raised panel in front of the ankle as well as   a heel that measures 4.5 inches. The front offers a leather bandage appearance   and is considered high fashion.</body>
      <body-html>&lt;div&gt;&lt;p&gt;This &lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra
footwear&lt;/a&gt;&lt;/strong&gt; is called a modern vintage and has been since
their introduction in 2003 where they began in Europe. Every
&lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra shoes&lt;/a&gt;&lt;/strong&gt;
has some type of ornament, adornment or hardware and is comprised
of aged leather that is bought from around the world. These
&lt;strong&gt;&lt;a href=&quot;http://www.uk-supra.com&quot;&gt;supra uk&lt;/a&gt;&lt;/strong&gt; are
culturally engaging and allow for the woman wearing them to be
enveloped in luxury.With new cuts and styles and hand stitched
shoes, these &lt;strong&gt;&lt;a href=
&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland boots&lt;/a&gt;&lt;/strong&gt;,
heels or flats will make every foot look like it stepped out of
vintage Hollywood. This &lt;strong&gt;&lt;a href=
&quot;http://www.menstimberlandshoes.com&quot;&gt;timberland shoes&lt;/a&gt;&lt;/strong&gt;
have been worn and coveted by many of the most famous females in
recent history. One such &lt;strong&gt;&lt;a href=
&quot;http://www.allofcoach.com&quot;&gt;coach outlet&lt;/a&gt;&lt;/strong&gt;, Jennifer
Aniston, wears them in public and at home.This company makes many
different unique styles of &lt;strong&gt;&lt;strong&gt;&lt;a href=
&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;bags
outlet&lt;/strong&gt;&lt;/a&gt; from ankle booties to sandals, pumps,
&lt;strong&gt;&lt;a href=
&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets
online&lt;/strong&gt;&lt;/a&gt;, platforms and wedges. One &lt;strong&gt;&lt;a href=
&quot;http://www.louisvuittonbagoutlet.com&quot;&gt;&lt;strong&gt;louis vuitton
bag&lt;/strong&gt;&lt;/a&gt; in particular is ideal for the gothic style sense;
it is patent leather and laces up the front of the shaft. There are
also zippers on each side, and this shoe offers a flat heel of a
half inch.Another great &lt;a href=
&quot;http://www.womenmonclerjackets.com&quot;&gt;&lt;strong&gt;moncler jackets
sale&lt;/strong&gt;&lt;/a&gt; is featured in People's Style Watch and is called
a platform bootie. This &lt;strong&gt;&lt;a href=
&quot;http://www.truereligionjeans-outlet.com&quot;&gt;&lt;strong&gt;ture religion
jeans&lt;/strong&gt;&lt;/a&gt; has a raised panel in front of the ankle as well
as a heel that measures 4.5 inches. The front offers a leather
bandage appearance and is considered high
fashion.&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2010-11-06T08:01:08+00:00</created-at>
      <creator-id type="integer">64547</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">2974</number>
      <permalink>add-find-unique-to-activerecord</permalink>
      <priority type="integer">3</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag nil="true"></tag>
      <title>Add find :unique to ActiveRecord</title>
      <updated-at type="datetime">2010-11-08T23:11:56+00:00</updated-at>
      <user-id type="integer">123546</user-id>
      <version type="integer">12</version>
      <user-name>jim123456</user-name>
      <creator-name>Joris</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/2974</url>
      <priority-name>Low</priority-name>
    </version>
  </versions>
</ticket>
