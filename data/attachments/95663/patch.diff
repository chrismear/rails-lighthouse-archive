diff --git a/actionpack/lib/action_controller/routing/builder.rb b/actionpack/lib/action_controller/routing/builder.rb
index 44d7594..d9590c8 100644
--- a/actionpack/lib/action_controller/routing/builder.rb
+++ b/actionpack/lib/action_controller/routing/builder.rb
@@ -159,7 +159,8 @@ module ActionController
         path = "/#{path}" unless path[0] == ?/
         path = "#{path}/" unless path[-1] == ?/
 
-        path = "/#{options[:path_prefix].to_s.gsub(/^\//,'')}#{path}" if options[:path_prefix]
+        prefix = options[:path_prefix].to_s.gsub(/^\//,'')
+        path = "/#{prefix}#{path}" unless prefix.blank?
 
         segments = segments_for_route_path(path)
         defaults, requirements, conditions = divide_route_options(segments, options)
diff --git a/actionpack/test/controller/routing_test.rb b/actionpack/test/controller/routing_test.rb
index 13ba0c3..10b01bd 100644
--- a/actionpack/test/controller/routing_test.rb
+++ b/actionpack/test/controller/routing_test.rb
@@ -955,6 +955,13 @@ class LegacyRouteSetTests < Test::Unit::TestCase
                  x.send(:page_url))
   end
 
+  def test_named_route_with_blank_path_prefix
+    rs.add_named_route :page, 'page', :controller => 'content', :action => 'show_page', :path_prefix => ''
+    x = setup_for_named_route
+    assert_equal("http://test.host/page",
+                 x.send(:page_url))
+  end
+
   def test_named_route_with_nested_controller
     rs.add_named_route :users, 'admin/user', :controller => 'admin/user', :action => 'index'
     x = setup_for_named_route
@@ -2138,6 +2145,26 @@ class RouteSetTest < Test::Unit::TestCase
     Object.send(:remove_const, :Api)
   end
 
+  def test_namespace_with_blank_path_prefix
+    Object.const_set(:Api, Module.new { |m| m.const_set(:ProductsController, Class.new) })
+
+    set.draw do |map|
+
+      map.namespace 'api', :path_prefix => '' do |api|
+        api.route 'inventory', :controller => "products", :action => 'inventory'
+      end
+
+    end
+
+    request.path = "/inventory"
+    request.env["REQUEST_METHOD"] = "GET"
+    assert_nothing_raised { set.recognize(request) }
+    assert_equal("api/products", request.path_parameters[:controller])
+    assert_equal("inventory", request.path_parameters[:action])
+  ensure
+    Object.send(:remove_const, :Api)
+  end
+
   def test_generate_finds_best_fit
     set.draw do |map|
       map.connect "/people", :controller => "people", :action => "index"
@@ -2201,6 +2228,13 @@ class RouteSetTest < Test::Unit::TestCase
     args = { :controller => "foo", :action => "bar", :id => "7", :x => "y" }
     assert_equal "/my/foo/bar/7?x=y", set.generate(args)
   end
+  
+  def test_generate_with_blank_path_prefix
+    set.draw { |map| map.connect ':controller/:action/:id', :path_prefix => '' }
+
+    args = { :controller => "foo", :action => "bar", :id => "7", :x => "y" }
+    assert_equal "/foo/bar/7?x=y", set.generate(args)
+  end
 
   def test_named_routes_are_never_relative_to_modules
     set.draw do |map|
