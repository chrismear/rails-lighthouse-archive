<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-10-16T16:32:28+01:00</created-at>
  <creator-id type="integer">18798</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer">9903</milestone-id>
  <number type="integer">1227</number>
  <permalink>validations-should-not-run-when-object-isnt-to-be-saved-changed</permalink>
  <priority type="integer">634</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>wontfix</state>
  <tag>activerecord dirty enhancement performance</tag>
  <title>Validations should not run when object isn't to be saved</title>
  <updated-at type="datetime">2009-01-18T06:14:34+00:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">2</version>
  <user-name>Pratik</user-name>
  <creator-name>Nathaniel Bibler</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/1227</url>
  <milestone-title>2.x</milestone-title>
  <priority-name nil="true"></priority-name>
  <original-body>This mainly has to do with the &quot;new&quot; dirty objects functionality in Rails (changeset 9127, March 29, 2008).  Given the following test case:

    class Foo &lt; ActiveRecord::Base
      validates_uniqueness_of :name
    end

Validation runs every time `save` is called, regardless of whether or not the object is actually dirty and to-be-saved:

    &gt;&gt; foo = Foo.create!(:name =&gt; &quot;Bar&quot;)
    SQL&gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar') LIMIT 1
    SQL&gt; Foo Create (0.5ms)   INSERT INTO &quot;foos&quot; (&quot;name&quot;, &quot;updated_at&quot;, &quot;created_at&quot;) VALUES('Bar', '2008-10-16 15:27:47', '2008-10-16 15:27:47')
    =&gt; #&lt;Foo id: 2, name: &quot;Bar&quot;, created_at: &quot;2008-10-16 15:26:47&quot;, updated_at: &quot;2008-10-16 15:26:47&quot;&gt;
    
    &gt;&gt; foo.changed?
    =&gt; false
    
    &gt;&gt; foo.save
    SQL&gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar' AND &quot;foos&quot;.id &lt;&gt; 3) LIMIT 1
    =&gt; true
    

This is less a bug than an area for potential performance improvement in the current code base.  This behavior can be seen in the most recent Git commit (517bc500ed95a84fd2aadff34fdc14cb7965bc6b).</original-body>
  <latest-body>This mainly has to do with the &quot;new&quot; dirty objects functionality in Rails (changeset 9127, March 29, 2008).  Given the following test case:

    class Foo &lt; ActiveRecord::Base
      validates_uniqueness_of :name
    end

Validation runs every time `save` is called, regardless of whether or not the object is actually dirty and to-be-saved:

    &gt;&gt; foo = Foo.create!(:name =&gt; &quot;Bar&quot;)
    SQL&gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar') LIMIT 1
    SQL&gt; Foo Create (0.5ms)   INSERT INTO &quot;foos&quot; (&quot;name&quot;, &quot;updated_at&quot;, &quot;created_at&quot;) VALUES('Bar', '2008-10-16 15:27:47', '2008-10-16 15:27:47')
    =&gt; #&lt;Foo id: 2, name: &quot;Bar&quot;, created_at: &quot;2008-10-16 15:26:47&quot;, updated_at: &quot;2008-10-16 15:26:47&quot;&gt;
    
    &gt;&gt; foo.changed?
    =&gt; false
    
    &gt;&gt; foo.save
    SQL&gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar' AND &quot;foos&quot;.id &lt;&gt; 3) LIMIT 1
    =&gt; true
    

This is less a bug than an area for potential performance improvement in the current code base.  This behavior can be seen in the most recent Git commit (517bc500ed95a84fd2aadff34fdc14cb7965bc6b).</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;This mainly has to do with the &quot;new&quot; dirty objects functionality
in Rails (changeset 9127, March 29, 2008). Given the following test
case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Foo &amp;lt; ActiveRecord::Base
  validates_uniqueness_of :name
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Validation runs every time &lt;code&gt;save&lt;/code&gt; is called,
regardless of whether or not the object is actually dirty and
to-be-saved:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; foo = Foo.create!(:name =&amp;gt; &quot;Bar&quot;)
SQL&amp;gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar') LIMIT 1
SQL&amp;gt; Foo Create (0.5ms)   INSERT INTO &quot;foos&quot; (&quot;name&quot;, &quot;updated_at&quot;, &quot;created_at&quot;) VALUES('Bar', '2008-10-16 15:27:47', '2008-10-16 15:27:47')
=&amp;gt; #

&amp;gt;&amp;gt; foo.changed?
=&amp;gt; false

&amp;gt;&amp;gt; foo.save
SQL&amp;gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar' AND &quot;foos&quot;.id &amp;lt;&amp;gt; 3) LIMIT 1
=&amp;gt; true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;This is less a bug than an area for potential performance
improvement in the current code base. This behavior can be seen in
the most recent Git commit
(517bc500ed95a84fd2aadff34fdc14cb7965bc6b).&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>This mainly has to do with the &quot;new&quot; dirty objects functionality in Rails (changeset 9127, March 29, 2008).  Given the following test case:

    class Foo &lt; ActiveRecord::Base
      validates_uniqueness_of :name
    end

Validation runs every time `save` is called, regardless of whether or not the object is actually dirty and to-be-saved:

    &gt;&gt; foo = Foo.create!(:name =&gt; &quot;Bar&quot;)
    SQL&gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar') LIMIT 1
    SQL&gt; Foo Create (0.5ms)   INSERT INTO &quot;foos&quot; (&quot;name&quot;, &quot;updated_at&quot;, &quot;created_at&quot;) VALUES('Bar', '2008-10-16 15:27:47', '2008-10-16 15:27:47')
    =&gt; #&lt;Foo id: 2, name: &quot;Bar&quot;, created_at: &quot;2008-10-16 15:26:47&quot;, updated_at: &quot;2008-10-16 15:26:47&quot;&gt;
    
    &gt;&gt; foo.changed?
    =&gt; false
    
    &gt;&gt; foo.save
    SQL&gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar' AND &quot;foos&quot;.id &lt;&gt; 3) LIMIT 1
    =&gt; true

You can see, above, that the object validations were run even though the object was not modified, save was not forced, and nothing was actually written to the database in the end.

This is less a bug than an area for potential performance improvement in the current code base.  This behavior can be seen since inception of the dirty object functionality up to and through the most recent Git commit (517bc500ed95a84fd2aadff34fdc14cb7965bc6b).</body>
      <body-html>&lt;div&gt;&lt;p&gt;This mainly has to do with the &quot;new&quot; dirty objects functionality
in Rails (changeset 9127, March 29, 2008). Given the following test
case:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;class Foo &amp;lt; ActiveRecord::Base
  validates_uniqueness_of :name
end
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Validation runs every time &lt;code&gt;save&lt;/code&gt; is called,
regardless of whether or not the object is actually dirty and
to-be-saved:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;&amp;gt;&amp;gt; foo = Foo.create!(:name =&amp;gt; &quot;Bar&quot;)
SQL&amp;gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar') LIMIT 1
SQL&amp;gt; Foo Create (0.5ms)   INSERT INTO &quot;foos&quot; (&quot;name&quot;, &quot;updated_at&quot;, &quot;created_at&quot;) VALUES('Bar', '2008-10-16 15:27:47', '2008-10-16 15:27:47')
=&amp;gt; #&amp;lt;Foo id: 2, name: &quot;Bar&quot;, created_at: &quot;2008-10-16 15:26:47&quot;, updated_at: &quot;2008-10-16 15:26:47&quot;&amp;gt;

&amp;gt;&amp;gt; foo.changed?
=&amp;gt; false

&amp;gt;&amp;gt; foo.save
SQL&amp;gt; Foo Exists (0.3ms)   SELECT &quot;foos&quot;.id FROM &quot;foos&quot; WHERE (&quot;foos&quot;.&quot;name&quot; = 'Bar' AND &quot;foos&quot;.id &amp;lt;&amp;gt; 3) LIMIT 1
=&amp;gt; true
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;You can see, above, that the object validations were run even
though the object was not modified, save was not forced, and
nothing was actually written to the database in the end.&lt;/p&gt;
&lt;p&gt;This is less a bug than an area for potential performance
improvement in the current code base. This behavior can be seen
since inception of the dirty object functionality up to and through
the most recent Git commit
(517bc500ed95a84fd2aadff34fdc14cb7965bc6b).&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-10-16T16:32:28+01:00</created-at>
      <creator-id type="integer">18798</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1227</number>
      <permalink>validations-should-not-run-when-object-isnt-to-be-saved-changed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag>activerecord dirty enhancement performance</tag>
      <title>Validations should not run when object isn't to be saved</title>
      <updated-at type="datetime">2008-10-16T16:38:58+01:00</updated-at>
      <user-id type="integer">18798</user-id>
      <version type="integer">1</version>
      <user-name>Nathaniel Bibler</user-name>
      <creator-name>Nathaniel Bibler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>http://rails.lighthouseapp.com/projects/8994/tickets/1285-patch-reduce-queries-in-uniqueness-validation</body>
      <body-html>&lt;div&gt;&lt;p&gt;&lt;a href=&quot;http://rails.lighthouseapp.com/projects/8994/tickets/1285-patch-reduce-queries-in-uniqueness-validation&quot;&gt;
http://rails.lighthouseapp.com/p...&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2009-01-18T06:14:33+00:00</created-at>
      <creator-id type="integer">18798</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer">9903</milestone-id>
      <number type="integer">1227</number>
      <permalink>validations-should-not-run-when-object-isnt-to-be-saved-changed</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>wontfix</state>
      <tag>activerecord dirty enhancement performance</tag>
      <title>Validations should not run when object isn't to be saved</title>
      <updated-at type="datetime">2009-01-18T06:14:34+00:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">2</version>
      <user-name>Pratik</user-name>
      <creator-name>Nathaniel Bibler</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/1227</url>
      <milestone-title>2.x</milestone-title>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
