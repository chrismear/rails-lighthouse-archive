<?xml version="1.0" encoding="UTF-8"?>
<ticket>
  <assigned-user-id type="integer" nil="true"></assigned-user-id>
  <attachments-count type="integer">0</attachments-count>
  <closed type="boolean">true</closed>
  <created-at type="datetime">2008-05-09T19:33:03+01:00</created-at>
  <creator-id type="integer">19858</creator-id>
  <milestone-due-on type="datetime" nil="true"></milestone-due-on>
  <milestone-id type="integer" nil="true"></milestone-id>
  <number type="integer">158</number>
  <permalink>rails-application-recipe</permalink>
  <priority type="integer">11951</priority>
  <project-id type="integer">8994</project-id>
  <raw-data type="binary" nil="true" encoding="base64"></raw-data>
  <state>invalid</state>
  <tag>enhancement railties</tag>
  <title>[FEATURE] Rails application recipe</title>
  <updated-at type="datetime">2008-05-12T00:46:32+01:00</updated-at>
  <user-id type="integer">1366</user-id>
  <version type="integer">3</version>
  <user-name>Pratik</user-name>
  <creator-name>Edwin Vlieg</creator-name>
  <url>http://rails.lighthouseapp.com/projects/8994/tickets/158</url>
  <priority-name nil="true"></priority-name>
  <original-body>I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?

The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.

A recipe in the simplest form should contain a number of commands to execute, e.g.:

@@@
script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure
@@@

In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:

@@@
plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure
@@@

This recipe file should be passed as a variable to the rails script:

@@@
rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
rails weblog --recipe=http://www.example.com/my_rails_recipe.yaml
@@@

The possibility to download a recipe from the internet with the command might be a bit overkill, but can be nice if someone wants to share his recipes or to share recipes within a company.

I'm willing to add the functionality to the Rails core with a patch/git fork, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.</original-body>
  <latest-body>I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?

The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.

A recipe in the simplest form should contain a number of commands to execute, e.g.:

@@@
script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure
@@@

In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:

@@@
plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure
@@@

This recipe file should be passed as a variable to the rails script:

@@@
rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
rails weblog --recipe=http://www.example.com/my_rails_recipe.yaml
@@@

The possibility to download a recipe from the internet with the command might be a bit overkill, but can be nice if someone wants to share his recipes or to share recipes within a company.

I'm willing to add the functionality to the Rails core with a patch/git fork, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.</latest-body>
  <original-body-html>&lt;div&gt;&lt;p&gt;
I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?
&lt;/p&gt;&lt;p&gt;
The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.
&lt;/p&gt;&lt;p&gt;
A recipe in the simplest form should contain a number of commands to execute, e.g.:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This recipe file should be passed as a variable to the rails script:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
rails weblog --recipe=http://www.example.com/my_rails_recipe.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The possibility to download a recipe from the internet with the command might be a bit overkill, but can be nice if someone wants to share his recipes or to share recipes within a company.
&lt;/p&gt;&lt;p&gt;
I'm willing to add the functionality to the Rails core with a patch/git fork, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.
&lt;/p&gt;&lt;/div&gt;</original-body-html>
  <versions type="array">
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?

The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.

A recipe in the simplest form should contain a number of commands to execute, e.g.:

@@@
script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure
@@@

In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:

@@@
plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure
@@@

This recipe file should be passed as a variable to the rails script:

@@@
rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
rails weblog --recipe=http://www.example.com/my_rails_recipe.yaml
@@@

The possibility to download a recipe from the internet with the command might be a bit overkill, but can be nice if someone wants to share his recipes or to share recipes within a company.

I'm willing to add the functionality to the Rails core with a patch/git fork, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I'm wondering if you considered some kind of recipe for Rails applications. Every time we start a new Rails project in our company, we are taking the same steps: installing certain plugins, adding some custom rake tasks and executing svn actions to create a proper svn workspace. Wouldn't it be nice to apply some kind of application recipe when generating a new application with the 'rails' command?
&lt;/p&gt;&lt;p&gt;
The guys from Caboose created the Sample Rails application, which can be retrieved from SVN. I don't think storing a sample application in SVN is such a good idea, because of the versioning of the Rails code and plugins. When creating a new project, I often want the lastest Rails version and the most recent plugins and not be forced to update the sample repository first.
&lt;/p&gt;&lt;p&gt;
A recipe in the simplest form should contain a number of commands to execute, e.g.:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;script/plugin install rspec
script/plugin install rspec_rails
rake svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In this way, the problem can easily be solved with a bash script. But I think a more high-level (YAML?) solution could also be nice:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;plugins:
    rspec
    rspec_Rails
tasks:
    svn:configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This recipe file should be passed as a variable to the rails script:
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;&quot;&gt;rails weblog --recipe=/home/edwin/rails_with_rspec.yaml
rails weblog --recipe=http://www.example.com/my_rails_recipe.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The possibility to download a recipe from the internet with the command might be a bit overkill, but can be nice if someone wants to share his recipes or to share recipes within a company.
&lt;/p&gt;&lt;p&gt;
I'm willing to add the functionality to the Rails core with a patch/git fork, but would like to know if it is a feature that fits in the Rails vision and if more people think this is usable.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-09T22:00:53+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">158</number>
      <permalink>rails-application-recipe</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[FEATURE] Rails application recipe</title>
      <updated-at type="datetime">2008-05-09T22:00:53+01:00</updated-at>
      <user-id type="integer">19858</user-id>
      <version type="integer">1</version>
      <user-name>Edwin Vlieg</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/158</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>Sorry for posting a duplicate ticket, this ticket disappeared shortly after adding, so I gave it another try. I think the other ticket is beter tagged, maybe someone can delete this one.

Ticket #160 is the right version.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
Sorry for posting a duplicate ticket, this ticket disappeared shortly after adding, so I gave it another try. I think the other ticket is beter tagged, maybe someone can delete this one.
&lt;/p&gt;&lt;p&gt;
Ticket &lt;a href=&quot;/projects/8994/tickets/160&quot; title=&quot;Ticket #160&quot;&gt;#160&lt;/a&gt; is the right version.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">false</closed>
      <created-at type="datetime">2008-05-10T17:20:06+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- {}

</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">158</number>
      <permalink>rails-application-recipe</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>new</state>
      <tag nil="true"></tag>
      <title>[FEATURE] Rails application recipe</title>
      <updated-at type="datetime">2008-05-10T17:20:06+01:00</updated-at>
      <user-id type="integer">19858</user-id>
      <version type="integer">2</version>
      <user-name>Edwin Vlieg</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/158</url>
      <priority-name nil="true"></priority-name>
    </version>
    <version type="Ticket::Version">
      <assigned-user-id type="integer" nil="true"></assigned-user-id>
      <attachments-count type="integer">0</attachments-count>
      <body>I think you should release a gem to do so, which would basically install a new rails binary, maybe call it &quot;railsgen&quot; or something. Getting it in core might be difficult before it's in wide use.

Thanks.</body>
      <body-html>&lt;div&gt;&lt;p&gt;
I think you should release a gem to do so, which would basically install a new rails binary, maybe call it &quot;railsgen&quot; or something. Getting it in core might be difficult before it's in wide use.
&lt;/p&gt;&lt;p&gt;
Thanks.
&lt;/p&gt;&lt;/div&gt;</body-html>
      <closed type="boolean">true</closed>
      <created-at type="datetime">2008-05-12T00:46:32+01:00</created-at>
      <creator-id type="integer">19858</creator-id>
      <diffable-attributes type="yaml">--- 
:state: new
</diffable-attributes>
      <milestone-id type="integer" nil="true"></milestone-id>
      <number type="integer">158</number>
      <permalink>rails-application-recipe</permalink>
      <priority type="integer">0</priority>
      <project-id type="integer">8994</project-id>
      <state>invalid</state>
      <tag nil="true"></tag>
      <title>[FEATURE] Rails application recipe</title>
      <updated-at type="datetime">2008-05-12T00:46:32+01:00</updated-at>
      <user-id type="integer">1366</user-id>
      <version type="integer">3</version>
      <user-name>Pratik</user-name>
      <creator-name>Edwin Vlieg</creator-name>
      <url>http://rails.lighthouseapp.com/projects/8994/tickets/158</url>
      <priority-name nil="true"></priority-name>
    </version>
  </versions>
</ticket>
